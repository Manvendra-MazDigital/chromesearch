1
00:00:00,000 --> 00:00:07,290

2
00:00:07,290 --> 00:00:08,860
ETIAN KONIGSBURG:
So hi, everybody.

3
00:00:08,860 --> 00:00:10,270
My name's Etian Konigsburg.

4
00:00:10,270 --> 00:00:12,060
I'm a frontend
software architect here

5
00:00:12,060 --> 00:00:13,560
at the "New York Times".

6
00:00:13,560 --> 00:00:15,890
Today I'm going to
be talking about

7
00:00:15,890 --> 00:00:19,580
the very real history of our
web performance efforts here

8
00:00:19,580 --> 00:00:21,027
at the "New York Times".

9
00:00:21,027 --> 00:00:22,860
Before I dive in, I
wanted to share with you

10
00:00:22,860 --> 00:00:24,550
this tweet by Steve
Souders himself.

11
00:00:24,550 --> 00:00:26,300
If you're not familiar
Steve Souders,

12
00:00:26,300 --> 00:00:27,758
it's the place to
start when you're

13
00:00:27,758 --> 00:00:29,150
talking about web performance.

14
00:00:29,150 --> 00:00:31,240
He tweeted, "Is
performance of 'the Web'

15
00:00:31,240 --> 00:00:32,860
getting better or worse?

16
00:00:32,860 --> 00:00:34,710
My past week was
painfully slow, marred

17
00:00:34,710 --> 00:00:36,600
by top sites w/bad WebPerf.

18
00:00:36,600 --> 00:00:38,330
Is it too hard?"

19
00:00:38,330 --> 00:00:40,850
I don't know if the "New York
Times" was among the sites

20
00:00:40,850 --> 00:00:42,530
that Steve was
having trouble with.

21
00:00:42,530 --> 00:00:44,350
We've known that we've had a
little bit of a performance

22
00:00:44,350 --> 00:00:45,100
problem.

23
00:00:45,100 --> 00:00:47,240
I like to think that
he's checking our site

24
00:00:47,240 --> 00:00:50,250
and he's actually complaining
for real that our site is slow

25
00:00:50,250 --> 00:00:51,890
so that we make it faster him.

26
00:00:51,890 --> 00:00:53,640
But I'm going to get
back to this question

27
00:00:53,640 --> 00:00:56,000
about whether it's too hard.

28
00:00:56,000 --> 00:00:58,434
So while I was
preparing for this talk,

29
00:00:58,434 --> 00:01:00,350
I was thinking that this
is a very real story.

30
00:01:00,350 --> 00:01:03,325
And it reminded me of a
GEICO ad from about 2006

31
00:01:03,325 --> 00:01:05,200
that I just kind of
wanted to share with you.

32
00:01:05,200 --> 00:01:08,708
So just give me one sec to play.

33
00:01:08,708 --> 00:01:10,140
[VIDEO PLAYBLACK]

34
00:01:10,140 --> 00:01:13,010
-Paula Sala is a real GEICO
customer, not an actor.

35
00:01:13,010 --> 00:01:15,390
So to help tell her story,
we hired that announcer guy

36
00:01:15,390 --> 00:01:16,910
from the movies.

37
00:01:16,910 --> 00:01:20,480
-When the storm hit, both our
cars were totally under water.

38
00:01:20,480 --> 00:01:24,500
-In a world where both of our
cars were totally under water.

39
00:01:24,500 --> 00:01:27,010
-We thought it would take
forever to get some help.

40
00:01:27,010 --> 00:01:30,026
-But a new wind
was about to blow.

41
00:01:30,026 --> 00:01:33,140
-With GEICO, we had
our check in two days.

42
00:01:33,140 --> 00:01:33,920
-Payback.

43
00:01:33,920 --> 00:01:36,560
This time, it's for real.

44
00:01:36,560 --> 00:01:37,270
-GEICO.

45
00:01:37,270 --> 00:01:38,160
Real service.

46
00:01:38,160 --> 00:01:38,742
Real savings.

47
00:01:38,742 --> 00:01:41,200
ETIAN KONIGSBURG: So I thought
about doing this entire talk

48
00:01:41,200 --> 00:01:43,230
in movie announcer voice.

49
00:01:43,230 --> 00:01:46,000
I didn't think I'd be able to
keep it up all the way through.

50
00:01:46,000 --> 00:01:47,550
Colt is actually
the expert at that.

51
00:01:47,550 --> 00:01:50,520
So you should check out
his talk on National Talk

52
00:01:50,520 --> 00:01:51,760
Like A Pirate Day.

53
00:01:51,760 --> 00:01:53,240
That was actually really great.

54
00:01:53,240 --> 00:01:54,830
Kudos.

55
00:01:54,830 --> 00:01:59,460
So in a world of static pages.

56
00:01:59,460 --> 00:02:01,560
Pages on our website
are published basically

57
00:02:01,560 --> 00:02:03,050
like you would a newspaper.

58
00:02:03,050 --> 00:02:06,690
Somebody hits a button, the
content goes through templates

59
00:02:06,690 --> 00:02:08,310
and is written to disk.

60
00:02:08,310 --> 00:02:10,990
And we mix it with a
proprietary language

61
00:02:10,990 --> 00:02:14,200
that we compile to give a
little bit of dynamicism

62
00:02:14,200 --> 00:02:15,450
on the server side.

63
00:02:15,450 --> 00:02:17,600
And it was fast.

64
00:02:17,600 --> 00:02:21,110
We have about 1 million of
these static pages since 2004.

65
00:02:21,110 --> 00:02:23,970
And re-publishing them is
really not an option for us.

66
00:02:23,970 --> 00:02:25,830
If hypothetically it
took about five seconds

67
00:02:25,830 --> 00:02:27,830
to re-publish one
of these pages,

68
00:02:27,830 --> 00:02:31,250
5 million seconds I think
comes out to about two months.

69
00:02:31,250 --> 00:02:33,540
We can't be doing that
every time we make a change.

70
00:02:33,540 --> 00:02:36,560
So what ends up happening is
it's extremely hard for us

71
00:02:36,560 --> 00:02:39,080
to change markup once
it's been published.

72
00:02:39,080 --> 00:02:41,170
And every time we
make a change, it's

73
00:02:41,170 --> 00:02:43,730
only present from the
day we deployed onward,

74
00:02:43,730 --> 00:02:46,890
which means we have an
unknown number of permutations

75
00:02:46,890 --> 00:02:50,040
of these markups to handle
and support over time.

76
00:02:50,040 --> 00:02:52,530
So our frontend assets,
our JavaScript and CSS,

77
00:02:52,530 --> 00:02:55,140
have to handle all of
these permutations.

78
00:02:55,140 --> 00:02:57,800
And in order to be able
to change these files,

79
00:02:57,800 --> 00:03:00,550
since we can't change the
asset path because the HTML is

80
00:03:00,550 --> 00:03:03,440
static, we have to
keep the time to live,

81
00:03:03,440 --> 00:03:07,010
the cache expiration timeout,
very low on these files, which

82
00:03:07,010 --> 00:03:09,790
is a performance bad practice.

83
00:03:09,790 --> 00:03:12,160
And we also don't really
know what pages on the site

84
00:03:12,160 --> 00:03:15,290
call which assets in general.

85
00:03:15,290 --> 00:03:17,570
So I want to talk
about our CSS history.

86
00:03:17,570 --> 00:03:19,530
We didn't really
have a CSS framework,

87
00:03:19,530 --> 00:03:22,960
which means we have a
lot of repetitive styles.

88
00:03:22,960 --> 00:03:26,310
Files were imported
basically as needed.

89
00:03:26,310 --> 00:03:28,155
Style sheets approached.

90
00:03:28,155 --> 00:03:32,220
The import limits in IE, 31
total and maybe up to three

91
00:03:32,220 --> 00:03:34,060
nested levels deep.

92
00:03:34,060 --> 00:03:35,597
There was inconsistent
load style.

93
00:03:35,597 --> 00:03:37,930
We were using link tags in
one case, and right after it,

94
00:03:37,930 --> 00:03:41,460
using a style tag with
an @import directive.

95
00:03:41,460 --> 00:03:45,260
And basically, we also have
to deal with web producers who

96
00:03:45,260 --> 00:03:47,904
who go through, and they're
able to modify the look

97
00:03:47,904 --> 00:03:50,070
and feel of our page on the
fly as the news happens.

98
00:03:50,070 --> 00:03:52,130
So they can be dropped
into our content system

99
00:03:52,130 --> 00:03:54,590
and appear anywhere on the page.

100
00:03:54,590 --> 00:03:57,460
In the JavaScript department,
JavaScript was very ad hoc.

101
00:03:57,460 --> 00:04:00,230
Since most of the dynamicism
was on the server side,

102
00:04:00,230 --> 00:04:02,190
we basically used
JS basically as

103
00:04:02,190 --> 00:04:05,060
needed to fix
cross-browser issues,

104
00:04:05,060 --> 00:04:06,940
to do widgets that
respond to events

105
00:04:06,940 --> 00:04:08,950
by the user in the browser.

106
00:04:08,950 --> 00:04:11,567
Most of the variables
and functions are global.

107
00:04:11,567 --> 00:04:13,650
Script tags are dropped
wherever they were needed.

108
00:04:13,650 --> 00:04:15,530
You would define a new
div, leave it empty,

109
00:04:15,530 --> 00:04:17,280
and you'd put a script
tag right after it.

110
00:04:17,280 --> 00:04:20,470
We didn't defer execution,
another performance no no.

111
00:04:20,470 --> 00:04:22,640
We didn't have a DOM
framework to handle

112
00:04:22,640 --> 00:04:26,230
any cross-browser functionality.

113
00:04:26,230 --> 00:04:30,210
That framework war happened and
we still hadn't picked one yet.

114
00:04:30,210 --> 00:04:32,390
Some words on images.

115
00:04:32,390 --> 00:04:35,090
Basically, the UI images
that are part of a product

116
00:04:35,090 --> 00:04:37,860
would get uploaded
individually to production.

117
00:04:37,860 --> 00:04:40,180
You could easily forget
how to do that when

118
00:04:40,180 --> 00:04:42,090
you were deploying,
so they would

119
00:04:42,090 --> 00:04:43,750
go missing for a little while.

120
00:04:43,750 --> 00:04:46,260
Our content photography
is extremely hard for us

121
00:04:46,260 --> 00:04:47,230
to optimize.

122
00:04:47,230 --> 00:04:49,010
We have a lot of pride
in our photography.

123
00:04:49,010 --> 00:04:51,093
There's a lot of resistance
in making them smaller

124
00:04:51,093 --> 00:04:54,310
and not featuring them
as largely on our pages.

125
00:04:54,310 --> 00:04:57,240
We did some experiments
with lossless compression.

126
00:04:57,240 --> 00:04:59,380
We actually, for
color novices, we

127
00:04:59,380 --> 00:05:03,142
noticed some colors changing
in whatever these tools were.

128
00:05:03,142 --> 00:05:05,600
There's a whole department here
that does color correction,

129
00:05:05,600 --> 00:05:08,110
and the red walls don't
appear in their area

130
00:05:08,110 --> 00:05:11,945
so that they don't have a
little bit of red dilution

131
00:05:11,945 --> 00:05:15,630
on their screens to do
this color correction.

132
00:05:15,630 --> 00:05:18,980
It's basically a manual
process to resize these images.

133
00:05:18,980 --> 00:05:20,120
We have a lot of them.

134
00:05:20,120 --> 00:05:22,537
And in order for them to be
fast and have them be smaller,

135
00:05:22,537 --> 00:05:25,161
people have to cut them and make
sure they don't crop something

136
00:05:25,161 --> 00:05:26,150
out of the picture.

137
00:05:26,150 --> 00:05:28,910
Because it's manual, it
doesn't happen a lot.

138
00:05:28,910 --> 00:05:30,940
Other concerns for the business.

139
00:05:30,940 --> 00:05:32,702
We have these
editorial constraints.

140
00:05:32,702 --> 00:05:34,160
Like I mentioned
earlier, producers

141
00:05:34,160 --> 00:05:38,140
have a need to adjust based on
what's happening in the news.

142
00:05:38,140 --> 00:05:40,160
So we use this
freeform module where

143
00:05:40,160 --> 00:05:42,560
they can drop any
bit of HTML code.

144
00:05:42,560 --> 00:05:46,000
It doesn't even have
to be balanced tags,

145
00:05:46,000 --> 00:05:48,260
so this can easily
mess up our page.

146
00:05:48,260 --> 00:05:49,840
But they have the
freedom to do that.

147
00:05:49,840 --> 00:05:52,450
And we have to be able to handle
styles and scripts occurring

148
00:05:52,450 --> 00:05:53,170
in them.

149
00:05:53,170 --> 00:05:55,020
And ads, of course.

150
00:05:55,020 --> 00:05:57,070
They're top-level
objects in our DOM.

151
00:05:57,070 --> 00:05:59,309
They're not treated
in any special way.

152
00:05:59,309 --> 00:06:01,350
They bring their own copies
of DOM frameworks in.

153
00:06:01,350 --> 00:06:02,850
We get older versions of jQuery.

154
00:06:02,850 --> 00:06:07,241
We saw an ad that tried
to encapsulate prototype

155
00:06:07,241 --> 00:06:09,490
which, if you're familiar
with how prototype.js works,

156
00:06:09,490 --> 00:06:12,030
it modifies built-in
objects in the browser.

157
00:06:12,030 --> 00:06:15,750
You can't actually
contain it in a box,

158
00:06:15,750 --> 00:06:17,520
so it didn't really work.

159
00:06:17,520 --> 00:06:19,520
Ads animate as
soon as they load.

160
00:06:19,520 --> 00:06:22,510
We get a lot of painting
issues when animations

161
00:06:22,510 --> 00:06:24,330
happen while the
page is loading.

162
00:06:24,330 --> 00:06:28,340
And basically, they are
higher in the DOM order

163
00:06:28,340 --> 00:06:31,322
as the page is loading than
our own logo on the homepage.

164
00:06:31,322 --> 00:06:32,780
You'll see two ads,
and then you'll

165
00:06:32,780 --> 00:06:35,010
see our logo if you
look at the source.

166
00:06:35,010 --> 00:06:36,790
So just to caveat
all of this history,

167
00:06:36,790 --> 00:06:38,970
it wasn't really
entirely all bad.

168
00:06:38,970 --> 00:06:40,710
We do use a CDN.

169
00:06:40,710 --> 00:06:42,990
We've had Akamai for
a number of years.

170
00:06:42,990 --> 00:06:44,040
It's been great.

171
00:06:44,040 --> 00:06:49,195
We did turn GSIP on in 2007.

172
00:06:49,195 --> 00:06:51,260
The bandwidth savings
were actually immediate,

173
00:06:51,260 --> 00:06:52,700
and there were a lot
of really happy people

174
00:06:52,700 --> 00:06:53,658
as soon as we did that.

175
00:06:53,658 --> 00:06:56,210
But it wasn't on
previously, and it's worth

176
00:06:56,210 --> 00:06:58,160
mentioning that
we did turn it on.

177
00:06:58,160 --> 00:07:01,040
So a new wind for
our efforts, and what

178
00:07:01,040 --> 00:07:04,160
we were trying to do starting
in 2009 to make the site faster.

179
00:07:04,160 --> 00:07:05,720
2009 was the year
we were focusing

180
00:07:05,720 --> 00:07:07,460
on tools and libraries.

181
00:07:07,460 --> 00:07:11,110
We basically built a new build
system for frontend files.

182
00:07:11,110 --> 00:07:14,060
And this was our first foray
into doing automatic builds.

183
00:07:14,060 --> 00:07:18,060
We used to manually
untar uncompressed files

184
00:07:18,060 --> 00:07:19,270
in production.

185
00:07:19,270 --> 00:07:22,220
And we were actually pulling
changes from version control as

186
00:07:22,220 --> 00:07:24,310
opposed to somebody's
home directory.

187
00:07:24,310 --> 00:07:27,030
They would arrange the files the
way they wanted them to appear,

188
00:07:27,030 --> 00:07:30,560
we would package them up, and
someone would unpackage it.

189
00:07:30,560 --> 00:07:33,052
Now it's coming from
version control directly.

190
00:07:33,052 --> 00:07:34,510
There were
semi-stateful rollbacks.

191
00:07:34,510 --> 00:07:36,676
There was a rollback
mechanism, but you could really

192
00:07:36,676 --> 00:07:39,340
only roll back the latest one.

193
00:07:39,340 --> 00:07:41,140
If you tried to roll
back any before that,

194
00:07:41,140 --> 00:07:44,496
you would end up in an unknown
state, and that was really bad.

195
00:07:44,496 --> 00:07:45,870
But the really
exciting bit of it

196
00:07:45,870 --> 00:07:49,270
was that there were
hooks for build scripts.

197
00:07:49,270 --> 00:07:53,140
And we can expand on this
process basically dynamically.

198
00:07:53,140 --> 00:07:55,700
So we did just that for our CSS.

199
00:07:55,700 --> 00:07:57,760
It was the first system
to use those new hooks.

200
00:07:57,760 --> 00:08:00,100
And we wrote a bunch
proprietary scripts

201
00:08:00,100 --> 00:08:02,830
to not only unravel the ad
import directives to make

202
00:08:02,830 --> 00:08:05,649
one concatenated file,
we wrote a script

203
00:08:05,649 --> 00:08:07,690
to also try and to remove
some of the white space

204
00:08:07,690 --> 00:08:09,314
and the comments.

205
00:08:09,314 --> 00:08:11,480
This was all downstream
from development work, which

206
00:08:11,480 --> 00:08:12,990
is also a really good point.

207
00:08:12,990 --> 00:08:15,200
We didn't want our
developers to feel

208
00:08:15,200 --> 00:08:18,615
that they couldn't comment
their work adequately.

209
00:08:18,615 --> 00:08:19,990
While we were
doing this, we were

210
00:08:19,990 --> 00:08:21,440
working on our CSS framework.

211
00:08:21,440 --> 00:08:24,310
We took the concepts
from our design,

212
00:08:24,310 --> 00:08:25,990
and we turned them
into these base files

213
00:08:25,990 --> 00:08:27,710
that can be used
across the site.

214
00:08:27,710 --> 00:08:29,290
We split code into
reusable modules

215
00:08:29,290 --> 00:08:31,850
and actually tried to
reuse them in a sane way.

216
00:08:31,850 --> 00:08:35,500
We aim to have a single entry
point at the top of the page.

217
00:08:35,500 --> 00:08:37,000
While we're doing
this, we were also

218
00:08:37,000 --> 00:08:39,020
trying to lock down
our JS development.

219
00:08:39,020 --> 00:08:41,309
We introduced a
top-level namespace

220
00:08:41,309 --> 00:08:43,530
called NYTD, and
the module pattern,

221
00:08:43,530 --> 00:08:46,890
also called the immediately
invoked function expression.

222
00:08:46,890 --> 00:08:50,510
This is a great way to wrap all
your variables in a closure,

223
00:08:50,510 --> 00:08:55,320
although thanks to Colt,
I'm now afraid of closures.

224
00:08:55,320 --> 00:08:58,030
We introduced prototype.js
as a DOM library.

225
00:08:58,030 --> 00:09:00,094
This one bullet
point doesn't really

226
00:09:00,094 --> 00:09:02,010
reflect the amount of
meetings and discussions

227
00:09:02,010 --> 00:09:04,660
and debates and fights we
had over this decision.

228
00:09:04,660 --> 00:09:07,440
But prototype.js
won out in the end.

229
00:09:07,440 --> 00:09:09,860
We also tried to write our
own proprietary asynchronous

230
00:09:09,860 --> 00:09:11,965
JavaScript loader in the
days before RequireJS.

231
00:09:11,965 --> 00:09:14,362

232
00:09:14,362 --> 00:09:16,320
LABjs, any of these
loaders, they didn't exist.

233
00:09:16,320 --> 00:09:17,210
We tried to write our own.

234
00:09:17,210 --> 00:09:18,180
It didn't really work.

235
00:09:18,180 --> 00:09:22,230
It became a synchronous
JavaScript loader.

236
00:09:22,230 --> 00:09:24,250
So we started with our
homepage, and there's

237
00:09:24,250 --> 00:09:25,540
a number of reasons why.

238
00:09:25,540 --> 00:09:27,555
It's published very
frequently, so this problem

239
00:09:27,555 --> 00:09:30,109
with legacy markup really
doesn't become an issue.

240
00:09:30,109 --> 00:09:32,150
It gets the most traffic,
so it has the potential

241
00:09:32,150 --> 00:09:34,670
to save people the
most amount of time.

242
00:09:34,670 --> 00:09:37,000
It has an isolated
implementation.

243
00:09:37,000 --> 00:09:39,100
Basically, if
something went wrong,

244
00:09:39,100 --> 00:09:41,284
nothing would go wrong on
other parts of the site.

245
00:09:41,284 --> 00:09:42,950
And it's viewed very
heavily internally.

246
00:09:42,950 --> 00:09:44,366
If something were
really bad, it'd

247
00:09:44,366 --> 00:09:47,940
get noticed before it
got out into production.

248
00:09:47,940 --> 00:09:50,720
So November, 2009, we
put our CSS optimizations

249
00:09:50,720 --> 00:09:51,880
on the homepage.

250
00:09:51,880 --> 00:09:56,330
It saved 25 HTTP connections to
what are very small CSS files.

251
00:09:56,330 --> 00:09:58,330
The first paint occurred
a whole second earlier,

252
00:09:58,330 --> 00:10:00,710
and the homepage
really felt faster.

253
00:10:00,710 --> 00:10:02,820
And we are very happy by this.

254
00:10:02,820 --> 00:10:06,940
So in 2010, we wanted to
continue these efforts.

255
00:10:06,940 --> 00:10:08,630
The CSS framework
basically rolled out

256
00:10:08,630 --> 00:10:10,680
to our section
and article pages.

257
00:10:10,680 --> 00:10:12,820
Again, we were focusing
on a single entry point.

258
00:10:12,820 --> 00:10:15,737
But we never optimized them.

259
00:10:15,737 --> 00:10:18,070
There were some concerns with
these proprietary scripts.

260
00:10:18,070 --> 00:10:19,944
And it turns out later,
when we did an audit,

261
00:10:19,944 --> 00:10:21,606
that we were right
to be concerned.

262
00:10:21,606 --> 00:10:23,230
There were references
to missing files.

263
00:10:23,230 --> 00:10:24,880
There were @import cycles.

264
00:10:24,880 --> 00:10:26,640
A would include B
include C include A.

265
00:10:26,640 --> 00:10:28,890
And if you're ever curious
about what the browser does

266
00:10:28,890 --> 00:10:32,140
to get out of that, I still
don't know the answer.

267
00:10:32,140 --> 00:10:33,649
And there were syntax errors.

268
00:10:33,649 --> 00:10:35,190
There were styles
not getting applied

269
00:10:35,190 --> 00:10:37,900
because they were
typed improperly.

270
00:10:37,900 --> 00:10:41,740
So we decided to build a
new JS build system in 2010.

271
00:10:41,740 --> 00:10:42,850
We forked the codebase.

272
00:10:42,850 --> 00:10:44,370
We wanted to create
a clean build.

273
00:10:44,370 --> 00:10:49,030
And only code that was
modular and namespaced

274
00:10:49,030 --> 00:10:51,120
would be able to
be in this build.

275
00:10:51,120 --> 00:10:53,730
Basically, we have these
manifests of files that had

276
00:10:53,730 --> 00:10:57,830
an @import-like syntax in a JS
comment so that they would be

277
00:10:57,830 --> 00:11:01,210
inert if the build
process failed.

278
00:11:01,210 --> 00:11:03,449
We used YUI Compressor
for minification.

279
00:11:03,449 --> 00:11:05,240
We no longer want to
write our own scripts.

280
00:11:05,240 --> 00:11:07,940
This was well supported
at the time, so why not?

281
00:11:07,940 --> 00:11:10,090
We were focusing
on two build files,

282
00:11:10,090 --> 00:11:11,980
one at the top,
one at the bottom.

283
00:11:11,980 --> 00:11:13,772
If you're familiar with
the best practices,

284
00:11:13,772 --> 00:11:15,271
they say that you're
supposed to put

285
00:11:15,271 --> 00:11:16,920
your JS at the
bottom of the page.

286
00:11:16,920 --> 00:11:18,800
So why did we have
them at the top?

287
00:11:18,800 --> 00:11:21,474
If you remember that editors
can put JavaScript on the page.

288
00:11:21,474 --> 00:11:23,140
If we wanted them to
use our frameworks,

289
00:11:23,140 --> 00:11:26,216
it had to be there before they
could actually run their code.

290
00:11:26,216 --> 00:11:27,840
So we put stuff at
the top to make sure

291
00:11:27,840 --> 00:11:29,590
that that wouldn't
break anything.

292
00:11:29,590 --> 00:11:31,670
This build process
was executed manually,

293
00:11:31,670 --> 00:11:33,780
so it didn't see
widespread usage.

294
00:11:33,780 --> 00:11:36,130
It's basically almost
only on the homepage.

295
00:11:36,130 --> 00:11:38,460
And now we have two code
bases and still no automatic

296
00:11:38,460 --> 00:11:40,520
build process.

297
00:11:40,520 --> 00:11:42,964
But when we did launch these
JS changes to the homepage,

298
00:11:42,964 --> 00:11:43,880
it was pretty drastic.

299
00:11:43,880 --> 00:11:47,405
We got a 50% speedup,
six seconds down from 12.

300
00:11:47,405 --> 00:11:49,530
We were very excited by that.

301
00:11:49,530 --> 00:11:52,409
So 2011 was a bit
of a slow year.

302
00:11:52,409 --> 00:11:54,950
As you might remember if you're
fans of "The New York Times",

303
00:11:54,950 --> 00:11:58,150
we introduced digital
subscriptions in 2011.

304
00:11:58,150 --> 00:11:59,830
So resourcing for
this kind of work

305
00:11:59,830 --> 00:12:01,910
was really, really
hard to come by.

306
00:12:01,910 --> 00:12:02,920
Oh, hello.

307
00:12:02,920 --> 00:12:04,730
I don't know what I just did.

308
00:12:04,730 --> 00:12:06,600
All right.

309
00:12:06,600 --> 00:12:11,250
There were efforts to optimize
our analytics packaging.

310
00:12:11,250 --> 00:12:12,790
We have a lot of
analytics packages,

311
00:12:12,790 --> 00:12:14,970
and they were kind of doing
some really bad stuff.

312
00:12:14,970 --> 00:12:16,980
They got aborted,
mostly because we

313
00:12:16,980 --> 00:12:19,727
were afraid to break
these actual reports.

314
00:12:19,727 --> 00:12:21,560
We wanted to make sure
that the business was

315
00:12:21,560 --> 00:12:23,770
able to analyze
things correctly,

316
00:12:23,770 --> 00:12:24,980
so we didn't continue that.

317
00:12:24,980 --> 00:12:27,650
So we used a series of code
reviews and style guides

318
00:12:27,650 --> 00:12:29,200
to make sure that
we were enforcing

319
00:12:29,200 --> 00:12:30,660
good standards
and best practices

320
00:12:30,660 --> 00:12:33,030
to keep the status quo.

321
00:12:33,030 --> 00:12:36,220
But at the end of 2011,
we made the decision.

322
00:12:36,220 --> 00:12:38,040
We decided to
replace prototype.js

323
00:12:38,040 --> 00:12:39,820
with jQuery sitewide.

324
00:12:39,820 --> 00:12:44,207
And as you can imagine,
this is really, really hard.

325
00:12:44,207 --> 00:12:46,540
We needed both of them to
coexist during the transition.

326
00:12:46,540 --> 00:12:48,581
We weren't going to rewrite
everything and launch

327
00:12:48,581 --> 00:12:50,390
a new site on a new
framework all at once,

328
00:12:50,390 --> 00:12:52,210
so we needed both
of them to basically

329
00:12:52,210 --> 00:12:54,910
be around while we did this.

330
00:12:54,910 --> 00:12:57,920
But in 2012, a group
of five developers

331
00:12:57,920 --> 00:13:00,450
basically set out to try
and excise prototype.js

332
00:13:00,450 --> 00:13:02,280
from article pages.

333
00:13:02,280 --> 00:13:04,511
And we were making really,
really excellent progress.

334
00:13:04,511 --> 00:13:05,510
Things were going great.

335
00:13:05,510 --> 00:13:07,090
Hours and hours of work.

336
00:13:07,090 --> 00:13:10,040
And then we found out there
were some inline scripts that

337
00:13:10,040 --> 00:13:12,936
made references to prototype.js.

338
00:13:12,936 --> 00:13:15,560
And if you remember that we have
these static pages with markup

339
00:13:15,560 --> 00:13:18,000
that we can't change,
we really have no idea

340
00:13:18,000 --> 00:13:20,730
of what's calling prototype.js
in inline scripts.

341
00:13:20,730 --> 00:13:23,350
And so therefore, we're not
ever able to remove prototype.js

342
00:13:23,350 --> 00:13:25,040
fully from our site.

343
00:13:25,040 --> 00:13:26,290
So now we have two frameworks.

344
00:13:26,290 --> 00:13:27,200
They both download.

345
00:13:27,200 --> 00:13:29,020
They're both still in use.

346
00:13:29,020 --> 00:13:31,370
And this actually causes
some really strange bugs

347
00:13:31,370 --> 00:13:34,200
in older IE, where you
don't have a get elements

348
00:13:34,200 --> 00:13:35,640
by class name.

349
00:13:35,640 --> 00:13:38,710
Prototype.js would
add one, and jQuery

350
00:13:38,710 --> 00:13:40,490
will detect it and use it.

351
00:13:40,490 --> 00:13:42,540
It returns prototype
objects and jQuery says,

352
00:13:42,540 --> 00:13:46,330
I have no idea what
these are, and fails.

353
00:13:46,330 --> 00:13:50,200
So 2012 also marked the end
of life for this proprietary

354
00:13:50,200 --> 00:13:51,740
build system.

355
00:13:51,740 --> 00:13:53,160
We basically
migrated to a system

356
00:13:53,160 --> 00:13:57,030
that mirrored our entire
SPN repositories via Hudson.

357
00:13:57,030 --> 00:14:00,600
We wrote a new script to
concatenate these CSS imports.

358
00:14:00,600 --> 00:14:02,740
We needed feature parity
with what we had before.

359
00:14:02,740 --> 00:14:04,615
So we had to write
something new to make sure

360
00:14:04,615 --> 00:14:07,580
that we could handle it for the
homepage, which already had it.

361
00:14:07,580 --> 00:14:10,230
It does have all these
features, although CSSLint

362
00:14:10,230 --> 00:14:12,500
is added on the list to
catch syntax errors that

363
00:14:12,500 --> 00:14:16,660
didn't exist until
2012, I believe.

364
00:14:16,660 --> 00:14:18,850
It uses YUI Compressor
to do minification,

365
00:14:18,850 --> 00:14:20,510
and also has to be run manually.

366
00:14:20,510 --> 00:14:24,180
So again, it's really just
limited to the homepage.

367
00:14:24,180 --> 00:14:28,250
So finally, I'm going to
talk a bit about some efforts

368
00:14:28,250 --> 00:14:30,030
in modern times of
what we're trying

369
00:14:30,030 --> 00:14:31,780
to do to really
fix this problem.

370
00:14:31,780 --> 00:14:34,760
So we were really gifted
a very rare opportunity

371
00:14:34,760 --> 00:14:35,840
by the business.

372
00:14:35,840 --> 00:14:37,560
In March, 2013, the
"New York Times"

373
00:14:37,560 --> 00:14:40,400
announced that it was going
to introduce a new article

374
00:14:40,400 --> 00:14:42,560
redesign.

375
00:14:42,560 --> 00:14:44,650
For us, it's more than
just a new user interface

376
00:14:44,650 --> 00:14:46,192
and a new user experience.

377
00:14:46,192 --> 00:14:47,650
It's really a
technological reboot.

378
00:14:47,650 --> 00:14:49,670
We've changed everything
about our systems

379
00:14:49,670 --> 00:14:52,380
in order to deal with some
of these legacy issues

380
00:14:52,380 --> 00:14:53,730
that we've had.

381
00:14:53,730 --> 00:14:56,210
So the best thing-- and I have
an exclamation point here.

382
00:14:56,210 --> 00:14:59,110
And it really doesn't represent
our excitement by this.

383
00:14:59,110 --> 00:15:00,911
We have dynamic pages now.

384
00:15:00,911 --> 00:15:02,910
We no longer have to deal
with an unknown number

385
00:15:02,910 --> 00:15:04,150
of permutations.

386
00:15:04,150 --> 00:15:05,790
We can actually
change our asset URLs

387
00:15:05,790 --> 00:15:09,000
on the fly to bypass the cache
as soon as we do a deploy.

388
00:15:09,000 --> 00:15:11,060
We pushed a lot of
the user customization

389
00:15:11,060 --> 00:15:12,705
into the client side.

390
00:15:12,705 --> 00:15:14,080
We're not doing
it on the server,

391
00:15:14,080 --> 00:15:16,770
so we can actually cache our
pages better on the backend.

392
00:15:16,770 --> 00:15:19,730
We introduced HTML 5 Boilerplate
and Modernizr to give us

393
00:15:19,730 --> 00:15:22,610
a nice starting point
for these new pages.

394
00:15:22,610 --> 00:15:25,700
So now we have a modern
build system using Grunt.

395
00:15:25,700 --> 00:15:27,840
It can be run both in
our developer sandboxes

396
00:15:27,840 --> 00:15:29,840
and in Hudson to
prepare a build.

397
00:15:29,840 --> 00:15:31,644
And most of these
web performance

398
00:15:31,644 --> 00:15:33,810
best practices are actually
available as Grunt tasks

399
00:15:33,810 --> 00:15:35,226
already, which
made it really easy

400
00:15:35,226 --> 00:15:40,160
to integrate some of this
great advice for our code.

401
00:15:40,160 --> 00:15:43,440
We're using RPM packaging
for deployments.

402
00:15:43,440 --> 00:15:45,620
They have very great
rollback support,

403
00:15:45,620 --> 00:15:49,190
and they're really easy to use.

404
00:15:49,190 --> 00:15:52,430
So for style development,
we switched to using LESS.

405
00:15:52,430 --> 00:15:55,250
LESS itself handles
concatenation.

406
00:15:55,250 --> 00:15:57,550
Minification is supported
by YUI Compressor

407
00:15:57,550 --> 00:15:58,970
through the Grunt task.

408
00:15:58,970 --> 00:16:01,372
So this was really easy
to get, these two wins.

409
00:16:01,372 --> 00:16:03,830
Variables and mixins allow us
to do some really interesting

410
00:16:03,830 --> 00:16:07,290
things in CSS that we had
to do with images before.

411
00:16:07,290 --> 00:16:11,240
Arrows, buttons, data
URIs, and spriting.

412
00:16:11,240 --> 00:16:12,990
So earlier this year,
I wrote a Grunt task

413
00:16:12,990 --> 00:16:15,600
that automates the
creation of spritesheets.

414
00:16:15,600 --> 00:16:18,220
I don't really know
what the diction

415
00:16:18,220 --> 00:16:21,192
is around sprites
and spritesheets.

416
00:16:21,192 --> 00:16:21,900
And I don't know.

417
00:16:21,900 --> 00:16:24,660
What do you call the individual
images in a spritesheet?

418
00:16:24,660 --> 00:16:25,630
I have no idea.

419
00:16:25,630 --> 00:16:28,740
So I'm making up
the terminology.

420
00:16:28,740 --> 00:16:31,930
Basically, the task takes in
a bunch of images and exports

421
00:16:31,930 --> 00:16:33,700
not only the
combined spritesheet,

422
00:16:33,700 --> 00:16:35,360
but also a bunch
of mixins and LESS

423
00:16:35,360 --> 00:16:37,740
with the background coordinates,
which makes it not only

424
00:16:37,740 --> 00:16:39,610
really easy to make these
combined images-- you don't

425
00:16:39,610 --> 00:16:42,276
have to maintain them manually--
it's really easy for developers

426
00:16:42,276 --> 00:16:43,350
to use them in the code.

427
00:16:43,350 --> 00:16:45,190
The mixins are named
after the image itself,

428
00:16:45,190 --> 00:16:47,660
so you just put the image
name and you basically

429
00:16:47,660 --> 00:16:49,480
get the sprite.

430
00:16:49,480 --> 00:16:51,480
And the best part about
it is if the coordinates

431
00:16:51,480 --> 00:16:54,640
change because we've added a new
image, and if it's alphabetical

432
00:16:54,640 --> 00:16:56,200
and you added a C, right?

433
00:16:56,200 --> 00:16:58,222
And all the images shift
a little bit, right?

434
00:16:58,222 --> 00:16:59,930
All you have to do is
rebuild the system,

435
00:16:59,930 --> 00:17:01,220
and all the coordinates
are updated.

436
00:17:01,220 --> 00:17:03,886
Nobody has to go in and actually
figure something out and change

437
00:17:03,886 --> 00:17:04,560
anything.

438
00:17:04,560 --> 00:17:06,339
And we're currently
combining about I

439
00:17:06,339 --> 00:17:08,319
think over 100 small
images into one.

440
00:17:08,319 --> 00:17:11,900
That's 99 saved requests
to very small files

441
00:17:11,900 --> 00:17:13,930
that we need for our new design.

442
00:17:13,930 --> 00:17:14,930
I'm not showing it here.

443
00:17:14,930 --> 00:17:18,420
You can check out the marketing
page to see what it looks like.

444
00:17:18,420 --> 00:17:20,390
Just a heads up.

445
00:17:20,390 --> 00:17:24,650
For JavaScript, we
switched to RequireJS.

446
00:17:24,650 --> 00:17:27,220
This handles, again,
concatenation and minification

447
00:17:27,220 --> 00:17:27,970
in the Grunt task.

448
00:17:27,970 --> 00:17:29,490
And we also get
source maps, which

449
00:17:29,490 --> 00:17:31,530
is something we're
really excited to use

450
00:17:31,530 --> 00:17:33,590
for our development.

451
00:17:33,590 --> 00:17:35,212
We no longer need
a global namespace.

452
00:17:35,212 --> 00:17:36,920
That's why the slide
is titled that we're

453
00:17:36,920 --> 00:17:39,950
deleting our
window.nytd namespace.

454
00:17:39,950 --> 00:17:42,310
We get asynchronous
loading of JavaScript.

455
00:17:42,310 --> 00:17:45,620
And we basically decided
to focus on larger

456
00:17:45,620 --> 00:17:48,376
build files so that
once you've established

457
00:17:48,376 --> 00:17:50,250
a connection on mobile,
you want to make sure

458
00:17:50,250 --> 00:17:51,324
you keep the latency low.

459
00:17:51,324 --> 00:17:53,240
That the initial handshake
can be really high.

460
00:17:53,240 --> 00:17:56,340
So we keep these large
build files around instead

461
00:17:56,340 --> 00:18:00,930
of using a bunch of
individual RequireJS loads.

462
00:18:00,930 --> 00:18:02,980
Since we moved a lot of
the client customization

463
00:18:02,980 --> 00:18:05,060
to the browser,
we needed to make

464
00:18:05,060 --> 00:18:06,860
sure we could template properly.

465
00:18:06,860 --> 00:18:08,450
So we use Underscore
JS Templates

466
00:18:08,450 --> 00:18:11,470
instead of building with
the DOM or any HTML strings.

467
00:18:11,470 --> 00:18:12,940
And its way faster
to precompile.

468
00:18:12,940 --> 00:18:14,981
You're essentially running
a JavaScript function,

469
00:18:14,981 --> 00:18:16,750
which is optimized
in the browser.

470
00:18:16,750 --> 00:18:19,435
Grunt can automate this
compilation as a built-in task

471
00:18:19,435 --> 00:18:20,540
to do it.

472
00:18:20,540 --> 00:18:22,610
And we turn them into
a RequireJS module

473
00:18:22,610 --> 00:18:26,270
that gets included as
part of our build process.

474
00:18:26,270 --> 00:18:29,420
So we use Backbone to organize
everything into modules.

475
00:18:29,420 --> 00:18:31,890
They are reusable and they
are shared across applications

476
00:18:31,890 --> 00:18:33,469
if we would like them to be.

477
00:18:33,469 --> 00:18:35,010
But the real win is
that they give us

478
00:18:35,010 --> 00:18:36,990
a bunch of inherited
functionality.

479
00:18:36,990 --> 00:18:40,120
So we can abstract out
touch events and analytics

480
00:18:40,120 --> 00:18:44,329
or some common element
references so that we can--

481
00:18:44,329 --> 00:18:46,120
we won't have to look
them up all the time,

482
00:18:46,120 --> 00:18:49,520
and we can get this
functionality and everything

483
00:18:49,520 --> 00:18:50,280
very easily.

484
00:18:50,280 --> 00:18:53,270
We get event delegation,
fewer event listeners,

485
00:18:53,270 --> 00:18:55,340
so things run a
little more smoothly.

486
00:18:55,340 --> 00:18:57,820
And the modules communicate
with each other using events,

487
00:18:57,820 --> 00:18:59,160
so you can publish
events or you can

488
00:18:59,160 --> 00:19:00,670
subscribe to another
module's events

489
00:19:00,670 --> 00:19:02,499
to find out about changes.

490
00:19:02,499 --> 00:19:03,540
So this is the big topic.

491
00:19:03,540 --> 00:19:04,610
What do we do about ads?

492
00:19:04,610 --> 00:19:06,510
We took ads out of
the critical path.

493
00:19:06,510 --> 00:19:10,040
What we do is on DOM ready,
we write the ad markup

494
00:19:10,040 --> 00:19:11,470
into a new IFrame.

495
00:19:11,470 --> 00:19:13,000
You just take the
frame's document,

496
00:19:13,000 --> 00:19:15,660
and you document.write
it into the frame.

497
00:19:15,660 --> 00:19:18,270
And what happens if the ad
itself calls document.write,

498
00:19:18,270 --> 00:19:19,650
you don't lose your whole page.

499
00:19:19,650 --> 00:19:21,170
You would just lose the
content of the IFrame, which

500
00:19:21,170 --> 00:19:22,620
is blank to begin with.

501
00:19:22,620 --> 00:19:25,076
So we don't care what they
do once they're in the frame,

502
00:19:25,076 --> 00:19:25,700
once they load.

503
00:19:25,700 --> 00:19:28,314
If they decide to bust out
of the frame, they can.

504
00:19:28,314 --> 00:19:30,730
But we have this notion of
trusted ads that aren't framed.

505
00:19:30,730 --> 00:19:33,020
And trusted basically means
that they specifically

506
00:19:33,020 --> 00:19:35,320
don't do things that
are bad for page speed.

507
00:19:35,320 --> 00:19:39,040
And also if there's actually a
problem, it's very easy for us

508
00:19:39,040 --> 00:19:41,000
to get in touch with
them and make the change.

509
00:19:41,000 --> 00:19:43,530
And this has been really,
really effective for us.

510
00:19:43,530 --> 00:19:46,416
So this is the results page.

511
00:19:46,416 --> 00:19:48,040
I thought it would
be great to show you

512
00:19:48,040 --> 00:19:50,110
a comparative slide
of our waterfalls

513
00:19:50,110 --> 00:19:52,270
to show you how really
dramatic this is.

514
00:19:52,270 --> 00:19:55,110
We're not quite ready to show
you that information yet.

515
00:19:55,110 --> 00:19:58,200
It's still being built, so we're
not quite ready to do that.

516
00:19:58,200 --> 00:20:00,510
But to give you an overview.

517
00:20:00,510 --> 00:20:02,135
Before starting to
render the page,

518
00:20:02,135 --> 00:20:04,890
it used to download
over 60 requests.

519
00:20:04,890 --> 00:20:08,390
It's about 10 now,
maybe even fewer.

520
00:20:08,390 --> 00:20:11,270
Before we're fully loaded, we
had to download 200 assets.

521
00:20:11,270 --> 00:20:13,070
It's about 70 now.

522
00:20:13,070 --> 00:20:15,850
Start render is under
one second in Chrome,

523
00:20:15,850 --> 00:20:18,360
and document complete is
under three seconds in Chrome.

524
00:20:18,360 --> 00:20:19,700
So this is a huge win for us.

525
00:20:19,700 --> 00:20:21,310
Before, previously,
document complete

526
00:20:21,310 --> 00:20:24,540
would be about nine seconds
on our article pages.

527
00:20:24,540 --> 00:20:26,200
So to answer Steve's
question about

528
00:20:26,200 --> 00:20:31,060
is web performance
too hard, no and yes.

529
00:20:31,060 --> 00:20:33,010
It's really not that hard.

530
00:20:33,010 --> 00:20:34,920
The optimization
practices are really not

531
00:20:34,920 --> 00:20:36,180
that difficult to begin with.

532
00:20:36,180 --> 00:20:38,940
And there's excellent tooling
that exists to make it really,

533
00:20:38,940 --> 00:20:40,560
really, really easy to do.

534
00:20:40,560 --> 00:20:42,840
However, there are
some unique challenges

535
00:20:42,840 --> 00:20:44,730
that I think not
just big websites,

536
00:20:44,730 --> 00:20:47,840
but companies tend to have
their own challenges that people

537
00:20:47,840 --> 00:20:49,710
can't solve their
problems for them.

538
00:20:49,710 --> 00:20:52,500
And not to mention any legacy
decisions such as ours, where

539
00:20:52,500 --> 00:20:54,940
we have our static pages
that was holding us back.

540
00:20:54,940 --> 00:20:57,190
We found that we did this
negative feedback cycle.

541
00:20:57,190 --> 00:20:59,189
We had this bad,
this poor setup.

542
00:20:59,189 --> 00:21:01,480
And we tried to this proprietary
fix to make it better.

543
00:21:01,480 --> 00:21:04,063
And we found ourselves slightly
worse off than we were before,

544
00:21:04,063 --> 00:21:06,840
even though we were getting
slightly faster speed.

545
00:21:06,840 --> 00:21:10,320
So here's some stuff that we
learned, share some advice.

546
00:21:10,320 --> 00:21:11,920
It's really worth
it to fight to solve

547
00:21:11,920 --> 00:21:13,560
these big, difficult problems.

548
00:21:13,560 --> 00:21:16,777
They are the 800 pound gorilla
in the room for a reason.

549
00:21:16,777 --> 00:21:17,610
Fight to solve them.

550
00:21:17,610 --> 00:21:19,234
Once they're out of
your way, it really

551
00:21:19,234 --> 00:21:22,014
opens the path to making
this a lot simpler.

552
00:21:22,014 --> 00:21:23,430
We live in a world
where you don't

553
00:21:23,430 --> 00:21:26,070
have to rely on proprietary
systems anymore.

554
00:21:26,070 --> 00:21:28,810
You might need some
because it's your business,

555
00:21:28,810 --> 00:21:32,350
so you may need to
make sure that you

556
00:21:32,350 --> 00:21:34,520
have all your requirements
taken care of.

557
00:21:34,520 --> 00:21:38,190
But a lot of the tooling is
just to make this very simple.

558
00:21:38,190 --> 00:21:41,310
I always say that you
should HTTP connections

559
00:21:41,310 --> 00:21:45,900
before you count
bytes in every file.

560
00:21:45,900 --> 00:21:47,270
Do the big easy wins first.

561
00:21:47,270 --> 00:21:49,380
It's really easy to
combine files together

562
00:21:49,380 --> 00:21:51,460
than it is to figure
out what code is old

563
00:21:51,460 --> 00:21:53,880
and needs to be removed
from your files.

564
00:21:53,880 --> 00:21:55,070
And automate everything.

565
00:21:55,070 --> 00:21:57,070
As soon as you introduce
manual to the equation,

566
00:21:57,070 --> 00:21:58,370
it really doesn't get done.

567
00:21:58,370 --> 00:22:00,110
So if you can
automate everything,

568
00:22:00,110 --> 00:22:05,160
it's by far going to pave the
road and make it really easy.

569
00:22:05,160 --> 00:22:06,010
So that's it.

570
00:22:06,010 --> 00:22:07,889
I think I'm running out of time.

571
00:22:07,889 --> 00:22:08,680
Thank you very much

572
00:22:08,680 --> 00:22:13,667
[APPLAUSE]

573
00:22:13,667 --> 00:22:14,750
MALE SPEAKER: [INAUDIBLE]?

574
00:22:14,750 --> 00:22:16,490
ETIAN KONIGSBURG: I don't think
I have time for questions.

575
00:22:16,490 --> 00:22:19,570
But I will be around at dinner,
so if you want to come find me.

576
00:22:19,570 --> 00:22:22,250
And I can talk endlessly
about this, so please find me.

577
00:22:22,250 --> 00:22:25,130
I will share all
of my knowledge.

578
00:22:25,130 --> 00:22:31,005

