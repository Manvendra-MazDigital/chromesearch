1
00:00:00,000 --> 00:00:09,449

2
00:00:09,449 --> 00:00:10,740
COLT MCANLIS: Hello, everybody.

3
00:00:10,740 --> 00:00:14,580
Welcome to another episode
of "Google Developers Live."

4
00:00:14,580 --> 00:00:16,750
My name is Colt McAnlis,
and today, we're

5
00:00:16,750 --> 00:00:20,060
talking about a fantastic
technology inside of Chrome

6
00:00:20,060 --> 00:00:22,410
known as the Native
Client project.

7
00:00:22,410 --> 00:00:24,140
Now this technology
does something

8
00:00:24,140 --> 00:00:26,790
that a lot of web developers
never thought possible.

9
00:00:26,790 --> 00:00:29,380
You see, it allows you
to develop, distribute,

10
00:00:29,380 --> 00:00:32,150
and execute native code
right in your web browser.

11
00:00:32,150 --> 00:00:33,700
But here's the catch.

12
00:00:33,700 --> 00:00:35,830
It's just as secure
as JavaScript.

13
00:00:35,830 --> 00:00:39,360
Now here to talk about this
fantastic technology today

14
00:00:39,360 --> 00:00:41,340
are some of the
brains of the project.

15
00:00:41,340 --> 00:00:43,600
I'd like to introduce
our panel for today.

16
00:00:43,600 --> 00:00:44,760
Hello, everyone.

17
00:00:44,760 --> 00:00:46,640
Sitting next to me,
we have Erik Kay,

18
00:00:46,640 --> 00:00:49,270
who's an engineering
director for Chrome,

19
00:00:49,270 --> 00:00:50,920
as well as Molly
Mackinlay, who's

20
00:00:50,920 --> 00:00:52,800
a product manager
on Native Client.

21
00:00:52,800 --> 00:00:55,890
And also at the end is David
Sehr, technical lead for NaCl

22
00:00:55,890 --> 00:00:58,430
and also one of the
inventors of the project.

23
00:00:58,430 --> 00:01:00,210
Hey, listen, thank
you guys for being

24
00:01:00,210 --> 00:01:01,920
here today on "Google
Developers Live."

25
00:01:01,920 --> 00:01:02,830
MOLLY MACKINLAY: Absolutely.

26
00:01:02,830 --> 00:01:04,930
COLT MCANLIS: We have lights
and all sorts of microphones.

27
00:01:04,930 --> 00:01:06,460
Hopefully, it's
not too big a deal.

28
00:01:06,460 --> 00:01:09,970
Anyhow, so Erik, tell us about
the Native Client project.

29
00:01:09,970 --> 00:01:10,980
What is it?

30
00:01:10,980 --> 00:01:12,056
What's its goals?

31
00:01:12,056 --> 00:01:13,430
ERIK KAY: Well,
as you said, it's

32
00:01:13,430 --> 00:01:15,680
about bringing native
code to the web.

33
00:01:15,680 --> 00:01:17,165
So the question is, why?

34
00:01:17,165 --> 00:01:18,930
And why should you
care about that?

35
00:01:18,930 --> 00:01:21,540
Well, it turns out that
there's a lot of native code

36
00:01:21,540 --> 00:01:23,970
that's been written out
there, a lot of C, C++ code.

37
00:01:23,970 --> 00:01:26,130
And there's a lot of
expertise, a lot of people

38
00:01:26,130 --> 00:01:28,130
who that's their
bread and butter.

39
00:01:28,130 --> 00:01:31,480
They are developers
in C and C++.

40
00:01:31,480 --> 00:01:32,950
There's a lot of
developers, also,

41
00:01:32,950 --> 00:01:36,030
who need to use those
technologies because they

42
00:01:36,030 --> 00:01:39,590
target a variety of different
platforms, some that require

43
00:01:39,590 --> 00:01:41,090
native code in order
to get on them.

44
00:01:41,090 --> 00:01:46,890
If you're targeting for the
iPhone, maybe you have a C,

45
00:01:46,890 --> 00:01:50,520
C++, Objective-C app.

46
00:01:50,520 --> 00:01:52,470
If you want to get
that to the web,

47
00:01:52,470 --> 00:01:55,487
you need technology like Native
Client to bring it there.

48
00:01:55,487 --> 00:01:57,070
COLT MCANLIS: And
that's going to help

49
00:01:57,070 --> 00:01:58,130
us sort of get performance.

50
00:01:58,130 --> 00:01:59,990
It's going to help us with
security and everything else,

51
00:01:59,990 --> 00:02:00,220
right?

52
00:02:00,220 --> 00:02:00,886
ERIK KAY: Right.

53
00:02:00,886 --> 00:02:02,830
Portability,
security, performance.

54
00:02:02,830 --> 00:02:03,913
COLT MCANLIS: Interesting.

55
00:02:03,913 --> 00:02:05,740
Now David, you're
one of the creators.

56
00:02:05,740 --> 00:02:07,530
You were there
from the beginning.

57
00:02:07,530 --> 00:02:10,199
So tell us a bit
about Native Client.

58
00:02:10,199 --> 00:02:11,940
What is it doing
under the hood that

59
00:02:11,940 --> 00:02:13,350
allows it to accomplish
all these things?

60
00:02:13,350 --> 00:02:14,891
DAVID SEHR: Put
simply, Native Client

61
00:02:14,891 --> 00:02:18,070
is about secure execution of
native code in the web browser.

62
00:02:18,070 --> 00:02:22,615
So we do this by actually
changing the compiler

63
00:02:22,615 --> 00:02:25,950
that you would use to produce
the native code in such a way

64
00:02:25,950 --> 00:02:29,540
that it produces machine
code that can only

65
00:02:29,540 --> 00:02:32,150
do things that are secure.

66
00:02:32,150 --> 00:02:35,032
The code that it generates
actually sets up something

67
00:02:35,032 --> 00:02:35,990
that we call a sandbox.

68
00:02:35,990 --> 00:02:39,770
And inside the sandbox, the
application can run in a way

69
00:02:39,770 --> 00:02:43,520
that it can't gain access to
execution outside the sandbox,

70
00:02:43,520 --> 00:02:45,600
except through very
controlled APIs,

71
00:02:45,600 --> 00:02:48,540
and it can't have access to
other parts of the browser that

72
00:02:48,540 --> 00:02:50,040
might otherwise
compromise security.

73
00:02:50,040 --> 00:02:51,748
COLT MCANLIS: So it's
sounds like there's

74
00:02:51,748 --> 00:02:53,440
sort of a component
on the compiler

75
00:02:53,440 --> 00:02:56,330
side of the technology, as well
as a lot of machinery running

76
00:02:56,330 --> 00:02:59,460
inside of the browser, which
is kind of a complex pipeline.

77
00:02:59,460 --> 00:03:01,524
How much of this is actually
visible to the user?

78
00:03:01,524 --> 00:03:03,440
MOLLY MACKINLAY: So from
a user's perspective,

79
00:03:03,440 --> 00:03:05,530
when they navigate to a
web application that's

80
00:03:05,530 --> 00:03:07,470
using a Native
Client module, it's

81
00:03:07,470 --> 00:03:09,060
really a transparent process.

82
00:03:09,060 --> 00:03:11,090
They get all the benefit
of the performance

83
00:03:11,090 --> 00:03:14,390
we get with a Native
Client application,

84
00:03:14,390 --> 00:03:17,280
but they don't have to go
through the classic plug-in

85
00:03:17,280 --> 00:03:20,890
install gesture that we've
come to know and maybe not love

86
00:03:20,890 --> 00:03:23,057
quite as much about the web.

87
00:03:23,057 --> 00:03:25,140
So it's really much more
of a transparent process.

88
00:03:25,140 --> 00:03:30,150
They're not having to interact
directly with a module.

89
00:03:30,150 --> 00:03:31,920
It just kind of
helps them be more

90
00:03:31,920 --> 00:03:34,029
performant in the
application itself.

91
00:03:34,029 --> 00:03:36,570
COLT MCANLIS: Now I think you
mentioned something interesting

92
00:03:36,570 --> 00:03:39,060
there, the sort of
plug-in dialogue.

93
00:03:39,060 --> 00:03:43,497
This has sort of been the uneasy
surface of the web community

94
00:03:43,497 --> 00:03:44,830
for about the past 20 years now.

95
00:03:44,830 --> 00:03:46,180
When you see that
"please install,"

96
00:03:46,180 --> 00:03:47,540
you're never really
sure if you're

97
00:03:47,540 --> 00:03:49,581
getting something awesome
or something malicious.

98
00:03:49,581 --> 00:03:51,360
But NaCl attacks this, right?

99
00:03:51,360 --> 00:03:54,832
So David, how is NaCl actually
ensuring this code is secure?

100
00:03:54,832 --> 00:03:56,540
DAVID SEHR: So we knew
from the beginning

101
00:03:56,540 --> 00:03:59,081
that we were going to be running
code that came from the web.

102
00:03:59,081 --> 00:04:00,787
So this can be kind
of a scary place,

103
00:04:00,787 --> 00:04:02,870
and the whole plug-in
experience sort of taught us

104
00:04:02,870 --> 00:04:05,590
that relying on the user
to decide what was safe

105
00:04:05,590 --> 00:04:09,040
or what was not safe might not
be the best approach to this.

106
00:04:09,040 --> 00:04:11,730
So the approach that
we took was &mdash; actually,

107
00:04:11,730 --> 00:04:14,710
I talked a little bit
before about this &mdash;

108
00:04:14,710 --> 00:04:20,140
was we modify the compiler to
produce these sequences that

109
00:04:20,140 --> 00:04:23,230
are secure.

110
00:04:23,230 --> 00:04:29,910
When the application and when
the page actually starts up,

111
00:04:29,910 --> 00:04:33,320
we check, through something
we call the validator,

112
00:04:33,320 --> 00:04:36,740
part of the Chrome browser,
that this set of safety rules

113
00:04:36,740 --> 00:04:41,240
that the compiler produces
are actually followed.

114
00:04:41,240 --> 00:04:44,610
If the application does not
follow those safety rules,

115
00:04:44,610 --> 00:04:48,080
the browser simply refuses
to start the application.

116
00:04:48,080 --> 00:04:49,880
If those safety
rules are started,

117
00:04:49,880 --> 00:04:51,665
then while the
application is executing,

118
00:04:51,665 --> 00:04:53,040
we're still
monitoring and making

119
00:04:53,040 --> 00:04:56,150
sure that accesses to
the operating system

120
00:04:56,150 --> 00:04:58,670
or to other browser
functionality

121
00:04:58,670 --> 00:05:01,170
are carefully
monitored and secured.

122
00:05:01,170 --> 00:05:04,820
Any time any of those, again,
are violated, any those rules

123
00:05:04,820 --> 00:05:08,360
for access to operating system
or browser functionality,

124
00:05:08,360 --> 00:05:10,970
we will, again, terminate
the application.

125
00:05:10,970 --> 00:05:14,630
And all of this runs in addition
to the existing Chrome sandbox,

126
00:05:14,630 --> 00:05:18,240
which is used to secure
JavaScript execution as well

127
00:05:18,240 --> 00:05:19,040
as Native Client.

128
00:05:19,040 --> 00:05:21,020
COLT MCANLIS: So it's like
there's sandboxes in sandboxes.

129
00:05:21,020 --> 00:05:21,660
DAVID SEHR: That's right.

130
00:05:21,660 --> 00:05:23,016
COLT MCANLIS: It's just
sandboxes all the way down

131
00:05:23,016 --> 00:05:23,730
is kind of what I'm hearing.

132
00:05:23,730 --> 00:05:24,771
DAVID SEHR: That's right.

133
00:05:24,771 --> 00:05:25,520
Defense in depth.

134
00:05:25,520 --> 00:05:29,170
COLT MCANLIS: So now
some of these rules,

135
00:05:29,170 --> 00:05:31,812
most developers could hear
that and say, my program

136
00:05:31,812 --> 00:05:32,770
has to adhere to rules.

137
00:05:32,770 --> 00:05:34,692
That's super spooky.

138
00:05:34,692 --> 00:05:36,650
What does that actually
mean for the developer?

139
00:05:36,650 --> 00:05:38,330
What kind of
limitations do they have

140
00:05:38,330 --> 00:05:40,752
in the development
of their application?

141
00:05:40,752 --> 00:05:43,210
DAVID SEHR: So we looked at
Native Client in the beginning.

142
00:05:43,210 --> 00:05:45,110
And as Erik talked
about, we really

143
00:05:45,110 --> 00:05:47,990
wanted to bring native code,
in general, to the web.

144
00:05:47,990 --> 00:05:50,580
We wanted to put as few
limitations as possible

145
00:05:50,580 --> 00:05:52,520
on this system.

146
00:05:52,520 --> 00:05:54,720
So because of some of the
rules that we require,

147
00:05:54,720 --> 00:05:57,280
if your application actually
has inline assembly code,

148
00:05:57,280 --> 00:06:00,580
or if you're using .s files,
you may have to modify those

149
00:06:00,580 --> 00:06:04,362
to follow the safety rules
that the validator enforces.

150
00:06:04,362 --> 00:06:06,320
If you're using a just
in time compiler as part

151
00:06:06,320 --> 00:06:08,590
of your application,
you're probably

152
00:06:08,590 --> 00:06:10,130
going to have to
modify that also

153
00:06:10,130 --> 00:06:12,960
to properly execute
under the environment.

154
00:06:12,960 --> 00:06:14,680
But otherwise, we've
tried very hard not

155
00:06:14,680 --> 00:06:16,090
to put any additional
limitations

156
00:06:16,090 --> 00:06:19,050
on what developers can do.

157
00:06:19,050 --> 00:06:22,270
COLT MCANLIS: So when Chrome
gets this package of bytecode,

158
00:06:22,270 --> 00:06:24,396
it has to kind of
check through it.

159
00:06:24,396 --> 00:06:26,270
What's interesting about
that for me, though,

160
00:06:26,270 --> 00:06:30,690
is that it sounds like maybe
you're not just limited to C++

161
00:06:30,690 --> 00:06:32,590
to generate that code?

162
00:06:32,590 --> 00:06:35,830
DAVID SEHR: So we here at Google
have built the initial tool

163
00:06:35,830 --> 00:06:36,330
chains.

164
00:06:36,330 --> 00:06:39,320
We've built a C/C++ tool
chain and have focused most

165
00:06:39,320 --> 00:06:40,940
of our efforts on that.

166
00:06:40,940 --> 00:06:43,890
But the intent is
that developers

167
00:06:43,890 --> 00:06:48,296
can go broad and do other
platforms, other languages.

168
00:06:48,296 --> 00:06:50,920
Some of our developer community
have already picked up on this.

169
00:06:50,920 --> 00:06:52,480
And in fact, we've
already had ports

170
00:06:52,480 --> 00:06:55,246
of Lua and Python and Ruby.

171
00:06:55,246 --> 00:06:56,620
There are people
actively working

172
00:06:56,620 --> 00:06:59,845
on Go and other languages out
in the developer community.

173
00:06:59,845 --> 00:07:01,660
You can pick up some
of this on "naclports"

174
00:07:01,660 --> 00:07:04,460
or follow on our
discussion list.

175
00:07:04,460 --> 00:07:07,900
But C and C++, you have full
access to the Pepper APIs

176
00:07:07,900 --> 00:07:08,456
today.

177
00:07:08,456 --> 00:07:10,080
Some of these other
ones, we're working

178
00:07:10,080 --> 00:07:15,010
on developing and adding access
to the other Pepper APIs.

179
00:07:15,010 --> 00:07:16,510
But otherwise,
language independence

180
00:07:16,510 --> 00:07:18,505
is a goal from the start, and
we're well along that path.

181
00:07:18,505 --> 00:07:19,300
COLT MCANLIS: And
see, this is the thing

182
00:07:19,300 --> 00:07:21,110
that I've loved about the Native
Client project from the start,

183
00:07:21,110 --> 00:07:21,610
really.

184
00:07:21,610 --> 00:07:23,940
So I'm a bad
JavaScript programmer.

185
00:07:23,940 --> 00:07:26,350
I like having control
over my memory access

186
00:07:26,350 --> 00:07:28,510
and understanding the
performance characteristics.

187
00:07:28,510 --> 00:07:30,530
And so this is something
I like because I

188
00:07:30,530 --> 00:07:33,240
can bring this code and
these other languages.

189
00:07:33,240 --> 00:07:37,374
But to be honest, this is a bit
of bucking a trend for the web

190
00:07:37,374 --> 00:07:38,290
development community.

191
00:07:38,290 --> 00:07:40,420
I mean typically,
since its inception,

192
00:07:40,420 --> 00:07:43,380
we've kind of been drilled
into this one mindset

193
00:07:43,380 --> 00:07:45,605
of single language,
single setup.

194
00:07:45,605 --> 00:07:46,980
But what this is
really proposing

195
00:07:46,980 --> 00:07:50,120
is opening the doors
to just all sorts

196
00:07:50,120 --> 00:07:52,890
of new experiences
and new technologies.

197
00:07:52,890 --> 00:07:55,080
So Erik, obviously this is big.

198
00:07:55,080 --> 00:07:57,260
What do you feel that
the impact of this

199
00:07:57,260 --> 00:07:59,910
is going to be on the web over
the next five or so years?

200
00:07:59,910 --> 00:08:02,070
ERIK KAY: Well, I think
your example highlighted

201
00:08:02,070 --> 00:08:04,900
one of the main changes
that this is going to bring,

202
00:08:04,900 --> 00:08:07,320
which is that there
are many developers who

203
00:08:07,320 --> 00:08:10,370
aren't great JavaScript
web developers.

204
00:08:10,370 --> 00:08:12,277
They're C/C++.

205
00:08:12,277 --> 00:08:13,860
They use the language
of their choice.

206
00:08:13,860 --> 00:08:17,010
And this suddenly
allows them to bring

207
00:08:17,010 --> 00:08:19,220
their tools and their
technology and their knowledge

208
00:08:19,220 --> 00:08:20,770
and expertise to the web.

209
00:08:20,770 --> 00:08:23,910
So it's going to open up the
web to even more developers

210
00:08:23,910 --> 00:08:26,110
with a lot of
existing software that

211
00:08:26,110 --> 00:08:27,610
hasn't been brought to the web.

212
00:08:27,610 --> 00:08:28,680
Think about this.

213
00:08:28,680 --> 00:08:30,230
There's a ton of
native code that's

214
00:08:30,230 --> 00:08:34,659
been out there being developed
over the last 40, 50 years.

215
00:08:34,659 --> 00:08:37,039
The effort to port that to
JavaScript is not trivial.

216
00:08:37,039 --> 00:08:38,480
These things have
been vetted over time.

217
00:08:38,480 --> 00:08:39,446
So you think of crypto.

218
00:08:39,446 --> 00:08:40,570
You think of image filters.

219
00:08:40,570 --> 00:08:41,850
You think of whatever.

220
00:08:41,850 --> 00:08:43,770
You don't want to go
have to reinvent that.

221
00:08:43,770 --> 00:08:48,610
So another interesting bit is to
think about the opposite user,

222
00:08:48,610 --> 00:08:51,710
the user who is a
web developer first

223
00:08:51,710 --> 00:08:53,440
and knows nothing
about native code.

224
00:08:53,440 --> 00:08:55,970
So how are they going to
go take that native code

225
00:08:55,970 --> 00:08:58,649
and port it over to
JavaScript themselves?

226
00:08:58,649 --> 00:09:00,690
One of the interesting
things about Native Client

227
00:09:00,690 --> 00:09:03,525
is they might be able to just
take an existing built module

228
00:09:03,525 --> 00:09:05,150
that somebody else
built, somebody that

229
00:09:05,150 --> 00:09:07,191
had that expertise, and
integrate into their web.

230
00:09:07,191 --> 00:09:09,500
You want to add a Gaussian
blur to your image editor?

231
00:09:09,500 --> 00:09:11,910
Great, grab this NaCl module
that does that for you.

232
00:09:11,910 --> 00:09:14,368
You don't necessarily have to
know anything about C and C++

233
00:09:14,368 --> 00:09:14,910
to do that.

234
00:09:14,910 --> 00:09:17,452
You just grab the NaCl module
and integrate it with your app.

235
00:09:17,452 --> 00:09:18,826
COLT MCANLIS:
That's really cool.

236
00:09:18,826 --> 00:09:21,310
I like the point you make
about the vetted code, too,

237
00:09:21,310 --> 00:09:23,018
because that makes me
think that one day,

238
00:09:23,018 --> 00:09:26,000
I'm going to be able to
just included the Mars Rover

239
00:09:26,000 --> 00:09:28,650
navigation controller from
NASA right into my web page

240
00:09:28,650 --> 00:09:30,710
and use it for some crazy thing.

241
00:09:30,710 --> 00:09:33,710
Now again, this kind
of a big vision.

242
00:09:33,710 --> 00:09:35,700
How have developers
been responding?

243
00:09:35,700 --> 00:09:38,350
Is anyone really &mdash; how has
the uptake been with this?

244
00:09:38,350 --> 00:09:40,933
MOLLY MACKINLAY: We've actually
had a huge developer response.

245
00:09:40,933 --> 00:09:43,340
We've had over 300 applications
in the Chrome Web Store.

246
00:09:43,340 --> 00:09:45,157
These aren't just
your mom's web app.

247
00:09:45,157 --> 00:09:46,740
These are applications
that are really

248
00:09:46,740 --> 00:09:49,020
using the full processing
power of the computer,

249
00:09:49,020 --> 00:09:51,460
coming from really
high powered platforms,

250
00:09:51,460 --> 00:09:54,910
things like "Tomb Raider"
and "Tank Riders,"

251
00:09:54,910 --> 00:09:57,860
coming from Xbox 360 and PS3.

252
00:09:57,860 --> 00:10:01,830
We have "Bastion," which
comes from the Steam platform.

253
00:10:01,830 --> 00:10:05,440
And not just games, though
game developers really

254
00:10:05,440 --> 00:10:08,260
use the cutting edge of
what a platform can do.

255
00:10:08,260 --> 00:10:10,250
We've also seen good
adoption for things

256
00:10:10,250 --> 00:10:13,055
like CAD modeling and
surgical simulations,

257
00:10:13,055 --> 00:10:14,760
where you're cutting
open cadavers

258
00:10:14,760 --> 00:10:18,050
and teaching medical students
all the different entrails

259
00:10:18,050 --> 00:10:21,660
that &mdash; lots of crazy
stuff going on.

260
00:10:21,660 --> 00:10:24,030
But these are high powered
applications that are really

261
00:10:24,030 --> 00:10:28,170
pushing forward what we
can do, which is wonderful.

262
00:10:28,170 --> 00:10:30,780
Things like image
and video editing

263
00:10:30,780 --> 00:10:34,500
that really are taking advantage
of everything Native Client

264
00:10:34,500 --> 00:10:35,240
can offer.

265
00:10:35,240 --> 00:10:36,890
COLT MCANLIS: Now
a couple weeks ago,

266
00:10:36,890 --> 00:10:39,139
I know that it was announced
on the Chromium blog post

267
00:10:39,139 --> 00:10:42,020
sort of a new, I guess,
flavor, if that's

268
00:10:42,020 --> 00:10:44,270
the right version of it,
called Portable Native Client

269
00:10:44,270 --> 00:10:44,830
or PNACL.

270
00:10:44,830 --> 00:10:46,150
MOLLY MACKINLAY: "Pinnacle."

271
00:10:46,150 --> 00:10:47,337
COLT MCANLIS: "Pinnacle."

272
00:10:47,337 --> 00:10:48,920
Tell me a little bit
more about PNaCl.

273
00:10:48,920 --> 00:10:52,500
MOLLY MACKINLAY: So PNaCl is
another flavor, as you say,

274
00:10:52,500 --> 00:10:54,080
of Native Client project.

275
00:10:54,080 --> 00:10:57,980
And what this does is introduces
an intermediate representation

276
00:10:57,980 --> 00:11:01,570
between the language, the C
and C++ the developer codes,

277
00:11:01,570 --> 00:11:05,106
and how a user runs that
natively on their computer.

278
00:11:05,106 --> 00:11:06,980
And through this
intermediate representation,

279
00:11:06,980 --> 00:11:09,110
we can make sure
that in the future,

280
00:11:09,110 --> 00:11:12,780
as new hardware is developed,
we can continue to target all

281
00:11:12,780 --> 00:11:14,490
the different users' computers.

282
00:11:14,490 --> 00:11:16,780
With the original
Native Client project,

283
00:11:16,780 --> 00:11:19,910
you had to compile once for
every type of user computer

284
00:11:19,910 --> 00:11:22,010
you wanted to support.

285
00:11:22,010 --> 00:11:24,430
With Portable Native Client,
we don't have that problem.

286
00:11:24,430 --> 00:11:28,020
We translate on the fly, given
the user's hardware type.

287
00:11:28,020 --> 00:11:31,540
This means that we're portable,
as we say in the title.

288
00:11:31,540 --> 00:11:35,030
We're portable across all of
these different architectures.

289
00:11:35,030 --> 00:11:36,920
Previously, because
Native Client

290
00:11:36,920 --> 00:11:42,090
was this architecture-specific
binary, we had to kind of gate

291
00:11:42,090 --> 00:11:43,012
how we let that out.

292
00:11:43,012 --> 00:11:44,470
We needed to make
sure that we were

293
00:11:44,470 --> 00:11:47,350
future compatible in the web.

294
00:11:47,350 --> 00:11:49,600
And so therefore, we put
Native Client modules

295
00:11:49,600 --> 00:11:50,790
in the Chrome Web Store.

296
00:11:50,790 --> 00:11:53,490
With Portable Native Client,
you don't have that problem,

297
00:11:53,490 --> 00:11:54,580
you don't have that gate.

298
00:11:54,580 --> 00:11:55,740
COLT MCANLIS: So I
like what you say there

299
00:11:55,740 --> 00:11:57,270
about sort of future proofing.

300
00:11:57,270 --> 00:12:00,140
I mean everyone &mdash;
let's be clear here.

301
00:12:00,140 --> 00:12:03,580
The buzz in the tech world
right now is less on software

302
00:12:03,580 --> 00:12:04,600
and more on hardware.

303
00:12:04,600 --> 00:12:07,490
We've got new devices coming
out in much different areas &mdash;

304
00:12:07,490 --> 00:12:10,450
I mean, Google Glass and tons
of different Android things.

305
00:12:10,450 --> 00:12:13,430
I'm personally looking forward
to Google Shoe, which is nice

306
00:12:13,430 --> 00:12:15,200
because that means
PNaCl will support

307
00:12:15,200 --> 00:12:18,830
whatever silicone-based
pump ups.

308
00:12:18,830 --> 00:12:20,150
I remember the Nike pump ups.

309
00:12:20,150 --> 00:12:22,790
Those to me were the
pinnacle of shoe.

310
00:12:22,790 --> 00:12:25,160
Like, when I can
control &mdash; that was it.

311
00:12:25,160 --> 00:12:26,330
Anyhow.

312
00:12:26,330 --> 00:12:28,380
So it sounds like there's
kind of a big move

313
00:12:28,380 --> 00:12:31,630
here, from the static,
architecture-specific

314
00:12:31,630 --> 00:12:34,494
compilation to this sort of
translation that then gets

315
00:12:34,494 --> 00:12:36,660
turned into whatever the
underlying architecture is.

316
00:12:36,660 --> 00:12:40,610
So this sounds like a pretty
big shoveling of code.

317
00:12:40,610 --> 00:12:42,400
David, how did that
go with the engineers?

318
00:12:42,400 --> 00:12:45,410
Was this like a monumental
effort, or was it pretty easy?

319
00:12:45,410 --> 00:12:47,160
DAVID SEHR: It's been
a pretty big effort.

320
00:12:47,160 --> 00:12:49,550
So we started with
the GCC tool chain,

321
00:12:49,550 --> 00:12:52,970
targeting, as Molly
said, basically one

322
00:12:52,970 --> 00:12:56,780
executable platform at a
time, so x86, 32, or 64.

323
00:12:56,780 --> 00:12:58,730
And with PNaCl, we
wanted that to be

324
00:12:58,730 --> 00:13:02,020
one platform-independent binary,
what we're calling a pexe.

325
00:13:02,020 --> 00:13:03,860
So we started with
a tool called Clang,

326
00:13:03,860 --> 00:13:05,130
from the LLVM tool suite.

327
00:13:05,130 --> 00:13:06,960
And it produces bitcode.

328
00:13:06,960 --> 00:13:09,160
This bitcode, we made
some modifications to,

329
00:13:09,160 --> 00:13:10,660
to make it more
suitable to the web,

330
00:13:10,660 --> 00:13:13,760
to being hosted over
time in a website.

331
00:13:13,760 --> 00:13:16,444
And then once we
had done that, we

332
00:13:16,444 --> 00:13:17,860
had to look at
translators for all

333
00:13:17,860 --> 00:13:19,310
these platforms in addition.

334
00:13:19,310 --> 00:13:22,280
The translators themselves
to each one of the platforms

335
00:13:22,280 --> 00:13:24,190
are based, again, on
the LLVM tool chain,

336
00:13:24,190 --> 00:13:25,892
on the back end
compiler for that.

337
00:13:25,892 --> 00:13:27,350
And so we had to
build one of those

338
00:13:27,350 --> 00:13:28,570
for all the supported platforms.

339
00:13:28,570 --> 00:13:30,403
And we've worked with
some people externally

340
00:13:30,403 --> 00:13:34,280
to add some more supported
platforms over time as well.

341
00:13:34,280 --> 00:13:37,360
So it's been a lot of
work in doing this.

342
00:13:37,360 --> 00:13:42,430
And also, the security
standard that we set with NaCl

343
00:13:42,430 --> 00:13:43,680
was an important part of this.

344
00:13:43,680 --> 00:13:48,580
So securing both the translation
process and the executable code

345
00:13:48,580 --> 00:13:50,880
is done through Native
Client as it was before.

346
00:13:50,880 --> 00:13:53,854
So it's been a long
development effort,

347
00:13:53,854 --> 00:13:55,770
and the engineers, I
think, are very relieved.

348
00:13:55,770 --> 00:13:57,899
We're all really happy
to be at this point now,

349
00:13:57,899 --> 00:13:59,690
and I think really cool
things are to come.

350
00:13:59,690 --> 00:14:00,910
COLT MCANLIS: And see,
I remember actually

351
00:14:00,910 --> 00:14:02,620
reading some of the
original publications

352
00:14:02,620 --> 00:14:03,495
you guys did on this.

353
00:14:03,495 --> 00:14:06,290
And even back then, it
was really weird to me.

354
00:14:06,290 --> 00:14:10,042
Like, wait, this sounds
like a huge amount of work.

355
00:14:10,042 --> 00:14:12,000
But it sounds like the
team has done fantastic.

356
00:14:12,000 --> 00:14:14,442
But then with the uptake
that has already been there,

357
00:14:14,442 --> 00:14:15,400
I mean, that's amazing.

358
00:14:15,400 --> 00:14:19,610
So now that you're moved on
to PNaCl &mdash; or not moved on to,

359
00:14:19,610 --> 00:14:21,650
but now that this
thing has rolled out &mdash;

360
00:14:21,650 --> 00:14:24,850
what's different for the user?

361
00:14:24,850 --> 00:14:27,100
If someone's developing a
NaCl app versus a PNaCl app,

362
00:14:27,100 --> 00:14:28,960
how does the user experience
the two differently?

363
00:14:28,960 --> 00:14:30,420
MOLLY MACKINLAY:
So for the user,

364
00:14:30,420 --> 00:14:33,300
when they're navigating to a
page that contains a PNaCl app,

365
00:14:33,300 --> 00:14:36,100
they still have that same
transparent experience

366
00:14:36,100 --> 00:14:40,020
using all of the feature
set, the performance

367
00:14:40,020 --> 00:14:42,630
that we enable
through Native Client.

368
00:14:42,630 --> 00:14:46,560
But now, PNaCl applications
can be embedded in a web page.

369
00:14:46,560 --> 00:14:47,650
You navigate to a tab.

370
00:14:47,650 --> 00:14:49,680
You use the benefits of PNaCl.

371
00:14:49,680 --> 00:14:50,960
You get tired of it.

372
00:14:50,960 --> 00:14:51,530
You're busy.

373
00:14:51,530 --> 00:14:53,780
You want to go and edit your
video in a different tab.

374
00:14:53,780 --> 00:14:54,720
You navigate away.

375
00:14:54,720 --> 00:14:57,590
And so now you have this
kind of seamless interaction,

376
00:14:57,590 --> 00:15:00,280
where you're getting pages that
are powered by Portable Native

377
00:15:00,280 --> 00:15:03,720
Client, but they don't have to
go through the same Chrome Web

378
00:15:03,720 --> 00:15:06,320
Store install
process that you had

379
00:15:06,320 --> 00:15:10,440
with the Native
Client executables.

380
00:15:10,440 --> 00:15:14,740
So it's similar, very much,
from the user perspective,

381
00:15:14,740 --> 00:15:16,905
but just more free-flowing
in the web at large.

382
00:15:16,905 --> 00:15:18,280
COLT MCANLIS:
That's interesting.

383
00:15:18,280 --> 00:15:20,650
And so some of the
examples you gave,

384
00:15:20,650 --> 00:15:22,960
though, they talk
about basically access

385
00:15:22,960 --> 00:15:23,917
to native resources.

386
00:15:23,917 --> 00:15:25,250
You've got high powered compute.

387
00:15:25,250 --> 00:15:28,360
You've got access to TCP,
UDP, and stuff like that.

388
00:15:28,360 --> 00:15:30,570
So I guess this is
kind of the question

389
00:15:30,570 --> 00:15:34,879
that the community brings up
a lot is, so, if I can just

390
00:15:34,879 --> 00:15:36,920
browse to a random web
page, and they have access

391
00:15:36,920 --> 00:15:39,007
to some of these APIs,
Erik, is this something

392
00:15:39,007 --> 00:15:40,090
I should be worried about?

393
00:15:40,090 --> 00:15:42,600
Is someone going to turn on
my webcam when I don't know?

394
00:15:42,600 --> 00:15:44,880
ERIK KAY: Absolutely not.

395
00:15:44,880 --> 00:15:47,310
As David pointed out
before, the security model

396
00:15:47,310 --> 00:15:50,510
for Native Client basically is
exactly the same as JavaScript.

397
00:15:50,510 --> 00:15:53,380
So Native Client really
can't do any more

398
00:15:53,380 --> 00:15:58,340
than what we allow normal
web pages to do before.

399
00:15:58,340 --> 00:16:01,187
The main thing is just the
code that the developer

400
00:16:01,187 --> 00:16:02,770
uses to write that
and the performance

401
00:16:02,770 --> 00:16:05,297
that they're able to
get as a result of it.

402
00:16:05,297 --> 00:16:07,630
Native Client is sandboxed
from the underlying operating

403
00:16:07,630 --> 00:16:08,129
system.

404
00:16:08,129 --> 00:16:09,640
It can't directly access things.

405
00:16:09,640 --> 00:16:13,480
So it only accesses
these capabilities

406
00:16:13,480 --> 00:16:16,330
through APIs like
Pepper that we've

407
00:16:16,330 --> 00:16:18,130
developed, which
basically mirror

408
00:16:18,130 --> 00:16:20,260
what's in the web platform.

409
00:16:20,260 --> 00:16:24,840
In fact, because of that, we've
been able to take Pepper APIs

410
00:16:24,840 --> 00:16:27,870
and create JavaScript wrappers
for them called pepper.js

411
00:16:27,870 --> 00:16:29,540
and expose that
to and script it.

412
00:16:29,540 --> 00:16:33,430
So people can even target Pepper
as a cross-browser solution

413
00:16:33,430 --> 00:16:34,389
for their applications.

414
00:16:34,389 --> 00:16:36,429
COLT MCANLIS: Now see,
that's really interesting.

415
00:16:36,429 --> 00:16:38,150
So you're telling me
that &mdash; because one

416
00:16:38,150 --> 00:16:40,952
of the big vocal points about
the Native Client technology

417
00:16:40,952 --> 00:16:42,410
is that, sort of,
it's Chrome only.

418
00:16:42,410 --> 00:16:44,750
But you're telling me
that targeting the Pepper

419
00:16:44,750 --> 00:16:47,160
APIs and then this
pepper.js project sort of

420
00:16:47,160 --> 00:16:49,240
allows you to take your
application that you've

421
00:16:49,240 --> 00:16:51,156
targeted for Native
Client and actually get it

422
00:16:51,156 --> 00:16:53,532
into other browsers through
the JavaScript route.

423
00:16:53,532 --> 00:16:54,490
ERIK KAY: That's right.

424
00:16:54,490 --> 00:16:56,710
And it won't be
quite as performant

425
00:16:56,710 --> 00:16:59,729
as if you targeted
Native Client.

426
00:16:59,729 --> 00:17:01,770
You might not be able to
take advantage of things

427
00:17:01,770 --> 00:17:04,490
like threading, things
that aren't in JavaScript.

428
00:17:04,490 --> 00:17:06,690
But yes, you'll be able
to get the portability

429
00:17:06,690 --> 00:17:07,979
of cross-browser.

430
00:17:07,979 --> 00:17:09,520
COLT MCANLIS: And
that's really cool.

431
00:17:09,520 --> 00:17:11,470
It's a complex web,
so I'm glad that this

432
00:17:11,470 --> 00:17:14,190
is sort of added to the project.

433
00:17:14,190 --> 00:17:16,319
So talk about this
a little bit more.

434
00:17:16,319 --> 00:17:19,432
When we talk about
accessing native resources,

435
00:17:19,432 --> 00:17:20,890
one of the big ways
that developers

436
00:17:20,890 --> 00:17:22,806
have been approaching
this problem for a while

437
00:17:22,806 --> 00:17:24,839
has been with
NPAPI-based plug-ins.

438
00:17:24,839 --> 00:17:26,980
And recently, it was
announced that we're

439
00:17:26,980 --> 00:17:28,079
going to depreciate those.

440
00:17:28,079 --> 00:17:30,740
So can you talk a little
bit more about that decision

441
00:17:30,740 --> 00:17:34,825
and whether &mdash; is NaCl a viable
solution for these developers?

442
00:17:34,825 --> 00:17:35,700
ERIK KAY: Absolutely.

443
00:17:35,700 --> 00:17:39,880
So as I mentioned
before, NaCl is

444
00:17:39,880 --> 00:17:42,920
sandboxed from the
underlying operating system.

445
00:17:42,920 --> 00:17:45,260
NPAPI is sort of the opposite.

446
00:17:45,260 --> 00:17:51,550
NPAPI was intentionally designed
to give web developers access

447
00:17:51,550 --> 00:17:53,252
to the underlying
operating system.

448
00:17:53,252 --> 00:17:54,710
Now what that means,
unfortunately,

449
00:17:54,710 --> 00:17:57,270
is it means there's no
security guarantees of it.

450
00:17:57,270 --> 00:17:59,990
And so that means that if
the plug-in has any security

451
00:17:59,990 --> 00:18:02,970
vulnerabilities, any web page
can take advantage of those,

452
00:18:02,970 --> 00:18:04,100
can exploit those.

453
00:18:04,100 --> 00:18:07,580
And as a result, it turns out
that plug-ins have historically

454
00:18:07,580 --> 00:18:11,560
been the number one source of
web browser vulnerabilities.

455
00:18:11,560 --> 00:18:16,640
By closing up, by
deprecating NPAPI in Chrome,

456
00:18:16,640 --> 00:18:20,230
we're getting rid of that
one last big security hole

457
00:18:20,230 --> 00:18:21,480
that has been sitting there.

458
00:18:21,480 --> 00:18:23,939
COLT MCANLIS: And so that was
always the scary part, right?

459
00:18:23,939 --> 00:18:25,396
ERIK KAY: That was
always the goal.

460
00:18:25,396 --> 00:18:27,150
And it's why we
developed Pepper.

461
00:18:27,150 --> 00:18:33,360
It's why we have built-in Flash
using Pepper and a PDF Reader

462
00:18:33,360 --> 00:18:34,350
using Pepper.

463
00:18:34,350 --> 00:18:37,970
Those are built into Chrome so
that we sandboxed those first.

464
00:18:37,970 --> 00:18:40,000
And now this is just
closing down the others.

465
00:18:40,000 --> 00:18:43,350
And so if you're an
NPAPI developer today,

466
00:18:43,350 --> 00:18:46,650
NaCl can be used
as a replacement,

467
00:18:46,650 --> 00:18:49,450
as long as you're not trying to
access un-sandboxed resources

468
00:18:49,450 --> 00:18:50,640
in the operating system.

469
00:18:50,640 --> 00:18:52,740
So if what you're
doing is using this

470
00:18:52,740 --> 00:18:55,840
as a way to bring
native code to the web,

471
00:18:55,840 --> 00:18:57,240
then NaCl is what you want.

472
00:18:57,240 --> 00:18:59,705
If what you wanted was
direct, un-sandboxed access

473
00:18:59,705 --> 00:19:01,580
to the operating system,
unfortunately, we're

474
00:19:01,580 --> 00:19:02,714
closing that up now.

475
00:19:02,714 --> 00:19:04,630
COLT MCANLIS: I think
this is the right thing.

476
00:19:04,630 --> 00:19:07,950
The web should be about
getting information and about

477
00:19:07,950 --> 00:19:11,157
trading ideas and
finding what you need.

478
00:19:11,157 --> 00:19:13,240
You shouldn't have to walk
into that area of being

479
00:19:13,240 --> 00:19:15,310
afraid to click on a link.

480
00:19:15,310 --> 00:19:16,680
That's not the web you want.

481
00:19:16,680 --> 00:19:18,360
You want free
information exchange.

482
00:19:18,360 --> 00:19:20,060
So listen, this is
fantastic stuff.

483
00:19:20,060 --> 00:19:21,560
We're talking about
big vision stuff

484
00:19:21,560 --> 00:19:23,890
here, changing security
models on the web and the way

485
00:19:23,890 --> 00:19:25,890
languages and the way
developers look at things.

486
00:19:25,890 --> 00:19:28,020
So Molly, give us the vision.

487
00:19:28,020 --> 00:19:29,956
What's next for the
Native Client project?

488
00:19:29,956 --> 00:19:31,580
What's the six month,
eight month ramp?

489
00:19:31,580 --> 00:19:33,184
What can developers
be excited about?

490
00:19:33,184 --> 00:19:34,600
MOLLY MACKINLAY:
Absolutely, Colt.

491
00:19:34,600 --> 00:19:38,222
So we have some cool new
stuff right out the door.

492
00:19:38,222 --> 00:19:42,070
We want to get things like C++
exception handling in there.

493
00:19:42,070 --> 00:19:44,560
It's something that, talking
to our developer community,

494
00:19:44,560 --> 00:19:47,640
was something that they loved
about the Native Client project

495
00:19:47,640 --> 00:19:49,640
and they want in Portable
Native Client as well.

496
00:19:49,640 --> 00:19:51,730
And so we're working on,
right out of the gate,

497
00:19:51,730 --> 00:19:54,027
adding that as
quickly as we can.

498
00:19:54,027 --> 00:19:56,360
A big thing that we're thinking
about as we move forward

499
00:19:56,360 --> 00:19:57,200
is performance.

500
00:19:57,200 --> 00:20:00,889
We want the load time, when
you load a Native Client

501
00:20:00,889 --> 00:20:02,930
and Portable Native Client
application in a page,

502
00:20:02,930 --> 00:20:05,180
that translation time to be
as small as we can get it.

503
00:20:05,180 --> 00:20:07,840
And so we're working on
decreasing that as we speak.

504
00:20:07,840 --> 00:20:11,330
Another thing is the size of a
Portable Native Client module.

505
00:20:11,330 --> 00:20:13,550
We want to decrease
that, optimize

506
00:20:13,550 --> 00:20:16,840
every little last
megabyte that we can

507
00:20:16,840 --> 00:20:20,100
and make sure that that's
as small as we can get it.

508
00:20:20,100 --> 00:20:22,300
And finally, moving forward,
one of the big things

509
00:20:22,300 --> 00:20:24,600
we want to work on is the
debugging experience, making

510
00:20:24,600 --> 00:20:26,900
sure that we're really
receptive to our developers,

511
00:20:26,900 --> 00:20:29,610
hear their pain points,
and try and optimize

512
00:20:29,610 --> 00:20:32,450
for their development
suite and how

513
00:20:32,450 --> 00:20:34,560
they go about making a
Native Client application,

514
00:20:34,560 --> 00:20:37,315
so that's as smooth and
hiccup-free as we can get.

515
00:20:37,315 --> 00:20:38,940
COLT MCANLIS: That's
good, that's good.

516
00:20:38,940 --> 00:20:41,610
So it sounds like lots of good
things have already been done.

517
00:20:41,610 --> 00:20:43,540
Amazing technology,
really trying

518
00:20:43,540 --> 00:20:44,790
to change the face of the web.

519
00:20:44,790 --> 00:20:45,860
And so we've got
a couple questions

520
00:20:45,860 --> 00:20:47,484
that I want to get
to here in a minute.

521
00:20:47,484 --> 00:20:50,324
But before I give the masses
their shot at you guys,

522
00:20:50,324 --> 00:20:51,990
I got a question,
because this is really

523
00:20:51,990 --> 00:20:53,310
one of the things I want.

524
00:20:53,310 --> 00:20:54,820
When is NaCl coming to mobile?

525
00:20:54,820 --> 00:20:57,660
That seems like the perfect
melding of these two worlds.

526
00:20:57,660 --> 00:20:59,410
Can you talk about
that, anybody?

527
00:20:59,410 --> 00:21:01,330
ERIK KAY: So we've been
focused on desktop.

528
00:21:01,330 --> 00:21:03,496
So it's a little early to
talk about anything there.

529
00:21:03,496 --> 00:21:04,154
But stay tuned.

530
00:21:04,154 --> 00:21:04,862
COLT MCANLIS: OK.

531
00:21:04,862 --> 00:21:05,280
I like that.

532
00:21:05,280 --> 00:21:05,930
I'll take that.

533
00:21:05,930 --> 00:21:06,600
All right.

534
00:21:06,600 --> 00:21:08,730
Now the masses can get
their shot at you guys.

535
00:21:08,730 --> 00:21:10,330
So let's take a look
at our questions

536
00:21:10,330 --> 00:21:11,913
that we opened up
earlier in the week.

537
00:21:11,913 --> 00:21:14,450
So first one, are
there any plans

538
00:21:14,450 --> 00:21:16,530
to have Portable Native
Client communicate

539
00:21:16,530 --> 00:21:20,840
to the browser via JavaScript
APIs, like asm.js does,

540
00:21:20,840 --> 00:21:24,042
as opposed to the
Pepper plug-in APIs?

541
00:21:24,042 --> 00:21:26,500
MOLLY MACKINLAY: All right, so
I can jump on this at first,

542
00:21:26,500 --> 00:21:29,610
and you guys can hop
in with your pieces.

543
00:21:29,610 --> 00:21:34,130
We don't currently have any
plans to have a Native Client

544
00:21:34,130 --> 00:21:37,000
application talk
directly to JavaScript.

545
00:21:37,000 --> 00:21:39,970
I think Erik talked a little
bit about pepper.js earlier on

546
00:21:39,970 --> 00:21:42,496
and how that ties up with
the JavaScript libraries.

547
00:21:42,496 --> 00:21:43,995
But for a Native
Client application,

548
00:21:43,995 --> 00:21:46,190
when you have native code
that wants to communicate,

549
00:21:46,190 --> 00:21:48,710
we really do want to route
it through a secure API

550
00:21:48,710 --> 00:21:51,730
that we can make sure it's not
going to do anything malicious,

551
00:21:51,730 --> 00:21:54,210
and we can contain that access.

552
00:21:54,210 --> 00:21:56,800
And so really, what
the Pepper APIs do

553
00:21:56,800 --> 00:21:59,990
is connect up with the
same sort of back end

554
00:21:59,990 --> 00:22:02,070
fundamentals of the
JavaScript APIs.

555
00:22:02,070 --> 00:22:04,990
And so as we add functionality
to the Pepper APIs,

556
00:22:04,990 --> 00:22:08,580
that sort of coverage
of the APIs available

557
00:22:08,580 --> 00:22:09,740
is going to increase.

558
00:22:09,740 --> 00:22:11,480
So we don't have
any plans of letting

559
00:22:11,480 --> 00:22:15,516
JavaScript &mdash; direct
JavaScript API access.

560
00:22:15,516 --> 00:22:17,640
DAVID SEHR: To build on
that just a little bit, one

561
00:22:17,640 --> 00:22:19,670
of the design goals
of the Pepper APIs

562
00:22:19,670 --> 00:22:24,430
was actually to provide
a securable and smooth

563
00:22:24,430 --> 00:22:27,600
interacting with the browser
experience for plug-ins.

564
00:22:27,600 --> 00:22:29,930
Actually, one of the
things that plug-ins &mdash; Erik

565
00:22:29,930 --> 00:22:32,070
didn't talk about this
with NPAPI, et cetera.

566
00:22:32,070 --> 00:22:34,340
One of the constant
complaints was,

567
00:22:34,340 --> 00:22:36,010
gee, when the plug-in
does something

568
00:22:36,010 --> 00:22:37,880
that ties up the
JavaScript and makes

569
00:22:37,880 --> 00:22:40,170
for an awkward experience
in the browser.

570
00:22:40,170 --> 00:22:42,490
In the foreground, the
JavaScript is not responding.

571
00:22:42,490 --> 00:22:44,031
You get that nasty
little pop-up that

572
00:22:44,031 --> 00:22:46,610
says JavaScript
unresponsive or whatever.

573
00:22:46,610 --> 00:22:50,650
So PPAPI was designed
with that sort

574
00:22:50,650 --> 00:22:52,420
of jank-free experience in mind.

575
00:22:52,420 --> 00:22:55,946
And also, having a separate
process that actually you're

576
00:22:55,946 --> 00:22:57,320
running the native
code in is yet

577
00:22:57,320 --> 00:23:00,200
another layer of
securing the application.

578
00:23:00,200 --> 00:23:04,020
We really like the fact
that it's a separate process

579
00:23:04,020 --> 00:23:06,204
and that if that
process crashes,

580
00:23:06,204 --> 00:23:07,620
it doesn't take
down the renderer.

581
00:23:07,620 --> 00:23:09,620
It doesn't cause some of
the awkward experiences

582
00:23:09,620 --> 00:23:12,017
that people have come
to see with plug-ins.

583
00:23:12,017 --> 00:23:14,100
COLT MCANLIS: Now answer
this really quick as sort

584
00:23:14,100 --> 00:23:15,660
of a follow-up to that.

585
00:23:15,660 --> 00:23:20,840
So the question was like, asm.js
interacting with the browser.

586
00:23:20,840 --> 00:23:22,710
That's standard
JavaScript, right?

587
00:23:22,710 --> 00:23:24,280
It's not really
accessing anything

588
00:23:24,280 --> 00:23:26,250
that JavaScript's not exposing.

589
00:23:26,250 --> 00:23:27,580
It's not doing magic, right?

590
00:23:27,580 --> 00:23:28,670
Or am I mis &mdash;

591
00:23:28,670 --> 00:23:29,020
DAVID SEHR: No, that's right.

592
00:23:29,020 --> 00:23:30,210
It's just a subset
of JavaScript.

593
00:23:30,210 --> 00:23:30,918
COLT MCANLIS: OK.

594
00:23:30,918 --> 00:23:33,820
And currently, NaCl actually
can communicate back

595
00:23:33,820 --> 00:23:36,250
to JavaScript
through postMessage.

596
00:23:36,250 --> 00:23:38,084
So there is some
communication there, right?

597
00:23:38,084 --> 00:23:39,124
DAVID SEHR: That's right.

598
00:23:39,124 --> 00:23:40,741
COLT MCANLIS: Interesting, OK.

599
00:23:40,741 --> 00:23:41,240
Good.

600
00:23:41,240 --> 00:23:44,290
So number two, are there any
performance considerations

601
00:23:44,290 --> 00:23:46,210
that developers should
take into account when

602
00:23:46,210 --> 00:23:49,509
using PNaCl versus the old,
static compiled tool chains?

603
00:23:49,509 --> 00:23:52,050
DAVID SEHR: There are a couple
of performance considerations.

604
00:23:52,050 --> 00:23:55,140
Some of them are longer
term, and a couple of them

605
00:23:55,140 --> 00:23:57,580
we will be phasing
out as concerns

606
00:23:57,580 --> 00:23:59,240
over the next few releases.

607
00:23:59,240 --> 00:24:01,446
So first of all,
Portable Native Client

608
00:24:01,446 --> 00:24:02,570
is intended to be portable.

609
00:24:02,570 --> 00:24:05,130
So if you've used assembly
code, if you've got .s files

610
00:24:05,130 --> 00:24:07,730
in your build, or you've
got inline assembly code,

611
00:24:07,730 --> 00:24:10,830
these are things that are
inherently non-portable.

612
00:24:10,830 --> 00:24:13,270
So if you hand-coded
assembly code,

613
00:24:13,270 --> 00:24:15,200
you're going to need
to find ways to do that

614
00:24:15,200 --> 00:24:19,990
otherwise or not pick Portal
Native Client as the approach.

615
00:24:19,990 --> 00:24:23,400
A second and something we're
working to phase out is,

616
00:24:23,400 --> 00:24:26,110
for instance, some of the things
people were doing with inline

617
00:24:26,110 --> 00:24:30,534
assembly or with .s files was
access to SIMD instructions,

618
00:24:30,534 --> 00:24:32,450
vector instructions to
do all kinds of things,

619
00:24:32,450 --> 00:24:35,405
appear in every successive
generation of most hardware

620
00:24:35,405 --> 00:24:37,280
vendors' products.

621
00:24:37,280 --> 00:24:40,210
We're going to be adding
SIMD instruction support

622
00:24:40,210 --> 00:24:43,246
to the existing
set of performance

623
00:24:43,246 --> 00:24:45,120
features of Portable
Native Client over time.

624
00:24:45,120 --> 00:24:47,980
But at this point,
if you're expecting

625
00:24:47,980 --> 00:24:49,560
to be able to use
SIMD instructions,

626
00:24:49,560 --> 00:24:51,220
you'll probably need to wait.

627
00:24:51,220 --> 00:24:51,880
COLT MCANLIS: And so
I've got to tell you,

628
00:24:51,880 --> 00:24:54,590
I'm glad that SIMD's coming,
because that's really

629
00:24:54,590 --> 00:24:57,950
the thing that took my hair away
back in the games industry was

630
00:24:57,950 --> 00:25:00,849
trying to optimize the
right SIMD instructions

631
00:25:00,849 --> 00:25:03,140
for the architecture and get
the right thing like that.

632
00:25:03,140 --> 00:25:03,640
So great.

633
00:25:03,640 --> 00:25:06,290
It's good that my blood
pressure can go back up again.

634
00:25:06,290 --> 00:25:08,507
My doctor's going to
really appreciate that.

635
00:25:08,507 --> 00:25:09,090
Next question.

636
00:25:09,090 --> 00:25:10,880
So how much effort
would take to port

637
00:25:10,880 --> 00:25:16,340
an app built using Native Client
to Portable Native Client?

638
00:25:16,340 --> 00:25:17,990
DAVID SEHR: I
think the good news

639
00:25:17,990 --> 00:25:21,920
there is if you've already
done the work to port to PPAPI,

640
00:25:21,920 --> 00:25:25,920
unless you're using just in time
compilation or inline assembly,

641
00:25:25,920 --> 00:25:28,220
the port should be very
simple, should be almost as

642
00:25:28,220 --> 00:25:30,640
simple as just
switching the compiler

643
00:25:30,640 --> 00:25:33,570
flag for your
makefiles, or whatever

644
00:25:33,570 --> 00:25:35,155
build environment you use.

645
00:25:35,155 --> 00:25:36,780
If you're using some
of those features,

646
00:25:36,780 --> 00:25:39,290
then you will have to do
some work to get around that.

647
00:25:39,290 --> 00:25:42,545
COLT MCANLIS: And so most
of the NaCl tool chain,

648
00:25:42,545 --> 00:25:44,130
does it insulate you from this?

649
00:25:44,130 --> 00:25:46,184
Is it two separate
tool chains, or how

650
00:25:46,184 --> 00:25:47,600
would a developer
go through that?

651
00:25:47,600 --> 00:25:50,700
ERIK KAY: Well, in the
SDK &mdash; we have the NaCl SDK

652
00:25:50,700 --> 00:25:53,350
is the set of tools you
download to build Native Client

653
00:25:53,350 --> 00:25:54,120
applications.

654
00:25:54,120 --> 00:25:57,590
And the SDK does its best
to insulate you from this.

655
00:25:57,590 --> 00:25:59,920
So it's just a
config file change

656
00:25:59,920 --> 00:26:02,994
when you build to target
PNaCl versus to target NaCl.

657
00:26:02,994 --> 00:26:03,785
COLT MCANLIS: Good.

658
00:26:03,785 --> 00:26:05,170
So it's pretty seamless, right?

659
00:26:05,170 --> 00:26:07,400
I mean, obviously, the
devil's in the details,

660
00:26:07,400 --> 00:26:11,350
but that's for
programmers to deal with.

661
00:26:11,350 --> 00:26:13,940
So is there a public
timeline for allowing

662
00:26:13,940 --> 00:26:16,249
Native Client across
all web pages,

663
00:26:16,249 --> 00:26:18,540
not just apps distributed
through the Chrome Web Store?

664
00:26:18,540 --> 00:26:20,720
I think we've kind of tackled
this pretty well, right?

665
00:26:20,720 --> 00:26:21,800
ERIK KAY: That is
Portable Native Client.

666
00:26:21,800 --> 00:26:23,550
COLT MCANLIS:
That's shipping now.

667
00:26:23,550 --> 00:26:27,610
Go play with it
immediately at this moment.

668
00:26:27,610 --> 00:26:28,110
That's good.

669
00:26:28,110 --> 00:26:29,860
I love seeing a question,
and it's like, no, yeah,

670
00:26:29,860 --> 00:26:30,780
we're good there.

671
00:26:30,780 --> 00:26:33,550
No curveballs there.

672
00:26:33,550 --> 00:26:34,380
Here's another one.

673
00:26:34,380 --> 00:26:38,976
When will vector data types
and SIMD be supported in PNaCl?

674
00:26:38,976 --> 00:26:41,350
DAVID SEHR: We're actively
working on that at the moment.

675
00:26:41,350 --> 00:26:44,810
In fact, we'll publish some
data here fairly shortly

676
00:26:44,810 --> 00:26:47,270
of what we're proposing
as the first set of things

677
00:26:47,270 --> 00:26:48,245
that will be supported.

678
00:26:48,245 --> 00:26:50,196
We don't have the
dates exactly set yet,

679
00:26:50,196 --> 00:26:52,182
but we're working
on it as we speak.

680
00:26:52,182 --> 00:26:53,890
COLT MCANLIS: Add the
"lower Colt's blood

681
00:26:53,890 --> 00:26:54,820
pressure intrinsic."

682
00:26:54,820 --> 00:26:56,290
I'd appreciate that.

683
00:26:56,290 --> 00:26:57,520
Final question that we're
going to have for today

684
00:26:57,520 --> 00:26:59,270
because I think we're
running out of time.

685
00:26:59,270 --> 00:27:02,390
Will the TCP socket API
be available to Portable

686
00:27:02,390 --> 00:27:05,710
Native Client applications
being served via a website?

687
00:27:05,710 --> 00:27:08,980
ERIK KAY: So no, and there's
a good reason for that.

688
00:27:08,980 --> 00:27:12,110
As we mentioned before,
the whole point of this

689
00:27:12,110 --> 00:27:15,430
is to have the same
capabilities as web pages.

690
00:27:15,430 --> 00:27:18,570
So if we come up with a
security model for the web that

691
00:27:18,570 --> 00:27:22,260
would allow us to have
TCP exposed to JavaScript,

692
00:27:22,260 --> 00:27:25,090
then we would expose it
to Portable Native Client.

693
00:27:25,090 --> 00:27:27,510
But since we don't, since
the security model of the web

694
00:27:27,510 --> 00:27:29,900
doesn't allow that
today, we're not

695
00:27:29,900 --> 00:27:33,470
exposing any additional features
like that to Portable Native

696
00:27:33,470 --> 00:27:33,970
Client.

697
00:27:33,970 --> 00:27:35,512
COLT MCANLIS: Now
do they have access

698
00:27:35,512 --> 00:27:37,178
to some of these
features &mdash; because I've

699
00:27:37,178 --> 00:27:39,320
read the documentation &mdash;
in standard Native Client,

700
00:27:39,320 --> 00:27:41,320
right, distributed through
the Chrome Web Store?

701
00:27:41,320 --> 00:27:43,530
ERIK KAY: Well, if
you use packaged apps,

702
00:27:43,530 --> 00:27:46,470
you can use Portable Native
Client or Native Client.

703
00:27:46,470 --> 00:27:48,530
And then, yes, you
can use the packaged

704
00:27:48,530 --> 00:27:51,410
apps APIs to do
networking there.

705
00:27:51,410 --> 00:27:54,666
But since the questioner
asked about on a website,

706
00:27:54,666 --> 00:27:55,290
as opposed to &mdash;

707
00:27:55,290 --> 00:27:56,225
COLT MCANLIS: On
a website, yeah.

708
00:27:56,225 --> 00:27:57,520
ERIK KAY: In a website, no.

709
00:27:57,520 --> 00:27:58,620
In a packaged app, yes.

710
00:27:58,620 --> 00:28:00,120
COLT MCANLIS: Awesome.

711
00:28:00,120 --> 00:28:01,555
Well, hey, listen,
thank you guys

712
00:28:01,555 --> 00:28:03,930
so much for taking the time
to talk about Portable Native

713
00:28:03,930 --> 00:28:04,570
Client today.

714
00:28:04,570 --> 00:28:05,790
It's an exciting product.

715
00:28:05,790 --> 00:28:07,956
I'm really glad to have
been associated for so long.

716
00:28:07,956 --> 00:28:10,380
So hey, if you're
watching the stream,

717
00:28:10,380 --> 00:28:14,040
and you want to know more
about Portable Native Client,

718
00:28:14,040 --> 00:28:15,884
make sure you visit GoNaCl.com.

719
00:28:15,884 --> 00:28:17,300
That's going to
be the place where

720
00:28:17,300 --> 00:28:18,966
you get all of your
information, stay up

721
00:28:18,966 --> 00:28:21,990
to date with announcements,
news, demos, everything.

722
00:28:21,990 --> 00:28:22,910
Hit that.

723
00:28:22,910 --> 00:28:23,910
My name is Colt McAnlis.

724
00:28:23,910 --> 00:28:27,040
Thank you for staying tuned
for another great episode

725
00:28:27,040 --> 00:28:28,990
of "Google Developers Live."

726
00:28:28,990 --> 00:28:30,740
Thanks.

727
00:28:30,740 --> 00:28:34,328

