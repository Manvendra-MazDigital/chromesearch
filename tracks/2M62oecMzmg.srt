1
00:00:00,000 --> 00:00:10,120

2
00:00:10,120 --> 00:00:10,510
JOE MARINI: All right.

3
00:00:10,510 --> 00:00:11,140
Hello everyone.

4
00:00:11,140 --> 00:00:12,630
This is Joe Marini.

5
00:00:12,630 --> 00:00:16,770
Welcome to another edition of
Chrome Apps Office Hours.

6
00:00:16,770 --> 00:00:18,760
Today I thought we would
do something

7
00:00:18,760 --> 00:00:19,600
a little bit different.

8
00:00:19,600 --> 00:00:21,700
If you've been following along,
you probably noticed

9
00:00:21,700 --> 00:00:24,030
that Chrome packaged apps have
been getting a lot of

10
00:00:24,030 --> 00:00:26,220
attention in the press lately.

11
00:00:26,220 --> 00:00:29,730
We recently turned on our
initial roll out of Chrome

12
00:00:29,730 --> 00:00:33,290
packaged apps in the Chrome Web
Store, if you're on the

13
00:00:33,290 --> 00:00:35,970
dev channel on Windows
or Chrome OS.

14
00:00:35,970 --> 00:00:38,030
And so the press took notice.

15
00:00:38,030 --> 00:00:41,400
And as a result, we've been
getting a lot of attention

16
00:00:41,400 --> 00:00:44,470
from some new developers, who
want to learn about what

17
00:00:44,470 --> 00:00:46,130
Chrome packaged apps are.

18
00:00:46,130 --> 00:00:48,720
So the last several shows we've
done have been some

19
00:00:48,720 --> 00:00:50,510
relatively advanced topics.

20
00:00:50,510 --> 00:00:51,740
And I thought today
I'd do something

21
00:00:51,740 --> 00:00:53,210
a little bit different.

22
00:00:53,210 --> 00:00:55,860
And maybe do a little
bit of a rewind.

23
00:00:55,860 --> 00:00:58,770
And do a quick intro of packaged
apps and their

24
00:00:58,770 --> 00:01:02,740
structure for some of the newer
developers out there.

25
00:01:02,740 --> 00:01:05,480
If you have any questions of the
stuff that I'm going to be

26
00:01:05,480 --> 00:01:09,620
showing you, go ahead and post
them in the comments section

27
00:01:09,620 --> 00:01:11,010
of the tab there.

28
00:01:11,010 --> 00:01:13,180
And we will monitor the comments
to see if there are

29
00:01:13,180 --> 00:01:14,290
any questions.

30
00:01:14,290 --> 00:01:15,900
Not a very long show today.

31
00:01:15,900 --> 00:01:17,720
So if you have any questions,
please get them in.

32
00:01:17,720 --> 00:01:19,910
And we will get them answered.

33
00:01:19,910 --> 00:01:23,640
Let's jump over to the diagrams
here and show you a

34
00:01:23,640 --> 00:01:26,850
little bit about packaged apps
and what their structure is.

35
00:01:26,850 --> 00:01:32,060
So packaged apps are built using
HTML5, just like regular

36
00:01:32,060 --> 00:01:33,760
web apps are.

37
00:01:33,760 --> 00:01:36,670
So to do that, you just
build your content as

38
00:01:36,670 --> 00:01:37,720
you normally would.

39
00:01:37,720 --> 00:01:40,430
You'd build your
HTML, your CSS.

40
00:01:40,430 --> 00:01:41,850
You've got your JavaScript
code.

41
00:01:41,850 --> 00:01:45,610
Whatever other assets that
comprise your app.

42
00:01:45,610 --> 00:01:46,850
You don't do anything
really different.

43
00:01:46,850 --> 00:01:48,610
You just build your
app normally.

44
00:01:48,610 --> 00:01:50,520
There's a few things you
have to worry about.

45
00:01:50,520 --> 00:01:53,490
You can't do things like inline
JavaScript, like in

46
00:01:53,490 --> 00:01:54,280
your script tags.

47
00:01:54,280 --> 00:01:57,710
You can't use inline event
handlers, things like that.

48
00:01:57,710 --> 00:02:00,910
But for the most part, you just
build the web app just

49
00:02:00,910 --> 00:02:02,220
the way that you always would.

50
00:02:02,220 --> 00:02:05,130
Now on top of that, packaged
apps, you just simply layer

51
00:02:05,130 --> 00:02:06,910
some additional information
on top of them.

52
00:02:06,910 --> 00:02:10,720
So for example, we ask you to
put some infrastructure around

53
00:02:10,720 --> 00:02:12,290
your existing web code.

54
00:02:12,290 --> 00:02:15,760
We ask you to make a
manifest.json file.

55
00:02:15,760 --> 00:02:19,760
And that's just a JSON code
structure that defines the

56
00:02:19,760 --> 00:02:21,510
information that the
platform needs.

57
00:02:21,510 --> 00:02:25,340
And there's something called a
background HTML file and a

58
00:02:25,340 --> 00:02:26,170
JavaScript file.

59
00:02:26,170 --> 00:02:29,630
I've got it called main.js
here, but you can call it

60
00:02:29,630 --> 00:02:31,110
pretty much whatever you want.

61
00:02:31,110 --> 00:02:34,870
So this infrastructure is what
tells Chrome that this

62
00:02:34,870 --> 00:02:37,690
particular application
is a packaged app.

63
00:02:37,690 --> 00:02:41,990
And provides the necessary
information for the runtime to

64
00:02:41,990 --> 00:02:45,090
be able to run the apps
and read it's

65
00:02:45,090 --> 00:02:46,780
permissions, and so on.

66
00:02:46,780 --> 00:02:50,960
So the manifest.json file
as I mentioned, it's a

67
00:02:50,960 --> 00:02:53,010
straightforward JSON
structure.

68
00:02:53,010 --> 00:02:56,400
And in the JSON code, you do
things like specify what the

69
00:02:56,400 --> 00:02:59,740
name of the app is, its version,
what permissions it

70
00:02:59,740 --> 00:03:02,030
has, that kind of stuff.

71
00:03:02,030 --> 00:03:05,570
The main.js file is a little
bit different.

72
00:03:05,570 --> 00:03:10,380
It simply defines the entry
points into the application.

73
00:03:10,380 --> 00:03:12,160
So this is where you
do things like

74
00:03:12,160 --> 00:03:14,450
register your event handlers.

75
00:03:14,450 --> 00:03:17,170
And create Windows.

76
00:03:17,170 --> 00:03:20,320
And so on and so forth.

77
00:03:20,320 --> 00:03:23,340
Now that we have an idea of what
the structure of packaged

78
00:03:23,340 --> 00:03:26,500
apps looks like, let's get out
of the slides here and jump

79
00:03:26,500 --> 00:03:28,030
over to some code.

80
00:03:28,030 --> 00:03:30,380
And if you want to follow
along with me, I'm just

81
00:03:30,380 --> 00:03:33,630
looking at the code that's
here on our Google Chrome

82
00:03:33,630 --> 00:03:35,310
GitHub repo.

83
00:03:35,310 --> 00:03:40,850
If you go to the
chrome-app-samples repo in our

84
00:03:40,850 --> 00:03:43,720
top level Google Chrome folder
there, you'll see what I'm

85
00:03:43,720 --> 00:03:44,690
talking about.

86
00:03:44,690 --> 00:03:46,950
I'm going to scroll
on down here.

87
00:03:46,950 --> 00:03:52,260
And I'm going to open up the
Hello World folder right here.

88
00:03:52,260 --> 00:03:55,150
And you can see, inside this
folder we've got some code.

89
00:03:55,150 --> 00:03:58,390
So I'm going to quickly open
up the manifest.json file

90
00:03:58,390 --> 00:04:00,720
here, so we can see what
its contents are.

91
00:04:00,720 --> 00:04:03,630
And this is intended to be
a really simple sample.

92
00:04:03,630 --> 00:04:06,070
So nothing too complex
is going on here.

93
00:04:06,070 --> 00:04:09,700
You can see that it specifies
a Manifest version.

94
00:04:09,700 --> 00:04:13,110
And the current version of
Manifest files is two.

95
00:04:13,110 --> 00:04:14,880
And there's the name
of the app, which

96
00:04:14,880 --> 00:04:16,390
happens to be Hello World.

97
00:04:16,390 --> 00:04:19,010
This version field right here
is for my purposes.

98
00:04:19,010 --> 00:04:20,630
This is the version of my app.

99
00:04:20,630 --> 00:04:23,960
And the Chrome Web Store uses
this field to figure out what

100
00:04:23,960 --> 00:04:27,430
the newest version of your app
is, so that it knows when it's

101
00:04:27,430 --> 00:04:29,250
doing an update check for
people who have your app

102
00:04:29,250 --> 00:04:32,570
installed, whether it needs to
push out and update or not.

103
00:04:32,570 --> 00:04:35,350
I happen to have a minimum
Chrome version specified here.

104
00:04:35,350 --> 00:04:38,500
So this is the minimum version
of Chrome that the user has to

105
00:04:38,500 --> 00:04:41,410
have installed in order
for this app to run.

106
00:04:41,410 --> 00:04:43,190
And there's an icon section.

107
00:04:43,190 --> 00:04:45,330
And down here is
an app section.

108
00:04:45,330 --> 00:04:47,710
And in the app section,
there's a field called

109
00:04:47,710 --> 00:04:48,680
Background.

110
00:04:48,680 --> 00:04:53,150
And here in the scripts
subfield, there's a main.js.

111
00:04:53,150 --> 00:04:55,420
I happen to call the
file main.js.

112
00:04:55,420 --> 00:04:57,310
You can call it whatever
you want.

113
00:04:57,310 --> 00:04:59,650
And I would normally host
this inside the

114
00:04:59,650 --> 00:05:01,460
background.html page.

115
00:05:01,460 --> 00:05:03,170
But that's actually optional.

116
00:05:03,170 --> 00:05:05,780
If you don't provide us one of
those, we'll just simply auto

117
00:05:05,780 --> 00:05:06,690
generate one for you.

118
00:05:06,690 --> 00:05:09,500
So you really only need the
manifest and the JavaScript

119
00:05:09,500 --> 00:05:12,540
file, which handles the
bootstrapping and other event

120
00:05:12,540 --> 00:05:15,690
handling of the app's
infrastructure.

121
00:05:15,690 --> 00:05:17,070
So that's the manifest file.

122
00:05:17,070 --> 00:05:21,858
Let's jump back out and take
a look at the main.js file.

123
00:05:21,858 --> 00:05:25,500
And I'll scroll down
the code here.

124
00:05:25,500 --> 00:05:29,090
So here in this JavaScript
file, the application is

125
00:05:29,090 --> 00:05:33,020
adding a listener for the
onLaunched event.

126
00:05:33,020 --> 00:05:36,890
The onLaunched event is on the
Chrome App runtime space.

127
00:05:36,890 --> 00:05:38,680
And the callback function right
here that's going to get

128
00:05:38,680 --> 00:05:43,090
called when the onLaunched event
fires is simply checking

129
00:05:43,090 --> 00:05:46,780
to see how big screen is, and
then deciding where to put the

130
00:05:46,780 --> 00:05:48,810
window it's about to create.

131
00:05:48,810 --> 00:05:51,020
And so it comes up with the
width and the height.

132
00:05:51,020 --> 00:05:52,450
Those are just hard coded.

133
00:05:52,450 --> 00:05:54,950
It uses the screen width and
screen height to center the

134
00:05:54,950 --> 00:05:56,380
window on the page.

135
00:05:56,380 --> 00:05:59,160
So I call Chrome app, and then
we have a window name space

136
00:05:59,160 --> 00:06:01,040
right here, .create.

137
00:06:01,040 --> 00:06:04,710
And that creates the window,
given the index.html page I'm

138
00:06:04,710 --> 00:06:06,480
going to use as the
main window.

139
00:06:06,480 --> 00:06:07,770
And then I give it
some properties.

140
00:06:07,770 --> 00:06:08,960
I give it some bounds.

141
00:06:08,960 --> 00:06:10,860
And you can see here that I'm
using the screen width and

142
00:06:10,860 --> 00:06:13,690
height to figure out where
the app is going to go.

143
00:06:13,690 --> 00:06:17,550
Now to test this out, what you
do as a developer is load up

144
00:06:17,550 --> 00:06:18,930
Chrome-- so start Chrome--

145
00:06:18,930 --> 00:06:23,620
and then go to the Extensions
tab in your Chrome settings.

146
00:06:23,620 --> 00:06:24,180
So down here--

147
00:06:24,180 --> 00:06:28,510
I'm doing this on a Pixel, but
you can get to this page

148
00:06:28,510 --> 00:06:30,380
easily on any one of
the platforms.

149
00:06:30,380 --> 00:06:32,000
So under Settings, I'm
going to click on

150
00:06:32,000 --> 00:06:33,540
the Extensions tab.

151
00:06:33,540 --> 00:06:35,980
And here in the Extensions
tab, you can see I've got

152
00:06:35,980 --> 00:06:37,710
Developer Mode turned
on here in the

153
00:06:37,710 --> 00:06:38,950
upper right hand corner.

154
00:06:38,950 --> 00:06:42,030
And once I turn Developer Mode
on, I'll get these buttons.

155
00:06:42,030 --> 00:06:45,080
Load Unpacked Extension, Packed
Extensions, so on.

156
00:06:45,080 --> 00:06:47,990
So if you click on Load Unpacked
Extension, you'll get

157
00:06:47,990 --> 00:06:50,710
a file dialogue that lets you
choose the application that

158
00:06:50,710 --> 00:06:52,560
you want to load to test.

159
00:06:52,560 --> 00:06:54,830
So I loaded up Hello
World right here.

160
00:06:54,830 --> 00:06:57,280
And there's a couple of ways I
can launch this to test it.

161
00:06:57,280 --> 00:06:59,740
I can click on the little
Launch link right here.

162
00:06:59,740 --> 00:07:03,300
Or I can go into my new
tab experience.

163
00:07:03,300 --> 00:07:05,120
Right here, I've got my new tab,
and I can scroll over to

164
00:07:05,120 --> 00:07:06,040
my installed apps.

165
00:07:06,040 --> 00:07:09,510
But because I'm on a Chrome OS
device that's got the latest

166
00:07:09,510 --> 00:07:13,440
version of Chrome running, and
I've got my launcher down here

167
00:07:13,440 --> 00:07:16,670
in the Chrome OS bar, my app
just shows up here in the

168
00:07:16,670 --> 00:07:18,030
launcher once I've loaded it.

169
00:07:18,030 --> 00:07:20,120
And it shows up this way
whether I've loaded it

170
00:07:20,120 --> 00:07:21,660
unpacked or whether I've
installed it from

171
00:07:21,660 --> 00:07:22,600
the Chrome Web Store.

172
00:07:22,600 --> 00:07:24,560
It's a really handy little
feature to be able to load

173
00:07:24,560 --> 00:07:27,160
these unpacked folders of code
while you're doing your

174
00:07:27,160 --> 00:07:29,230
iteration and testing.

175
00:07:29,230 --> 00:07:30,820
So I'll just go ahead
launch that app.

176
00:07:30,820 --> 00:07:32,150
And you can see that the
window comes up.

177
00:07:32,150 --> 00:07:34,200
It's centered on the
screen, and this is

178
00:07:34,200 --> 00:07:35,810
the Hello world example.

179
00:07:35,810 --> 00:07:37,400
So pretty straightforward
example.

180
00:07:37,400 --> 00:07:39,170
Let's take a look at something
that's a little bit more

181
00:07:39,170 --> 00:07:42,060
involved and actually requires
some permissions.

182
00:07:42,060 --> 00:07:45,720
So let's go back to the
samples on our GitHub.

183
00:07:45,720 --> 00:07:48,050
And this time I'm going
to go over to

184
00:07:48,050 --> 00:07:50,890
the file system example.

185
00:07:50,890 --> 00:07:52,930
So right here and file
system access.

186
00:07:52,930 --> 00:07:56,000
I'm going to click there
and we'll scroll down.

187
00:07:56,000 --> 00:08:01,100
Let's take a look at the
manifest JSON for this one.

188
00:08:01,100 --> 00:08:03,150
All right, we'll scroll
down a little bit.

189
00:08:03,150 --> 00:08:06,860
So you can see that this
manifest file is slightly more

190
00:08:06,860 --> 00:08:09,440
advanced than the one
for Hello World.

191
00:08:09,440 --> 00:08:13,410
The first properties are
all pretty similar.

192
00:08:13,410 --> 00:08:14,540
They're pretty standard,
actually.

193
00:08:14,540 --> 00:08:16,570
You give it a name,
and a version, and

194
00:08:16,570 --> 00:08:17,520
the Manifest version.

195
00:08:17,520 --> 00:08:19,280
Those are always there.

196
00:08:19,280 --> 00:08:22,130
And then down here, you can
see I've got a permissions

197
00:08:22,130 --> 00:08:23,460
field right here.

198
00:08:23,460 --> 00:08:25,970
Which is asking Chrome
for the permission

199
00:08:25,970 --> 00:08:27,220
to use a file system.

200
00:08:27,220 --> 00:08:30,470
And in this case, we want to
be able to write file data.

201
00:08:30,470 --> 00:08:32,909
And we also want to be able
to retain entries.

202
00:08:32,909 --> 00:08:37,730
So the Chrome runtime lets you
hold on to file entries that

203
00:08:37,730 --> 00:08:40,850
the user has previously opened
in your application.

204
00:08:40,850 --> 00:08:42,929
And this comes in handy when
you want to do things like

205
00:08:42,929 --> 00:08:47,350
implement a recently used
file menu, for example.

206
00:08:47,350 --> 00:08:50,890
And we're also asking for
access to the storage

207
00:08:50,890 --> 00:08:53,190
permission, so we can
use our sandbox

208
00:08:53,190 --> 00:08:55,710
storage to store files.

209
00:08:55,710 --> 00:08:58,120
There's also a File
Handlers field.

210
00:08:58,120 --> 00:09:01,650
And this is where we associate
file handler MIME types.

211
00:09:01,650 --> 00:09:03,930
And in this case, It's not
using file extensions.

212
00:09:03,930 --> 00:09:07,460
But you can also specify three,
or four, or whatever

213
00:09:07,460 --> 00:09:09,460
character file extensions.

214
00:09:09,460 --> 00:09:12,640
So that when the user wants
to open a file--

215
00:09:12,640 --> 00:09:14,220
either by double-clicking
on it, or

216
00:09:14,220 --> 00:09:15,500
right-clicking, whatever--

217
00:09:15,500 --> 00:09:18,170
the Chrome runtime knows that
your app is one of the

218
00:09:18,170 --> 00:09:21,120
potential candidates for
handling a file of that type.

219
00:09:21,120 --> 00:09:22,370
So slightly more advanced.

220
00:09:22,370 --> 00:09:27,470
In this case, it's actually
asking for permissions.

221
00:09:27,470 --> 00:09:31,160
Let's jump over to the
documentation for all this.

222
00:09:31,160 --> 00:09:34,640
The documentation for Chrome
packaged apps is on our

223
00:09:34,640 --> 00:09:38,740
developer.chrome.com/apps
site.

224
00:09:38,740 --> 00:09:41,160
And that will take you to this
welcome page right here.

225
00:09:41,160 --> 00:09:43,360
I'm going to click on this
link for "understand the

226
00:09:43,360 --> 00:09:46,650
architecture." So this page
explains all about how the

227
00:09:46,650 --> 00:09:48,870
architecture of Chrome
packaged apps works.

228
00:09:48,870 --> 00:09:51,830
It runs through the life
cycle, what kinds of

229
00:09:51,830 --> 00:09:52,540
events there are.

230
00:09:52,540 --> 00:09:54,280
It gives you a high
level overview.

231
00:09:54,280 --> 00:09:58,340
For more detailed information
on things like the structure

232
00:09:58,340 --> 00:10:01,300
and APIs that are available to
you as part of the overall

233
00:10:01,300 --> 00:10:04,280
life cycle and architecture of
your app, I'm going to scroll

234
00:10:04,280 --> 00:10:08,360
down here to the Chrome
JavaScript APIs link.

235
00:10:08,360 --> 00:10:14,720
And let's fire up the
app runtime docs.

236
00:10:14,720 --> 00:10:17,070
And you can see here, this is
where the documentation for

237
00:10:17,070 --> 00:10:20,090
some of the various runtime
related events are kept.

238
00:10:20,090 --> 00:10:22,810
So here's the one for the
onLaunched listener.

239
00:10:22,810 --> 00:10:24,860
There's also one for
onRestarted.

240
00:10:24,860 --> 00:10:29,750
So if your app has been
restarted because of an update

241
00:10:29,750 --> 00:10:30,760
or whatever.

242
00:10:30,760 --> 00:10:32,800
And you can see down here,
there's also various sample

243
00:10:32,800 --> 00:10:35,230
apps that show how to
use these events.

244
00:10:35,230 --> 00:10:39,010
So the Chrome runtime, the
name's basically used for

245
00:10:39,010 --> 00:10:42,810
handling typical life cycle
events in your application.

246
00:10:42,810 --> 00:10:45,130
And this area of the
documentation right here,

247
00:10:45,130 --> 00:10:47,700
actually, the Chrome APIs,
this is where all of the

248
00:10:47,700 --> 00:10:50,200
JavaScript APIs that are
specific to the Chrome

249
00:10:50,200 --> 00:10:51,800
platform are listed.

250
00:10:51,800 --> 00:10:53,780
So if you're new developer, you
need to understand this.

251
00:10:53,780 --> 00:10:58,710
We use HTML5 and related
JavaScript APIs wherever they

252
00:10:58,710 --> 00:11:00,470
provide a feature that
the platform needs.

253
00:11:00,470 --> 00:11:03,220
We don't try to invent new
things or reinvent the wheel

254
00:11:03,220 --> 00:11:04,440
if we don't have to.

255
00:11:04,440 --> 00:11:09,060
We then create Chrome API that
fill in various needs of the

256
00:11:09,060 --> 00:11:12,460
system where HTML doesn't
provide a solution.

257
00:11:12,460 --> 00:11:14,920
For example, we have the ability
to take advantage of

258
00:11:14,920 --> 00:11:16,860
Chrome's syncing architecture.

259
00:11:16,860 --> 00:11:19,050
If you've ever used Chrome on
multiple computers and you're

260
00:11:19,050 --> 00:11:22,640
signed in, you'll notice that
your bookmarks appear across

261
00:11:22,640 --> 00:11:24,150
various instances of Chrome.

262
00:11:24,150 --> 00:11:26,160
You, as a packaged app
developer, can take

263
00:11:26,160 --> 00:11:27,130
advantage of that.

264
00:11:27,130 --> 00:11:29,460
Now obviously, HTML doesn't
have a feature for that.

265
00:11:29,460 --> 00:11:30,530
That's a Chrome feature.

266
00:11:30,530 --> 00:11:33,360
So we provide a Chrome API.

267
00:11:33,360 --> 00:11:35,410
So that's a quick introduction
to the

268
00:11:35,410 --> 00:11:37,580
structure of packaged apps.

269
00:11:37,580 --> 00:11:39,880
I'm going to take a quick look
over at and stream to see if

270
00:11:39,880 --> 00:11:41,100
there are any questions.

271
00:11:41,100 --> 00:11:42,970
It doesn't appear
that there are.

272
00:11:42,970 --> 00:11:45,440
So if you do think of any,
you can always find me.

273
00:11:45,440 --> 00:11:47,350
I'm Joe Marie on G+.

274
00:11:47,350 --> 00:11:49,150
I'm also on Twitter,
Joe Marini.

275
00:11:49,150 --> 00:11:50,790
And you can always leave
the comments here

276
00:11:50,790 --> 00:11:52,190
in the YouTube tab.

277
00:11:52,190 --> 00:11:55,150
We monitor the forums
for questions.

278
00:11:55,150 --> 00:11:57,810
So please feel free to leave
questions, and we'll respond

279
00:11:57,810 --> 00:11:58,990
to them as they come in.

280
00:11:58,990 --> 00:12:01,360
See you next time on Chrome
Apps Office hours

281
00:12:01,360 --> 00:12:02,070
for packaged apps.

282
00:12:02,070 --> 00:12:05,115
Hope you enjoyed the
introduction to the packaged

283
00:12:05,115 --> 00:12:07,020
apps structure, all you
knew developers.

284
00:12:07,020 --> 00:12:08,450
So get out there and
start building some

285
00:12:08,450 --> 00:12:09,700
great packaged apps.

286
00:12:09,700 --> 00:12:16,675

