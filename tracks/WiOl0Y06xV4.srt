1
00:00:00,000 --> 00:00:08,340

2
00:00:08,340 --> 00:00:10,930
So, yeah, I'm going to
try out something

3
00:00:10,930 --> 00:00:12,440
a little bit different.

4
00:00:12,440 --> 00:00:14,040
And it kind of depends
on the Wi-Fi working.

5
00:00:14,040 --> 00:00:15,050
It's been a bit of
a nightmare.

6
00:00:15,050 --> 00:00:16,900
It's probably a stupid idea.

7
00:00:16,900 --> 00:00:17,590
So let's find out.

8
00:00:17,590 --> 00:00:19,560
We're going to do an
interactive quiz.

9
00:00:19,560 --> 00:00:20,990
These slides are going
to be interactive.

10
00:00:20,990 --> 00:00:24,210
So, if you don't have a
web-enabled device in front of

11
00:00:24,210 --> 00:00:26,250
you now, get it in
front of you.

12
00:00:26,250 --> 00:00:27,550
A laptop or a phone.

13
00:00:27,550 --> 00:00:28,770
It will work on both.

14
00:00:28,770 --> 00:00:31,460
But make sure you've
got that ready.

15
00:00:31,460 --> 00:00:33,900
It's a quiz, but it's really
just an excuse to string

16
00:00:33,900 --> 00:00:37,140
together some bits of browser
trivia, to relate it to

17
00:00:37,140 --> 00:00:38,830
performance stuff.

18
00:00:38,830 --> 00:00:41,300
So what you'll need to do is get
on the Google guest Wi-Fi.

19
00:00:41,300 --> 00:00:43,850
That's the SSID there.

20
00:00:43,850 --> 00:00:46,190
And then, if you go to this
lovely URL, which is my laptop

21
00:00:46,190 --> 00:00:51,720
here, so that's 192.168.156.69
port 3000.

22
00:00:51,720 --> 00:00:52,580
And there's a clue.

23
00:00:52,580 --> 00:00:53,590
Yes, it's a node server.

24
00:00:53,590 --> 00:00:54,960
Fair enough.

25
00:00:54,960 --> 00:00:57,380
Yeah, if you're watching the
live stream, nah, that's not

26
00:00:57,380 --> 00:00:57,990
going to work.

27
00:00:57,990 --> 00:01:01,430
Sorry, just play the game using
your mind or whatever.

28
00:01:01,430 --> 00:01:02,210
Just play with yourself.

29
00:01:02,210 --> 00:01:03,490
No, wait, doesn't matter.

30
00:01:03,490 --> 00:01:05,120
OK, just move on.

31
00:01:05,120 --> 00:01:07,640
Once you go to this URL you'll
be asked to enter a username

32
00:01:07,640 --> 00:01:09,040
and password.

33
00:01:09,040 --> 00:01:11,740
Just make up any old password.

34
00:01:11,740 --> 00:01:13,940
It's going to be stored in
plain text on my machine.

35
00:01:13,940 --> 00:01:16,570
So don't use your credit card
number unless you wish to make

36
00:01:16,570 --> 00:01:17,530
a donation.

37
00:01:17,530 --> 00:01:20,170
All donations are gratefully
received.

38
00:01:20,170 --> 00:01:22,080
The reason I'm asking for a
password is if you want to

39
00:01:22,080 --> 00:01:23,630
switch devices halfway through,
like if you start

40
00:01:23,630 --> 00:01:25,290
running out of batteries
or whenever.

41
00:01:25,290 --> 00:01:27,140
You can just enter the username
and password again on

42
00:01:27,140 --> 00:01:30,980
another device and pick up
from where you left off.

43
00:01:30,980 --> 00:01:34,330
Now I hacked this thing together
quite quickly.

44
00:01:34,330 --> 00:01:37,170
You could probably break it
by trying to break it.

45
00:01:37,170 --> 00:01:39,900
So please don't do that.

46
00:01:39,900 --> 00:01:42,320
I've at least made sure little
Bobby Tables can play.

47
00:01:42,320 --> 00:01:45,990
So if you're in the room,
you're all right.

48
00:01:45,990 --> 00:01:47,550
Is everyone getting
access to it?

49
00:01:47,550 --> 00:01:48,720
Is it kind of working?

50
00:01:48,720 --> 00:01:49,950
Wow, brilliant!

51
00:01:49,950 --> 00:01:51,760
I want to stress that this quiz
is tough, and I've seen

52
00:01:51,760 --> 00:01:55,010
it catch out people who do
this sort of stuff &mdash; this

53
00:01:55,010 --> 00:01:56,930
minor details of browsers &mdash;
for a living.

54
00:01:56,930 --> 00:01:57,650
It catches them out.

55
00:01:57,650 --> 00:02:00,420
So if you're the kind of person
who flips tables over

56
00:02:00,420 --> 00:02:03,450
when you don't win, then maybe
stay away from tables for a

57
00:02:03,450 --> 00:02:06,300
little bit, because this
could get rough.

58
00:02:06,300 --> 00:02:08,310
OK, I'm going to get this huge,
horrible Helvetica off

59
00:02:08,310 --> 00:02:08,810
the screen.

60
00:02:08,810 --> 00:02:12,270
Oh, of course, what kind of quiz
would be complete without

61
00:02:12,270 --> 00:02:14,440
a grand prize?

62
00:02:14,440 --> 00:02:17,000
The Chromebook Pixel is Google's
latest laptop,

63
00:02:17,000 --> 00:02:21,520
featuring an i5 1.8 gigahertz
processor, four gigabytes of

64
00:02:21,520 --> 00:02:25,290
RAM, and a touchscreen with a
higher GPI than a MacBook Pro.

65
00:02:25,290 --> 00:02:26,630
Couldn't get ahold
of one of those.

66
00:02:26,630 --> 00:02:29,010
Sorry, they wouldn't
give me one.

67
00:02:29,010 --> 00:02:30,560
Never mind.

68
00:02:30,560 --> 00:02:33,120
But if you do win, then
we will swag you.

69
00:02:33,120 --> 00:02:34,370
We will swag you good.

70
00:02:34,370 --> 00:02:40,950

71
00:02:40,950 --> 00:02:42,100
You're quite dazzled by that.

72
00:02:42,100 --> 00:02:45,880
I thought you might not, so I
thought I'd go all in, like,

73
00:02:45,880 --> 00:02:48,320
yeah, look at that stuff,
a neon thing!

74
00:02:48,320 --> 00:02:49,050
A Glass!

75
00:02:49,050 --> 00:02:50,220
Have you seen one
of those before?

76
00:02:50,220 --> 00:02:50,510
And a cup.

77
00:02:50,510 --> 00:02:51,420
Brilliant.

78
00:02:51,420 --> 00:02:52,090
OK.

79
00:02:52,090 --> 00:02:53,540
The lens flares are
sold separately.

80
00:02:53,540 --> 00:02:54,600
Sorry about that.

81
00:02:54,600 --> 00:02:57,640
Let's get started.

82
00:02:57,640 --> 00:02:59,080
We're going to start
off really simple.

83
00:02:59,080 --> 00:03:00,230
Image in HTML.

84
00:03:00,230 --> 00:03:01,160
You've done that before.

85
00:03:01,160 --> 00:03:02,630
Fair enough.

86
00:03:02,630 --> 00:03:05,570
OK here is a div.

87
00:03:05,570 --> 00:03:09,980
The div has a source,
like an image might.

88
00:03:09,980 --> 00:03:11,640
Which browsers do you think
are going to make

89
00:03:11,640 --> 00:03:12,880
a request for that?

90
00:03:12,880 --> 00:03:15,320
Now on your phones, on your
laptops at the moment it

91
00:03:15,320 --> 00:03:17,680
should have given you the
options for this question.

92
00:03:17,680 --> 00:03:19,570
If it hasn't, just
hit refresh, and

93
00:03:19,570 --> 00:03:20,580
you should get them.

94
00:03:20,580 --> 00:03:22,870
Now when we're talking about
these browsers, we're talking

95
00:03:22,870 --> 00:03:24,575
about the latest version
of them, the

96
00:03:24,575 --> 00:03:26,020
latest stable release.

97
00:03:26,020 --> 00:03:29,490
You get one point for each one
you get right, and you will

98
00:03:29,490 --> 00:03:31,010
lose a point for each
one you get wrong.

99
00:03:31,010 --> 00:03:33,880
So if you say Firefox doesn't
make a request, and it does,

100
00:03:33,880 --> 00:03:36,220
you will lose a point there.

101
00:03:36,220 --> 00:03:37,530
You can assume the
HTML5 doctype.

102
00:03:37,530 --> 00:03:40,150
And there's nothing funky in the
head, like a BaseType that

103
00:03:40,150 --> 00:03:41,500
might throw things off.

104
00:03:41,500 --> 00:03:42,750
There's nothing &mdash;

105
00:03:42,750 --> 00:03:44,730
there's no trickery going on.

106
00:03:44,730 --> 00:03:48,310
And what we're seeing here is a
live read-out of the opinion

107
00:03:48,310 --> 00:03:49,000
of the room.

108
00:03:49,000 --> 00:03:51,110
So the needle will swing one
way when you think yes, it

109
00:03:51,110 --> 00:03:53,240
will swing the other way when
you think no, though the

110
00:03:53,240 --> 00:03:56,330
direction is randomized for each
question so you cannot

111
00:03:56,330 --> 00:03:58,140
just vote along with the room.

112
00:03:58,140 --> 00:04:01,550
You will be probably getting
it wrong if you do that.

113
00:04:01,550 --> 00:04:03,290
Right, OK that's probably
enough time.

114
00:04:03,290 --> 00:04:05,070
If you haven't answered yet,
answer quickly because I'm

115
00:04:05,070 --> 00:04:08,370
going to close the question
in three, two, one.

116
00:04:08,370 --> 00:04:10,920
And OK, so the needle's kind of
going roughly in the middle

117
00:04:10,920 --> 00:04:12,830
which means, collectively
you don't have a clue.

118
00:04:12,830 --> 00:04:14,870
Well done, everyone.

119
00:04:14,870 --> 00:04:17,951
You're kind of thinking yes
in, well, most of the

120
00:04:17,951 --> 00:04:20,310
browsers, kind of, more strongly
in Internet Explorer.

121
00:04:20,310 --> 00:04:21,579
It's almost like you've
been bitten by that

122
00:04:21,579 --> 00:04:23,940
browser in the past.

123
00:04:23,940 --> 00:04:27,370
The answer is, of
course, none.

124
00:04:27,370 --> 00:04:29,520
Not in any of the browsers.

125
00:04:29,520 --> 00:04:30,680
None of them going to do that.

126
00:04:30,680 --> 00:04:32,060
Well done, the people
who got it right.

127
00:04:32,060 --> 00:04:33,600
Four people by the sounds
of things, actually.

128
00:04:33,600 --> 00:04:34,640
Well done.

129
00:04:34,640 --> 00:04:37,110
But this is not as
mad as it seems.

130
00:04:37,110 --> 00:04:39,060
So in XHTML2 you
could do this.

131
00:04:39,060 --> 00:04:42,100
You could have any elements,
such as a div with a source,

132
00:04:42,100 --> 00:04:45,150
and the browser would replace
the element with the content

133
00:04:45,150 --> 00:04:45,960
of that resource.

134
00:04:45,960 --> 00:04:47,410
And it was kind of a good
idea, or it was the

135
00:04:47,410 --> 00:04:48,480
start of a good idea.

136
00:04:48,480 --> 00:04:51,060
Because you could take rich
semantic content, and replace

137
00:04:51,060 --> 00:04:51,500
it with an image.

138
00:04:51,500 --> 00:04:54,870
It may be Alt attribute
completely redundant.

139
00:04:54,870 --> 00:04:55,670
Pretty cool.

140
00:04:55,670 --> 00:04:59,592
But XHTML2 had the backwoods
incompatibility issues, and it

141
00:04:59,592 --> 00:05:02,040
carried with it XML's draconian
error handling.

142
00:05:02,040 --> 00:05:04,980
And once you invite XML into
your home, it XML's

143
00:05:04,980 --> 00:05:05,260
everything.

144
00:05:05,260 --> 00:05:07,780
It XMLs all over the carpet,
up the walls.

145
00:05:07,780 --> 00:05:11,000
And in the same way that Smurfs
stick the word Smurf in

146
00:05:11,000 --> 00:05:14,420
front of everything to make it a
Smurf thing, XML sticks X at

147
00:05:14,420 --> 00:05:15,670
the start of everything.

148
00:05:15,670 --> 00:05:16,790
You don't want HTML.

149
00:05:16,790 --> 00:05:18,190
You want XHTML.

150
00:05:18,190 --> 00:05:19,650
You don't want Frames.

151
00:05:19,650 --> 00:05:21,350
You want XFrames.

152
00:05:21,350 --> 00:05:22,830
You don't want Forms.

153
00:05:22,830 --> 00:05:25,760
You can have XForms.

154
00:05:25,760 --> 00:05:28,010
If you let XML take over your
life, it will turn your

155
00:05:28,010 --> 00:05:32,870
boyfriend or girlfriend into an
exboyfriend or girlfriend.

156
00:05:32,870 --> 00:05:34,310
And XML's cool with that because
you don't need a

157
00:05:34,310 --> 00:05:37,870
partner because you've got XML
to look after you now.

158
00:05:37,870 --> 00:05:40,910
It seems fitting that in
2009 XHTML2 became an

159
00:05:40,910 --> 00:05:43,910
ex-specification, and we didn't
care about it anymore.

160
00:05:43,910 --> 00:05:46,400
And no browser's ever
implemented source on

161
00:05:46,400 --> 00:05:48,130
something like a div.

162
00:05:48,130 --> 00:05:50,070
But what about this.

163
00:05:50,070 --> 00:05:50,760
We've got an image element.

164
00:05:50,760 --> 00:05:52,120
It's got a source.

165
00:05:52,120 --> 00:05:53,500
Which browsers are going
to make a request?

166
00:05:53,500 --> 00:05:56,800
Now, notice that I have spelled
"image" incorrectly in

167
00:05:56,800 --> 00:05:58,130
terms of HTML.

168
00:05:58,130 --> 00:06:00,920
Does the browser treat this
like an unknown element?

169
00:06:00,920 --> 00:06:02,160
Or does it do something
special?

170
00:06:02,160 --> 00:06:04,260
I mean, we saw XML was
too draconian, too

171
00:06:04,260 --> 00:06:05,950
strict for the web.

172
00:06:05,950 --> 00:06:09,950
But is HTML this lenient, or are
the browsers more lenient

173
00:06:09,950 --> 00:06:11,850
than the spec in this case?

174
00:06:11,850 --> 00:06:14,750
So we're seeing you're kind of
leaning towards one way in

175
00:06:14,750 --> 00:06:15,800
pretty much all the browsers.

176
00:06:15,800 --> 00:06:17,720
Ah, you're changing your mind,
going back into the middle.

177
00:06:17,720 --> 00:06:18,790
We're going to keep this
moving quickly.

178
00:06:18,790 --> 00:06:20,470
So just make a decision.

179
00:06:20,470 --> 00:06:23,690
I'm going to close the question
in three, two, one,

180
00:06:23,690 --> 00:06:24,800
and it's closed.

181
00:06:24,800 --> 00:06:26,960
So, you're kind of thinking,
pretty much

182
00:06:26,960 --> 00:06:28,540
yes in all the browsers.

183
00:06:28,540 --> 00:06:30,760
And you would be absolutely
correct.

184
00:06:30,760 --> 00:06:33,010
In all of them, it will make
a request for the image.

185
00:06:33,010 --> 00:06:35,360
I know in these situations it
doesn't have to show the

186
00:06:35,360 --> 00:06:36,940
image, we're just talking
about making a request.

187
00:06:36,940 --> 00:06:39,740
But in this case, all of the
browsers will actually show

188
00:06:39,740 --> 00:06:41,600
the image as well.

189
00:06:41,600 --> 00:06:43,260
You see, back in the past &mdash;

190
00:06:43,260 --> 00:06:45,610
I don't know if you remember
the past &mdash; but one browser

191
00:06:45,610 --> 00:06:49,370
decided that I-M-G was too
difficult for developers to

192
00:06:49,370 --> 00:06:52,440
remember, and that image
should work as well.

193
00:06:52,440 --> 00:06:54,430
And we've been stuck with
that ever since.

194
00:06:54,430 --> 00:06:56,900
Now which browser vendor
do you think we have

195
00:06:56,900 --> 00:06:58,180
to blame for this?

196
00:06:58,180 --> 00:07:04,150
Oh yes, of course, it is
Mosaic, back in 1993.

197
00:07:04,150 --> 00:07:05,630
The people who invented
the image tag.

198
00:07:05,630 --> 00:07:06,570
They did this.

199
00:07:06,570 --> 00:07:10,780
And a study in 2005 showed that
like 0.2% of pages were

200
00:07:10,780 --> 00:07:13,560
using this incorrectly spelled
image, so all the browsers

201
00:07:13,560 --> 00:07:16,140
have to support it for pretty
much forevermore.

202
00:07:16,140 --> 00:07:18,910
The World WG recognized this
and added it to the spec.

203
00:07:18,910 --> 00:07:21,470
This is the pausing spec, and
you can see there, start tag

204
00:07:21,470 --> 00:07:24,580
if it's image, change the
token names to img and

205
00:07:24,580 --> 00:07:25,440
reprocess it.

206
00:07:25,440 --> 00:07:27,651
Don't ask.

207
00:07:27,651 --> 00:07:32,170
But recently I-M-A-G-E was
using a clever hack.

208
00:07:32,170 --> 00:07:34,230
Alexie10 came up with this.

209
00:07:34,230 --> 00:07:37,960
So you would use this on your
page instead of an image, this

210
00:07:37,960 --> 00:07:40,100
block of sort of svg with
an image inside it.

211
00:07:40,100 --> 00:07:42,750
And what it'll do is it'll throw
and svg in browsers that

212
00:07:42,750 --> 00:07:47,020
support svg, and it'll do
a png in other browsers.

213
00:07:47,020 --> 00:07:49,275
So a modern browser will
parse it like this.

214
00:07:49,275 --> 00:07:52,240
Ah, OK, that's an svg element.

215
00:07:52,240 --> 00:07:54,230
OK, it's going to
be 100 by 100.

216
00:07:54,230 --> 00:07:55,210
That's fine.

217
00:07:55,210 --> 00:07:58,770
Oh, and this is an svg image,
because in svg, image elements

218
00:07:58,770 --> 00:08:01,810
are spelled fully, I-M-A-G-E.
Oh, it's got

219
00:08:01,810 --> 00:08:02,480
a width and a height.

220
00:08:02,480 --> 00:08:03,630
That's great.

221
00:08:03,630 --> 00:08:06,540
And I'm going to load img.svg.

222
00:08:06,540 --> 00:08:09,860
Because this is how you define
the source for an image in svg

223
00:08:09,860 --> 00:08:11,140
because it's part of XML.

224
00:08:11,140 --> 00:08:13,210
And why have a link when
you can have an XLink?

225
00:08:13,210 --> 00:08:16,020

226
00:08:16,020 --> 00:08:17,840
And then it sees this,
and it goes pfffft.

227
00:08:17,840 --> 00:08:21,030
That means absolutely nothing
to svg images, so I'm

228
00:08:21,030 --> 00:08:21,930
going to ignore it.

229
00:08:21,930 --> 00:08:27,040
Whereas an older browser, maybe
Android2, IE8, they'll

230
00:08:27,040 --> 00:08:32,400
parse it like this, [GRUNTS], I
mean, going to ignore that.

231
00:08:32,400 --> 00:08:34,690
Oh look, the developer
spelled image wrong.

232
00:08:34,690 --> 00:08:36,200
OK I'm going to use that.

233
00:08:36,200 --> 00:08:38,000
It's 100 by 100.

234
00:08:38,000 --> 00:08:42,190
Pffft, Woah.

235
00:08:42,190 --> 00:08:43,080
Developer got high.

236
00:08:43,080 --> 00:08:44,110
I'm going to ignore that.

237
00:08:44,110 --> 00:08:46,320
And I'm going to load img.png.

238
00:08:46,320 --> 00:08:48,240
It's great, so you've got this
kind that doesn't require

239
00:08:48,240 --> 00:08:48,860
JavaScript.

240
00:08:48,860 --> 00:08:50,420
And you're switching between
the two image formats.

241
00:08:50,420 --> 00:08:52,220
So we got kind of excited
about it.

242
00:08:52,220 --> 00:08:54,020
And we started tweeting
about it.

243
00:08:54,020 --> 00:08:57,080
The mistake we made is
we didn't test it.

244
00:08:57,080 --> 00:09:00,370
So a few of us started testing
it and we found something

245
00:09:00,370 --> 00:09:02,050
interesting.

246
00:09:02,050 --> 00:09:04,730
All of these browsers
spot svg.

247
00:09:04,730 --> 00:09:07,900
Which ones download
both images?

248
00:09:07,900 --> 00:09:08,740
They shouldn't.

249
00:09:08,740 --> 00:09:10,150
And I'll give you a clue.

250
00:09:10,150 --> 00:09:12,490
It's doesn't go one way or the
other for all browsers.

251
00:09:12,490 --> 00:09:14,180
Some of the browser are
doing it differently.

252
00:09:14,180 --> 00:09:16,730
So you're going to have to pick
the browser or browsers

253
00:09:16,730 --> 00:09:18,780
that you think get this
wrong because not all

254
00:09:18,780 --> 00:09:20,250
of them get it wrong.

255
00:09:20,250 --> 00:09:21,700
I'm going to close
the question &mdash;

256
00:09:21,700 --> 00:09:25,370
woah, oh dear &mdash;

257
00:09:25,370 --> 00:09:28,370
oh no, no, OK, we've got some
IE fans in the room.

258
00:09:28,370 --> 00:09:32,390
Closing the question
in three, two, one.

259
00:09:32,390 --> 00:09:35,000
OK, so you're edging towards
Internet Explorer being the

260
00:09:35,000 --> 00:09:35,670
bad guy here.

261
00:09:35,670 --> 00:09:37,885
And in this case you
are correct.

262
00:09:37,885 --> 00:09:40,430
As a group you're doing
quite well.

263
00:09:40,430 --> 00:09:41,930
You should all form a company
of something.

264
00:09:41,930 --> 00:09:42,810
It's great.

265
00:09:42,810 --> 00:09:46,910
So all the browsers here, all
the latest versions, they have

266
00:09:46,910 --> 00:09:49,060
two parsers inside.

267
00:09:49,060 --> 00:09:50,830
Relatively new thing for
browsers to have.

268
00:09:50,830 --> 00:09:52,460
But these ones, they
all have it.

269
00:09:52,460 --> 00:09:55,550
One parser runs ahead as quickly
as it can and picks up

270
00:09:55,550 --> 00:09:57,410
things that it should download,
like images,

271
00:09:57,410 --> 00:09:59,200
scripts, all of that
sort of stuff.

272
00:09:59,200 --> 00:10:01,330
The other parser does the heavy
lifting, like building

273
00:10:01,330 --> 00:10:04,550
that the DOM tree and passing
scripts and all that stuff.

274
00:10:04,550 --> 00:10:07,260
This has a surprisingly large
benefit &mdash; you know, Illya was

275
00:10:07,260 --> 00:10:08,180
posting about this.

276
00:10:08,180 --> 00:10:10,350
This study that was done
through 2000 sites.

277
00:10:10,350 --> 00:10:12,760
And it had a 20% speed
improvement.

278
00:10:12,760 --> 00:10:13,940
That's pretty incredible.

279
00:10:13,940 --> 00:10:16,350
That's time to get to
DOM content loaded.

280
00:10:16,350 --> 00:10:19,800
In order to be quick, this of a
pre-parser, this first one,

281
00:10:19,800 --> 00:10:21,200
is a little bit stupid.

282
00:10:21,200 --> 00:10:23,910
In Internet Explorer, it's
a little bit too stupid.

283
00:10:23,910 --> 00:10:25,550
And it kind of gets
over excited.

284
00:10:25,550 --> 00:10:27,550
And it's like, I'm going to show
a png, I'm going to show

285
00:10:27,550 --> 00:10:30,830
a png, yep, here I go, I'm going
to show png, here is

286
00:10:30,830 --> 00:10:32,330
goes, no, actually no, it's
an svg, never mind.

287
00:10:32,330 --> 00:10:36,290

288
00:10:36,290 --> 00:10:39,670
It kind of sees the image but it
misses the svg context, so

289
00:10:39,670 --> 00:10:41,340
it picks up the wrong source.

290
00:10:41,340 --> 00:10:43,380
And then the main parser comes
along and goes pfft,

291
00:10:43,380 --> 00:10:44,220
what are you doing?

292
00:10:44,220 --> 00:10:47,380
No, this is as svg thing, and
downloads the correct thing.

293
00:10:47,380 --> 00:10:49,920
The moral here is, don't just &mdash;
like, if there's some

294
00:10:49,920 --> 00:10:51,840
kind of performance advice
going on, don't just

295
00:10:51,840 --> 00:10:53,410
blindly trust it.

296
00:10:53,410 --> 00:10:56,060
In Chrome, we say, use
tools not rules.

297
00:10:56,060 --> 00:10:59,100
And it rhymes so it must
be true, right?

298
00:10:59,100 --> 00:11:00,650
So be on the look &mdash; but
also be on the lookout

299
00:11:00,650 --> 00:11:01,790
for existing tests.

300
00:11:01,790 --> 00:11:04,645
If someone's done the legwork
for you, and you can just sort

301
00:11:04,645 --> 00:11:06,110
of run that test yourself.

302
00:11:06,110 --> 00:11:08,670
One of my favorite stories in
science involves this guy,

303
00:11:08,670 --> 00:11:10,270
August Weismann.

304
00:11:10,270 --> 00:11:13,530
He wanted to disprove that
evolution was learned.

305
00:11:13,530 --> 00:11:15,790
Like, if you had some kind of
life experiences, that that

306
00:11:15,790 --> 00:11:17,870
would be passed to
your children.

307
00:11:17,870 --> 00:11:20,630
He wanted to disprove that was a
thing, because it wasn't the

308
00:11:20,630 --> 00:11:21,800
Darwin evolution.

309
00:11:21,800 --> 00:11:24,500
So he took some mice, and he cut
their tails off, and bred

310
00:11:24,500 --> 00:11:25,420
them together.

311
00:11:25,420 --> 00:11:27,710
And then the next generation,
he cut their tails off and

312
00:11:27,710 --> 00:11:28,720
bred them together as well.

313
00:11:28,720 --> 00:11:31,740
And the theory was, well if
evolution is learned, we're

314
00:11:31,740 --> 00:11:34,030
going to start getting mice
born without tails.

315
00:11:34,030 --> 00:11:36,270
And he was quite a way into this
research, until someone

316
00:11:36,270 --> 00:11:39,510
went, ah you do realize, August,
that the Jewish people

317
00:11:39,510 --> 00:11:40,800
have been carrying out
this test a lot

318
00:11:40,800 --> 00:11:42,035
longer than you have.

319
00:11:42,035 --> 00:11:45,130
[LAUGHTER]

320
00:11:45,130 --> 00:11:46,500
And he was like, [INAUDIBLE].

321
00:11:46,500 --> 00:11:47,160
Fair enough, I'll just.

322
00:11:47,160 --> 00:11:47,500
I'll &mdash;

323
00:11:47,500 --> 00:11:48,970
Yeah, OK, job done.

324
00:11:48,970 --> 00:11:51,170
So yeah, don't reinvent the
wheel unless you want to learn

325
00:11:51,170 --> 00:11:51,850
a lot about wheels.

326
00:11:51,850 --> 00:11:52,960
And that could be
cool sometimes.

327
00:11:52,960 --> 00:11:54,140
OK, what about this?

328
00:11:54,140 --> 00:11:55,180
I've got an image.

329
00:11:55,180 --> 00:11:56,860
It's inside a div that
is display none.

330
00:11:56,860 --> 00:11:59,070
This image is not going
to be displayed.

331
00:11:59,070 --> 00:12:02,490
But which browsers are going
to request the URL and

332
00:12:02,490 --> 00:12:04,740
download the image regardless?

333
00:12:04,740 --> 00:12:06,260
So, we'll do it quickly.

334
00:12:06,260 --> 00:12:08,400
We're going to go for &mdash; oh, are
we starting to think IE is

335
00:12:08,400 --> 00:12:09,250
going to do some different?

336
00:12:09,250 --> 00:12:10,430
People are thinking Firefox
is going to

337
00:12:10,430 --> 00:12:11,110
do something different.

338
00:12:11,110 --> 00:12:15,230
I'm going to close the question
in three, two, one.

339
00:12:15,230 --> 00:12:16,270
There we go.

340
00:12:16,270 --> 00:12:17,931
The countdown's going to old,
but I'm going to do it for

341
00:12:17,931 --> 00:12:18,840
every question anyway.

342
00:12:18,840 --> 00:12:20,820
OK, so we're sort of
saying, yes in IE.

343
00:12:20,820 --> 00:12:21,645
Maybe no in Safari.

344
00:12:21,645 --> 00:12:22,480
No in Chrome.

345
00:12:22,480 --> 00:12:24,520
And meh, maybe in Firefox.

346
00:12:24,520 --> 00:12:26,570
The answer is yes
in all of them.

347
00:12:26,570 --> 00:12:30,250
They are all going to download
the image in this case.

348
00:12:30,250 --> 00:12:33,570
And this behavior is part of
the specification as well.

349
00:12:33,570 --> 00:12:34,770
In the beginning, there
is nothing.

350
00:12:34,770 --> 00:12:35,110
Right?

351
00:12:35,110 --> 00:12:39,260
And then the browser gets
sprayed with HTML text.

352
00:12:39,260 --> 00:12:41,660
And then from that, it's going
to construct this tree of

353
00:12:41,660 --> 00:12:43,170
elements that, as Paul
was explaining

354
00:12:43,170 --> 00:12:45,100
earlier, is the DOM.

355
00:12:45,100 --> 00:12:48,280
When one of these things is
constructed, the constructor

356
00:12:48,280 --> 00:12:50,070
steps for that elements
are run.

357
00:12:50,070 --> 00:12:52,990
And if we look at the spec for
image, it's quite complicated,

358
00:12:52,990 --> 00:12:54,770
for you know when you'd think
it'd be a very simple thing.

359
00:12:54,770 --> 00:12:55,570
But this is the image stuff.

360
00:12:55,570 --> 00:12:56,810
They all run synchronously.

361
00:12:56,810 --> 00:12:59,020
Step 14, fetch the image.

362
00:12:59,020 --> 00:13:00,110
No mention of CSS.

363
00:13:00,110 --> 00:13:01,420
No mention of anything
like that.

364
00:13:01,420 --> 00:13:03,320
And that's good in some ways,
because it means the browser

365
00:13:03,320 --> 00:13:04,630
can start the image downloading

366
00:13:04,630 --> 00:13:06,280
before the CSS is there.

367
00:13:06,280 --> 00:13:08,490
The pre-parser can
deal with it.

368
00:13:08,490 --> 00:13:11,220
Downside is, well we couldn't
do polyfills to things like

369
00:13:11,220 --> 00:13:14,390
responsive images because by the
time JavaScript gets there

370
00:13:14,390 --> 00:13:17,100
to do something clever, the
images already started

371
00:13:17,100 --> 00:13:17,700
downloading.

372
00:13:17,700 --> 00:13:19,840
You're just going to trigger
a second request by

373
00:13:19,840 --> 00:13:21,880
changing the source.

374
00:13:21,880 --> 00:13:23,380
This won't be a problem
in the future.

375
00:13:23,380 --> 00:13:27,280
The resources, priority spec has
this postpone attribute,

376
00:13:27,280 --> 00:13:29,840
which means the image won't
download if it's display none.

377
00:13:29,840 --> 00:13:33,060
And it allows the browser to
avoid downloading it even if

378
00:13:33,060 --> 00:13:34,750
it's just out-of-view
on the page as well.

379
00:13:34,750 --> 00:13:37,610
So you don't have to rely on
these heavy scroll events for

380
00:13:37,610 --> 00:13:40,390
image lazy loading.

381
00:13:40,390 --> 00:13:41,830
OK, what if we're using CSS?

382
00:13:41,830 --> 00:13:43,620
Does visibility matter then?

383
00:13:43,620 --> 00:13:45,720
Once again that image is not
going to display because it's

384
00:13:45,720 --> 00:13:47,860
inside an element that
is display none.

385
00:13:47,860 --> 00:13:51,090
We saw here that the image would
download in this case.

386
00:13:51,090 --> 00:13:53,030
But what about in CSS?

387
00:13:53,030 --> 00:13:54,420
Is it going to do something
different?

388
00:13:54,420 --> 00:13:55,920
Does visibility matter here?

389
00:13:55,920 --> 00:13:58,330
Some of the browsers going to
do something different?

390
00:13:58,330 --> 00:14:02,450
I'm going to close the question
in three, two &mdash;

391
00:14:02,450 --> 00:14:03,820
ooh, going right
to the middle.

392
00:14:03,820 --> 00:14:05,810
Collectively, once
again, no clue.

393
00:14:05,810 --> 00:14:06,570
Don't worry about it, guys.

394
00:14:06,570 --> 00:14:08,430
It's quite difficult.

395
00:14:08,430 --> 00:14:10,140
What's the answer?

396
00:14:10,140 --> 00:14:12,760
None of the browsers will
make a request here.

397
00:14:12,760 --> 00:14:13,890
And that's kind of
cool, right?

398
00:14:13,890 --> 00:14:17,420
We want to be able to rely
on that kind of behavior.

399
00:14:17,420 --> 00:14:18,270
Slightly different one.

400
00:14:18,270 --> 00:14:19,230
What about now?

401
00:14:19,230 --> 00:14:20,010
Same thing again.

402
00:14:20,010 --> 00:14:21,740
The image is not going to be
rendered because it's on a

403
00:14:21,740 --> 00:14:22,660
display none element.

404
00:14:22,660 --> 00:14:25,760
But it's not inside a display
none element, It is on a

405
00:14:25,760 --> 00:14:27,210
display none element.

406
00:14:27,210 --> 00:14:29,770
So we saw it was, the browsers
weren't downloading before.

407
00:14:29,770 --> 00:14:30,730
What about now?

408
00:14:30,730 --> 00:14:33,270
Do the browsers do something
different?

409
00:14:33,270 --> 00:14:34,100
Do they all download it?

410
00:14:34,100 --> 00:14:35,530
Do they all not download it?

411
00:14:35,530 --> 00:14:36,380
I mean, they don't need it.

412
00:14:36,380 --> 00:14:37,460
It's not going to be rendered.

413
00:14:37,460 --> 00:14:38,860
I'm going to close
the question in

414
00:14:38,860 --> 00:14:42,728
three, two, one, done.

415
00:14:42,728 --> 00:14:47,060
All right, we're saying no in
pretty much every browser.

416
00:14:47,060 --> 00:14:49,330
Most browsers will download
it in this case.

417
00:14:49,330 --> 00:14:51,820
Only Firefox won't.

418
00:14:51,820 --> 00:14:53,290
So what's going on here?

419
00:14:53,290 --> 00:14:56,450
Well once you've got some DOM
elements on the page, as Paul

420
00:14:56,450 --> 00:14:58,050
was explaining before, they're
going to get their styles

421
00:14:58,050 --> 00:15:01,460
calculated where the browser
goes to see which of your

422
00:15:01,460 --> 00:15:04,360
cascaded styles of your font
tags, if you're from the '90s,

423
00:15:04,360 --> 00:15:08,260
which styles apply to each
element individually?

424
00:15:08,260 --> 00:15:10,790
But not all &mdash; not everything
gets its style calculated.

425
00:15:10,790 --> 00:15:12,580
So you've got these two elements
at the bottom.

426
00:15:12,580 --> 00:15:13,510
No style calculation.

427
00:15:13,510 --> 00:15:16,130
And the reason is, this div at
the top here turned out to be

428
00:15:16,130 --> 00:15:17,220
display none.

429
00:15:17,220 --> 00:15:19,500
And the browsers shortcuts
because it knows the styles of

430
00:15:19,500 --> 00:15:22,780
these elements have no impact on
the rendering of the page.

431
00:15:22,780 --> 00:15:23,490
So it doesn't bother.

432
00:15:23,490 --> 00:15:24,510
It takes a shortcut.

433
00:15:24,510 --> 00:15:26,730
So if these have background
images, the browser never

434
00:15:26,730 --> 00:15:28,730
finds out about it.

435
00:15:28,730 --> 00:15:30,810
If the display none element has
a background image, the

436
00:15:30,810 --> 00:15:32,610
browser does find
out about it.

437
00:15:32,610 --> 00:15:34,540
And that's why we see most
browsers downloading it at

438
00:15:34,540 --> 00:15:35,090
that point.

439
00:15:35,090 --> 00:15:37,000
Firefox is a little
bit smarter here.

440
00:15:37,000 --> 00:15:39,210
But if you use something like
visibility hidden or opacity

441
00:15:39,210 --> 00:15:43,330
zero, Firefox will be
downloading as well.

442
00:15:43,330 --> 00:15:44,430
Who's getting it right
according to the

443
00:15:44,430 --> 00:15:46,130
specification?

444
00:15:46,130 --> 00:15:47,110
Everyone is!

445
00:15:47,110 --> 00:15:47,550
Great!

446
00:15:47,550 --> 00:15:49,420
The specification says
absolutely nothing about this.

447
00:15:49,420 --> 00:15:52,950
There's this tiny note that says
the browser may optimize.

448
00:15:52,950 --> 00:15:55,370
It may avoid downloading images
that are out of view,

449
00:15:55,370 --> 00:15:57,510
even if there's another
element over the top.

450
00:15:57,510 --> 00:16:00,740
The browser may avoid
downloading at this point.

451
00:16:00,740 --> 00:16:02,090
No browsers are that
smart yet.

452
00:16:02,090 --> 00:16:05,130
This kind of freedom in the
specifications is great

453
00:16:05,130 --> 00:16:08,420
because it means the browser can
do what's right given the

454
00:16:08,420 --> 00:16:10,280
situation, and the kind of
device, and the network

455
00:16:10,280 --> 00:16:12,110
connectivity, et cetera,
et cetera.

456
00:16:12,110 --> 00:16:13,890
But it's also kind of scary
because this is where you're

457
00:16:13,890 --> 00:16:15,100
going to get the browsers
doing different

458
00:16:15,100 --> 00:16:17,250
things, as we saw here.

459
00:16:17,250 --> 00:16:18,100
But I kind of like that.

460
00:16:18,100 --> 00:16:20,370
I think that's the diversity
that makes the web great.

461
00:16:20,370 --> 00:16:22,490
It's not one company
driving forward

462
00:16:22,490 --> 00:16:23,770
with its own interests.

463
00:16:23,770 --> 00:16:26,120
It's lots of companies driving
forward in different

464
00:16:26,120 --> 00:16:27,080
directions.

465
00:16:27,080 --> 00:16:29,760
And we get this sort of car
crash, but a car crash with a

466
00:16:29,760 --> 00:16:31,470
happy ending.

467
00:16:31,470 --> 00:16:35,440
And that web that
we have today.

468
00:16:35,440 --> 00:16:37,170
So if you want to avoid
downloading backgrounds in

469
00:16:37,170 --> 00:16:39,590
CSS, hiding the element
isn't enough.

470
00:16:39,590 --> 00:16:42,600
You need to put it inside
something that is hidden so

471
00:16:42,600 --> 00:16:44,010
the virus won't find &mdash;

472
00:16:44,010 --> 00:16:45,300
it won't even look
at that element.

473
00:16:45,300 --> 00:16:47,360
But when you do that, realize
you are relying on just what

474
00:16:47,360 --> 00:16:48,360
the browsers do.

475
00:16:48,360 --> 00:16:49,930
It is not specs' behavior.

476
00:16:49,930 --> 00:16:52,900
The only surefire way is, don't
let the browser find out

477
00:16:52,900 --> 00:16:53,600
about the background image.

478
00:16:53,600 --> 00:16:55,330
Take the class off until
you need it.

479
00:16:55,330 --> 00:16:58,303
Or don't put the element in
the DOM until you need it.

480
00:16:58,303 --> 00:17:00,780
All right, things have been
quite easy so far.

481
00:17:00,780 --> 00:17:03,980
Let's get JavaScript involved.

482
00:17:03,980 --> 00:17:05,460
What do you think?

483
00:17:05,460 --> 00:17:07,390
Creating an image elements &mdash;
once again I've

484
00:17:07,390 --> 00:17:08,650
spelled image wrong &mdash;

485
00:17:08,650 --> 00:17:09,750
I'm applying a source to it.

486
00:17:09,750 --> 00:17:11,420
It is not in the document.

487
00:17:11,420 --> 00:17:13,500
So it's not going to
be displayed yet.

488
00:17:13,500 --> 00:17:15,089
I have it spelled wrong.

489
00:17:15,089 --> 00:17:17,540
We saw the browsers correcting
for that before.

490
00:17:17,540 --> 00:17:19,839
But that was in HTML.

491
00:17:19,839 --> 00:17:20,690
What about in the DOM?

492
00:17:20,690 --> 00:17:22,540
Is it going to be different?

493
00:17:22,540 --> 00:17:26,770
I'm going to close the question
in three, two, one,

494
00:17:26,770 --> 00:17:28,280
all right, done.

495
00:17:28,280 --> 00:17:33,540
OK so we're kind of edging
towards yes in most browsers.

496
00:17:33,540 --> 00:17:35,780
It is yes in most browsers,
except Firefox.

497
00:17:35,780 --> 00:17:37,750
Firefox does something
different here.

498
00:17:37,750 --> 00:17:40,300
And there are two parts
to this explanation.

499
00:17:40,300 --> 00:17:43,420
We saw before that the DOM
builds up and these creation

500
00:17:43,420 --> 00:17:44,590
steps for elements are run.

501
00:17:44,590 --> 00:17:47,290
But even if you create the
elements and it's not part of

502
00:17:47,290 --> 00:17:49,940
a document, that's still going
to run those creation steps.

503
00:17:49,940 --> 00:17:53,350
And we saw before, step
14, fetch the image.

504
00:17:53,350 --> 00:17:55,270
We can use this to our advantage
because you can make

505
00:17:55,270 --> 00:17:58,230
a GET request to any URL by
making the image elements in

506
00:17:58,230 --> 00:17:59,260
assigning a source.

507
00:17:59,260 --> 00:18:01,430
And you could use the image
element constructor.

508
00:18:01,430 --> 00:18:03,180
It's a tiny bit of code.

509
00:18:03,180 --> 00:18:04,990
You can make a request
anywhere.

510
00:18:04,990 --> 00:18:07,940
This is kind of how Google
Analytics communicates back to

511
00:18:07,940 --> 00:18:09,560
the server.

512
00:18:09,560 --> 00:18:11,170
Oh yeah, but Firefox didn't
make a request.

513
00:18:11,170 --> 00:18:13,956
So what's going on there?

514
00:18:13,956 --> 00:18:17,220
It's because we spelled image
wrong, and most browsers &mdash;

515
00:18:17,220 --> 00:18:20,280
Chrome, Safari, IE &mdash; will give
us an HTML image element when

516
00:18:20,280 --> 00:18:21,340
we do that.

517
00:18:21,340 --> 00:18:23,480
Firefox will give us
an HTML element.

518
00:18:23,480 --> 00:18:24,460
It's not an image.

519
00:18:24,460 --> 00:18:25,540
You add it to the page.

520
00:18:25,540 --> 00:18:27,870
It will not show an image.

521
00:18:27,870 --> 00:18:30,230
And do you know what, it's the
only one getting it right.

522
00:18:30,230 --> 00:18:32,660
We saw before that the
specification says, if you

523
00:18:32,660 --> 00:18:34,710
encounter a start tag,
you can correct it.

524
00:18:34,710 --> 00:18:36,460
But this is the parsing spec.

525
00:18:36,460 --> 00:18:39,330
We bypass the parsing spec by
creating the element in

526
00:18:39,330 --> 00:18:40,690
JavaScript.

527
00:18:40,690 --> 00:18:43,150
So, yeah, actually technically
it should have returned an

528
00:18:43,150 --> 00:18:46,660
HTML unknown element, but you
know, it's getting it closer

529
00:18:46,660 --> 00:18:49,230
to right than the
other browsers.

530
00:18:49,230 --> 00:18:51,940
I think I kind of preferred it
when the web, before all the

531
00:18:51,940 --> 00:18:54,160
browsers, like there was one
bad guy, and all the other

532
00:18:54,160 --> 00:18:55,270
browsers seemed perfect.

533
00:18:55,270 --> 00:18:58,720
It was like an orchestra and
Internet Explorer 8 was just

534
00:18:58,720 --> 00:19:02,440
this screaming child hitting
two cymbals together.

535
00:19:02,440 --> 00:19:04,490
But then we finally got
rid of the screaming

536
00:19:04,490 --> 00:19:05,540
child with the cymbal.

537
00:19:05,540 --> 00:19:07,655
And then we started conducting
again and we went, oh,

538
00:19:07,655 --> 00:19:09,130
actually everyone's
out of tune.

539
00:19:09,130 --> 00:19:12,280
We just didn't notice because of
the screaming cymbal child.

540
00:19:12,280 --> 00:19:13,820
Oh.

541
00:19:13,820 --> 00:19:15,290
All right, let's get
CSS involved again.

542
00:19:15,290 --> 00:19:16,560
What about this?

543
00:19:16,560 --> 00:19:20,100
So, as before, creating a div,
I'm going to give it a

544
00:19:20,100 --> 00:19:21,150
background image.

545
00:19:21,150 --> 00:19:21,970
So I'm not creating an image.

546
00:19:21,970 --> 00:19:23,660
I'm creating a div, giving
it a background image.

547
00:19:23,660 --> 00:19:26,120
We saw here that images were
downloaded at this point.

548
00:19:26,120 --> 00:19:28,910
Is it different with CSS?

549
00:19:28,910 --> 00:19:31,390
Do different browsers
do different stuff?

550
00:19:31,390 --> 00:19:33,120
So we are kind of hedging
towards the [INAUDIBLE].

551
00:19:33,120 --> 00:19:34,930
Oh wow, it sort of swung
the other way.

552
00:19:34,930 --> 00:19:38,920
Closing the question
in three, two, one.

553
00:19:38,920 --> 00:19:41,070
All right, so we're edging
towards yes in everything.

554
00:19:41,070 --> 00:19:43,420
Wrong ends the lot of you.

555
00:19:43,420 --> 00:19:45,000
No browser will download here.

556
00:19:45,000 --> 00:19:47,190
And this is kind of the same
as the display non case.

557
00:19:47,190 --> 00:19:50,200
It's not in the document, so the
browser's not going to go

558
00:19:50,200 --> 00:19:51,940
looking for the styles, because
it doesn't need to

559
00:19:51,940 --> 00:19:54,390
know the style information
because it knows it's not

560
00:19:54,390 --> 00:19:56,020
going to render.

561
00:19:56,020 --> 00:19:59,070
All right, going to be cruel.

562
00:19:59,070 --> 00:20:01,500
Same thing, but I'm going
to add it to the DOM.

563
00:20:01,500 --> 00:20:03,950
And then I'm going
to take it away.

564
00:20:03,950 --> 00:20:06,290
In the same block of JavaScript,
will the browser

565
00:20:06,290 --> 00:20:08,900
see that element in the document
long enough to

566
00:20:08,900 --> 00:20:10,696
actually trigger the download?

567
00:20:10,696 --> 00:20:11,946
What do you think?

568
00:20:11,946 --> 00:20:16,920

569
00:20:16,920 --> 00:20:21,780
I'm going to close the question
in three, two, one.

570
00:20:21,780 --> 00:20:23,790
We're edging towards
yes in everything.

571
00:20:23,790 --> 00:20:25,250
Wrong again.

572
00:20:25,250 --> 00:20:26,660
None of the browsers.

573
00:20:26,660 --> 00:20:27,970
None of them.

574
00:20:27,970 --> 00:20:30,510
The browser doesn't think about
styles or layout until

575
00:20:30,510 --> 00:20:32,380
as late as possible, which
normally means when it needs

576
00:20:32,380 --> 00:20:34,520
to render something.

577
00:20:34,520 --> 00:20:37,550
And this is going to change
any pixels because

578
00:20:37,550 --> 00:20:39,890
JavaScript's going to be
blocking the chance to do some

579
00:20:39,890 --> 00:20:41,580
of that painting stuff.

580
00:20:41,580 --> 00:20:43,970
What about this?

581
00:20:43,970 --> 00:20:45,360
I'm adding it to the document.

582
00:20:45,360 --> 00:20:46,580
I'm going to ask for
its text content.

583
00:20:46,580 --> 00:20:47,380
It's an empty element.

584
00:20:47,380 --> 00:20:49,690
Text content is going
to be empty as well.

585
00:20:49,690 --> 00:20:50,950
And I'm going to remove
it again.

586
00:20:50,950 --> 00:20:54,226
Does that trigger different
behavior in the browser?

587
00:20:54,226 --> 00:20:55,960
Element's completely empty.

588
00:20:55,960 --> 00:20:57,615
So you know.

589
00:20:57,615 --> 00:20:59,670
But is that going to trigger
the browser to go, ah yeah,

590
00:20:59,670 --> 00:21:01,780
I'm actually going to get
that background image.

591
00:21:01,780 --> 00:21:05,740
I'm going to close the question
in three, two, one.

592
00:21:05,740 --> 00:21:07,076
What have you said?

593
00:21:07,076 --> 00:21:08,010
Ugh, you don't know.

594
00:21:08,010 --> 00:21:08,540
Fair enough.

595
00:21:08,540 --> 00:21:10,590
Yes, is tricky.

596
00:21:10,590 --> 00:21:12,830
No, none of the browser
at this point.

597
00:21:12,830 --> 00:21:14,010
I am going somewhere
with this.

598
00:21:14,010 --> 00:21:16,001
I promise you.

599
00:21:16,001 --> 00:21:18,230
Getting the text content of
an element is pretty easy.

600
00:21:18,230 --> 00:21:19,720
It's just going to go and pick
up the text notes, doesn't

601
00:21:19,720 --> 00:21:21,050
need to look at the
style or anything.

602
00:21:21,050 --> 00:21:21,940
What about this one?

603
00:21:21,940 --> 00:21:23,090
Inner HTML?

604
00:21:23,090 --> 00:21:25,590
Same as before, but instead of
text content, going to ask for

605
00:21:25,590 --> 00:21:26,400
the older innerHTML.

606
00:21:26,400 --> 00:21:29,490
Oh wow, IE's doing something
different from everyone else.

607
00:21:29,490 --> 00:21:30,080
Interesting.

608
00:21:30,080 --> 00:21:35,600
Going to close the question
in three, two, one.

609
00:21:35,600 --> 00:21:39,870
All right, so you said yes in IE
and no in everything else.

610
00:21:39,870 --> 00:21:41,140
Bloody hell, you're right.

611
00:21:41,140 --> 00:21:41,790
Well done.

612
00:21:41,790 --> 00:21:43,750
Yeah, IE makes a request.

613
00:21:43,750 --> 00:21:46,830
And the reason for
that is because &mdash;

614
00:21:46,830 --> 00:21:48,080
I don't know.

615
00:21:48,080 --> 00:21:50,220

616
00:21:50,220 --> 00:21:52,220
Some things in the world
cannot be explained.

617
00:21:52,220 --> 00:21:54,620
Like why it takes three attempts
to plug in a USB

618
00:21:54,620 --> 00:21:56,790
cable, even though there's
only two possibilities.

619
00:21:56,790 --> 00:21:59,950
These things just cannot
be explained.

620
00:21:59,950 --> 00:22:02,430
Moving on.

621
00:22:02,430 --> 00:22:03,570
Similar again.

622
00:22:03,570 --> 00:22:06,320
Instead of inner HTML,
it's inner text.

623
00:22:06,320 --> 00:22:07,900
What do the browsers do here?

624
00:22:07,900 --> 00:22:08,850
Do they do something
different?

625
00:22:08,850 --> 00:22:12,430
We saw IE's quite request-happy
with innerHTML.

626
00:22:12,430 --> 00:22:14,740
Does it do something different
within the text?

627
00:22:14,740 --> 00:22:17,110
Does it trigger requests in
any of the other browsers?

628
00:22:17,110 --> 00:22:19,360
I can promise you I am going
somewhere with this.

629
00:22:19,360 --> 00:22:23,480
Closing the question
in three, two, one.

630
00:22:23,480 --> 00:22:26,790
There's quite a strong opinion
of no across all the browsers.

631
00:22:26,790 --> 00:22:27,870
Sorry, guys.

632
00:22:27,870 --> 00:22:30,440
Yes, in everything
except Firefox.

633
00:22:30,440 --> 00:22:33,350
And this actually makes sense.

634
00:22:33,350 --> 00:22:34,240
Let's make a div.

635
00:22:34,240 --> 00:22:35,820
We make a div, we give it
a background image.

636
00:22:35,820 --> 00:22:38,150
I'm going to give inner HTML,
where it's got Hello World,

637
00:22:38,150 --> 00:22:42,420
and the div is a div around
the world or whatever.

638
00:22:42,420 --> 00:22:43,580
Text content is Hello World.

639
00:22:43,580 --> 00:22:47,760
As you might expect, the inner
text has a line break in it.

640
00:22:47,760 --> 00:22:50,040
And &mdash; well this is how it in
IE, Chrome, and Safari &mdash;

641
00:22:50,040 --> 00:22:52,180
because inner text is more like
what you would get if you

642
00:22:52,180 --> 00:22:55,795
copy and pasted the elements,
the text of the elements.

643
00:22:55,795 --> 00:22:58,780
And because is a block-level
element &mdash; or it certainly is

644
00:22:58,780 --> 00:22:59,850
in this example &mdash;

645
00:22:59,850 --> 00:23:01,890
it gets a new line.

646
00:23:01,890 --> 00:23:04,100
So if we run this, the browser
goes, yeah, yeah, yeah.

647
00:23:04,100 --> 00:23:05,220
Text content, easy enough.

648
00:23:05,220 --> 00:23:06,210
Inner text &mdash;

649
00:23:06,210 --> 00:23:06,890
oh!

650
00:23:06,890 --> 00:23:07,935
Inner text is style dependant.

651
00:23:07,935 --> 00:23:09,940
So I'm going to have a look at
the styles of the elements.

652
00:23:09,940 --> 00:23:10,850
And oh!

653
00:23:10,850 --> 00:23:11,990
It's got a background image.

654
00:23:11,990 --> 00:23:12,580
That's interesting.

655
00:23:12,580 --> 00:23:13,680
I'll download that.

656
00:23:13,680 --> 00:23:15,290
And that's why we see most
browsers doing it.

657
00:23:15,290 --> 00:23:17,980
Firefox doesn't download at this
point, because it doesn't

658
00:23:17,980 --> 00:23:18,950
support inner text.

659
00:23:18,950 --> 00:23:20,220
It's the only browser
that doesn't.

660
00:23:20,220 --> 00:23:22,090
So it just returns undefined
at that point.

661
00:23:22,090 --> 00:23:25,490
But if you use any of these,
apart from inner text, like

662
00:23:25,490 --> 00:23:27,720
anything that's going to get
some style data from the page,

663
00:23:27,720 --> 00:23:31,080
FireFox would have started
the download as well.

664
00:23:31,080 --> 00:23:32,980
So Paul was talking about
this earlier.

665
00:23:32,980 --> 00:23:35,140
You can start doing layout
thrashing if you start doing

666
00:23:35,140 --> 00:23:36,010
these reads and writes.

667
00:23:36,010 --> 00:23:37,660
So you'll trigger extra
layouts, et cetera.

668
00:23:37,660 --> 00:23:40,270

669
00:23:40,270 --> 00:23:41,640
The browser is quite clever
about this stuff.

670
00:23:41,640 --> 00:23:43,420
It will batch changes
together .

671
00:23:43,420 --> 00:23:45,920
If you do this, like display
non-block, non-block, et

672
00:23:45,920 --> 00:23:47,170
cetera, et cetera, it
loads the width.

673
00:23:47,170 --> 00:23:49,840
This is actually a really
light piece of code.

674
00:23:49,840 --> 00:23:51,530
It's not tricky for the browser
the understand because

675
00:23:51,530 --> 00:23:53,060
it's going to ignore &mdash;

676
00:23:53,060 --> 00:23:55,770
all right, I hope that's not
my cue to get off because

677
00:23:55,770 --> 00:23:57,020
that's very passive
aggressive.

678
00:23:57,020 --> 00:23:59,560

679
00:23:59,560 --> 00:24:02,940
So it will just take the last
change that you make.

680
00:24:02,940 --> 00:24:05,100
Oh that's nice.

681
00:24:05,100 --> 00:24:07,040
This is great but it can lead
to unexpected results.

682
00:24:07,040 --> 00:24:08,880
Let's have a look at a
practical example.

683
00:24:08,880 --> 00:24:10,890
Paul and I, we want
to go over there.

684
00:24:10,890 --> 00:24:13,200
You can tell because
we're pointing.

685
00:24:13,200 --> 00:24:14,530
Let's do it with code.

686
00:24:14,530 --> 00:24:15,310
We're going to start
at left zero.

687
00:24:15,310 --> 00:24:17,770
We're going to transition left
one second, go to 100%.

688
00:24:17,770 --> 00:24:19,670
We run that code,
and it works.

689
00:24:19,670 --> 00:24:21,980
Yay, we solve the world's
problems with code.

690
00:24:21,980 --> 00:24:24,410
Now, we're very happy
at this point.

691
00:24:24,410 --> 00:24:27,230
But let's run the code again.

692
00:24:27,230 --> 00:24:28,740
Nothing happened.

693
00:24:28,740 --> 00:24:31,040
And this is because the browser
is going to ignore

694
00:24:31,040 --> 00:24:32,790
this first right of left.

695
00:24:32,790 --> 00:24:33,930
It's just going to batch
them together.

696
00:24:33,930 --> 00:24:36,490
It's only going to listen
to our last right here.

697
00:24:36,490 --> 00:24:39,980
And it's 100%, we're 100%
already, so nothing happens.

698
00:24:39,980 --> 00:24:43,200
We can fix this by enforcing
a synchronous layout here.

699
00:24:43,200 --> 00:24:45,360
Because that forces the browser
to go and look at all

700
00:24:45,360 --> 00:24:48,080
the styles of all the elements
in the page, and it realizes,

701
00:24:48,080 --> 00:24:50,400
oh yeah, we are supposed
to be at left zero.

702
00:24:50,400 --> 00:24:52,010
So when we make the
next changes, it

703
00:24:52,010 --> 00:24:52,930
will start from zero.

704
00:24:52,930 --> 00:24:55,740
We run this code as many times
as we want, and it works.

705
00:24:55,740 --> 00:24:57,340
You might have encountered
this kind of behavior and

706
00:24:57,340 --> 00:25:00,080
tried to use set timer or
something to get around it.

707
00:25:00,080 --> 00:25:03,330
No, you can just force
a layout like this.

708
00:25:03,330 --> 00:25:04,550
Right, OK last question.

709
00:25:04,550 --> 00:25:06,030
Let's go through this quickly
because I'm going to be

710
00:25:06,030 --> 00:25:07,500
chucked off the stage
in a few seconds.

711
00:25:07,500 --> 00:25:08,990
Imagine a page full
of lorem ipsum.

712
00:25:08,990 --> 00:25:09,810
It looks like this.

713
00:25:09,810 --> 00:25:11,640
595 pixels across.

714
00:25:11,640 --> 00:25:14,020
Media query, min width 600.

715
00:25:14,020 --> 00:25:15,530
Min width, so you know,
we wouldn't really

716
00:25:15,530 --> 00:25:16,880
be expected to display.

717
00:25:16,880 --> 00:25:20,560
Which browsers are going to
download that gif anyway?

718
00:25:20,560 --> 00:25:22,840
Are the browsers going to
do something different?

719
00:25:22,840 --> 00:25:24,810
And you say, you know, would
we expect it to even

720
00:25:24,810 --> 00:25:25,670
display that gif?

721
00:25:25,670 --> 00:25:27,330
You know, who knows?

722
00:25:27,330 --> 00:25:28,970
Last question, so make
it a good one.

723
00:25:28,970 --> 00:25:32,530
Closing it in three, two, one.

724
00:25:32,530 --> 00:25:33,700
Straight down the middle.

725
00:25:33,700 --> 00:25:34,160
I have &mdash;

726
00:25:34,160 --> 00:25:36,040
I feel like I've broken
you as an audience.

727
00:25:36,040 --> 00:25:38,320
I'm very sorry.

728
00:25:38,320 --> 00:25:41,010
What happens here?

729
00:25:41,010 --> 00:25:43,450
IE and Firefox will download.

730
00:25:43,450 --> 00:25:47,800
And they will actually display
the background as well.

731
00:25:47,800 --> 00:25:50,100
And this is quite sneaky.

732
00:25:50,100 --> 00:25:53,420
My measurements did not include
the scroll bar.

733
00:25:53,420 --> 00:25:57,820
With the scroll bar it brings
it over 600 pixels.

734
00:25:57,820 --> 00:26:01,310
Now, they don't call
me cunning Jake &mdash;

735
00:26:01,310 --> 00:26:03,780
they don't actually call
me cunning Jake &mdash;

736
00:26:03,780 --> 00:26:04,770
fair enough.

737
00:26:04,770 --> 00:26:06,920
This seems insane to me, to
include this scroll bar width.

738
00:26:06,920 --> 00:26:07,440
What's the use?

739
00:26:07,440 --> 00:26:08,630
It's has a 200 pixel
scrollbar.

740
00:26:08,630 --> 00:26:10,200
Why should I care about that?

741
00:26:10,200 --> 00:26:14,640
But including the scrollbar is
mandated by the specification.

742
00:26:14,640 --> 00:26:15,830
It's interesting.

743
00:26:15,830 --> 00:26:18,210
And Chrome and Safari are
breaking the spec here.

744
00:26:18,210 --> 00:26:19,500
It's fixed in the Chrome
nightlies.

745
00:26:19,500 --> 00:26:21,650
It's not fixed in the
WebKit nightlies.

746
00:26:21,650 --> 00:26:23,440
Why is the scrollbar included?

747
00:26:23,440 --> 00:26:24,870
Well, imagine this
bit of code.

748
00:26:24,870 --> 00:26:26,720
I'm no scrollbar.

749
00:26:26,720 --> 00:26:29,060
And then when the width gets to
600, I'm going to introduce

750
00:26:29,060 --> 00:26:29,900
a scroll bar.

751
00:26:29,900 --> 00:26:31,480
500 pixels, that's fine.

752
00:26:31,480 --> 00:26:32,185
We get 601.

753
00:26:32,185 --> 00:26:34,950
Ah, we need to put
a scroll bar in.

754
00:26:34,950 --> 00:26:36,200
Oh, no we're less
than 600 pixels.

755
00:26:36,200 --> 00:26:37,160
We'll take it away.

756
00:26:37,160 --> 00:26:42,340
And so on and so on and so on.

757
00:26:42,340 --> 00:26:43,900
In reality, it doesn't get stuck
in a loop, but here we

758
00:26:43,900 --> 00:26:45,200
can see what Safari does.

759
00:26:45,200 --> 00:26:47,410
I've got a background picture
and a scrollbar coming in at a

760
00:26:47,410 --> 00:26:48,380
particular width.

761
00:26:48,380 --> 00:26:50,400
And we'll see, as I'm
only moving &mdash;

762
00:26:50,400 --> 00:26:52,230
I'm only making it bigger.

763
00:26:52,230 --> 00:26:54,160
I'm not, you know,
moving both ways.

764
00:26:54,160 --> 00:26:55,370
Now we can see that the
background image

765
00:26:55,370 --> 00:26:56,980
flickers on and off.

766
00:26:56,980 --> 00:26:58,780
And then once we get beyond the
width of the scroll bar,

767
00:26:58,780 --> 00:27:00,640
it stabilizes.

768
00:27:00,640 --> 00:27:03,490
And that it.

769
00:27:03,490 --> 00:27:05,840
Let's have a look
at the rankings.

770
00:27:05,840 --> 00:27:09,630
Don't worry, if you haven't
scored great, it won't

771
00:27:09,630 --> 00:27:10,860
actually show your name
on the screen.

772
00:27:10,860 --> 00:27:12,240
And it's only going to
show the top 10.

773
00:27:12,240 --> 00:27:13,690
So don't worry too much.

774
00:27:13,690 --> 00:27:14,770
Who've we got?

775
00:27:14,770 --> 00:27:16,900
prettyFlyForAWiFi Very good.

776
00:27:16,900 --> 00:27:17,860
Who's that?

777
00:27:17,860 --> 00:27:18,560
Excellent.

778
00:27:18,560 --> 00:27:18,830
Right.

779
00:27:18,830 --> 00:27:21,604
So I will swag you
good and proper.

780
00:27:21,604 --> 00:27:23,990
Oh god, you've done quite
really, really well.

781
00:27:23,990 --> 00:27:25,120
OK that's my time.

782
00:27:25,120 --> 00:27:26,950
Thank you very much guys.

783
00:27:26,950 --> 00:27:28,150
Cheers, bye!

784
00:27:28,150 --> 00:27:30,250
[APPLAUSE]

785
00:27:30,250 --> 00:27:38,902

