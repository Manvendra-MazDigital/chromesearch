1
00:00:00,000 --> 00:02:08,742

2
00:02:08,742 --> 00:03:04,390
[MUSIC PLAYING]

3
00:03:04,390 --> 00:03:09,270

4
00:03:09,270 --> 00:03:11,810
PETE LEPAGE: Hey, everybody, and
welcome to another great

5
00:03:11,810 --> 00:03:13,240
Behind the Divs.

6
00:03:13,240 --> 00:03:16,280
Today, we're going to be talking
with the team behind

7
00:03:16,280 --> 00:03:19,120
the new Chrome experiment,
Roll It.

8
00:03:19,120 --> 00:03:22,030
So with that, I want to
introduce you guys to two of

9
00:03:22,030 --> 00:03:23,150
the engineers.

10
00:03:23,150 --> 00:03:26,006
Sean, why don't you go ahead
and introduce yourself?

11
00:03:26,006 --> 00:03:27,200
SEAN KLASSEN: Hey, everybody.

12
00:03:27,200 --> 00:03:29,300
My name is Sean Klassen.

13
00:03:29,300 --> 00:03:33,000
I am one of the founders of a
company called Legwork, and

14
00:03:33,000 --> 00:03:35,380
we're based out of
Denver, Colorado.

15
00:03:35,380 --> 00:03:39,320
And the Google Creative Lab
came to us to help them

16
00:03:39,320 --> 00:03:41,130
realize this new experiment.

17
00:03:41,130 --> 00:03:46,430
They wanted to show off some
technology with WebSockets and

18
00:03:46,430 --> 00:03:51,190
syncing your mobile device
with your computer.

19
00:03:51,190 --> 00:03:52,060
PETE LEPAGE: Cool.

20
00:03:52,060 --> 00:03:55,050
And Justin, do you want
to introduce yourself?

21
00:03:55,050 --> 00:03:55,950
JUSTIN GITLIN: Absolutely.

22
00:03:55,950 --> 00:03:58,580
I'm Justin Gitlin, also
in Denver, Colorado.

23
00:03:58,580 --> 00:04:02,940
I'm one of the co-founders and
partners in a development shop

24
00:04:02,940 --> 00:04:04,280
called Mode Set.

25
00:04:04,280 --> 00:04:07,275
And we've worked with Sean at
Legwork before, and we all

26
00:04:07,275 --> 00:04:09,270
used to work at a company
together back in the day.

27
00:04:09,270 --> 00:04:12,800
So I've got a great relationship
with them, and,

28
00:04:12,800 --> 00:04:16,920
yeah, so we did most of the
front end development.

29
00:04:16,920 --> 00:04:17,350
PETE LEPAGE: Cool.

30
00:04:17,350 --> 00:04:20,910
So actually, that's a good
question to start off with.

31
00:04:20,910 --> 00:04:22,780
You guys are sort of two
different agencies.

32
00:04:22,780 --> 00:04:28,260
How did you split the work
between the two of you guys?

33
00:04:28,260 --> 00:04:32,020
SEAN KLASSEN: Yeah, I guess
originally, the Creative Lab

34
00:04:32,020 --> 00:04:35,890
came to us, and they were
like, hey, we have been

35
00:04:35,890 --> 00:04:38,720
prototyping with this
new technology.

36
00:04:38,720 --> 00:04:40,490
We want to make a
game with it.

37
00:04:40,490 --> 00:04:42,663
What do you guys
have for ideas?

38
00:04:42,663 --> 00:04:46,310
And we came up with a bunch
of different things.

39
00:04:46,310 --> 00:04:49,200
I remember at one time, we
were talking about making

40
00:04:49,200 --> 00:04:52,630
almost like a "Guitar Hero"
type of thing, where you'd

41
00:04:52,630 --> 00:04:58,260
rock out against someone and
eventually settled on where we

42
00:04:58,260 --> 00:05:00,960
did with this game.

43
00:05:00,960 --> 00:05:04,270
And we brought in Justin &mdash;

44
00:05:04,270 --> 00:05:06,910
like he was saying, we've worked
together on a bunch of

45
00:05:06,910 --> 00:05:12,150
projects, and he's awesome at
mobile development and just a

46
00:05:12,150 --> 00:05:13,340
great developer in general.

47
00:05:13,340 --> 00:05:17,420
And he helped us make this
thing a reality.

48
00:05:17,420 --> 00:05:24,020
It is really a pretty agile
environment We had some

49
00:05:24,020 --> 00:05:27,390
initial features and user
stories set up and then just

50
00:05:27,390 --> 00:05:31,320
kind of kept iterating on the
design and the dev really all

51
00:05:31,320 --> 00:05:33,400
the way 'til the end
and the launch, and

52
00:05:33,400 --> 00:05:35,290
we run out of time.

53
00:05:35,290 --> 00:05:37,430
PETE LEPAGE: Yeah, that's
often how it works.

54
00:05:37,430 --> 00:05:40,820
It's sort of like really crazy
right up until the end, and

55
00:05:40,820 --> 00:05:43,350
then once you hit the end,
you're like, this is actually

56
00:05:43,350 --> 00:05:44,110
really good.

57
00:05:44,110 --> 00:05:46,180
We're really impressed
with this.

58
00:05:46,180 --> 00:05:46,480
So &mdash;

59
00:05:46,480 --> 00:05:48,030
SEAN KLASSEN: Yeah, and it's
always nerve-racking, too,

60
00:05:48,030 --> 00:05:51,540
because you've been so buried in
it, you don't know how it's

61
00:05:51,540 --> 00:05:53,030
going to be received.

62
00:05:53,030 --> 00:05:54,370
PETE LEPAGE: Yeah, absolutely.

63
00:05:54,370 --> 00:05:57,210
And I want to mention to the
folks who are watching live

64
00:05:57,210 --> 00:06:00,000
right now that if you have
questions that you want to ask

65
00:06:00,000 --> 00:06:02,440
of either Justin or
Sean, you can post

66
00:06:02,440 --> 00:06:03,890
those to Google Moderator.

67
00:06:03,890 --> 00:06:08,750
The link is there on screen
somewhere that way I think.

68
00:06:08,750 --> 00:06:09,970
But you can post those there.

69
00:06:09,970 --> 00:06:14,740
We'll be taking those as we go
throughout our Hangout today.

70
00:06:14,740 --> 00:06:18,940
But I want to ask you a little
bit about the workflow because

71
00:06:18,940 --> 00:06:22,060
working between two agencies and
the Google Creative Labs

72
00:06:22,060 --> 00:06:24,810
team must've been kind
of interesting.

73
00:06:24,810 --> 00:06:28,320
And I know that at Google I/O
this year, one of the most

74
00:06:28,320 --> 00:06:31,430
popular sessions from the Chrome
side was about the

75
00:06:31,430 --> 00:06:33,810
modern mobile workflow.

76
00:06:33,810 --> 00:06:38,390
What did your mobile
workflow look like?

77
00:06:38,390 --> 00:06:42,390
JUSTIN GITLIN: So the workflow
from my end, from the

78
00:06:42,390 --> 00:06:49,010
development side on the front
end, was writing all of the

79
00:06:49,010 --> 00:06:51,750
code in a Ruby on Rails
environment.

80
00:06:51,750 --> 00:06:57,940
And with that, you get all the
benefits of the Rails asset

81
00:06:57,940 --> 00:07:01,970
pipeline, which concatenates
all your files, compresses

82
00:07:01,970 --> 00:07:08,070
them, transcompiles any
CoffeeScript or Sass, Haml,

83
00:07:08,070 --> 00:07:12,830
using Sprockets and whatever
other machineries in the asset

84
00:07:12,830 --> 00:07:17,230
pipeline to make that really
seamless process.

85
00:07:17,230 --> 00:07:21,450
So I've mentioned that almost
all of the custom code for

86
00:07:21,450 --> 00:07:23,900
this game was written
in CoffeeScript.

87
00:07:23,900 --> 00:07:27,400
And we found that to be &mdash;

88
00:07:27,400 --> 00:07:30,730
we ended up with less code,
cleaner code than writing pure

89
00:07:30,730 --> 00:07:31,950
JavaScript.

90
00:07:31,950 --> 00:07:36,070
So that's something that we at
Mode Set generally will write

91
00:07:36,070 --> 00:07:37,340
99% of the time.

92
00:07:37,340 --> 00:07:38,235
It depends.

93
00:07:38,235 --> 00:07:41,570
If we're writing something under
500 lines of code, and

94
00:07:41,570 --> 00:07:43,980
that's the entire project,
or a quick prototype or

95
00:07:43,980 --> 00:07:46,730
something, we might just write
some raw JavaScript.

96
00:07:46,730 --> 00:07:50,015
But we've really come to love
the things that you gain out

97
00:07:50,015 --> 00:07:52,240
of CoffeeScript.

98
00:07:52,240 --> 00:07:57,690
Especially for this project,
which was quite a bit of code,

99
00:07:57,690 --> 00:08:00,830
many thousands of lines of
custom code on top the

100
00:08:00,830 --> 00:08:04,700
third-party product libraries
that we used and built in a

101
00:08:04,700 --> 00:08:05,830
really object-oriented way.

102
00:08:05,830 --> 00:08:09,980
We found that it really helps
you organize and end up with

103
00:08:09,980 --> 00:08:12,940
much cleaner and less code at
the end of the project.

104
00:08:12,940 --> 00:08:13,400
PETE LEPAGE: Huh.

105
00:08:13,400 --> 00:08:14,840
That's interesting.

106
00:08:14,840 --> 00:08:17,040
One of the questions actually
on our Moderator queue is

107
00:08:17,040 --> 00:08:21,430
about why you chose
CoffeeScript, which you kind

108
00:08:21,430 --> 00:08:22,190
of addressed.

109
00:08:22,190 --> 00:08:26,410
But is it something you'd
recommend other folks use?

110
00:08:26,410 --> 00:08:28,130
JUSTIN GITLIN: Definitely.

111
00:08:28,130 --> 00:08:31,940
So obviously, you have to &mdash;

112
00:08:31,940 --> 00:08:36,990
they call it transcompiling
CoffeeScript to JavaScript.

113
00:08:36,990 --> 00:08:40,090
So there is one step before your
CoffeeScript is ready to

114
00:08:40,090 --> 00:08:43,020
be interpreted by the browser.

115
00:08:43,020 --> 00:08:46,760
And in our environment, the
Ruby on Rails environment,

116
00:08:46,760 --> 00:08:48,820
it's really easy to set that
up and make it completely

117
00:08:48,820 --> 00:08:50,280
transparent.

118
00:08:50,280 --> 00:08:52,680
If you don't have a Ruby on
Rails environment or something

119
00:08:52,680 --> 00:08:56,300
like that that's going to do
it automatically for you as

120
00:08:56,300 --> 00:08:59,550
you're writing and refreshing
the page and hitting your

121
00:08:59,550 --> 00:09:04,170
server, I've found that a lot
of people are using a

122
00:09:04,170 --> 00:09:08,190
front-end compilation
tool called Grunt.

123
00:09:08,190 --> 00:09:10,080
That seems to be a really
popular one, and I've started

124
00:09:10,080 --> 00:09:11,480
playing with that.

125
00:09:11,480 --> 00:09:13,120
And it's really nice.

126
00:09:13,120 --> 00:09:17,970
So I'd say if you're not using
any sort of server, backing up

127
00:09:17,970 --> 00:09:22,440
your code, Grunt's a great way
to go to compile and do all of

128
00:09:22,440 --> 00:09:26,203
the same things pretty
seamlessly as well.

129
00:09:26,203 --> 00:09:28,370
SEAN KLASSEN: We've used that
on some other projects here

130
00:09:28,370 --> 00:09:30,820
ourselves when we don't want to
build any kind of back-end

131
00:09:30,820 --> 00:09:35,030
system or don't have access to
do that for whatever reason.

132
00:09:35,030 --> 00:09:35,870
PETE LEPAGE: Cool.

133
00:09:35,870 --> 00:09:37,140
JUSTIN GITLIN: Because not every
project is going to have

134
00:09:37,140 --> 00:09:38,240
a back end.

135
00:09:38,240 --> 00:09:43,470
We've had projects where we just
upload a bunch of files

136
00:09:43,470 --> 00:09:45,380
to an Apache server,
and that's it.

137
00:09:45,380 --> 00:09:48,740
So I think in that case,
something like

138
00:09:48,740 --> 00:09:49,980
Grunt's a great option.

139
00:09:49,980 --> 00:09:54,930
In our case, we did end up
compiling the entire site down

140
00:09:54,930 --> 00:09:58,180
to static files, and we used the
Ruby on Rails helpers to

141
00:09:58,180 --> 00:09:59,060
do that for us.

142
00:09:59,060 --> 00:10:05,700
So we just wrote a little bit
of Ruby to take our dynamic

143
00:10:05,700 --> 00:10:09,590
assets and translate those into
a static file system.

144
00:10:09,590 --> 00:10:10,940
PETE LEPAGE: OK.

145
00:10:10,940 --> 00:10:14,045
So what other tools were you
using for your build process?

146
00:10:14,045 --> 00:10:16,960

147
00:10:16,960 --> 00:10:20,630
SEAN KLASSEN: Like on a higher
level, because Google Creative

148
00:10:20,630 --> 00:10:23,440
Labs is in New York, we're
both in Denver.

149
00:10:23,440 --> 00:10:27,810
So we needed just some
communication tools that were

150
00:10:27,810 --> 00:10:28,270
pretty important.

151
00:10:28,270 --> 00:10:32,260
We used Google Hangouts
almost every day.

152
00:10:32,260 --> 00:10:36,750
And then we used Pivotal Tracker
to track all the

153
00:10:36,750 --> 00:10:39,777
features that we were working
on and prioritize them.

154
00:10:39,777 --> 00:10:44,760
And that was probably one of
the biggest, most important

155
00:10:44,760 --> 00:10:46,985
tools for us.

156
00:10:46,985 --> 00:10:47,320
PETE LEPAGE: Yep.

157
00:10:47,320 --> 00:10:53,430
And were you using that for bug
tracking, or what were you

158
00:10:53,430 --> 00:10:54,670
using that for?

159
00:10:54,670 --> 00:10:57,110
SEAN KLASSEN: We used it for bug
tracking, and then we also

160
00:10:57,110 --> 00:11:02,160
used it just to know what was
next in our to-do list, if

161
00:11:02,160 --> 00:11:04,840
there's revisions, or how
difficult things we were going

162
00:11:04,840 --> 00:11:09,210
to be, like if we were going
to hit our milestones.

163
00:11:09,210 --> 00:11:12,940
And we put design items right
along with [INAUDIBLE]

164
00:11:12,940 --> 00:11:13,070
development items.

165
00:11:13,070 --> 00:11:13,560
PETE LEPAGE: OK.

166
00:11:13,560 --> 00:11:15,540
All the design tasks were
in there as well.

167
00:11:15,540 --> 00:11:17,240
Cool.

168
00:11:17,240 --> 00:11:19,670
JUSTIN GITLIN: It's a good
way to sort of have some

169
00:11:19,670 --> 00:11:24,170
conversation going back and
forth about bugs or features,

170
00:11:24,170 --> 00:11:26,870
creating new user stories if
somebody has a brand new

171
00:11:26,870 --> 00:11:28,890
feature they want to
add into the app.

172
00:11:28,890 --> 00:11:31,000
It's something that we'd track
all that right there and

173
00:11:31,000 --> 00:11:34,930
prioritize by sort of
ordering the list

174
00:11:34,930 --> 00:11:36,440
of stories in Tracker.

175
00:11:36,440 --> 00:11:39,330
So it's just a nice project
management tool.

176
00:11:39,330 --> 00:11:41,580
PETE LEPAGE: And that's Pivotal
Tracker, you said?

177
00:11:41,580 --> 00:11:42,290
JUSTIN GITLIN: Yep.

178
00:11:42,290 --> 00:11:43,480
PETE LEPAGE: All right, cool.

179
00:11:43,480 --> 00:11:46,270
So let's take one of the
questions from the folks who

180
00:11:46,270 --> 00:11:47,440
are watching live.

181
00:11:47,440 --> 00:11:51,470
And Manuel wants to know, how
is it possible to send the

182
00:11:51,470 --> 00:11:54,630
data from the gyroscope so
fast through the web,

183
00:11:54,630 --> 00:11:57,510
including all the coding and
encoding that makes such a

184
00:11:57,510 --> 00:11:59,980
game possible?

185
00:11:59,980 --> 00:12:02,100
JUSTIN GITLIN: So the key
technology there is

186
00:12:02,100 --> 00:12:03,140
WebSockets.

187
00:12:03,140 --> 00:12:07,110
So if you're not familiar with
WebSockets, it's a lower

188
00:12:07,110 --> 00:12:09,440
level, faster protocol.

189
00:12:09,440 --> 00:12:12,970
Rather than using HTTP requests,
it creates more of a

190
00:12:12,970 --> 00:12:15,670
direct connection between your
machine, a server, and then

191
00:12:15,670 --> 00:12:17,190
another machine &mdash;

192
00:12:17,190 --> 00:12:18,860
or any number of machines.

193
00:12:18,860 --> 00:12:22,420
But in our case, for Roll It, it
was your mobile device and

194
00:12:22,420 --> 00:12:24,140
your laptop.

195
00:12:24,140 --> 00:12:26,080
And all those messages are
going through a server

196
00:12:26,080 --> 00:12:28,850
somewhere else, which I think a
lot of people are surprised

197
00:12:28,850 --> 00:12:32,310
at how quickly you can get those
messages transmitting.

198
00:12:32,310 --> 00:12:36,390
We were sending about 15 to 20
messages a second during

199
00:12:36,390 --> 00:12:40,270
certain parts of the game,
specifically during gameplay

200
00:12:40,270 --> 00:12:43,270
for some of the ambient elements
to have a little tilt

201
00:12:43,270 --> 00:12:47,200
based on the accelerometer data
coming in, as well as on

202
00:12:47,200 --> 00:12:49,600
the menu screens, the entire
menu sort of tilts back and

203
00:12:49,600 --> 00:12:53,040
forth, and you get a little ball
rolling across the screen

204
00:12:53,040 --> 00:12:57,280
to show what your menu
selection is.

205
00:12:57,280 --> 00:13:00,480
And in our case, we're only
sending a really small amount

206
00:13:00,480 --> 00:13:05,640
of data for that, pretty much
just the tilt angle.

207
00:13:05,640 --> 00:13:06,020
PETE LEPAGE: Right.

208
00:13:06,020 --> 00:13:11,040
So that effectively, in the
document, or in the case study

209
00:13:11,040 --> 00:13:14,280
that you guys wrote, it looks
like that's only maybe 50

210
00:13:14,280 --> 00:13:16,940
bytes or so to send the tilt.

211
00:13:16,940 --> 00:13:17,943
Is that right?

212
00:13:17,943 --> 00:13:19,940
JUSTIN GITLIN: Yeah, Something
really tiny like that.

213
00:13:19,940 --> 00:13:22,330
It's a really small JSON object
that gets transmitted

214
00:13:22,330 --> 00:13:24,710
over WebSockets and picked
up on the other device.

215
00:13:24,710 --> 00:13:25,820
So yeah.

216
00:13:25,820 --> 00:13:28,820
I mean, obviously, the smaller
you can keep that data

217
00:13:28,820 --> 00:13:31,363
transmitting, the quicker
it's going to go.

218
00:13:31,363 --> 00:13:34,970
And the chance of losing
messages along the way due to

219
00:13:34,970 --> 00:13:36,820
latency would be decreased.

220
00:13:36,820 --> 00:13:40,100
So obviously, in our case,
you want to make that as

221
00:13:40,100 --> 00:13:42,720
small as you can.

222
00:13:42,720 --> 00:13:45,240
SEAN KLASSEN: I think that was
something that we tested a lot

223
00:13:45,240 --> 00:13:48,380
up front, even before we got
into the interface design

224
00:13:48,380 --> 00:13:51,466
stuff, because we didn't want
to set up situations &mdash;

225
00:13:51,466 --> 00:13:53,880
or at least wanted to minimize
the situations &mdash;

226
00:13:53,880 --> 00:13:56,870
where there would be
that lag time.

227
00:13:56,870 --> 00:14:00,400
And we wanted to know how far
we could push that with it

228
00:14:00,400 --> 00:14:02,520
still feeling like a
nice experience.

229
00:14:02,520 --> 00:14:04,400
PETE LEPAGE: Yeah, cool.

230
00:14:04,400 --> 00:14:06,920
Well, why don't we take another
one of the questions

231
00:14:06,920 --> 00:14:08,170
from there?

232
00:14:08,170 --> 00:14:10,705

233
00:14:10,705 --> 00:14:14,370
Are there going to be more
practical uses for this modern

234
00:14:14,370 --> 00:14:15,620
technique, do you think?

235
00:14:15,620 --> 00:14:19,170

236
00:14:19,170 --> 00:14:19,720
I would think so.

237
00:14:19,720 --> 00:14:26,030
I mean, Google Creative Labs is
awesome at coming up with

238
00:14:26,030 --> 00:14:29,070
new ways to push the technology
that's coming out

239
00:14:29,070 --> 00:14:31,080
in Chrome and just on
the web in general.

240
00:14:31,080 --> 00:14:36,150
And hopefully, if we all did
our jobs right, this will

241
00:14:36,150 --> 00:14:40,300
inspire lots of people to come
up with new, practical ways to

242
00:14:40,300 --> 00:14:42,000
use this technology.

243
00:14:42,000 --> 00:14:45,240
The game's obviously really fun,
especially it was for us

244
00:14:45,240 --> 00:14:45,980
to work on.

245
00:14:45,980 --> 00:14:49,740
But I think there's a lot
that could be done

246
00:14:49,740 --> 00:14:51,640
with this for sure.

247
00:14:51,640 --> 00:14:54,512
JUSTIN GITLIN: Gaming
is a great example.

248
00:14:54,512 --> 00:14:57,770
But yeah, I think there are
plenty of opportunities to

249
00:14:57,770 --> 00:15:01,750
create new gestures and create
new interactions with the web.

250
00:15:01,750 --> 00:15:05,440
And it's up to us to come
up with those, right?

251
00:15:05,440 --> 00:15:06,780
PETE LEPAGE: Yeah, and that's
one of the cool things about

252
00:15:06,780 --> 00:15:10,110
Chrome Experiments is they are
designed to make it really

253
00:15:10,110 --> 00:15:15,120
easy to show developers what is
possible and what's sort of

254
00:15:15,120 --> 00:15:17,910
available on the web.

255
00:15:17,910 --> 00:15:20,810
I'm kind of curious about one
of the comments in the case

256
00:15:20,810 --> 00:15:21,950
study that you guys wrote.

257
00:15:21,950 --> 00:15:24,910
And you talked about the
development tools becoming

258
00:15:24,910 --> 00:15:26,890
more mature for the web.

259
00:15:26,890 --> 00:15:29,730
And you talked about just some
of them that you use, like

260
00:15:29,730 --> 00:15:32,140
CINEMA 4D and Blender.

261
00:15:32,140 --> 00:15:34,500
What we're some of the other
tools that you liked, and what

262
00:15:34,500 --> 00:15:39,000
was the part of the Chrome
Developer Tools that you found

263
00:15:39,000 --> 00:15:40,250
most useful?

264
00:15:40,250 --> 00:15:42,770

265
00:15:42,770 --> 00:15:44,020
SEAN KLASSEN: I can speak
to some of the other

266
00:15:44,020 --> 00:15:45,600
applications.

267
00:15:45,600 --> 00:15:49,090
We still used Photoshop to do
the interface stuff, which I

268
00:15:49,090 --> 00:15:52,210
know some people think is
old school, probably.

269
00:15:52,210 --> 00:15:56,050
But it still is the best
method for us.

270
00:15:56,050 --> 00:15:58,930
And then I think all the
developers these days are

271
00:15:58,930 --> 00:16:02,910
using Sublime Text to
edit their code in.

272
00:16:02,910 --> 00:16:07,520
And then when you get into like
the console and stuff in

273
00:16:07,520 --> 00:16:10,430
Chrome, that's obviously
critical.

274
00:16:10,430 --> 00:16:13,584
Justin probably can speak better
to that than I can.

275
00:16:13,584 --> 00:16:19,500
JUSTIN GITLIN: Yeah, I think
the biggest tool in the

276
00:16:19,500 --> 00:16:22,310
developer tools inside of Chrome
was the timeline with

277
00:16:22,310 --> 00:16:27,130
watching memory usage, just to
make sure that our memory heap

278
00:16:27,130 --> 00:16:29,870
didn't keep growing beyond
a reasonable boundary.

279
00:16:29,870 --> 00:16:32,590
So that helped just kind
of track down memory

280
00:16:32,590 --> 00:16:35,450
leaks along the way.

281
00:16:35,450 --> 00:16:39,500
I think when you're running at
60 frames a second inside of a

282
00:16:39,500 --> 00:16:41,610
video game environment, you
have to be really careful

283
00:16:41,610 --> 00:16:44,910
about instantiating new objects
and rather reusing

284
00:16:44,910 --> 00:16:48,690
objects whenever possible and
resetting values rather than

285
00:16:48,690 --> 00:16:51,020
creating new objects
along the way.

286
00:16:51,020 --> 00:16:54,320
So I think the memory
usage tool is really

287
00:16:54,320 --> 00:16:56,100
helpful with that.

288
00:16:56,100 --> 00:17:01,160
Obviously, the Network panel
will show you any requests

289
00:17:01,160 --> 00:17:03,860
coming down, so that was helpful
in kind of reducing

290
00:17:03,860 --> 00:17:05,290
the overall number
of requests.

291
00:17:05,290 --> 00:17:09,829
So one thing that we did to sort
of minimize the amount of

292
00:17:09,829 --> 00:17:12,960
requests was Base64 encoding
everything that we possibly

293
00:17:12,960 --> 00:17:16,819
could that was a reasonable
size to Base64 encode.

294
00:17:16,819 --> 00:17:24,010
So any image under around 10 K
in size, we'd Base64 encode

295
00:17:24,010 --> 00:17:28,930
and put that directly into the
CSS or inline in the HTML as

296
00:17:28,930 --> 00:17:31,792
an image source attribute.

297
00:17:31,792 --> 00:17:36,230
As well you can use
Base64-encoded images as

298
00:17:36,230 --> 00:17:37,790
three.js textures.

299
00:17:37,790 --> 00:17:41,330
So three.js was the 3D library
that we used to create the 3D

300
00:17:41,330 --> 00:17:42,816
environment.

301
00:17:42,816 --> 00:17:45,330
As well, we Base64 encoded
the fonts.

302
00:17:45,330 --> 00:17:48,450
So pretty much anything that
was going to be an external

303
00:17:48,450 --> 00:17:51,980
request that was small enough,
we encoded to be inline with

304
00:17:51,980 --> 00:17:54,380
the CSS or the JavaScript.

305
00:17:54,380 --> 00:17:56,480
PETE LEPAGE: Now I remember
reading in the case study that

306
00:17:56,480 --> 00:18:00,570
you said in particular with
Base64 encoding the fonts, did

307
00:18:00,570 --> 00:18:04,960
you Base64 encode both the
different types of fonts?

308
00:18:04,960 --> 00:18:09,990
And if so, do all browsers
download both of those?

309
00:18:09,990 --> 00:18:12,520
Or do you do some smarts to say,
oh, this browser supports

310
00:18:12,520 --> 00:18:15,460
this, so I'm going to send only
this type, this browser

311
00:18:15,460 --> 00:18:16,870
supports this, so
that you reduce

312
00:18:16,870 --> 00:18:18,763
the size of the download?

313
00:18:18,763 --> 00:18:21,900
JUSTIN GITLIN: Yeah, all of
the modern browsers should

314
00:18:21,900 --> 00:18:24,550
download them fine
at this point.

315
00:18:24,550 --> 00:18:28,460
And we did have to do a
little rearranging.

316
00:18:28,460 --> 00:18:32,690
I found one little bug in which
case a certain browser

317
00:18:32,690 --> 00:18:38,140
needed the SVG font listed in
front of the WAF font to draw

318
00:18:38,140 --> 00:18:39,960
into the canvas context
correctly.

319
00:18:39,960 --> 00:18:43,500
But generally, we used an SVG
font and a WAF font, and that

320
00:18:43,500 --> 00:18:48,280
seemed to be enough to cover
all the modern browsers.

321
00:18:48,280 --> 00:18:49,780
PETE LEPAGE: Cool.

322
00:18:49,780 --> 00:18:52,920
Well, why don't we take another
question from our

323
00:18:52,920 --> 00:18:53,790
Moderator queue?

324
00:18:53,790 --> 00:18:55,830
And again, the link if you
want to submit your own

325
00:18:55,830 --> 00:18:58,010
questions is there
on the page.

326
00:18:58,010 --> 00:19:01,430
But did you have any challenges
syncing the devices

327
00:19:01,430 --> 00:19:02,130
in the screens?

328
00:19:02,130 --> 00:19:03,760
And this is from
Fred in London.

329
00:19:03,760 --> 00:19:06,600

330
00:19:06,600 --> 00:19:09,460
SEAN KLASSEN: I think the
Google team had that

331
00:19:09,460 --> 00:19:12,510
theoretically working when
they came to us.

332
00:19:12,510 --> 00:19:17,010
And there was a little
bit of a challenge.

333
00:19:17,010 --> 00:19:20,210
But that was not one of
the harder parts of

334
00:19:20,210 --> 00:19:21,954
development at all.

335
00:19:21,954 --> 00:19:26,320
JUSTIN GITLIN: And that system
was built not by us.

336
00:19:26,320 --> 00:19:30,460
It was the development team that
also built the back end

337
00:19:30,460 --> 00:19:33,840
for the Racer experiment
and the Jam with Chrome

338
00:19:33,840 --> 00:19:34,370
experiment.

339
00:19:34,370 --> 00:19:35,860
And they've sort of
gotten down to a

340
00:19:35,860 --> 00:19:37,920
science at this point.

341
00:19:37,920 --> 00:19:42,870
And that all works over
WebSockets once the connection

342
00:19:42,870 --> 00:19:43,560
is established.

343
00:19:43,560 --> 00:19:48,130
But there is a bit of up front
process that has to happen

344
00:19:48,130 --> 00:19:49,340
between the two devices.

345
00:19:49,340 --> 00:19:53,140
So there's the code that you get
when you start a game that

346
00:19:53,140 --> 00:19:56,210
you use to connect the
two devices together.

347
00:19:56,210 --> 00:19:59,400
And there's a bit of back-end
work that goes into generating

348
00:19:59,400 --> 00:20:04,850
that code, the desktop telling
the back end, OK, we're using

349
00:20:04,850 --> 00:20:07,740
this code, so give
me a server.

350
00:20:07,740 --> 00:20:10,820
And once you get that server,
that's sort of stored on the

351
00:20:10,820 --> 00:20:13,210
back end to create the
WebSocket connection.

352
00:20:13,210 --> 00:20:17,580
And then on the mobile end, you
enter your code, and the

353
00:20:17,580 --> 00:20:20,880
back end recognizes that code,
sends you back that server,

354
00:20:20,880 --> 00:20:25,960
and that's how both devices
end up with the

355
00:20:25,960 --> 00:20:27,460
same WebSocket server.

356
00:20:27,460 --> 00:20:30,730
So that upfront process, there
was certainly a bit of

357
00:20:30,730 --> 00:20:32,080
back-end work that
went into it.

358
00:20:32,080 --> 00:20:34,830
But implementing it from the
front end was pretty easy with

359
00:20:34,830 --> 00:20:36,400
the API that they had set up.

360
00:20:36,400 --> 00:20:37,570
PETE LEPAGE: Oh nice, nice.

361
00:20:37,570 --> 00:20:40,300
So it was just simply an API
library that you could call

362
00:20:40,300 --> 00:20:42,640
into and just be like, hey, I
want to go do this, and it

363
00:20:42,640 --> 00:20:45,730
just worked relatively
easily for you?

364
00:20:45,730 --> 00:20:47,770
JUSTIN GITLIN: Because the back
end developers were great

365
00:20:47,770 --> 00:20:48,960
at what they did, definitely.

366
00:20:48,960 --> 00:20:53,540
And that's all built with the
Go language on Google's App

367
00:20:53,540 --> 00:20:55,480
Engine and Compute Engine.

368
00:20:55,480 --> 00:21:00,050
There's a whole series of
technologies that will create

369
00:21:00,050 --> 00:21:02,780
like a private WebSocket server
for the two machines

370
00:21:02,780 --> 00:21:06,670
per game and does a lot load
balancing up front.

371
00:21:06,670 --> 00:21:12,390
And one interesting piece of
that equation was that on the

372
00:21:12,390 --> 00:21:15,440
front end, we would receive a
list of up to three different

373
00:21:15,440 --> 00:21:18,020
WebSocket servers, and we would
ping each one to try to

374
00:21:18,020 --> 00:21:20,990
find the closest and fastest
WebSocket server to the user.

375
00:21:20,990 --> 00:21:25,990
So there was some optimization
there to make for the quickest

376
00:21:25,990 --> 00:21:27,300
experience on the front end.

377
00:21:27,300 --> 00:21:28,500
PETE LEPAGE: Right.

378
00:21:28,500 --> 00:21:31,450
So actually, that leads into
another interesting and I

379
00:21:31,450 --> 00:21:36,170
think pretty important question
for mobile and just

380
00:21:36,170 --> 00:21:37,610
for the web today in general.

381
00:21:37,610 --> 00:21:39,640
And that's like, perf
matters, right?

382
00:21:39,640 --> 00:21:42,130
Like, performance is
really important.

383
00:21:42,130 --> 00:21:48,370
How did you guys think about
performance throughout the

384
00:21:48,370 --> 00:21:51,960
entire building of
this experience?

385
00:21:51,960 --> 00:21:55,010
SEAN KLASSEN: I'd say that was
really challenging because we

386
00:21:55,010 --> 00:21:59,010
were using some things that we
hadn't necessarily developed

387
00:21:59,010 --> 00:22:01,250
any kind of major projects
with before.

388
00:22:01,250 --> 00:22:07,200
And luckily, we didn't have to
support every browser out

389
00:22:07,200 --> 00:22:12,150
there for this because some of
the technologies don't work.

390
00:22:12,150 --> 00:22:16,660
But it was something that we
had a balance with just

391
00:22:16,660 --> 00:22:18,450
building the actual features
themselves.

392
00:22:18,450 --> 00:22:23,590
So even close to launch, we've
noticed some bugs and stuff

393
00:22:23,590 --> 00:22:27,980
that we've fixed, or just ways
to improve performance.

394
00:22:27,980 --> 00:22:31,440
But there's always room to get
better at that, for sure.

395
00:22:31,440 --> 00:22:33,120
PETE LEPAGE: Yeah, absolutely.

396
00:22:33,120 --> 00:22:35,160
JUSTIN GITLIN: And I think some
of the things that I ran

397
00:22:35,160 --> 00:22:40,100
into that were really big hits
on performance were in

398
00:22:40,100 --> 00:22:47,515
three.js, the 3D library, the
more you have loaded into that

399
00:22:47,515 --> 00:22:49,440
3D environment, the slower
it's going to go.

400
00:22:49,440 --> 00:22:55,610
So in the 3D world, the lower
poly you can make your models,

401
00:22:55,610 --> 00:22:56,950
the faster it's going
to perform.

402
00:22:56,950 --> 00:23:00,530
So having fewer polygons
in your 3D meshes.

403
00:23:00,530 --> 00:23:03,960
So that's something we went back
and forth a lot between

404
00:23:03,960 --> 00:23:07,190
the code end and Sean's team,
who were building the 3-D

405
00:23:07,190 --> 00:23:10,650
models for the skee ball lane
and any other 3D models that

406
00:23:10,650 --> 00:23:13,240
were in the game.

407
00:23:13,240 --> 00:23:16,470
So there was definitely a bit of
figuring out through their

408
00:23:16,470 --> 00:23:19,350
tools, like CINEMA 4D and
Blender, on how to reduce the

409
00:23:19,350 --> 00:23:22,560
polygon count before they
exported those models and sent

410
00:23:22,560 --> 00:23:26,500
them over to me to drop into
the three.js scene.

411
00:23:26,500 --> 00:23:31,150
Similarly, the physics library
that we were using, Physijs,

412
00:23:31,150 --> 00:23:37,180
which is sort of a wrapper
around a 3D physics library

413
00:23:37,180 --> 00:23:42,990
that is really easy to drop
into a three.js scene, the

414
00:23:42,990 --> 00:23:45,250
more walls that you create that
are physics-enabled, the

415
00:23:45,250 --> 00:23:47,090
more collision detection
has to happen.

416
00:23:47,090 --> 00:23:52,400
So the less processing per
frame in the game that we

417
00:23:52,400 --> 00:23:54,950
could execute, the better.

418
00:23:54,950 --> 00:24:00,640
So we did some manual sort of
creation of the physics scene

419
00:24:00,640 --> 00:24:03,560
that's invisible to
the user but is &mdash;

420
00:24:03,560 --> 00:24:06,300
like the 3D models that they
see in the game are just a

421
00:24:06,300 --> 00:24:11,220
facade over some 3D physics
objects that were created

422
00:24:11,220 --> 00:24:13,650
manually in JavaScript.

423
00:24:13,650 --> 00:24:17,360
PETE LEPAGE: Now did you guys do
any dynamic changing of the

424
00:24:17,360 --> 00:24:20,730
amount of processing that's done
depending on how fast the

425
00:24:20,730 --> 00:24:23,790
user's computer is or what
device they're running from or

426
00:24:23,790 --> 00:24:26,030
anything like that?

427
00:24:26,030 --> 00:24:28,970
JUSTIN GITLIN: We started to.

428
00:24:28,970 --> 00:24:33,640
So I got into something along
those lines towards the end of

429
00:24:33,640 --> 00:24:36,060
the project when some older
machines weren't

430
00:24:36,060 --> 00:24:36,990
running quite as well.

431
00:24:36,990 --> 00:24:43,310
But it turns out that some of
the aspects of three.js can't

432
00:24:43,310 --> 00:24:45,340
really be changed on the fly.

433
00:24:45,340 --> 00:24:46,500
And that's kind of what
I was checking.

434
00:24:46,500 --> 00:24:48,880
Like if you were running at 20
frames a second versus 60

435
00:24:48,880 --> 00:24:51,190
frames a second, I was
trying to drop

436
00:24:51,190 --> 00:24:53,450
certain lighting or shadowing.

437
00:24:53,450 --> 00:24:55,670
But it turns out that's pretty
hard to achieve without sort

438
00:24:55,670 --> 00:24:58,540
of rebuilding the entire scene
without those features.

439
00:24:58,540 --> 00:25:01,460
And that's due to three.js
being really good at

440
00:25:01,460 --> 00:25:06,250
optimizing lighting and building
your shaders once and

441
00:25:06,250 --> 00:25:07,520
storing those on
the video card.

442
00:25:07,520 --> 00:25:09,590
And that's why three.js
runs so quickly.

443
00:25:09,590 --> 00:25:12,500
But it also means that changing
certain things on the

444
00:25:12,500 --> 00:25:13,710
fly is going to be
really tough.

445
00:25:13,710 --> 00:25:14,920
PETE LEPAGE: Yeah,
that makes sense.

446
00:25:14,920 --> 00:25:17,970
SEAN KLASSEN: And WebGL was
pretty interesting to work

447
00:25:17,970 --> 00:25:22,910
with, too, because we had to
try and detect a bunch of

448
00:25:22,910 --> 00:25:24,360
different stuff.

449
00:25:24,360 --> 00:25:30,660
Like some computers will allow
aliasing, some don't.

450
00:25:30,660 --> 00:25:36,360
And there's a software component
to it to make it

451
00:25:36,360 --> 00:25:38,150
work, but there's also
a hardware component.

452
00:25:38,150 --> 00:25:41,560
And we can tell someone to
upgrade their software, but we

453
00:25:41,560 --> 00:25:44,000
can't get them to upgrade
their hardware.

454
00:25:44,000 --> 00:25:45,950
PETE LEPAGE: Yeah, that's
a little bit harder.

455
00:25:45,950 --> 00:25:47,350
Yeah.

456
00:25:47,350 --> 00:25:49,590
Why don't we take one of the
next questions in the

457
00:25:49,590 --> 00:25:51,370
Moderator queue?

458
00:25:51,370 --> 00:25:56,380
And Manuel, again, wants to
know, why didn't Chrome need

459
00:25:56,380 --> 00:25:59,980
any special permissions to use
the gyroscope without having

460
00:25:59,980 --> 00:26:01,660
to root the device or
anything like that?

461
00:26:01,660 --> 00:26:07,930

462
00:26:07,930 --> 00:26:10,410
JUSTIN GITLIN: I guess there
are certain things that are

463
00:26:10,410 --> 00:26:13,910
clearly sort of violations
of somebody's privacy.

464
00:26:13,910 --> 00:26:18,010
If a website's going to access
your camera without asking,

465
00:26:18,010 --> 00:26:19,110
that shouldn't be allowed.

466
00:26:19,110 --> 00:26:21,900
I think most people would
agree with that.

467
00:26:21,900 --> 00:26:25,950
And we did work with the Google
Creative Lab team to

468
00:26:25,950 --> 00:26:28,580
make sure that we were not
sending any sensitive user

469
00:26:28,580 --> 00:26:31,620
data over the connections
because I

470
00:26:31,620 --> 00:26:33,650
think Google clearly &mdash;

471
00:26:33,650 --> 00:26:35,840
with that process that we had
to go through to sort of

472
00:26:35,840 --> 00:26:38,130
outline every little bit of
information we're sending from

473
00:26:38,130 --> 00:26:39,430
machine to machine &mdash;

474
00:26:39,430 --> 00:26:42,540
that there's clearly a lot of
sensitivity to people's

475
00:26:42,540 --> 00:26:45,490
privacy, which I definitely
appreciate.

476
00:26:45,490 --> 00:26:49,420
And I think you can't really
glean anything from the

477
00:26:49,420 --> 00:26:52,970
accelerometer about where
someone is or necessarily what

478
00:26:52,970 --> 00:26:54,915
they're doing, or you
can't really be

479
00:26:54,915 --> 00:26:56,250
creepy with that data.

480
00:26:56,250 --> 00:26:56,840
PETE LEPAGE: Yeah.

481
00:26:56,840 --> 00:26:59,420
Yeah, no, that's very true.

482
00:26:59,420 --> 00:27:02,890
One of the cool things is the
accelerometer, the device

483
00:27:02,890 --> 00:27:05,120
motion, device orientation
stuff, is all part of the

484
00:27:05,120 --> 00:27:07,370
standard HTML5 spec.

485
00:27:07,370 --> 00:27:10,360
So that's available to any
developer who wants to build

486
00:27:10,360 --> 00:27:12,870
for the web.

487
00:27:12,870 --> 00:27:17,980
SEAN KLASSEN: Yeah, and I think
Androids and iPhones,

488
00:27:17,980 --> 00:27:21,310
pretty much all smartphones
allow you access to that

489
00:27:21,310 --> 00:27:24,340
within the browser
now, at least if

490
00:27:24,340 --> 00:27:25,640
the software's current.

491
00:27:25,640 --> 00:27:26,200
PETE LEPAGE: Yeah.

492
00:27:26,200 --> 00:27:29,060
Actually, that's a
good question.

493
00:27:29,060 --> 00:27:33,480
Did you face any problems in
dealing with the experiment or

494
00:27:33,480 --> 00:27:37,980
with anything like that, in
dealing with the device

495
00:27:37,980 --> 00:27:41,880
orientation in device
motion stuff?

496
00:27:41,880 --> 00:27:43,205
SEAN KLASSEN: Yeah, there was
definitely challenges.

497
00:27:43,205 --> 00:27:43,880
PETE LEPAGE: And I'll
be right back.

498
00:27:43,880 --> 00:27:47,195
SEAN KLASSEN: I think the
biggest thing was doing our

499
00:27:47,195 --> 00:27:51,580
best to normalize the data to
one solution that worked

500
00:27:51,580 --> 00:27:56,250
across everything that supported
those objects.

501
00:27:56,250 --> 00:28:02,280

502
00:28:02,280 --> 00:28:05,990
Some phones are better
than others.

503
00:28:05,990 --> 00:28:09,810
But I think we came up with a
pretty good way to make it

504
00:28:09,810 --> 00:28:13,347
work across everything
pretty much the same.

505
00:28:13,347 --> 00:28:14,141
PETE LEPAGE: Awesome.

506
00:28:14,141 --> 00:28:19,330
JUSTIN GITLIN: Yeah, just to
follow up on that, I think

507
00:28:19,330 --> 00:28:21,640
certain phones will have a
faster rate at which the

508
00:28:21,640 --> 00:28:25,040
accelerometer updates come in,
or the accelerometer event is

509
00:28:25,040 --> 00:28:26,340
fired on a window.

510
00:28:26,340 --> 00:28:29,560
So to pick those up at different
intervals, we

511
00:28:29,560 --> 00:28:34,270
implemented some time stamping
along with each update to

512
00:28:34,270 --> 00:28:37,690
normalize them across devices.

513
00:28:37,690 --> 00:28:40,750
So maybe a device that's running
slower than another

514
00:28:40,750 --> 00:28:43,630
device will hopefully feel
pretty much the same.

515
00:28:43,630 --> 00:28:48,400
And we definitely went through a
lot of iterations of how the

516
00:28:48,400 --> 00:28:52,390
swing, like as you swing your
phone to perform the roll

517
00:28:52,390 --> 00:28:55,650
gesture, we went through a lot
of iterations where we would

518
00:28:55,650 --> 00:28:57,750
think it felt good, but then
we'd hand it to somebody else

519
00:28:57,750 --> 00:29:01,280
to beta test, and they just
wouldn't be able to do it.

520
00:29:01,280 --> 00:29:04,210
So there was a lot of sort of
back and forth on watching how

521
00:29:04,210 --> 00:29:07,660
people picked up a phone and
swung at and adjusting based

522
00:29:07,660 --> 00:29:09,470
on what we saw.

523
00:29:09,470 --> 00:29:12,890
It's easy as somebody who's
developing something like this

524
00:29:12,890 --> 00:29:16,270
to get to a point where you
think, oh, this is great.

525
00:29:16,270 --> 00:29:17,380
It works.

526
00:29:17,380 --> 00:29:18,980
And then you hand it to someone
else, and they just

527
00:29:18,980 --> 00:29:19,740
can't figure it out.

528
00:29:19,740 --> 00:29:23,490
So there was definitely a lot
in terms of making the roll

529
00:29:23,490 --> 00:29:25,290
gestures feel right.

530
00:29:25,290 --> 00:29:26,180
PETE LEPAGE: Cool.

531
00:29:26,180 --> 00:29:29,325
So another question, this one
actually comes from Paul

532
00:29:29,325 --> 00:29:32,890
Kinlan, one of the guys on my
team who's based in London.

533
00:29:32,890 --> 00:29:37,700
He wanted to know if there were
any features that don't

534
00:29:37,700 --> 00:29:42,240
exist as part of the Open Web
Platform that you guys would

535
00:29:42,240 --> 00:29:44,670
have liked to have had, that
would've been useful, that

536
00:29:44,670 --> 00:29:46,690
would've made building this
experiment easier.

537
00:29:46,690 --> 00:29:50,434

538
00:29:50,434 --> 00:29:52,850
SEAN KLASSEN: I don't know.

539
00:29:52,850 --> 00:29:56,450
I never even thought about that
because the job from the

540
00:29:56,450 --> 00:29:59,363
start was to think what can we
do with this technology.

541
00:29:59,363 --> 00:30:02,620

542
00:30:02,620 --> 00:30:11,400
But I guess maybe like you're
somewhat limited in the speed

543
00:30:11,400 --> 00:30:15,350
of your connections and how fast
things return from the

544
00:30:15,350 --> 00:30:19,480
gyroscope and accelerometers
and stuff.

545
00:30:19,480 --> 00:30:21,636
But I don't know.

546
00:30:21,636 --> 00:30:23,030
I think it was pretty good.

547
00:30:23,030 --> 00:30:23,410
PETE LEPAGE: Cool.

548
00:30:23,410 --> 00:30:24,200
JUSTIN GITLIN: Yeah.

549
00:30:24,200 --> 00:30:27,500
I guess one thing that I could
think of is given that the

550
00:30:27,500 --> 00:30:32,860
game is based so much on the
WebSocket protocol, and that

551
00:30:32,860 --> 00:30:35,990
does require obviously going
out to a remote server and

552
00:30:35,990 --> 00:30:39,570
then coming back into your house
or office or wherever

553
00:30:39,570 --> 00:30:43,850
you're playing, there are
certain corporate offices or

554
00:30:43,850 --> 00:30:47,340
cell providers that block
WebSockets connections.

555
00:30:47,340 --> 00:30:49,840
So that was a pretty big
challenge that we ran into,

556
00:30:49,840 --> 00:30:53,310
and especially testing that
was really tough.

557
00:30:53,310 --> 00:30:55,660
Somebody testing it may have
been in an office that was

558
00:30:55,660 --> 00:30:58,720
blocking WebSockets, but we
didn't have access as

559
00:30:58,720 --> 00:31:01,650
developers to get in there and
actually see what type of

560
00:31:01,650 --> 00:31:04,400
errors were being thrown or how
that WebSocket connection

561
00:31:04,400 --> 00:31:06,540
was closing automatically.

562
00:31:06,540 --> 00:31:08,550
So we ran into some
pretty tough

563
00:31:08,550 --> 00:31:09,940
issues along those lines.

564
00:31:09,940 --> 00:31:12,260
So I think one thing that maybe
would have been cool

565
00:31:12,260 --> 00:31:15,470
would be to not have to hit a
remote server to have your

566
00:31:15,470 --> 00:31:18,800
WebSocket connection
established, or maybe some way

567
00:31:18,800 --> 00:31:21,970
of syncing two devices and
creating that connection

568
00:31:21,970 --> 00:31:24,000
without having to
hit a server.

569
00:31:24,000 --> 00:31:25,170
That could be cool.

570
00:31:25,170 --> 00:31:26,300
PETE LEPAGE: Yeah.

571
00:31:26,300 --> 00:31:28,140
In fact, that is coming.

572
00:31:28,140 --> 00:31:31,950
That's coming as part of
the new WebRTC APIs.

573
00:31:31,950 --> 00:31:34,140
And they're going to allow
peer to peer connections.

574
00:31:34,140 --> 00:31:37,450
So today by going, you guys have
to go up to the server to

575
00:31:37,450 --> 00:31:38,550
come back down.

576
00:31:38,550 --> 00:31:41,460
With peer connections, you'll
have to go up to a server in

577
00:31:41,460 --> 00:31:43,680
order to do the initial
handshake and figure out where

578
00:31:43,680 --> 00:31:45,390
the other user is.

579
00:31:45,390 --> 00:31:49,600
But once you've done that
initial handshake, you can

580
00:31:49,600 --> 00:31:53,580
connect directly to the other
machine, which means much

581
00:31:53,580 --> 00:31:57,250
faster connections, no longer
needing to deal with that,

582
00:31:57,250 --> 00:32:00,840
hey, somebody else might
shut anything down.

583
00:32:00,840 --> 00:32:04,620
Much better option, I think,
and a much better future.

584
00:32:04,620 --> 00:32:04,910
SEAN KLASSEN: Yeah.

585
00:32:04,910 --> 00:32:07,260
I think that the WebRTC stuff
is really exciting.

586
00:32:07,260 --> 00:32:10,330
Because you can already see with
our experiment you can

587
00:32:10,330 --> 00:32:12,300
make stuff feel pretty
real time.

588
00:32:12,300 --> 00:32:16,220
And so you're going to be able
to send so much more

589
00:32:16,220 --> 00:32:18,790
data back with that.

590
00:32:18,790 --> 00:32:19,560
PETE LEPAGE: Cool.

591
00:32:19,560 --> 00:32:22,360
And you guys have written a case
study that goes into some

592
00:32:22,360 --> 00:32:24,530
more technical depth on
some of the stuff

593
00:32:24,530 --> 00:32:25,230
on how you did this.

594
00:32:25,230 --> 00:32:28,190
And you've got some great code
examples and that in there.

595
00:32:28,190 --> 00:32:31,960
I've put the URL on screen
for people to check out.

596
00:32:31,960 --> 00:32:33,470
But you can see that
case study there.

597
00:32:33,470 --> 00:32:34,935
It's on HTML5 Rocks.

598
00:32:34,935 --> 00:32:37,690

599
00:32:37,690 --> 00:32:41,570
I think we're down towards
the end of the questions.

600
00:32:41,570 --> 00:32:44,200
Is there anything that you guys
want to add or sort of

601
00:32:44,200 --> 00:32:46,750
mention before we wrap up?

602
00:32:46,750 --> 00:32:50,620

603
00:32:50,620 --> 00:32:50,940
SEAN KLASSEN: I don't know.

604
00:32:50,940 --> 00:32:52,480
I can't really think
of too much.

605
00:32:52,480 --> 00:32:54,980
I'm thankful for the
opportunity to

606
00:32:54,980 --> 00:32:55,720
be a part of this.

607
00:32:55,720 --> 00:32:57,220
PETE LEPAGE: Well, it
was a great project.

608
00:32:57,220 --> 00:32:59,750
I think you guys did a really
great job and should be very,

609
00:32:59,750 --> 00:33:03,320
very happy with what you got.

610
00:33:03,320 --> 00:33:05,120
JUSTIN GITLIN: I guess one sort
of thing that I've been

611
00:33:05,120 --> 00:33:09,510
pondering a bit as we've wrapped
it up, I think there

612
00:33:09,510 --> 00:33:12,160
is something about the
familiarity of skee ball that

613
00:33:12,160 --> 00:33:15,110
I think made this really
successful in the hands of

614
00:33:15,110 --> 00:33:18,830
people that may not be so
tech-savvy and may not be

615
00:33:18,830 --> 00:33:21,730
quite as hip to what's hot
and new on the internet.

616
00:33:21,730 --> 00:33:25,425
And that's something we've been
talking about, just why

617
00:33:25,425 --> 00:33:31,260
do people sort of latch onto
it across the internet.

618
00:33:31,260 --> 00:33:36,160
And I think it's due to some
amount of familiarity wrapped

619
00:33:36,160 --> 00:33:38,160
into these sort of cutting-edge
technologies.

620
00:33:38,160 --> 00:33:41,990
So I think that's a lesson to
take away just for other sort

621
00:33:41,990 --> 00:33:43,480
of experimentation.

622
00:33:43,480 --> 00:33:45,970
If you can make something that
may be using these new

623
00:33:45,970 --> 00:33:48,790
technologies that feels so
cutting edge to us web

624
00:33:48,790 --> 00:33:53,330
developers but make it feel not
so intimidating for the

625
00:33:53,330 --> 00:33:55,580
average user to pick up and
start interacting with, I

626
00:33:55,580 --> 00:33:57,940
think there's something
to be said for that.

627
00:33:57,940 --> 00:34:00,170
SEAN KLASSEN: Yeah, I think
that's a good point.

628
00:34:00,170 --> 00:34:01,920
You just have to learn
one new thing.

629
00:34:01,920 --> 00:34:05,780
You don't have to learn two or
three or whatever new things.

630
00:34:05,780 --> 00:34:07,810
So that's a lot less
intimidating.

631
00:34:07,810 --> 00:34:08,670
PETE LEPAGE: Cool.

632
00:34:08,670 --> 00:34:11,179
Well, I have one last question
for you guys.

633
00:34:11,179 --> 00:34:12,429
What's your high score?

634
00:34:12,429 --> 00:34:14,980

635
00:34:14,980 --> 00:34:15,449
SEAN KLASSEN: Oh man.

636
00:34:15,449 --> 00:34:19,380
I got a fireball on the first
turn of the game once.

637
00:34:19,380 --> 00:34:22,070
So I got like 940
or something.

638
00:34:22,070 --> 00:34:24,280
PETE LEPAGE: All right, 940.

639
00:34:24,280 --> 00:34:24,710
And Justin?

640
00:34:24,710 --> 00:34:25,620
JUSTIN GITLIN: All right.

641
00:34:25,620 --> 00:34:30,460
I guess I've play this game so
many times that I don't know

642
00:34:30,460 --> 00:34:31,659
that I have a good
answer for you.

643
00:34:31,659 --> 00:34:34,639
I will say, though, while we
were at the Google I/O

644
00:34:34,639 --> 00:34:37,820
conference, we had a competition
for how many 100s

645
00:34:37,820 --> 00:34:39,350
we could get in a game.

646
00:34:39,350 --> 00:34:43,010
And Sean and I both tied
at two 100s per game.

647
00:34:43,010 --> 00:34:43,480
PETE LEPAGE: All right.

648
00:34:43,480 --> 00:34:44,380
So just two.

649
00:34:44,380 --> 00:34:49,760
So folks who are watching
at home, g.co/rollit.

650
00:34:49,760 --> 00:34:52,946
You've got to beat two
100s in a row.

651
00:34:52,946 --> 00:34:54,730
SEAN KLASSEN: Oh, just
in the game.

652
00:34:54,730 --> 00:34:56,800
PETE LEPAGE: Just in the
game, all right.

653
00:34:56,800 --> 00:34:57,650
Cool.

654
00:34:57,650 --> 00:35:00,660
Well, guys, Sean, Justin,
thank you very much for

655
00:35:00,660 --> 00:35:02,940
joining us today.

656
00:35:02,940 --> 00:35:06,490
The URL for the documentation is
there that you can go check

657
00:35:06,490 --> 00:35:09,270
out and have a look
at the case study

658
00:35:09,270 --> 00:35:10,640
that these guys wrote.

659
00:35:10,640 --> 00:35:12,720
And thanks for joining us.

660
00:35:12,720 --> 00:35:18,640
We're going to be back next
week with a special Chrome

661
00:35:18,640 --> 00:35:21,780
mobile event, where we're going
to be talking about

662
00:35:21,780 --> 00:35:25,210
Chrome Racer and have
the developers

663
00:35:25,210 --> 00:35:26,510
behind that join us.

664
00:35:26,510 --> 00:35:29,450
So with that, I want to say
thanks, everybody, and thanks

665
00:35:29,450 --> 00:35:30,900
for joining us.

666
00:35:30,900 --> 00:35:32,000
All right, bye guys.

667
00:35:32,000 --> 00:35:32,730
SEAN KLASSEN: Thank you.

668
00:35:32,730 --> 00:35:33,980
Bye bye.

669
00:35:33,980 --> 00:36:33,472

