1
00:00:00,000 --> 00:01:05,590

2
00:01:05,590 --> 00:01:08,050
PETE LEPAGE: Hey, everybody, and
welcome to another Chrome

3
00:01:08,050 --> 00:01:09,820
Apps Office Hours.

4
00:01:09,820 --> 00:01:12,790
This week, I'm going to be
talking about the new in-app

5
00:01:12,790 --> 00:01:16,910
payment system that's available
for the new Chrome

6
00:01:16,910 --> 00:01:19,080
packaged app platform.

7
00:01:19,080 --> 00:01:22,010
If you've used Chrome apps
before, you know that there

8
00:01:22,010 --> 00:01:25,310
was a model where you could sell
an app with a one-time

9
00:01:25,310 --> 00:01:31,870
payment up front in the store,
or you could allow the user to

10
00:01:31,870 --> 00:01:33,450
get the app for free.

11
00:01:33,450 --> 00:01:37,770
Well, with Chrome packaged
apps, now you can use the

12
00:01:37,770 --> 00:01:39,370
in-app payment system.

13
00:01:39,370 --> 00:01:43,800
The in-app payment system uses
the same similar set of APIs

14
00:01:43,800 --> 00:01:48,670
that are used by the Google
Wallet digital service system,

15
00:01:48,670 --> 00:01:52,150
and it allows us to just quickly
and easily charge our

16
00:01:52,150 --> 00:01:55,990
users for digital goods.

17
00:01:55,990 --> 00:01:58,930
So let's get started and take
a look at our code &mdash;

18
00:01:58,930 --> 00:02:00,380
or take a look at some slides.

19
00:02:00,380 --> 00:02:03,000
We can switch to the
slides, perfect.

20
00:02:03,000 --> 00:02:06,470
So there's effectively five
steps that we need to walk

21
00:02:06,470 --> 00:02:08,889
through in order to
use the in-app

22
00:02:08,889 --> 00:02:10,590
payments in a Chrome app.

23
00:02:10,590 --> 00:02:13,950
So step one, obvious,
pretty easy.

24
00:02:13,950 --> 00:02:15,950
We need to go set up our
merchant account.

25
00:02:15,950 --> 00:02:18,710
You can set that up either in
the production or sandbox

26
00:02:18,710 --> 00:02:19,560
environment.

27
00:02:19,560 --> 00:02:22,160
Today I'm going to be using
one in the sandbox

28
00:02:22,160 --> 00:02:24,780
environment.

29
00:02:24,780 --> 00:02:26,740
And we'll be using the
sandbox environment

30
00:02:26,740 --> 00:02:28,400
through this whole thing.

31
00:02:28,400 --> 00:02:30,885
The second thing we need to do
is create something called a

32
00:02:30,885 --> 00:02:35,740
JSON web token, or a JWT, that
identifies each individual

33
00:02:35,740 --> 00:02:37,020
item that we want to sell.

34
00:02:37,020 --> 00:02:40,010
So if we want to sell a gold
star or later I'm going to be

35
00:02:40,010 --> 00:02:43,450
selling some sad pandas, if you
want to sell those, you

36
00:02:43,450 --> 00:02:47,030
need to have a JWT for
each individual item.

37
00:02:47,030 --> 00:02:50,860
Third thing we need to do is
include a buy.js file in our

38
00:02:50,860 --> 00:02:53,330
Chrome packaged app
application.

39
00:02:53,330 --> 00:02:59,020
Because of content security
policy rules, we can't include

40
00:02:59,020 --> 00:03:00,950
files from outside resources.

41
00:03:00,950 --> 00:03:05,090
So we need to include that
buy.js file in our Chrome

42
00:03:05,090 --> 00:03:07,080
packaged app.

43
00:03:07,080 --> 00:03:13,130
Finally, or almost finally, we
need to go and add our success

44
00:03:13,130 --> 00:03:15,620
and failure callbacks
to our packaged app.

45
00:03:15,620 --> 00:03:18,010
These are the functions that
are called when the

46
00:03:18,010 --> 00:03:22,890
application has completed the
purchase or failed to complete

47
00:03:22,890 --> 00:03:23,850
the purchase.

48
00:03:23,850 --> 00:03:27,460
And then finally, the last and
most easy step, hooking up the

49
00:03:27,460 --> 00:03:31,280
buy API to a button or to
whatever event we want to have

50
00:03:31,280 --> 00:03:34,040
the user click on that.

51
00:03:34,040 --> 00:03:38,350
Let's take a look at how the
flow works within the app and

52
00:03:38,350 --> 00:03:39,330
for a user.

53
00:03:39,330 --> 00:03:41,990
So I've got my app up, and the
user says, hey, I want to go

54
00:03:41,990 --> 00:03:42,940
buy something.

55
00:03:42,940 --> 00:03:45,330
So they go and click
on that buy button.

56
00:03:45,330 --> 00:03:53,160
And we make an API call that
goes and kicks off the in-app

57
00:03:53,160 --> 00:03:55,530
payment service.

58
00:03:55,530 --> 00:03:58,890
That in-app payment service
tosses up a dialogue that

59
00:03:58,890 --> 00:04:03,040
allows the user to enter their
name and credit card

60
00:04:03,040 --> 00:04:04,180
information.

61
00:04:04,180 --> 00:04:08,210
And then it sends that back up
to the Google servers to go

62
00:04:08,210 --> 00:04:09,930
and actually bill their
credit card.

63
00:04:09,930 --> 00:04:12,220
So it goes and checks to see.

64
00:04:12,220 --> 00:04:16,649
It'll then potentially
do an HTTP post

65
00:04:16,649 --> 00:04:17,700
request to your service.

66
00:04:17,700 --> 00:04:20,470
This is an optional thing and
something that I highly

67
00:04:20,470 --> 00:04:24,750
recommend you do so that you
can use later to verify

68
00:04:24,750 --> 00:04:28,480
whether the purchase was made
successfully or not.

69
00:04:28,480 --> 00:04:33,260
As long as the Google service
gets back a 200 OK from your

70
00:04:33,260 --> 00:04:38,730
servers, it then does a callback
into your application

71
00:04:38,730 --> 00:04:40,930
saying, hey, all right, great.

72
00:04:40,930 --> 00:04:45,200
The user's purchased that app or
purchase that digital good,

73
00:04:45,200 --> 00:04:49,860
whatever it happens to
be, a sad panda.

74
00:04:49,860 --> 00:04:52,140
And you get the call back.

75
00:04:52,140 --> 00:04:54,990
Now like I said, optionally,
you can have your server

76
00:04:54,990 --> 00:04:56,960
register and say,
hey, yup, OK, I

77
00:04:56,960 --> 00:04:58,780
acknowledge this purchase.

78
00:04:58,780 --> 00:05:03,430
You can also do a validation
from the app to your server to

79
00:05:03,430 --> 00:05:07,090
say, hey, did this user actually
make this purchase,

80
00:05:07,090 --> 00:05:10,230
so that you can have sort of a
second line of verification,

81
00:05:10,230 --> 00:05:12,840
making sure that it did
actually happen.

82
00:05:12,840 --> 00:05:15,650

83
00:05:15,650 --> 00:05:19,760
So the API to call to actually
make the purchase is a

84
00:05:19,760 --> 00:05:21,390
relatively simple API.

85
00:05:21,390 --> 00:05:22,640
It's google.payments.inapp.buy.

86
00:05:22,640 --> 00:05:25,000

87
00:05:25,000 --> 00:05:28,260
And we provide a JSON object.

88
00:05:28,260 --> 00:05:29,900
And in that JSON object,
we need to

89
00:05:29,900 --> 00:05:31,060
specify a couple of things.

90
00:05:31,060 --> 00:05:33,540
Parameters is one.

91
00:05:33,540 --> 00:05:34,760
Today &mdash;

92
00:05:34,760 --> 00:05:41,690
or if you don't specify the
parameters as env sandbox or

93
00:05:41,690 --> 00:05:46,150
env prod, it's going to use
the sandbox by default.

94
00:05:46,150 --> 00:05:47,840
So if you want to make sure
that you're using the

95
00:05:47,840 --> 00:05:49,990
production environment, you need
to make sure that you set

96
00:05:49,990 --> 00:05:54,080
the env parameter to prod.

97
00:05:54,080 --> 00:05:58,280
The JWT, which is a rather long
file, we'll see what one

98
00:05:58,280 --> 00:06:02,620
of those looks like in a sec,
that specifies the item.

99
00:06:02,620 --> 00:06:06,530
And then the two callbacks
that get called after the

100
00:06:06,530 --> 00:06:09,320
purchase has finished.

101
00:06:09,320 --> 00:06:12,290
So when we start to think about
that JWT, well, what's a

102
00:06:12,290 --> 00:06:13,340
JWT stand for?

103
00:06:13,340 --> 00:06:17,840
JWT stands for Java Web Token.

104
00:06:17,840 --> 00:06:22,000
But it's signed and encoded, so
that when it's sent to the

105
00:06:22,000 --> 00:06:24,140
server, we can verify
that yes, this is

106
00:06:24,140 --> 00:06:24,910
actually what it is.

107
00:06:24,910 --> 00:06:27,690
And the user can't go and change
the price on whatever

108
00:06:27,690 --> 00:06:28,960
they're going to buy.

109
00:06:28,960 --> 00:06:31,710
So in its raw form, before we've
signed in and coded it,

110
00:06:31,710 --> 00:06:34,130
you can see a couple important
things here.

111
00:06:34,130 --> 00:06:43,280
We have that issue line here
that you see specifies the

112
00:06:43,280 --> 00:06:44,610
seller name.

113
00:06:44,610 --> 00:06:48,250
And that's the seller ID that
we get back when we sign up

114
00:06:48,250 --> 00:06:52,910
for our Google Wallet merchant
account for the first time.

115
00:06:52,910 --> 00:06:57,450
We can then specify the price,
whatever we want to give it

116
00:06:57,450 --> 00:06:59,560
for a name.

117
00:06:59,560 --> 00:07:04,280
We have to set a creation time
and an expiry time for this

118
00:07:04,280 --> 00:07:05,510
particular object.

119
00:07:05,510 --> 00:07:11,070
And that's what the exp and iat
are for. iat for issued

120
00:07:11,070 --> 00:07:13,060
at, and exp, expired at.

121
00:07:13,060 --> 00:07:19,340
those are a number of seconds
after the epoch, so if you're

122
00:07:19,340 --> 00:07:20,750
familiar with that.

123
00:07:20,750 --> 00:07:22,980
And then finally, that
type just defines

124
00:07:22,980 --> 00:07:24,760
the particular type.

125
00:07:24,760 --> 00:07:28,640
There are two types of JWTs
that we can use to sell

126
00:07:28,640 --> 00:07:30,370
product within our apps.

127
00:07:30,370 --> 00:07:33,840
One is just a single, one-time
item, just like you see here.

128
00:07:33,840 --> 00:07:37,800
But the other one is a
subscription service.

129
00:07:37,800 --> 00:07:40,640
And with a subscription service,
you can bill the user

130
00:07:40,640 --> 00:07:42,140
on a regular basis.

131
00:07:42,140 --> 00:07:46,470
They can be billed every month,
and you charge them

132
00:07:46,470 --> 00:07:49,630
$0.99 every month, or maybe it's
$1.99, or whatever you

133
00:07:49,630 --> 00:07:54,470
want to charge on a monthly,
regular recurring schedule.

134
00:07:54,470 --> 00:07:57,830
So there's a bunch of libraries
that are available

135
00:07:57,830 --> 00:08:02,370
to take this JSON and
package it on down.

136
00:08:02,370 --> 00:08:05,820
Once you've gone and packaged it
all down, you've signed it

137
00:08:05,820 --> 00:08:07,810
with your key, this is
what it looks like.

138
00:08:07,810 --> 00:08:10,930
It's a really long,
ugly string.

139
00:08:10,930 --> 00:08:13,210
And there's a link there at the
bottom that you can see.

140
00:08:13,210 --> 00:08:16,710
And all of these links will be
available in the sample that

141
00:08:16,710 --> 00:08:18,940
I've got, as well.

142
00:08:18,940 --> 00:08:26,690
But that link there links to a
Python JWT library to allow

143
00:08:26,690 --> 00:08:28,390
you to create and sign these.

144
00:08:28,390 --> 00:08:30,520
And the sample that we've
got going shows you how

145
00:08:30,520 --> 00:08:32,990
to do that as well.

146
00:08:32,990 --> 00:08:33,600
So let's do it.

147
00:08:33,600 --> 00:08:34,850
Let's give it a try.

148
00:08:34,850 --> 00:08:37,409

149
00:08:37,409 --> 00:08:40,120
The sample that I'm about to
show you is a Chrome packaged

150
00:08:40,120 --> 00:08:44,970
app that's available in
the GitHub repository.

151
00:08:44,970 --> 00:08:47,490
So if you go to that URL,
you can go grab it.

152
00:08:47,490 --> 00:08:48,950
And there's two components
to it.

153
00:08:48,950 --> 00:08:52,680
So let's just pop out of here,
and let me bring up &mdash;

154
00:08:52,680 --> 00:08:53,930

