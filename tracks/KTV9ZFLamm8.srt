1
00:00:00,000 --> 00:00:09,780

2
00:00:09,780 --> 00:00:13,250
Hello, and welcome to another
episode of GDL-IL &mdash;

3
00:00:13,250 --> 00:00:14,460
GDL Israel.

4
00:00:14,460 --> 00:00:17,150
Today, we're going to speak
about Big Query and Apps

5
00:00:17,150 --> 00:00:20,720
Script, and how you could
leverage those two amazing,

6
00:00:20,720 --> 00:00:25,870
powerful technologies in order
to get some clever insights on

7
00:00:25,870 --> 00:00:27,920
your own big data.

8
00:00:27,920 --> 00:00:30,900
Now I didn't prepare any
slides today, because I

9
00:00:30,900 --> 00:00:36,407
thought code would be a much
more appropriate tool for a

10
00:00:36,407 --> 00:00:37,650
crowd of developers.

11
00:00:37,650 --> 00:00:42,760
So without further ado, let me
share my screen with you, and

12
00:00:42,760 --> 00:00:44,610
show you what we are
going to do today.

13
00:00:44,610 --> 00:00:48,620

14
00:00:48,620 --> 00:00:51,220
So first of all, we're jumping
right into the things.

15
00:00:51,220 --> 00:00:53,120
But maybe we'll take
a step back.

16
00:00:53,120 --> 00:00:58,610
And we'll open another tab here,
just to show you what we

17
00:00:58,610 --> 00:00:59,860
are talking about.

18
00:00:59,860 --> 00:01:03,140

19
00:01:03,140 --> 00:01:05,480
Yes.

20
00:01:05,480 --> 00:01:11,120
And when we're talking about Big
Query, the best source to

21
00:01:11,120 --> 00:01:15,940
start and try to understand what
we have on our heads is

22
00:01:15,940 --> 00:01:19,860
the ability to gain insights
from your big data.

23
00:01:19,860 --> 00:01:22,470
And when we're saying "big
data," we're speaking about

24
00:01:22,470 --> 00:01:26,260
gigabytes, or terabytes,
or petabytes of data.

25
00:01:26,260 --> 00:01:30,350
And anyone that works in, let's
say, a startup, mid-size

26
00:01:30,350 --> 00:01:32,560
company, or a bigger
organization, knows that

27
00:01:32,560 --> 00:01:34,380
there's lots of logs,
lots of data,

28
00:01:34,380 --> 00:01:35,980
that is sitting somewhere.

29
00:01:35,980 --> 00:01:39,990
And there are true gems
in this data.

30
00:01:39,990 --> 00:01:44,060
And basically, it's quite hard,
in most of the cases, to

31
00:01:44,060 --> 00:01:47,690
ask the right questions, and
to get a response in a time

32
00:01:47,690 --> 00:01:49,800
that will make sense.

33
00:01:49,800 --> 00:01:53,290
Luckily, Google Big Query is a
technology that lets you do

34
00:01:53,290 --> 00:01:57,260
exactly that, and analyze
your massive data sets.

35
00:01:57,260 --> 00:02:00,490
And the nice thing about it is
that you have this browser

36
00:02:00,490 --> 00:02:02,550
tool &mdash; that I'll show in a
minute &mdash; and a command line

37
00:02:02,550 --> 00:02:06,010
tool that let you play, quite
quickly, with the data, even

38
00:02:06,010 --> 00:02:09,419
before you start approaching
the API and start building

39
00:02:09,419 --> 00:02:13,320
your project that will create
some useful tool for your

40
00:02:13,320 --> 00:02:15,500
organization.

41
00:02:15,500 --> 00:02:18,285
Luckily for us, you could
go today &mdash; and I'll

42
00:02:18,285 --> 00:02:19,600
make it a bit bigger &mdash;

43
00:02:19,600 --> 00:02:21,800
and the sign up is
just right here.

44
00:02:21,800 --> 00:02:24,180
And it's open, now,
for everyone.

45
00:02:24,180 --> 00:02:28,220
So you don't need to have any
invite, or any betavite.

46
00:02:28,220 --> 00:02:31,190
In our little case, you
chose the [INAUDIBLE]

47
00:02:31,190 --> 00:02:35,740

48
00:02:35,740 --> 00:02:38,530
--that's importing the HTTP
archives, where we have the

49
00:02:38,530 --> 00:02:40,960
ability to ask some [INAUDIBLE]
on the web, and

50
00:02:40,960 --> 00:02:43,780
how we could get insights
about what's

51
00:02:43,780 --> 00:02:47,430
going on with web data.

52
00:02:47,430 --> 00:02:49,550
So when we're coming to this
browser tool, you can see

53
00:02:49,550 --> 00:02:53,980
quite quickly that we have the
ability to go and to have

54
00:02:53,980 --> 00:02:56,060
those public samples.

55
00:02:56,060 --> 00:02:57,060
I'll make it a bit bigger.

56
00:02:57,060 --> 00:02:59,470
It will be easier to read.

57
00:02:59,470 --> 00:03:02,870
And in our case, I'll just
choose Wikipedia, but you have

58
00:03:02,870 --> 00:03:03,650
lots of other things.

59
00:03:03,650 --> 00:03:05,860
And first thing, we're
getting the schema.

60
00:03:05,860 --> 00:03:09,430
If we go to the details,
immediately, you could have,

61
00:03:09,430 --> 00:03:16,720
first, just the grasp of what is
the size of this data, and

62
00:03:16,720 --> 00:03:19,670
when it was created, how many
rows we are talking here &mdash;

63
00:03:19,670 --> 00:03:23,980
in our case, north of
300 million rows &mdash;

64
00:03:23,980 --> 00:03:26,180
and how this table
is composed &mdash;

65
00:03:26,180 --> 00:03:28,670
so all the different
characteristics that you could

66
00:03:28,670 --> 00:03:31,310
later run a query on.

67
00:03:31,310 --> 00:03:35,610
Here, I prepared and we have,
here, a query history.

68
00:03:35,610 --> 00:03:39,820
A simple query, that if
I'll click on it &mdash;

69
00:03:39,820 --> 00:03:44,050
let's make it a bit prettier,
and make it larger.

70
00:03:44,050 --> 00:03:48,000
So this query is getting
the top 10 sites &mdash;

71
00:03:48,000 --> 00:03:50,090
sorry, 10 articles &mdash;

72
00:03:50,090 --> 00:03:53,900
that where revised frequently.

73
00:03:53,900 --> 00:03:57,460
And we want to see just what are
those articles that people

74
00:03:57,460 --> 00:03:59,840
have changed them again,
and again, and again.

75
00:03:59,840 --> 00:04:02,650
When we are running, you see
here, we're getting how many

76
00:04:02,650 --> 00:04:04,240
seconds it's taking.

77
00:04:04,240 --> 00:04:08,820
And here in our case, to go and
to count over north of 300

78
00:04:08,820 --> 00:04:12,120
million rows took 2.4 seconds.

79
00:04:12,120 --> 00:04:15,280
So, quite impressive.

80
00:04:15,280 --> 00:04:27,690
And here, if I just take this
line and make it bigger, you

81
00:04:27,690 --> 00:04:33,410
can see a few of the
popular terms.

82
00:04:33,410 --> 00:04:39,180
Quite funny that the list of
World Wrestling is very, very

83
00:04:39,180 --> 00:04:42,100
high, considerably.

84
00:04:42,100 --> 00:04:45,400
What we want to show today, and
that's something pretty

85
00:04:45,400 --> 00:04:51,790
cool, is that the HTTP archive
is basically a site that just

86
00:04:51,790 --> 00:04:53,420
gathers what is going
on the web.

87
00:04:53,420 --> 00:04:56,710
As we know, it's important
to see how things are

88
00:04:56,710 --> 00:05:00,630
progressing, how things are
moving, what are the trends,

89
00:05:00,630 --> 00:05:02,110
if it's going forward
or backwards.

90
00:05:02,110 --> 00:05:05,200
We want to make sure that we
know, and we have a way to

91
00:05:05,200 --> 00:05:06,160
analyze it.

92
00:05:06,160 --> 00:05:09,230
And this great initiative is an
open source project that I

93
00:05:09,230 --> 00:05:12,150
was lucky enough to contribute
to in the past.

94
00:05:12,150 --> 00:05:15,450
And all the data here is,
of course, downloadable.

95
00:05:15,450 --> 00:05:18,320
So you could take it with
you, and analyze it on

96
00:05:18,320 --> 00:05:19,550
your own free time.

97
00:05:19,550 --> 00:05:22,770
The only problem is that
it's more than 400

98
00:05:22,770 --> 00:05:24,150
gigabytes of data &mdash;

99
00:05:24,150 --> 00:05:27,900
so, like a magnitude of 10
times what we saw just a

100
00:05:27,900 --> 00:05:29,870
minute ago with Wikipedia.

101
00:05:29,870 --> 00:05:35,250
There are a few interesting
trends, and slides, and stats

102
00:05:35,250 --> 00:05:37,450
that you can see here,
on the site, itself.

103
00:05:37,450 --> 00:05:39,790
But of course, it's much more
powerful to analyze and to

104
00:05:39,790 --> 00:05:42,210
have the ability to query
it on our own.

105
00:05:42,210 --> 00:05:47,340
So if we go into the browser
tool, we have here &mdash; and

106
00:05:47,340 --> 00:05:48,200
you'll need to edit.

107
00:05:48,200 --> 00:05:51,200
And I'll have a post that
gives you all the little

108
00:05:51,200 --> 00:05:55,340
details of how you could edit
to your project, later on &mdash;

109
00:05:55,340 --> 00:05:58,530
But you have, here, basically,
all the runs and all the data

110
00:05:58,530 --> 00:06:01,960
that you would want
to query later.

111
00:06:01,960 --> 00:06:08,250
And again, in our case, I
prepared a short query that &mdash;

112
00:06:08,250 --> 00:06:10,680
it's a bit longer, as
you can see here.

113
00:06:10,680 --> 00:06:15,900
But let's make it a
bit more readable.

114
00:06:15,900 --> 00:06:19,680
Basically, I'm querying
on June and July.

115
00:06:19,680 --> 00:06:23,000
But for our example, let's
keep it just for

116
00:06:23,000 --> 00:06:25,680
June, and run it.

117
00:06:25,680 --> 00:06:29,740
And what I want to see in this
query is which are the most

118
00:06:29,740 --> 00:06:31,480
popular sites &mdash;

119
00:06:31,480 --> 00:06:32,420
basically, APIs &mdash;

120
00:06:32,420 --> 00:06:34,720
that are being used
by other sites.

121
00:06:34,720 --> 00:06:38,820
So in this case, you can
see quite quickly &mdash;

122
00:06:38,820 --> 00:06:42,500
let's make it a bit bigger.

123
00:06:42,500 --> 00:06:43,750
And now let's &mdash;

124
00:06:43,750 --> 00:06:47,340

125
00:06:47,340 --> 00:06:50,900
--quite well that Facebook
is in the lead.

126
00:06:50,900 --> 00:06:53,310
And then, you have Google, and
Doubleclick, and Google

127
00:06:53,310 --> 00:06:57,770
Syndication, and Google
Analytics leading the chart.

128
00:06:57,770 --> 00:06:59,290
Of course, you could
save this table.

129
00:06:59,290 --> 00:07:04,720
You could download it, and work
with it off this browser

130
00:07:04,720 --> 00:07:06,300
tool two, and then
other tools.

131
00:07:06,300 --> 00:07:09,390
And it's a quite nice way just
to see what we are doing, and

132
00:07:09,390 --> 00:07:11,470
how we are going to
approach the data.

133
00:07:11,470 --> 00:07:15,200
Now the big, nice thing about it
is that, with App Script &mdash;

134
00:07:15,200 --> 00:07:18,100
and this is the example
that I prepared &mdash;

135
00:07:18,100 --> 00:07:21,240
we could take the same thing
that we saw just now, but

136
00:07:21,240 --> 00:07:24,530
automate it, and automate it
quite quickly and easily.

137
00:07:24,530 --> 00:07:25,980
And how we are going
to do it &mdash;

138
00:07:25,980 --> 00:07:30,090
I'll just show the
code [INAUDIBLE]

139
00:07:30,090 --> 00:07:33,140
maybe we'll just jump
in and see what the

140
00:07:33,140 --> 00:07:34,610
results look like.

141
00:07:34,610 --> 00:07:39,440
So I composed this data from
the code that we have.

142
00:07:39,440 --> 00:07:42,630
And as you can see here, I have,
here, a new menu item

143
00:07:42,630 --> 00:07:44,580
that allows me to run
those queries, and

144
00:07:44,580 --> 00:07:46,100
get the data here.

145
00:07:46,100 --> 00:07:49,260
And after I'm getting the data &mdash;
for instance, in our

146
00:07:49,260 --> 00:07:52,200
case, I just wanted to see which
are the top 10 sites

147
00:07:52,200 --> 00:07:53,680
that are being used by others.

148
00:07:53,680 --> 00:07:57,450
But I wanted to run it on
the previous 12 months.

149
00:07:57,450 --> 00:08:00,080
So I wanted to see some
sort of a trend.

150
00:08:00,080 --> 00:08:05,260
Is the usage going to
a certain direction?

151
00:08:05,260 --> 00:08:06,030
Does it move up?

152
00:08:06,030 --> 00:08:07,190
Does it move down?

153
00:08:07,190 --> 00:08:10,730
And here, I just used the
charting to take a few bold

154
00:08:10,730 --> 00:08:14,460
examples like Twitter, Google
Analytics, and Facebook.

155
00:08:14,460 --> 00:08:18,300
And as you can see here, it's
taken just a bit of time.

156
00:08:18,300 --> 00:08:23,680
But you can see quite nicely
that, maybe here at the

157
00:08:23,680 --> 00:08:28,880
beginning of 2012, the HTTP
archive wasn't crawling the

158
00:08:28,880 --> 00:08:30,930
same amount of sites that
it's crawling today.

159
00:08:30,930 --> 00:08:33,120
So we see quite a
nice ramp up.

160
00:08:33,120 --> 00:08:37,549
But you could definitely say
something about the end of

161
00:08:37,549 --> 00:08:42,390
last year &mdash; so around November,
December, 2012.

162
00:08:42,390 --> 00:08:45,305
And then up to today, we see
that, in February, we had a

163
00:08:45,305 --> 00:08:46,520
bit of a drop down.

164
00:08:46,520 --> 00:08:49,600
And then, you can
see the trend.

165
00:08:49,600 --> 00:08:53,610
Another interesting aspect is
Google Analytics, of course.

166
00:08:53,610 --> 00:08:55,940
You can see it very
steadily going up.

167
00:08:55,940 --> 00:08:58,440
And now, it's a bit flat.

168
00:08:58,440 --> 00:08:59,730
And Facebook &mdash;

169
00:08:59,730 --> 00:09:04,310
and here, it's mostly
Facebook CDN &mdash;

170
00:09:04,310 --> 00:09:08,160
it's quite different, because
I just moved the bar here.

171
00:09:08,160 --> 00:09:08,400
Why?

172
00:09:08,400 --> 00:09:11,800
I think, because of the way
the data was sorted.

173
00:09:11,800 --> 00:09:13,710
But you can see clearly
that it's going up.

174
00:09:13,710 --> 00:09:18,240
Then we had some drop at the
beginning of this year.

175
00:09:18,240 --> 00:09:20,730
And now, the trend
is quite flat.

176
00:09:20,730 --> 00:09:23,290
So it's quite nice and
interesting to see

177
00:09:23,290 --> 00:09:24,980
trends that are going.

178
00:09:24,980 --> 00:09:27,210
Let's jump into the code,
and just go over it.

179
00:09:27,210 --> 00:09:31,740
So the first function here is
a quite basic initializing

180
00:09:31,740 --> 00:09:36,230
function that will trigger when
we open the Google sheet

181
00:09:36,230 --> 00:09:37,750
that we have right here.

182
00:09:37,750 --> 00:09:41,250
And it will just add a menu item
that we saw right here.

183
00:09:41,250 --> 00:09:44,600
So this is the menu item,
as you can see here.

184
00:09:44,600 --> 00:09:52,180

185
00:09:52,180 --> 00:09:56,910
Now I hope that you can
still &mdash; yeah, OK.

186
00:09:56,910 --> 00:09:59,270
You can still see it.

187
00:09:59,270 --> 00:10:02,780
So we have this menu item.

188
00:10:02,780 --> 00:10:06,080
And let's jump into the code.

189
00:10:06,080 --> 00:10:09,190
So this code just added
this menu item.

190
00:10:09,190 --> 00:10:12,510
And it's letting us run,
basically, all the different

191
00:10:12,510 --> 00:10:14,310
queries that we want to run.

192
00:10:14,310 --> 00:10:19,220
And here, I have another query
that just allows me to run all

193
00:10:19,220 --> 00:10:20,880
the queries that I have
under my hand.

194
00:10:20,880 --> 00:10:23,260
So it's a very useful
way to just &mdash;

195
00:10:23,260 --> 00:10:25,800
let's say you have a daily
dashboard that you want to get

196
00:10:25,800 --> 00:10:29,500
insights, and to run your
several queries, and then, get

197
00:10:29,500 --> 00:10:30,550
the results back.

198
00:10:30,550 --> 00:10:33,170
It will be quite nice to have a
function to just gather all

199
00:10:33,170 --> 00:10:37,300
the queries, and make sure that
you are generating them

200
00:10:37,300 --> 00:10:38,970
with one entry point.

201
00:10:38,970 --> 00:10:42,490
And here in our case, it's the
query, or the function, that

202
00:10:42,490 --> 00:10:45,670
will give us the results of
which are the top 10 sites &mdash;

203
00:10:45,670 --> 00:10:47,130
or APIs, actually &mdash;

204
00:10:47,130 --> 00:10:49,670
that are being used by third
parties, over time.

205
00:10:49,670 --> 00:10:52,560
You can see, here, that I'm
getting a default of where I

206
00:10:52,560 --> 00:10:56,680
want this data to be output on
the sheet, itself &mdash; so what is

207
00:10:56,680 --> 00:10:58,720
the starting row, and
the starting column.

208
00:10:58,720 --> 00:11:01,810
Then, I have this unique
identifier to my project.

209
00:11:01,810 --> 00:11:06,110
And if you want to mimic it,
you'll need to go to the

210
00:11:06,110 --> 00:11:09,600
console on Google APIs, and make
sure that you're creating

211
00:11:09,600 --> 00:11:11,080
a new project, and
you're allowing

212
00:11:11,080 --> 00:11:13,825
yourself to run Big Query.

213
00:11:13,825 --> 00:11:16,620
I'll have, again, all the
details on how to do it in the

214
00:11:16,620 --> 00:11:21,400
blog post that I'll publish just
after this GDL session.

215
00:11:21,400 --> 00:11:23,600
Then, we get the handler
on that active

216
00:11:23,600 --> 00:11:24,700
sheet that we have.

217
00:11:24,700 --> 00:11:27,930
In our case, it's this
guy &mdash; third parties.

218
00:11:27,930 --> 00:11:32,250
And here, we just dump
all the raw data.

219
00:11:32,250 --> 00:11:34,840
Here, I have all the dates that
I want to, basically,

220
00:11:34,840 --> 00:11:36,320
query against.

221
00:11:36,320 --> 00:11:39,110
Another fun part is here, where
I'm just building the

222
00:11:39,110 --> 00:11:44,250
SQL and making sure that this
SQL is composed from several

223
00:11:44,250 --> 00:11:47,810
SQLs, that each and every one
of them is just going on the

224
00:11:47,810 --> 00:11:51,020
certain file, and fetching
the information from

225
00:11:51,020 --> 00:11:52,420
the specific file.

226
00:11:52,420 --> 00:11:54,920
If you saw, before that,
we were gathering

227
00:11:54,920 --> 00:11:57,480
the files per month.

228
00:11:57,480 --> 00:12:02,300
So pages and requests would be
gathered on a monthly basis.

229
00:12:02,300 --> 00:12:06,420
And then, when we query them,
it's a much more efficient way

230
00:12:06,420 --> 00:12:12,210
to go month by month, and
get the results back.

231
00:12:12,210 --> 00:12:17,090
So after we compose this nice
SQL variable, we'll create

232
00:12:17,090 --> 00:12:19,220
another query results object.

233
00:12:19,220 --> 00:12:24,350
And in this try/catch block,
we'll just go to Big Query

234
00:12:24,350 --> 00:12:28,490
object, jobs, and set the
query with the project

235
00:12:28,490 --> 00:12:31,600
identifier in our SQL.

236
00:12:31,600 --> 00:12:36,260
The beauty, here, is that this
object, now, will run the job

237
00:12:36,260 --> 00:12:37,570
in the background.

238
00:12:37,570 --> 00:12:40,750
And once its completed,
it will return us

239
00:12:40,750 --> 00:12:42,410
getJobComplete() == True.

240
00:12:42,410 --> 00:12:46,120
What we want to do, here, is
just run on this loop, and

241
00:12:46,120 --> 00:12:50,130
make sure that we are fetching
the results just

242
00:12:50,130 --> 00:12:52,890
when this guy is true.

243
00:12:52,890 --> 00:13:01,230
And if it's, of course, not,
we'll just keep trying.

244
00:13:01,230 --> 00:13:05,780
Now we are just setting some
boilerplate metadata on the

245
00:13:05,780 --> 00:13:08,990
query, itself &mdash; how many
rows we go back, etc.

246
00:13:08,990 --> 00:13:11,850
We could definitely dump them
into another sheet, and get

247
00:13:11,850 --> 00:13:15,070
some insights of what was the
metadata of the query, itself.

248
00:13:15,070 --> 00:13:18,160
And last but not least, we're
just building the object of

249
00:13:18,160 --> 00:13:21,120
dumping the result's values.

250
00:13:21,120 --> 00:13:25,530
We get all the content that we
want to put on our sheet.

251
00:13:25,530 --> 00:13:28,510
And then, we're just getting
the right range, and then

252
00:13:28,510 --> 00:13:32,310
setting the values with
results' values.

253
00:13:32,310 --> 00:13:36,360
Last but not least, we'll just
jump here, and, with the

254
00:13:36,360 --> 00:13:40,160
message box, inform the user
that everything is done.

255
00:13:40,160 --> 00:13:43,570
Let's see how it's run.

256
00:13:43,570 --> 00:13:46,530
It might take a bit of time,
but we'll run it.

257
00:13:46,530 --> 00:13:50,620
I'm just choosing the function
that I want to run here &mdash;

258
00:13:50,620 --> 00:13:52,690
in our case, it's
this function &mdash;

259
00:13:52,690 --> 00:13:54,200
and then, I'm clicking run.

260
00:13:54,200 --> 00:13:56,440
As you can see, it's
now running it.

261
00:13:56,440 --> 00:14:00,370
And if we come here, basically,
we're getting a

262
00:14:00,370 --> 00:14:02,180
notification that something
is working.

263
00:14:02,180 --> 00:14:04,170
And now you can see
that all is done.

264
00:14:04,170 --> 00:14:05,870
We have all the answers.

265
00:14:05,870 --> 00:14:12,140
And you see here, we have
fresh data that was just

266
00:14:12,140 --> 00:14:15,780
produced from this specific
function.

267
00:14:15,780 --> 00:14:17,890
The code will be,
of course, live.

268
00:14:17,890 --> 00:14:24,200
Actually, part of this code is
already live on my GitHub

269
00:14:24,200 --> 00:14:25,970
repository, and it's public.

270
00:14:25,970 --> 00:14:28,340
So of course, I'll
have a link here.

271
00:14:28,340 --> 00:14:32,170
But you could check out greenido
on GitHub, and get

272
00:14:32,170 --> 00:14:35,740
different queries here, and of
course, all the boilerplate

273
00:14:35,740 --> 00:14:38,090
code that I just showed
a second ago.

274
00:14:38,090 --> 00:14:42,600

275
00:14:42,600 --> 00:14:45,540
--case use for these types of
things is the ability to

276
00:14:45,540 --> 00:14:48,380
create your own dashboard,
quite quickly.

277
00:14:48,380 --> 00:14:51,840
And if you think about it, when
you have this big data

278
00:14:51,840 --> 00:14:56,070
inside Big Query, you could
quite quickly go with App

279
00:14:56,070 --> 00:15:00,640
Script, and create your daily
dashboard, get a trigger.

280
00:15:00,640 --> 00:15:04,380
And here is a nice
ability to just &mdash;

281
00:15:04,380 --> 00:15:08,620
sorry, just here, you could put
what your triggers are.

282
00:15:08,620 --> 00:15:12,150
Make sure that, for instance,
we want to add a new trigger

283
00:15:12,150 --> 00:15:19,090
that will run this specific
query on a specific event.

284
00:15:19,090 --> 00:15:21,610

285
00:15:21,610 --> 00:15:24,480
And this powerful thing will
give us the ability to

286
00:15:24,480 --> 00:15:30,070
basically create new dashboards
that, once we are

287
00:15:30,070 --> 00:15:33,970
fetching the data from the
query, we can emulate, we

288
00:15:33,970 --> 00:15:35,650
could update the sheet,
and of course,

289
00:15:35,650 --> 00:15:38,860
share it with our coworkers.

290
00:15:38,860 --> 00:15:41,580
So that's what I
had this time.

291
00:15:41,580 --> 00:15:46,340
And if someone would like to ask
questions on the chat, or

292
00:15:46,340 --> 00:15:48,420
live, here, please feel free.

293
00:15:48,420 --> 00:15:54,100

294
00:15:54,100 --> 00:15:57,920
So I see one thing
from a developer.

295
00:15:57,920 --> 00:16:04,360
They're asking if they could
run Big Query with other

296
00:16:04,360 --> 00:16:05,870
languages and technologies.

297
00:16:05,870 --> 00:16:08,570
And the answer, of
course, is yes.

298
00:16:08,570 --> 00:16:12,060
We actually have lots of
libraries and clients that are

299
00:16:12,060 --> 00:16:14,820
supporting almost, I
think, any popular

300
00:16:14,820 --> 00:16:17,190
language that is out there.

301
00:16:17,190 --> 00:16:20,370
A great way to start and check
how you could write with it,

302
00:16:20,370 --> 00:16:24,530
and how you could work with
Java, Python, and others would

303
00:16:24,530 --> 00:16:32,440
be to go to this page, and
just check on Big Query's

304
00:16:32,440 --> 00:16:38,080
APIs, Big Query client
libraries.

305
00:16:38,080 --> 00:16:42,740
And from here, you could see,
quite quickly, that we have

306
00:16:42,740 --> 00:16:48,750
lots of client libraries for
almost any popular technology

307
00:16:48,750 --> 00:16:50,270
that is out there.

308
00:16:50,270 --> 00:16:56,450
So if there are other questions,
this is the time.

309
00:16:56,450 --> 00:16:59,320
If not, thank you for joining
us, and we'll be here next

310
00:16:59,320 --> 00:17:01,290
week with interesting
startups.

311
00:17:01,290 --> 00:17:04,800
So be strong, and bye bye.

312
00:17:04,800 --> 00:17:12,010

