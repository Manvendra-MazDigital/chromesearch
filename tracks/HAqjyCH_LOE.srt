1
00:00:00,000 --> 00:00:08,532

2
00:00:08,532 --> 00:00:09,390
PAUL IRISH: Yeah, OK.

3
00:00:09,390 --> 00:00:11,400
So let's start.

4
00:00:11,400 --> 00:00:13,840
So I'm going to talk a little
bit about the tools that are

5
00:00:13,840 --> 00:00:17,920
available to identify and
improve some of the things

6
00:00:17,920 --> 00:00:19,170
that we actually saw tonight.

7
00:00:19,170 --> 00:00:21,490

8
00:00:21,490 --> 00:00:25,760
And to start off, I want to kind
of separate some of the

9
00:00:25,760 --> 00:00:28,930
performance ideas into
two separate buckets.

10
00:00:28,930 --> 00:00:30,070
If this works for you guys.

11
00:00:30,070 --> 00:00:30,420
I don't know.

12
00:00:30,420 --> 00:00:32,870
It seems kind of OK.

13
00:00:32,870 --> 00:00:35,820
The user experience of
performance is mostly separate

14
00:00:35,820 --> 00:00:36,540
into things.

15
00:00:36,540 --> 00:00:39,470
Like, give me the damn thing
that I wanted, and now that I

16
00:00:39,470 --> 00:00:42,810
have it, I want to interact
with it really nicely.

17
00:00:42,810 --> 00:00:46,280
So, and give me the damn thing I
wanted it's page load, often

18
00:00:46,280 --> 00:00:48,810
abbreviated as PLT,
page load time.

19
00:00:48,810 --> 00:00:50,470
In here we're talking about
things like the network

20
00:00:50,470 --> 00:00:52,970
waterfall, getting image assets
that are appropriately

21
00:00:52,970 --> 00:00:57,040
sized, non-blocking delivery of
all of our assets, getting

22
00:00:57,040 --> 00:01:01,320
the CSS that we need to render
the top of the page, quickly

23
00:01:01,320 --> 00:01:06,230
and not much else, and
also fonts, can we

24
00:01:06,230 --> 00:01:07,880
see the text quickly.

25
00:01:07,880 --> 00:01:09,400
When we're talking about runtime
performance we'll talk

26
00:01:09,400 --> 00:01:11,340
about, like, I want to interact
with the page, I want

27
00:01:11,340 --> 00:01:14,770
to click a button and see that
response very quickly.

28
00:01:14,770 --> 00:01:18,940
Any sort of transitions,
animations when I'm scrolling,

29
00:01:18,940 --> 00:01:20,640
does it stick to my finger?

30
00:01:20,640 --> 00:01:24,360
Like, I am scrolling with my
finger on the device and it

31
00:01:24,360 --> 00:01:28,610
should just be moving
immediately with things.

32
00:01:28,610 --> 00:01:30,630
What we heard about with memory
leaks and garbage

33
00:01:30,630 --> 00:01:33,480
collection, and also JavaScript
based innovation

34
00:01:33,480 --> 00:01:35,410
like with request
animation frame.

35
00:01:35,410 --> 00:01:39,550
But, to show a little bit more
about this stuff, I kind of

36
00:01:39,550 --> 00:01:40,620
want to take an example.

37
00:01:40,620 --> 00:01:43,300
So we're going to start
off with a demo.

38
00:01:43,300 --> 00:01:50,760
This is a site for a festival
in Canada, and it's the

39
00:01:50,760 --> 00:01:52,080
Canadian National Exhibition.

40
00:01:52,080 --> 00:01:54,420
So we're actually just going
to go over to the site now,

41
00:01:54,420 --> 00:01:56,110
the live site, and we're
going to play around.

42
00:01:56,110 --> 00:01:58,030
I'm actually going to do it
here in Chrome Canary.

43
00:01:58,030 --> 00:02:02,440

44
00:02:02,440 --> 00:02:02,560
OK.

45
00:02:02,560 --> 00:02:04,010
Cool.

46
00:02:04,010 --> 00:02:05,260
So how does this look?

47
00:02:05,260 --> 00:02:07,730

48
00:02:07,730 --> 00:02:09,560
Oh, it's too wide.

49
00:02:09,560 --> 00:02:10,620
OK.

50
00:02:10,620 --> 00:02:12,760
That seems good.

51
00:02:12,760 --> 00:02:15,540
So, Canadian National
Exhibition.

52
00:02:15,540 --> 00:02:19,010
My friend Mike Taylor who works
for Firefox found this

53
00:02:19,010 --> 00:02:22,390
site and he said, I defy you to
find a site that is jankier

54
00:02:22,390 --> 00:02:23,090
in its scroll.

55
00:02:23,090 --> 00:02:26,310
And I was like, I know
of a site, actually.

56
00:02:26,310 --> 00:02:29,970
So like this one, what is it?

57
00:02:29,970 --> 00:02:33,730
Inception explained, is it?

58
00:02:33,730 --> 00:02:36,460

59
00:02:36,460 --> 00:02:37,600
Is this it?

60
00:02:37,600 --> 00:02:38,410
It's really bad.

61
00:02:38,410 --> 00:02:42,740
It is &mdash; so Paul mentioned
parallax sites before.

62
00:02:42,740 --> 00:02:45,970
Parallax sites can get into
trouble really fast, and this

63
00:02:45,970 --> 00:02:53,580
site is so cool, but the frame
rate on this is just so poor.

64
00:02:53,580 --> 00:02:54,920
It's rough.

65
00:02:54,920 --> 00:02:56,240
But let me go back to what
I was talking about.

66
00:02:56,240 --> 00:02:58,080
So Canadian National
Exhibition.

67
00:02:58,080 --> 00:02:59,740
So here we are.

68
00:02:59,740 --> 00:03:00,590
We got some things happening.

69
00:03:00,590 --> 00:03:02,130
We got this [INAUDIBLE]
background, full

70
00:03:02,130 --> 00:03:03,840
bleed in the back.

71
00:03:03,840 --> 00:03:06,040
This header that kind of moves,

72
00:03:06,040 --> 00:03:07,910
scrolls up as I go down.

73
00:03:07,910 --> 00:03:09,420
But let's actually look in the
tools to see what we're

74
00:03:09,420 --> 00:03:11,066
talking about.

75
00:03:11,066 --> 00:03:11,460
All right.

76
00:03:11,460 --> 00:03:13,560
So first thing, I'm just going
to turn off this debug mode I

77
00:03:13,560 --> 00:03:14,800
had on earlier.

78
00:03:14,800 --> 00:03:19,900
And always first thing, go to
Timeline, start recording.

79
00:03:19,900 --> 00:03:23,550
I use Command E and we just
kind of scroll up an down.

80
00:03:23,550 --> 00:03:24,170
OK.

81
00:03:24,170 --> 00:03:26,570
So we're seeing a lot
of activity already.

82
00:03:26,570 --> 00:03:28,370
All right?

83
00:03:28,370 --> 00:03:29,360
A lot of stuff.

84
00:03:29,360 --> 00:03:31,470
We're seeing mostly
purple, right?

85
00:03:31,470 --> 00:03:35,790
I'm scrolling in on this area
just to kind of get a better

86
00:03:35,790 --> 00:03:40,960
zoom, and it looks like Recalc
Style is consuming a lot of

87
00:03:40,960 --> 00:03:42,630
each of these frames.

88
00:03:42,630 --> 00:03:43,690
So, OK.

89
00:03:43,690 --> 00:03:45,090
Recalc Style.

90
00:03:45,090 --> 00:03:46,140
Some things could be
happening, I'm

91
00:03:46,140 --> 00:03:47,010
not really sure what.

92
00:03:47,010 --> 00:03:51,280
So we hover on the item and we
can see the JavaScript call

93
00:03:51,280 --> 00:03:52,340
stack is associated with us.

94
00:03:52,340 --> 00:03:55,720
So the last thing that happened
was here inside

95
00:03:55,720 --> 00:03:58,030
Remove Class inside jQuery.

96
00:03:58,030 --> 00:03:58,400
OK.

97
00:03:58,400 --> 00:04:00,130
So I'm going to click that
just to find out

98
00:04:00,130 --> 00:04:01,930
what exactly it was.

99
00:04:01,930 --> 00:04:03,660
We're minified here.

100
00:04:03,660 --> 00:04:03,980
OK.

101
00:04:03,980 --> 00:04:06,240
We'll pretty print down
at the bottom.

102
00:04:06,240 --> 00:04:07,140
Looks good.

103
00:04:07,140 --> 00:04:10,210
Now I'm going to come back and
just repeat that click again.

104
00:04:10,210 --> 00:04:11,000
OK.

105
00:04:11,000 --> 00:04:11,490
Cool.

106
00:04:11,490 --> 00:04:13,480
So now we repeat the click
and it brings me

107
00:04:13,480 --> 00:04:15,400
to the exact place.

108
00:04:15,400 --> 00:04:17,890
I really like it when the cursor
does it's pretty thing.

109
00:04:17,890 --> 00:04:20,700

110
00:04:20,700 --> 00:04:24,280
So it brings me right to the
class name assignment.

111
00:04:24,280 --> 00:04:27,660
So there's a setting in the
class name on an element, and

112
00:04:27,660 --> 00:04:31,320
that is what triggered
the recalc style.

113
00:04:31,320 --> 00:04:31,750
OK.

114
00:04:31,750 --> 00:04:32,360
That's good to know.

115
00:04:32,360 --> 00:04:34,330
Now let's find out why
that happened.

116
00:04:34,330 --> 00:04:36,850
We look down into
the user code.

117
00:04:36,850 --> 00:04:41,212
And so here we go
inside CNE.js.

118
00:04:41,212 --> 00:04:45,610
Let me try clicking
that once again.

119
00:04:45,610 --> 00:04:49,640
Line 33, ah, ooh, ah.

120
00:04:49,640 --> 00:04:52,250
Remember how Paul might have
mentioned do as little as you

121
00:04:52,250 --> 00:04:54,840
can inside your scroll
handlers?

122
00:04:54,840 --> 00:04:57,290
So inside their scroll handler
they get the height of the

123
00:04:57,290 --> 00:04:59,820
window, the scroll top, they do
a little bit of math, and

124
00:04:59,820 --> 00:05:04,970
then they toggle some classes
on the HTML element in every

125
00:05:04,970 --> 00:05:06,110
single scroll.

126
00:05:06,110 --> 00:05:09,420
Toggle, toggle, toggle,
toggle.

127
00:05:09,420 --> 00:05:10,500
Not great.

128
00:05:10,500 --> 00:05:12,950
Certainly not great.

129
00:05:12,950 --> 00:05:14,350
But we can make this better.

130
00:05:14,350 --> 00:05:17,210
So I'm going to &mdash;

131
00:05:17,210 --> 00:05:19,780
so the best way to do this
is &mdash; you can see it's a

132
00:05:19,780 --> 00:05:21,110
conditional toggleClass,
right?

133
00:05:21,110 --> 00:05:23,230
You're using the second argument
inside jQuery's

134
00:05:23,230 --> 00:05:24,430
toggleClass.

135
00:05:24,430 --> 00:05:26,830
They conditionally change
it depending on that

136
00:05:26,830 --> 00:05:29,180
math working out.

137
00:05:29,180 --> 00:05:29,890
So that's OK.

138
00:05:29,890 --> 00:05:33,260
So, ideally, you set this in an
F block, and you only touch

139
00:05:33,260 --> 00:05:35,830
the DOM if you satisfy
that requirement.

140
00:05:35,830 --> 00:05:37,490
That makes a bit more sense.

141
00:05:37,490 --> 00:05:39,590
We could actually change things
a little bit, so I'm

142
00:05:39,590 --> 00:05:43,192
just going to edit the
JavaScript right here.

143
00:05:43,192 --> 00:05:45,780
Oh, oh, one sec.

144
00:05:45,780 --> 00:05:47,130
This is OK.

145
00:05:47,130 --> 00:05:47,610
All right.

146
00:05:47,610 --> 00:05:49,420
I'm going to edit the JavaScript
right here so I'm

147
00:05:49,420 --> 00:05:52,194
just going to back space &mdash;
oh, come on.

148
00:05:52,194 --> 00:05:55,098

149
00:05:55,098 --> 00:05:55,582
All right.

150
00:05:55,582 --> 00:05:58,010
Cool.

151
00:05:58,010 --> 00:06:00,710
And we're just going to get the
DOM element itself, and

152
00:06:00,710 --> 00:06:04,180
then we're going to use the
classList from HML5.

153
00:06:04,180 --> 00:06:07,430
And turns out, classList toggle
actually has the exact

154
00:06:07,430 --> 00:06:11,050
same method signature as
jQuery's toggleClass.

155
00:06:11,050 --> 00:06:15,860
And now I'm just going to hit
Command S and Chrome is just

156
00:06:15,860 --> 00:06:18,660
going to update that function
on the fly.

157
00:06:18,660 --> 00:06:19,920
Which is pretty cool.

158
00:06:19,920 --> 00:06:22,940
So then we're going to go back
to Timeline and I'll start

159
00:06:22,940 --> 00:06:26,150
recording again and
repeat my action.

160
00:06:26,150 --> 00:06:27,000
Yeah.

161
00:06:27,000 --> 00:06:28,270
Nice.

162
00:06:28,270 --> 00:06:29,260
Pretty sweet.

163
00:06:29,260 --> 00:06:30,380
So here we are.

164
00:06:30,380 --> 00:06:34,390
We do not have massive recalc
style anymore, but we do have

165
00:06:34,390 --> 00:06:37,122
some green paint going on.

166
00:06:37,122 --> 00:06:38,050
Hmmm.

167
00:06:38,050 --> 00:06:43,745
Now, on this device, I am still
hitting mostly 60 FPS so

168
00:06:43,745 --> 00:06:45,290
that's kind of OK.

169
00:06:45,290 --> 00:06:48,810
But on mobile devices I
certainly would not be.

170
00:06:48,810 --> 00:06:49,940
I want to see if I
can do anything

171
00:06:49,940 --> 00:06:51,540
about this paint first.

172
00:06:51,540 --> 00:06:54,060
So, first things first, I'm
going to come over into the

173
00:06:54,060 --> 00:06:56,890
Settings and turn on Show
Paint Rectangles.

174
00:06:56,890 --> 00:06:59,760
And usually, when I do this,
I like to turn on the Show

175
00:06:59,760 --> 00:07:02,590
Composited Layer Borders
at the same time.

176
00:07:02,590 --> 00:07:04,330
Kind of go hand in hand.

177
00:07:04,330 --> 00:07:07,110
So, bring DevTools down a little
bit and now I'm just

178
00:07:07,110 --> 00:07:08,470
going to scroll up and down.

179
00:07:08,470 --> 00:07:14,185
So my paint recs are in a red,
and we're seeing things.

180
00:07:14,185 --> 00:07:17,760
A lot going on, but I can
definitely see up top, this

181
00:07:17,760 --> 00:07:22,640
section, the header is
just in red non-stop.

182
00:07:22,640 --> 00:07:26,170
Now, the reason why is because
the header is position fixed,

183
00:07:26,170 --> 00:07:30,300
and the content is moving
beneath it.

184
00:07:30,300 --> 00:07:32,980
But that is &mdash;

185
00:07:32,980 --> 00:07:35,100
that's not going to work.

186
00:07:35,100 --> 00:07:36,330
So it's basically repainting
this, even

187
00:07:36,330 --> 00:07:37,640
though it really shouldn't.

188
00:07:37,640 --> 00:07:39,470
It knows what that looks
like, right?

189
00:07:39,470 --> 00:07:43,590
So the trick here is what?

190
00:07:43,590 --> 00:07:47,526
What's the fix for this fixed
position element?

191
00:07:47,526 --> 00:07:48,400
AUDIENCE: Translate(Z)?

192
00:07:48,400 --> 00:07:50,250
PAUL IRISH: Ooooh, yeah!

193
00:07:50,250 --> 00:07:51,440
Translate(Z).

194
00:07:51,440 --> 00:07:52,690
There it is.

195
00:07:52,690 --> 00:07:54,800

196
00:07:54,800 --> 00:07:57,010
I'm like, I'm excited to
type it and then I

197
00:07:57,010 --> 00:07:58,520
also, like, dread it.

198
00:07:58,520 --> 00:08:00,920
It's like a combination
of things, really.

199
00:08:00,920 --> 00:08:02,520
OK, OK.

200
00:08:02,520 --> 00:08:05,610
Webkit-transform translate(Z).

201
00:08:05,610 --> 00:08:07,430
Oh, my friend.

202
00:08:07,430 --> 00:08:10,580
Some people do like the 3D
version, but then you have to

203
00:08:10,580 --> 00:08:12,850
do zero, comma, zero, comma.

204
00:08:12,850 --> 00:08:14,730
This is my favorite.

205
00:08:14,730 --> 00:08:15,350
All right.

206
00:08:15,350 --> 00:08:18,760
So I got that in, I promoted the
layer and, in fact, there

207
00:08:18,760 --> 00:08:22,800
is now this little gold
border around the top.

208
00:08:22,800 --> 00:08:24,980
And let's see if I can &mdash;

209
00:08:24,980 --> 00:08:27,675
if I just toggle this you can
see that gold border coming on

210
00:08:27,675 --> 00:08:30,670
and off because that
is now a layer.

211
00:08:30,670 --> 00:08:30,950
All right.

212
00:08:30,950 --> 00:08:33,559
So we're going to
put it back on.

213
00:08:33,559 --> 00:08:35,880
And if I scroll up here &mdash;
oh, cool, yeah.

214
00:08:35,880 --> 00:08:38,140
We do not paint that.

215
00:08:38,140 --> 00:08:42,710
But then we get about
here and it moves,

216
00:08:42,710 --> 00:08:44,680
and we see that paint.

217
00:08:44,680 --> 00:08:46,410
And actually, let's fix this.

218
00:08:46,410 --> 00:08:48,510
So the movement is here &mdash;

219
00:08:48,510 --> 00:08:52,400
top &mdash; we just move the top.

220
00:08:52,400 --> 00:08:55,640
Now what's probably a better way
of moving this top other

221
00:08:55,640 --> 00:08:57,910
than just changing position
absolute?

222
00:08:57,910 --> 00:08:59,490
If we want to move an element?

223
00:08:59,490 --> 00:09:00,450
AUDIENCE: Translate.

224
00:09:00,450 --> 00:09:01,100
PAUL IRISH: Translate.

225
00:09:01,100 --> 00:09:02,380
Yeah, sounds good.

226
00:09:02,380 --> 00:09:04,550
Let's do a transform
translate.

227
00:09:04,550 --> 00:09:04,980
All right.

228
00:09:04,980 --> 00:09:07,750
So WebKit and &mdash;

229
00:09:07,750 --> 00:09:11,290
well, WebKit and Blink still
have prefixed transform, so we

230
00:09:11,290 --> 00:09:12,280
will do that.

231
00:09:12,280 --> 00:09:16,810
Hop over here and do
a Translate(Y).

232
00:09:16,810 --> 00:09:18,170
And that seems to work.

233
00:09:18,170 --> 00:09:21,215
And since I have a CSS
transition down here, I should

234
00:09:21,215 --> 00:09:25,245
probably update that.

235
00:09:25,245 --> 00:09:27,330
Ah, OK.

236
00:09:27,330 --> 00:09:29,560
Now that's a bit nicer.

237
00:09:29,560 --> 00:09:31,970
I still do see red.

238
00:09:31,970 --> 00:09:33,660
Hmmm.

239
00:09:33,660 --> 00:09:36,810
Let's see if &mdash; ah, yes.

240
00:09:36,810 --> 00:09:39,960
Is that right?

241
00:09:39,960 --> 00:09:42,822
You know &mdash;

242
00:09:42,822 --> 00:09:45,130
ahh, oooh, ahh.

243
00:09:45,130 --> 00:09:45,790
And it feels &mdash;

244
00:09:45,790 --> 00:09:47,390
I don't if it feels smoother
to you, but it

245
00:09:47,390 --> 00:09:48,150
feels smoother to me.

246
00:09:48,150 --> 00:09:49,576
It feels good.

247
00:09:49,576 --> 00:09:50,975
All right.

248
00:09:50,975 --> 00:09:51,800
So that's pretty good.

249
00:09:51,800 --> 00:09:53,065
And let's take a look over
in the Timeline.

250
00:09:53,065 --> 00:09:55,650

251
00:09:55,650 --> 00:09:56,180
All right.

252
00:09:56,180 --> 00:09:56,510
Cool.

253
00:09:56,510 --> 00:09:58,390
So, in general, in the
middle, we got, like,

254
00:09:58,390 --> 00:09:59,580
nothing going on.

255
00:09:59,580 --> 00:10:02,670
We got a little bit of paint up
when I'm going between the

256
00:10:02,670 --> 00:10:04,930
top or when a new image
is coming in.

257
00:10:04,930 --> 00:10:07,760
That's pretty good.

258
00:10:07,760 --> 00:10:10,320
So that's a little bit of things
that we can do inside

259
00:10:10,320 --> 00:10:11,230
the DevTools.

260
00:10:11,230 --> 00:10:13,270
I actually made a video showing
kind of taking this

261
00:10:13,270 --> 00:10:13,970
all the way.

262
00:10:13,970 --> 00:10:15,930
The background has a fixed
position and we can actually

263
00:10:15,930 --> 00:10:20,720
move that to the body element
and get some wins there.

264
00:10:20,720 --> 00:10:23,600
But I'm going to come back
to my slides first.

265
00:10:23,600 --> 00:10:25,190
Slides first.

266
00:10:25,190 --> 00:10:26,090
Oh, yeah.

267
00:10:26,090 --> 00:10:26,490
All right.

268
00:10:26,490 --> 00:10:28,430
So I want to walk through some
of those operations that we

269
00:10:28,430 --> 00:10:28,750
are seeing.

270
00:10:28,750 --> 00:10:30,010
Recalc Style.

271
00:10:30,010 --> 00:10:33,810
So what's happening inside
recalc style is it is getting

272
00:10:33,810 --> 00:10:36,610
all the style rules that
affect the page.

273
00:10:36,610 --> 00:10:40,510
This is anything inside a style
sheet, an inline style,

274
00:10:40,510 --> 00:10:41,620
the user agent style sheet.

275
00:10:41,620 --> 00:10:44,040
It's getting all the style
rules, it's bringing them into

276
00:10:44,040 --> 00:10:47,010
an object model, then it takes
all those selectors that you

277
00:10:47,010 --> 00:10:48,830
got hanging around and
matches those against

278
00:10:48,830 --> 00:10:49,580
what's in the DOM.

279
00:10:49,580 --> 00:10:51,520
It says, oh, yeah it is
that one right there.

280
00:10:51,520 --> 00:10:52,250
Yes, uh huh.

281
00:10:52,250 --> 00:10:53,330
The selector matching.

282
00:10:53,330 --> 00:10:56,390
Now, as Paul said, happens
really fast.

283
00:10:56,390 --> 00:10:58,920
Usually in recalc style, the
selector matching takes up

284
00:10:58,920 --> 00:11:02,030
about 10% of the general
purple bar.

285
00:11:02,030 --> 00:11:02,660
Not very much.

286
00:11:02,660 --> 00:11:04,510
Don't worry about it.

287
00:11:04,510 --> 00:11:06,850
Now that it has that mass
against the DOM, it calculates

288
00:11:06,850 --> 00:11:09,110
the computed style for every
single DOM element.

289
00:11:09,110 --> 00:11:10,840
So you know in JavaScript when
you ask for a Get Computed

290
00:11:10,840 --> 00:11:12,740
Style, it's doing that.

291
00:11:12,740 --> 00:11:15,390
But for every CSS property, for
every element, it figures

292
00:11:15,390 --> 00:11:16,480
out how things should look.

293
00:11:16,480 --> 00:11:17,690
Makes sense.

294
00:11:17,690 --> 00:11:18,210
OK.

295
00:11:18,210 --> 00:11:20,070
Moving on to layout.

296
00:11:20,070 --> 00:11:22,180
Layout is the geometry
of the page.

297
00:11:22,180 --> 00:11:25,900
And I want to show kind of one
way to look at layout.

298
00:11:25,900 --> 00:11:32,880
So I'll open up this little
demo right here and &mdash;

299
00:11:32,880 --> 00:11:34,580
come on.

300
00:11:34,580 --> 00:11:37,475
Jsbin server is in
the UK isn't it?

301
00:11:37,475 --> 00:11:38,263
AUDIENCE: Yep.

302
00:11:38,263 --> 00:11:41,075
PAUL IRISH: Yeah.

303
00:11:41,075 --> 00:11:42,930
It's like looking at
a loaded spinner.

304
00:11:42,930 --> 00:11:44,580
All right, cool.

305
00:11:44,580 --> 00:11:48,160
So I'm going to click these
buttons like that.

306
00:11:48,160 --> 00:11:51,220
Now, what I'm going to do is I'm
going to hit Switch Layout

307
00:11:51,220 --> 00:11:54,670
and we're going to start
this animation.

308
00:11:54,670 --> 00:11:59,510
Now, if I open up Timeline and
record, you can see that as

309
00:11:59,510 --> 00:12:02,420
that animation's happening,
we're getting a

310
00:12:02,420 --> 00:12:04,020
lot of layout costs.

311
00:12:04,020 --> 00:12:08,930
And that makes sense because
layout is reevaluating the

312
00:12:08,930 --> 00:12:10,460
geometry of the page.

313
00:12:10,460 --> 00:12:14,800
And this sort of animation here
has to figure out this

314
00:12:14,800 --> 00:12:20,020
new text flow, and when the text
flows then we get a new

315
00:12:20,020 --> 00:12:21,800
height for where person
two starts and

316
00:12:21,800 --> 00:12:23,000
person three starts.

317
00:12:23,000 --> 00:12:25,740
And it's a lot of work to figure
out that new geometry.

318
00:12:25,740 --> 00:12:29,460
And it happens every single
frame of that animation.

319
00:12:29,460 --> 00:12:31,310
It's a bit expensive.

320
00:12:31,310 --> 00:12:34,130
Now, the next thing
after layout is

321
00:12:34,130 --> 00:12:35,380
determined, is paint.

322
00:12:35,380 --> 00:12:37,850
We heard a lot about
this from Paul.

323
00:12:37,850 --> 00:12:40,560
Paint hurts a lot on
low-end devices.

324
00:12:40,560 --> 00:12:45,480
Old Android phones with not a
lot of hardware have a tough

325
00:12:45,480 --> 00:12:49,700
time updating anything when it
requires paint on every frame.

326
00:12:49,700 --> 00:12:52,500
Debugging this with continuous
paint mode is probably one of

327
00:12:52,500 --> 00:12:53,720
the best ways to do it.

328
00:12:53,720 --> 00:12:57,450
So I'm going to show
that real quickly.

329
00:12:57,450 --> 00:13:01,510
I said real quickly and then
I loaded up a Jsbin URL.

330
00:13:01,510 --> 00:13:03,380
Come on, England.

331
00:13:03,380 --> 00:13:04,840
Come to me, the bits.

332
00:13:04,840 --> 00:13:07,720

333
00:13:07,720 --> 00:13:09,410
All right.

334
00:13:09,410 --> 00:13:10,460
Handy trick.

335
00:13:10,460 --> 00:13:12,780
DevTools, at the bottom, you
might like it on the right.

336
00:13:12,780 --> 00:13:17,780
You can just take the bar here
and drag it up to the &mdash;

337
00:13:17,780 --> 00:13:20,860

338
00:13:20,860 --> 00:13:23,540
you can also click the button.

339
00:13:23,540 --> 00:13:25,420
Great.

340
00:13:25,420 --> 00:13:28,050
I have a lot of DevTools
extensions and I'm just going

341
00:13:28,050 --> 00:13:28,810
to make excuses.

342
00:13:28,810 --> 00:13:31,000
OK.

343
00:13:31,000 --> 00:13:38,440
You might have noticed inside of
Chrome Canary that I have &mdash;

344
00:13:38,440 --> 00:13:39,730
wow.

345
00:13:39,730 --> 00:13:41,930
Let's go back.

346
00:13:41,930 --> 00:13:43,980
So we're here, we're looking at
this page, we have lovely

347
00:13:43,980 --> 00:13:46,050
boxes all over the place.

348
00:13:46,050 --> 00:13:47,470
That's real good.

349
00:13:47,470 --> 00:13:52,120
But we're going to turn on
Continuous Paint mode.

350
00:13:52,120 --> 00:13:56,480
Now, Continuous Paint mode
basically says to Chrome, hey,

351
00:13:56,480 --> 00:14:00,020
I know you know what it looks
like, but I just want you to

352
00:14:00,020 --> 00:14:02,670
tell me what it looks like again
and again and again and

353
00:14:02,670 --> 00:14:03,750
again and again.

354
00:14:03,750 --> 00:14:05,710
So it's just going to repaint
everything that

355
00:14:05,710 --> 00:14:06,430
needs to get painted.

356
00:14:06,430 --> 00:14:09,440
So if I look at Timeline, it
is just doing the same work

357
00:14:09,440 --> 00:14:10,690
over and over again.

358
00:14:10,690 --> 00:14:13,320

359
00:14:13,320 --> 00:14:16,390
But what this allows us to do
is make some changes and see

360
00:14:16,390 --> 00:14:17,860
how it affects that
graph up there.

361
00:14:17,860 --> 00:14:23,730
So right now we're looking at
eight milliseconds or so per

362
00:14:23,730 --> 00:14:26,520
paint of the entire page.

363
00:14:26,520 --> 00:14:29,020
Now we can try some
different things.

364
00:14:29,020 --> 00:14:32,000
So maybe I'm going to
come over here and

365
00:14:32,000 --> 00:14:33,210
toggle the box shadows.

366
00:14:33,210 --> 00:14:36,045
So I turn on box shadows and you
can see pretty quickly &mdash;

367
00:14:36,045 --> 00:14:38,160
sorry about that &mdash;

368
00:14:38,160 --> 00:14:40,960
paint time dives really,
really high.

369
00:14:40,960 --> 00:14:43,620

370
00:14:43,620 --> 00:14:47,040
So the box shadow is adding
quite a bit to how long it

371
00:14:47,040 --> 00:14:48,180
takes to paint the page.

372
00:14:48,180 --> 00:14:52,710
I also know that there's a
border radius on these boxes.

373
00:14:52,710 --> 00:14:54,860
I can try turning that off,
see if that makes any

374
00:14:54,860 --> 00:14:56,050
difference.

375
00:14:56,050 --> 00:15:00,580
It does make a slight
difference, yeah?

376
00:15:00,580 --> 00:15:03,550
But this gives you an option to
kind of figure out things.

377
00:15:03,550 --> 00:15:06,820
Now, a handy trick when you're
using continues painting mode

378
00:15:06,820 --> 00:15:10,680
is the H key hides
DOM elements.

379
00:15:10,680 --> 00:15:12,530
So you can kind of walk through
you're DOM, hide

380
00:15:12,530 --> 00:15:14,870
things and see what
the effect is.

381
00:15:14,870 --> 00:15:17,015
So maybe you'll hide the header,
kind of get that out

382
00:15:17,015 --> 00:15:19,620
of the way, and kind of bisect
the DOM, figuring out where

383
00:15:19,620 --> 00:15:20,590
your costs are.

384
00:15:20,590 --> 00:15:21,870
This H works all the time.

385
00:15:21,870 --> 00:15:23,122
It's pretty handy.

386
00:15:23,122 --> 00:15:24,300
All right.

387
00:15:24,300 --> 00:15:27,530
So that's Continuous Painting
mode real quick.

388
00:15:27,530 --> 00:15:29,850
I got a question recently, which
is, there's all these

389
00:15:29,850 --> 00:15:32,190
operations inside the
DevTools Timeline.

390
00:15:32,190 --> 00:15:36,690
What is the order that
I should see them in?

391
00:15:36,690 --> 00:15:39,920
And what we're looking at right
here is, basically, it.

392
00:15:39,920 --> 00:15:42,660
So a lot of times you start off
with some JavaScript, it

393
00:15:42,660 --> 00:15:45,550
touches the DOM, it changes
something, then the browser

394
00:15:45,550 --> 00:15:48,780
does have recalculate style, has
to layout the page, has to

395
00:15:48,780 --> 00:15:52,320
paint it and probably composite
some layers.

396
00:15:52,320 --> 00:15:57,870
Ideally this is the flow and
there's only one operation

397
00:15:57,870 --> 00:15:59,160
per, basically, paint.

398
00:15:59,160 --> 00:16:02,690
Paint is the user got
to see something.

399
00:16:02,690 --> 00:16:04,340
When we were talking about
layout thrashing before,

400
00:16:04,340 --> 00:16:06,430
layout thrashing is, oftentimes,
we're doing a

401
00:16:06,430 --> 00:16:08,650
bunch of recalc style and then
layout, and then recalc style,

402
00:16:08,650 --> 00:16:09,910
layout, recalc style, layout.

403
00:16:09,910 --> 00:16:11,630
And the user doesn't
see anything.

404
00:16:11,630 --> 00:16:14,380
There are no paints.

405
00:16:14,380 --> 00:16:18,090
So ideally, you have only
one layout per paint.

406
00:16:18,090 --> 00:16:21,570
So here's a little cheat sheet
for kind of taking action from

407
00:16:21,570 --> 00:16:23,620
what the Timeline
is telling you.

408
00:16:23,620 --> 00:16:26,310
If the Timeline is telling
you, oh, my god, lots of

409
00:16:26,310 --> 00:16:29,820
yellow, there's so much time
being spent inside JavaScript.

410
00:16:29,820 --> 00:16:34,370
I should point out that that
Canadian expo site &mdash;

411
00:16:34,370 --> 00:16:35,810
remember when I profiled
it before?

412
00:16:35,810 --> 00:16:37,670
Was there any yellow
at all in it?

413
00:16:37,670 --> 00:16:38,650
No.

414
00:16:38,650 --> 00:16:41,380
There was no JavaScript at all
slowing down that site.

415
00:16:41,380 --> 00:16:43,510
It was all inside the
rendering inside.

416
00:16:43,510 --> 00:16:45,840
But, if you're in a case where
you are in a lot of

417
00:16:45,840 --> 00:16:48,380
JavaScript, you can use
the flame chart.

418
00:16:48,380 --> 00:16:51,240
I'm going to show this
really quickly.

419
00:16:51,240 --> 00:16:53,790
Who has seen the flame &mdash;
who has seen or

420
00:16:53,790 --> 00:16:55,840
used the flame chart?

421
00:16:55,840 --> 00:16:56,150
It's good.

422
00:16:56,150 --> 00:16:56,880
It's a powerful thing.

423
00:16:56,880 --> 00:16:59,005
So this is MathJax.

424
00:16:59,005 --> 00:17:02,090
And they're really good
polyfill for MathML.

425
00:17:02,090 --> 00:17:06,430
But I want to check out
how fast it can

426
00:17:06,430 --> 00:17:07,369
render these things.

427
00:17:07,369 --> 00:17:10,099
So I'm going to turn off these,
come down here &mdash; and so

428
00:17:10,099 --> 00:17:13,650
it's actually just rendering
this stuff out, and I can

429
00:17:13,650 --> 00:17:17,619
choose to render it in
SVG or HTML CSS.

430
00:17:17,619 --> 00:17:22,240
Come over to Profiles and I'm
going to collect a JavaScript

431
00:17:22,240 --> 00:17:25,560
CPU profile and record.

432
00:17:25,560 --> 00:17:26,810
Change this.

433
00:17:26,810 --> 00:17:32,000

434
00:17:32,000 --> 00:17:32,330
All right.

435
00:17:32,330 --> 00:17:33,990
Cool.

436
00:17:33,990 --> 00:17:36,350
Now, normally when you come into
the JavaScript profile

437
00:17:36,350 --> 00:17:38,300
you see something like this.

438
00:17:38,300 --> 00:17:41,700
Just go down to the bottom
right there and

439
00:17:41,700 --> 00:17:43,740
select flame chart.

440
00:17:43,740 --> 00:17:46,340
What is going to give you
is a view like this.

441
00:17:46,340 --> 00:17:50,670
And so this is a time based view
of JavaScript execution.

442
00:17:50,670 --> 00:17:54,310
And it progresses from left to
right over time just like you

443
00:17:54,310 --> 00:17:55,010
expect in a timeline.

444
00:17:55,010 --> 00:17:58,090
And in fact, if you want, you
can record on the Timeline and

445
00:17:58,090 --> 00:18:01,640
on the JavaScript profiler
at the same time.

446
00:18:01,640 --> 00:18:04,350
But you see some spikes, you
want to go investigate what's

447
00:18:04,350 --> 00:18:07,660
actually happening, and
so I'll take a look

448
00:18:07,660 --> 00:18:09,205
at the SVG one first.

449
00:18:09,205 --> 00:18:12,210

450
00:18:12,210 --> 00:18:15,890
So we can see there's actually
a good amount of latency,

451
00:18:15,890 --> 00:18:20,500
there's good gaps between
all these flames.

452
00:18:20,500 --> 00:18:23,490
And if you look on Timeline,
there's actually a bunch of

453
00:18:23,490 --> 00:18:25,040
network activity that's
happening

454
00:18:25,040 --> 00:18:26,480
between these things.

455
00:18:26,480 --> 00:18:29,670
So they're making network
requests as they're trying to

456
00:18:29,670 --> 00:18:32,680
pull together things, and
it's a bit inefficient.

457
00:18:32,680 --> 00:18:36,330
Over in this version they don't
have that problem, but

458
00:18:36,330 --> 00:18:40,000
we can identify kind of where
all the function costs are

459
00:18:40,000 --> 00:18:40,480
coming from.

460
00:18:40,480 --> 00:18:42,360
Now, height is just
call stack.

461
00:18:42,360 --> 00:18:44,920
So height is really
not important.

462
00:18:44,920 --> 00:18:49,390
What's important is width
because width is time.

463
00:18:49,390 --> 00:18:52,210
But we're able to see here kind
of what are the functions

464
00:18:52,210 --> 00:18:52,990
that are taking up time.

465
00:18:52,990 --> 00:18:56,620
We also get to understand the
execution code paths here, and

466
00:18:56,620 --> 00:18:59,865
what calls what and how do we
go from start to finish in

467
00:18:59,865 --> 00:19:02,320
this operation.

468
00:19:02,320 --> 00:19:03,790
All right.

469
00:19:03,790 --> 00:19:06,600
So that's if we're spending
a lot of time in script.

470
00:19:06,600 --> 00:19:09,170
If we're spending a lot of time
in layout, dig into the

471
00:19:09,170 --> 00:19:10,760
JavaScript that's
triggering it.

472
00:19:10,760 --> 00:19:13,580
In DevTools Timeline like I
showed before, you'll see a

473
00:19:13,580 --> 00:19:14,490
call stack.

474
00:19:14,490 --> 00:19:16,880
Find out what you're doing in
JavaScript that is forcing the

475
00:19:16,880 --> 00:19:18,800
browser to do a layout.

476
00:19:18,800 --> 00:19:21,930
With paints, find what is
actually being repainted.

477
00:19:21,930 --> 00:19:24,220
Turn on all those paint rects,
turn on the layer borders and

478
00:19:24,220 --> 00:19:24,910
see what's happening.

479
00:19:24,910 --> 00:19:27,910
You might have to promote a
layer using translate(Z) to

480
00:19:27,910 --> 00:19:30,320
get out of a pain storm.

481
00:19:30,320 --> 00:19:33,630
This often happens with fixed
position elements,

482
00:19:33,630 --> 00:19:35,080
but you kind of &mdash;

483
00:19:35,080 --> 00:19:36,920
take another look at what
Paul showed you.

484
00:19:36,920 --> 00:19:40,330
You can bisect what are actually
expensive things

485
00:19:40,330 --> 00:19:42,470
happening using Continuous
Paint mode.

486
00:19:42,470 --> 00:19:44,320
And if none of these things
answer your questions, it's

487
00:19:44,320 --> 00:19:48,720
time to dig into about:tracing
which is a really extensive

488
00:19:48,720 --> 00:19:51,840
tool and I'm not going to
touch it right now.

489
00:19:51,840 --> 00:19:55,260
But, to tackle kind of like all
of these operations, and

490
00:19:55,260 --> 00:19:58,480
how they actually map to your
CSS, we should probably take a

491
00:19:58,480 --> 00:19:59,090
look at that.

492
00:19:59,090 --> 00:20:05,470
So, if we take this little block
of CSS, the selector up

493
00:20:05,470 --> 00:20:07,900
there &mdash; that does have to get
matched up to a DOM element &mdash;

494
00:20:07,900 --> 00:20:11,320
so the selector will be caught
up in recalc style.

495
00:20:11,320 --> 00:20:15,290
The height effects the geometry
of the box, so that

496
00:20:15,290 --> 00:20:17,890
is mostly captured inside
the cost of layout.

497
00:20:17,890 --> 00:20:20,140
And a text shadow does not
affect any geometry of the

498
00:20:20,140 --> 00:20:20,705
page whatsoever.

499
00:20:20,705 --> 00:20:23,290
It is just a visual
effect, right?

500
00:20:23,290 --> 00:20:25,210
So it will have no
effect whatsoever

501
00:20:25,210 --> 00:20:26,860
inside layout and paint.

502
00:20:26,860 --> 00:20:29,180
Now, this is helpful to know
because if you turn on

503
00:20:29,180 --> 00:20:34,280
Continuous Painting mode, it's
only going to give you numbers

504
00:20:34,280 --> 00:20:36,690
that reflect things that have
an effect on paint.

505
00:20:36,690 --> 00:20:40,680
So you change the height of a
box inside Continuous Paint

506
00:20:40,680 --> 00:20:43,270
mode, not much, really &mdash;

507
00:20:43,270 --> 00:20:45,510
you're not going to
get a good result.

508
00:20:45,510 --> 00:20:49,090
But another way to look at this
is that different CSS

509
00:20:49,090 --> 00:20:51,530
properties kind of effect
these different things.

510
00:20:51,530 --> 00:20:55,430
So, like Paul mentioned before,
transform and opacity

511
00:20:55,430 --> 00:20:58,850
are really fast because the
GPU can handle it 100%.

512
00:20:58,850 --> 00:21:00,320
So this happens here.

513
00:21:00,320 --> 00:21:01,800
They do not need to &mdash;

514
00:21:01,800 --> 00:21:03,680
if you're touching transform
and opacity &mdash;

515
00:21:03,680 --> 00:21:06,330
you do not need to lay
these out, you do not

516
00:21:06,330 --> 00:21:08,980
need to paint them.

517
00:21:08,980 --> 00:21:13,800
A few happen in paint, so this
is box shadow, border radius.

518
00:21:13,800 --> 00:21:14,960
There are visual effects.

519
00:21:14,960 --> 00:21:17,520
Like I said, they don't
affect any geometry.

520
00:21:17,520 --> 00:21:20,540
Outline is also here, because
outline is similar to border

521
00:21:20,540 --> 00:21:24,870
but outline you can change an
outline from one pixel to 100

522
00:21:24,870 --> 00:21:29,680
pixels and everything stays
the same place.

523
00:21:29,680 --> 00:21:31,170
But a lot of things &mdash;

524
00:21:31,170 --> 00:21:33,390
a lot of CSS properties
do affect the layout.

525
00:21:33,390 --> 00:21:36,080
Of course, anything that affects
the position of the

526
00:21:36,080 --> 00:21:40,350
boxes, width, margin, border,
absolute positioning, relative

527
00:21:40,350 --> 00:21:40,990
positioning.

528
00:21:40,990 --> 00:21:43,810
These things affect layout.

529
00:21:43,810 --> 00:21:46,010
And actually &mdash;

530
00:21:46,010 --> 00:21:50,530
I took a look at all
the CSS properties.

531
00:21:50,530 --> 00:21:52,060
Chrome actually just
recently &mdash;

532
00:21:52,060 --> 00:21:53,100
yesterday, I think &mdash;

533
00:21:53,100 --> 00:21:55,650
released some numbers around
the popularity of all CSS

534
00:21:55,650 --> 00:21:57,450
properties on the web.

535
00:21:57,450 --> 00:21:58,070
And this is them.

536
00:21:58,070 --> 00:22:01,020
So width is the most popular
CSS property.

537
00:22:01,020 --> 00:22:03,940
Who would have expected that?

538
00:22:03,940 --> 00:22:07,170
But it's interesting to kind of
look at these and identify

539
00:22:07,170 --> 00:22:11,680
kind of what sequence of
operations they force.

540
00:22:11,680 --> 00:22:15,880
And so most actually do effect
the geometry the page, but of

541
00:22:15,880 --> 00:22:18,940
course, opacity, like I
mentioned, does not.

542
00:22:18,940 --> 00:22:23,330
Another cool way to look
at this is animatable.

543
00:22:23,330 --> 00:22:26,380
Lea Verou made this tool and,
hopefully, I can show this

544
00:22:26,380 --> 00:22:27,230
really quickly.

545
00:22:27,230 --> 00:22:32,130
So this is just using keyframe
animations just to change a

546
00:22:32,130 --> 00:22:36,480
single CSS property on a bunch
of different things.

547
00:22:36,480 --> 00:22:41,390
But it's pretty cool to bring
this up and try it out to see

548
00:22:41,390 --> 00:22:45,480
what it actually looks
like inside Timeline.

549
00:22:45,480 --> 00:22:53,694
So, like I said, we'll take
a look at font size.

550
00:22:53,694 --> 00:22:56,650
Font size.

551
00:22:56,650 --> 00:22:57,230
There we go.

552
00:22:57,230 --> 00:23:01,160
So as we animate font size, font
size does cause layout

553
00:23:01,160 --> 00:23:02,390
and we see it right here.

554
00:23:02,390 --> 00:23:05,220
Box shadow, like I mentioned,
does not have any effect on

555
00:23:05,220 --> 00:23:08,645
layout and &mdash;

556
00:23:08,645 --> 00:23:10,688
did I lie?

557
00:23:10,688 --> 00:23:15,250
Oooooh, tough Paul.

558
00:23:15,250 --> 00:23:16,500
Let me try one more.

559
00:23:16,500 --> 00:23:18,790

560
00:23:18,790 --> 00:23:19,860
There we go.

561
00:23:19,860 --> 00:23:21,590
That's pretty good.

562
00:23:21,590 --> 00:23:23,420
So we're doing a transform
animation.

563
00:23:23,420 --> 00:23:25,180
It's just staying on the GPU.

564
00:23:25,180 --> 00:23:26,720
We're not going back
to layout.

565
00:23:26,720 --> 00:23:31,650
So this is extremely efficient
when it comes to animations.

566
00:23:31,650 --> 00:23:34,390
So, in transitions there's
a lot of things.

567
00:23:34,390 --> 00:23:36,480
There's four things that a
browser can do really, really

568
00:23:36,480 --> 00:23:38,090
fast and jank-free.

569
00:23:38,090 --> 00:23:42,110
It can scale, can move,
can rotate, can fade.

570
00:23:42,110 --> 00:23:46,310
These translate in CSS
to these guys.

571
00:23:46,310 --> 00:23:49,570
I should point out, you might
need the null transforn hack.

572
00:23:49,570 --> 00:23:51,400
Maybe.

573
00:23:51,400 --> 00:23:54,370
But, if you're doing any
animations, any visual

574
00:23:54,370 --> 00:23:58,430
effects, you want to be doing
them with these operations.

575
00:23:58,430 --> 00:24:00,080
These can be fast.

576
00:24:00,080 --> 00:24:02,540
It can be fast on low-end
hardware, it can be fast on

577
00:24:02,540 --> 00:24:03,940
high-end hardware.

578
00:24:03,940 --> 00:24:08,780
Every other operation is going
to incur layout, or maybe a

579
00:24:08,780 --> 00:24:09,750
good amount of paint.

580
00:24:09,750 --> 00:24:12,940
So it's going to be slower.

581
00:24:12,940 --> 00:24:16,230
Now, when it comes to measuring
we want to know that

582
00:24:16,230 --> 00:24:17,090
these measurements &mdash;

583
00:24:17,090 --> 00:24:19,230
these performance enhancements
that we're doing

584
00:24:19,230 --> 00:24:21,330
are good for people.

585
00:24:21,330 --> 00:24:25,210
If we take a look at Twitter,
the load event &mdash; window.load &mdash;

586
00:24:25,210 --> 00:24:29,220
fires about midway through
the network waterfall.

587
00:24:29,220 --> 00:24:31,660
And the end of activity
is quite a bit later.

588
00:24:31,660 --> 00:24:35,660
So looking at window.load for
knowing that the page is kind

589
00:24:35,660 --> 00:24:38,220
of done is not going
to work out.

590
00:24:38,220 --> 00:24:41,860
So we need better ways
to identify how

591
00:24:41,860 --> 00:24:43,040
successful are we.

592
00:24:43,040 --> 00:24:46,200
So this is an approach developed
by a guy named Pat

593
00:24:46,200 --> 00:24:49,050
Meenan who runs WebPageTest.

594
00:24:49,050 --> 00:24:54,070
So up at the top we have the
film strip view of loading a

595
00:24:54,070 --> 00:24:57,670
page that's been optimized
two different ways.

596
00:24:57,670 --> 00:25:02,320
And so you could see that the
third way is delivering

597
00:25:02,320 --> 00:25:05,730
content to the user faster
than the other ones.

598
00:25:05,730 --> 00:25:08,540
Down here is a plot of the
percentage of the visual

599
00:25:08,540 --> 00:25:10,510
progress plotting these out.

600
00:25:10,510 --> 00:25:14,780
So you can see here we're
already showing things to the

601
00:25:14,780 --> 00:25:17,970
user, and so that's why
gold is jumping up.

602
00:25:17,970 --> 00:25:21,760
Now, if we want to take this and
turn it into a metric, we

603
00:25:21,760 --> 00:25:26,987
can take the area above that
line and just kind of absorb

604
00:25:26,987 --> 00:25:28,580
it into a figure.

605
00:25:28,580 --> 00:25:29,900
So this is called
the speed index.

606
00:25:29,900 --> 00:25:35,870
It's basically the area above
the curve that accounts for

607
00:25:35,870 --> 00:25:39,890
what the visual progress being
shown to the user.

608
00:25:39,890 --> 00:25:44,390
So this is a nice quantitative
measurement for getting a

609
00:25:44,390 --> 00:25:46,870
successful picture in
front of the user.

610
00:25:46,870 --> 00:25:51,030
Now, in the real world, we want
to be able to identify

611
00:25:51,030 --> 00:25:55,860
things like how as we're
developing a project over

612
00:25:55,860 --> 00:25:57,410
time, are we regressing
performance, are

613
00:25:57,410 --> 00:25:58,790
we improving it?

614
00:25:58,790 --> 00:26:01,680
Adobe Topcoat is a CSS library
that has a really nice

615
00:26:01,680 --> 00:26:04,220
framework set up for
benchmarking.

616
00:26:04,220 --> 00:26:06,550
So they're using a project
called Telemetry that

617
00:26:06,550 --> 00:26:07,950
Chrome works on.

618
00:26:07,950 --> 00:26:11,940
And so this is actually a view
of their button element, and

619
00:26:11,940 --> 00:26:14,430
on the horizontal axis
we just have commits.

620
00:26:14,430 --> 00:26:23,070
And we can actually see for the
mean frame rate, the load

621
00:26:23,070 --> 00:26:27,360
time, and the layout, how
things are progressing.

622
00:26:27,360 --> 00:26:29,120
And so you can actually see
this is a pretty big

623
00:26:29,120 --> 00:26:34,060
regression in load time
of this test case.

624
00:26:34,060 --> 00:26:37,130
And then things actually did
slow down later here as well.

625
00:26:37,130 --> 00:26:39,130
But we're able to track
this over time

626
00:26:39,130 --> 00:26:41,010
which is really powerful.

627
00:26:41,010 --> 00:26:43,720
Another developer took a look
at this and applied this to

628
00:26:43,720 --> 00:26:47,850
Bootstrap over the history of
the project from 1.0 to 3.0.

629
00:26:47,850 --> 00:26:50,250
And so this is just a quick
view of the drop downs

630
00:26:50,250 --> 00:26:52,890
component inside Bootstrap, and
we're looking at the first

631
00:26:52,890 --> 00:26:55,410
paint metric.

632
00:26:55,410 --> 00:26:59,930
First paint is a tricky one
and it's hard to find good

633
00:26:59,930 --> 00:27:02,720
metrics, but I think speed index
is one of the best ones.

634
00:27:02,720 --> 00:27:06,660
Inside Google Analytics there's
a few tools for these.

635
00:27:06,660 --> 00:27:09,890
You're looking at network
activity, you can identify

636
00:27:09,890 --> 00:27:14,120
page load time, domain look
up, page download time.

637
00:27:14,120 --> 00:27:18,570
All these are the exact same as
window.performance.timing,

638
00:27:18,570 --> 00:27:22,280
but since all major browsers
support this, Google Analytics

639
00:27:22,280 --> 00:27:24,430
will report it here.

640
00:27:24,430 --> 00:27:28,520
You could also get these numbers
split up by browser,

641
00:27:28,520 --> 00:27:29,300
by operating system.

642
00:27:29,300 --> 00:27:31,915
So this is just a view
I made of browser

643
00:27:31,915 --> 00:27:33,140
and operating system.

644
00:27:33,140 --> 00:27:37,370
Here you can see Safari on iOS
is considerably slower on page

645
00:27:37,370 --> 00:27:39,130
load time than the rest.

646
00:27:39,130 --> 00:27:40,830
And I think that's mostly
because it's on a mobile

647
00:27:40,830 --> 00:27:42,960
network whereas nearly
all these others

648
00:27:42,960 --> 00:27:46,360
are desktop on Wi-Fi.

649
00:27:46,360 --> 00:27:48,110
SpeedCurve is a really
cool site.

650
00:27:48,110 --> 00:27:51,720
Its still in private beta right
now but it's hoping to

651
00:27:51,720 --> 00:27:55,060
give you a lot more insight
when it comes to the

652
00:27:55,060 --> 00:27:57,270
performance of your
site over time.

653
00:27:57,270 --> 00:28:00,620
And so here is HML5 Rocks &mdash;
which I work on &mdash;

654
00:28:00,620 --> 00:28:03,600
plotted against Amazon
and TripAdvisor.

655
00:28:03,600 --> 00:28:05,640
You can kind of see that.

656
00:28:05,640 --> 00:28:08,440
But one tool that I really want
to show is WebPageTest

657
00:28:08,440 --> 00:28:12,560
and I'm going to show it with
a site called Retailmenot.

658
00:28:12,560 --> 00:28:14,810
This page I just loaded now.

659
00:28:14,810 --> 00:28:19,900
I'm going to do a shift refresh
because it's so fast.

660
00:28:19,900 --> 00:28:22,820
The developers behind this
worked quite a bit on the page

661
00:28:22,820 --> 00:28:26,130
load time and it really shows,
but what's really cool is

662
00:28:26,130 --> 00:28:29,900
taking a look at what
WebPageTest tells us.

663
00:28:29,900 --> 00:28:32,270
So I ran this just
earlier today.

664
00:28:32,270 --> 00:28:33,730
So we did &mdash;

665
00:28:33,730 --> 00:28:37,110
this is Retailmenot assuming
a cable internet connection

666
00:28:37,110 --> 00:28:38,750
inside Chrome.

667
00:28:38,750 --> 00:28:39,650
And so here &mdash;

668
00:28:39,650 --> 00:28:41,180
if you've seen WebPageTest
before, it's been

669
00:28:41,180 --> 00:28:43,400
around for a while &mdash;

670
00:28:43,400 --> 00:28:45,640
you might know it has waterfalls
and stuff.

671
00:28:45,640 --> 00:28:47,150
It has a lot more than that.

672
00:28:47,150 --> 00:28:49,160
I really encourage you
to take another look.

673
00:28:49,160 --> 00:28:51,950
First thing I'm going to show
is the film strip view.

674
00:28:51,950 --> 00:28:57,960
So over here in the film strip
view we have, just like

675
00:28:57,960 --> 00:29:02,240
before, every 100 milliseconds
we have a snapshot of what the

676
00:29:02,240 --> 00:29:03,170
page looks like.

677
00:29:03,170 --> 00:29:07,930
And you can see at 0.9 seconds
we start to have an actual

678
00:29:07,930 --> 00:29:09,260
page being rendered.

679
00:29:09,260 --> 00:29:11,630
It's really cool, as I
scroll through this

680
00:29:11,630 --> 00:29:13,390
you can see my waterfall.

681
00:29:13,390 --> 00:29:15,390
We're kind of going through my
network waterfall and we're

682
00:29:15,390 --> 00:29:16,640
seeing that correlation.

683
00:29:16,640 --> 00:29:18,730

684
00:29:18,730 --> 00:29:21,400
Now, another really nice thing
is that you can ask

685
00:29:21,400 --> 00:29:26,190
WebPageTest to capture the
DevTools Timeline recording.

686
00:29:26,190 --> 00:29:29,120
And so we can just view
the DevTools Timeline

687
00:29:29,120 --> 00:29:30,500
associated with this.

688
00:29:30,500 --> 00:29:33,500
So I'm just going to
do that right now.

689
00:29:33,500 --> 00:29:37,380
So Chrome DevTools is a web
app, as you know, so we're

690
00:29:37,380 --> 00:29:39,520
just viewing this
as a web app.

691
00:29:39,520 --> 00:29:41,480
And this is the actual recording
that we were looking

692
00:29:41,480 --> 00:29:44,000
at on WebPageTest, and we
can see a lot more.

693
00:29:44,000 --> 00:29:47,930
So we can see, here's the data
coming in, HTML, Google

694
00:29:47,930 --> 00:29:51,620
Analytics causes a layout,
they're asking for an offset

695
00:29:51,620 --> 00:29:53,590
width so you get the
screen size.

696
00:29:53,590 --> 00:29:56,310
Then we come down here and
pretty soon we get a paint.

697
00:29:56,310 --> 00:29:57,910
And so this is that paint.

698
00:29:57,910 --> 00:30:02,680
It's at 818 milliseconds, that's
why we are seeing a

699
00:30:02,680 --> 00:30:05,940
thumbnail right then.

700
00:30:05,940 --> 00:30:10,040
The last thing I'll show is
that it even takes those

701
00:30:10,040 --> 00:30:13,990
numbers from the Timeline and
aggregates them over the load

702
00:30:13,990 --> 00:30:15,070
of the page.

703
00:30:15,070 --> 00:30:18,520
So we can actually see, for that
entire duration that it

704
00:30:18,520 --> 00:30:21,290
was recording, let's summarize
all the time it spend in

705
00:30:21,290 --> 00:30:24,380
layout, in JavaScript,
in paint.

706
00:30:24,380 --> 00:30:28,440
And so we can see here, for that
page load time, where was

707
00:30:28,440 --> 00:30:29,810
the browser spending its time?

708
00:30:29,810 --> 00:30:33,090
So here, we're mostly spending
a lot of time in JavaScript,

709
00:30:33,090 --> 00:30:34,360
to be honest.

710
00:30:34,360 --> 00:30:38,630
But layout does contribute
a little bit to this.

711
00:30:38,630 --> 00:30:41,300

712
00:30:41,300 --> 00:30:41,790
All right.

713
00:30:41,790 --> 00:30:44,720
So WebPageTest, really cool,
had a lot of features

714
00:30:44,720 --> 00:30:49,430
recently, and the nice thing
is that you can take the

715
00:30:49,430 --> 00:30:51,820
difference between multiple
recordings and be able to

716
00:30:51,820 --> 00:30:54,140
track your performance
over time.

717
00:30:54,140 --> 00:30:57,630
If you do want to use
this, the site &mdash;

718
00:30:57,630 --> 00:30:59,460
if you use WebPageTest.org &mdash;

719
00:30:59,460 --> 00:31:01,016
the site it has to be &mdash;

720
00:31:01,016 --> 00:31:02,760
the site you're testing
has to be online &mdash;

721
00:31:02,760 --> 00:31:04,270
but you can run a private
instance.

722
00:31:04,270 --> 00:31:05,440
So you can run against
a development

723
00:31:05,440 --> 00:31:06,380
server if you want.

724
00:31:06,380 --> 00:31:08,498
It's all open source.

725
00:31:08,498 --> 00:31:09,370
All right.

726
00:31:09,370 --> 00:31:11,800
So to sum up, few things.

727
00:31:11,800 --> 00:31:13,910
We heard a lot of
numbers tonight.

728
00:31:13,910 --> 00:31:16,410
Under 60 milliseconds is smooth
animation, under 100

729
00:31:16,410 --> 00:31:20,960
milliseconds feels pretty much
instant, under one second,

730
00:31:20,960 --> 00:31:24,040
mmmm, I'm OK with it, over a

731
00:31:24,040 --> 00:31:27,800
millisecond, users are unhappy.

732
00:31:27,800 --> 00:31:31,580
So here are some aggressive,
aggressive but good goals, and

733
00:31:31,580 --> 00:31:34,060
things that we should really
be striving towards.

734
00:31:34,060 --> 00:31:37,090
When it comes to mobile
connectivity, it is hard to

735
00:31:37,090 --> 00:31:40,050
deliver things fast, but
users get really

736
00:31:40,050 --> 00:31:41,910
impatient quite fast.

737
00:31:41,910 --> 00:31:44,110
Shoot to show the content
that's above the

738
00:31:44,110 --> 00:31:46,220
fold in under a second.

739
00:31:46,220 --> 00:31:48,750
One important part of this is
serving the above the fold

740
00:31:48,750 --> 00:31:51,600
content in the first 14
kilobytes of the response.

741
00:31:51,600 --> 00:31:54,260
This includes the CSS that you
need to render everything

742
00:31:54,260 --> 00:31:56,390
that's above the fold, you
can defer the rest of

743
00:31:56,390 --> 00:31:57,700
the CSS later on.

744
00:31:57,700 --> 00:31:59,340
You don't need it just yet.

745
00:31:59,340 --> 00:32:01,092
If I fit it in that first 15 &mdash;

746
00:32:01,092 --> 00:32:05,080
14 kilobytes, that number
is not totally magic.

747
00:32:05,080 --> 00:32:08,630
It's based off of how TCP
Slow-start works.

748
00:32:08,630 --> 00:32:10,870
It's the first time that you're
really going to get a

749
00:32:10,870 --> 00:32:12,760
considerable amount
of data back.

750
00:32:12,760 --> 00:32:16,800
Maximum of 200 milliseconds
server response time, 60 fps

751
00:32:16,800 --> 00:32:20,340
on scrolling, 60 fps on
transitions, and a speed index

752
00:32:20,340 --> 00:32:25,170
of under 1,000 would
be pretty good.

753
00:32:25,170 --> 00:32:29,300
So aside from reaching those
goals, which are hefty but

754
00:32:29,300 --> 00:32:31,750
good, what can you do?

755
00:32:31,750 --> 00:32:35,360
I think it's hard to kind of
work on &mdash; it seems, talking to

756
00:32:35,360 --> 00:32:38,360
the people that I do, a lot of
people explain that it's hard

757
00:32:38,360 --> 00:32:41,220
to make the case to work
on performance.

758
00:32:41,220 --> 00:32:43,040
You've got to ship features,
you got to get that out the

759
00:32:43,040 --> 00:32:46,410
door, people expect
the end result.

760
00:32:46,410 --> 00:32:48,770
And I think we really need to be
able to make the case that

761
00:32:48,770 --> 00:32:50,570
performance is incredibly
important.

762
00:32:50,570 --> 00:32:52,670
And the best way to do that
is &mdash; you can show them the

763
00:32:52,670 --> 00:32:55,250
numbers from Google and Amazon
and Microsoft, and anyone who

764
00:32:55,250 --> 00:32:58,580
has said that it effects the
bottom line significantly &mdash;

765
00:32:58,580 --> 00:33:00,590
but I think most people really
want to see it with their own

766
00:33:00,590 --> 00:33:02,090
site, with their own data.

767
00:33:02,090 --> 00:33:04,860
So find in your own analytics
ways to correlate performance

768
00:33:04,860 --> 00:33:06,980
wins to actual business wins
that they care about.

769
00:33:06,980 --> 00:33:09,340
So maybe the speed index
correlated to conversion rate.

770
00:33:09,340 --> 00:33:12,870
People that are experiencing
your site faster are

771
00:33:12,870 --> 00:33:15,500
performing better.

772
00:33:15,500 --> 00:33:19,305
Make the case to your client
that performance often might

773
00:33:19,305 --> 00:33:20,610
trump their feature request.

774
00:33:20,610 --> 00:33:25,350
That awesome cool feature that
the user will find once they

775
00:33:25,350 --> 00:33:28,200
register for your site probably
won't get to that if

776
00:33:28,200 --> 00:33:31,820
they're waiting 10 seconds
for the site to load.

777
00:33:31,820 --> 00:33:34,330
Set up infrastructure to track
your perfs so you can identify

778
00:33:34,330 --> 00:33:37,800
over the development of project
if you're regressing

779
00:33:37,800 --> 00:33:39,730
performance or if
it's improving.

780
00:33:39,730 --> 00:33:42,430
And, to be honest, there's
some tools available.

781
00:33:42,430 --> 00:33:44,940
I showed some of them tonight,
but I think it's still quite

782
00:33:44,940 --> 00:33:47,310
early in the space and the open
source community could

783
00:33:47,310 --> 00:33:50,260
use a lot more to kind
of help everyone

784
00:33:50,260 --> 00:33:51,140
track this stuff better.

785
00:33:51,140 --> 00:33:54,780
So I encourage you to join a
project or start a new project

786
00:33:54,780 --> 00:33:57,920
to help everyone in this area.

787
00:33:57,920 --> 00:33:58,410
All right.

788
00:33:58,410 --> 00:33:59,460
Thanks, everyone.

789
00:33:59,460 --> 00:34:00,340
Stick around.

790
00:34:00,340 --> 00:34:01,920
We're going to do Q&A
in a little bit.

791
00:34:01,920 --> 00:34:02,520
Thank you.

792
00:34:02,520 --> 00:34:12,967
[APPLAUSE]

