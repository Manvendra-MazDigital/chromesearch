1
00:00:00,000 --> 00:00:05,940

2
00:00:05,940 --> 00:00:08,874
JAKE ARCHIBALD: Yes, welcome to the second
session of Developer Tool,

3
00:00:08,874 --> 00:00:11,540
no longer a phrase that was used
to bully me in the school yard.

4
00:00:11,540 --> 00:00:13,805
It's a key part of
Web development.

5
00:00:13,805 --> 00:00:16,740
It's difficult to imagine how
we survive through a period

6
00:00:16,740 --> 00:00:18,846
where all we could do
is play a game of higher

7
00:00:18,846 --> 00:00:19,720
or lower with alerts.

8
00:00:19,720 --> 00:00:21,730
I mean, that's how I
first started debugging.

9
00:00:21,730 --> 00:00:24,860
And browser error
messages were, at best,

10
00:00:24,860 --> 00:00:27,640
indistinguishable from
stoner philosophy.

11
00:00:27,640 --> 00:00:30,970
Things like, undefined
is not defined.

12
00:00:30,970 --> 00:00:32,540
Thank you for asking.

13
00:00:32,540 --> 00:00:34,930
Too many arguments,
just everyone chill out.

14
00:00:34,930 --> 00:00:37,900
A goal of the future,
where can we take this?

15
00:00:37,900 --> 00:00:39,880
Well, I'm joined by
this panel of developers

16
00:00:39,880 --> 00:00:43,310
developing developer tools with
developer tools for developers.

17
00:00:43,310 --> 00:00:46,830
They are, Kenneth Auchenberg,
started RemoteDebug, an effort

18
00:00:46,830 --> 00:00:49,570
to unify remote debugging tools.

19
00:00:49,570 --> 00:00:52,330
Henri Bergius, I'm going to
pronounce your name wrong

20
00:00:52,330 --> 00:00:54,120
already, sorry, the
founder of NoFlo,

21
00:00:54,120 --> 00:00:56,120
the Kickstarter-based
visual flow

22
00:00:56,120 --> 00:00:58,770
based, Web development
environment.

23
00:00:58,770 --> 00:01:01,270
And we've got NJ, the
instigator of Brackets,

24
00:01:01,270 --> 00:01:04,560
Adobe's code editor built off
the back of Web technologies.

25
00:01:04,560 --> 00:01:06,560
Representing the browsers,
we've got Joe Walker,

26
00:01:06,560 --> 00:01:10,930
who's working on Mozilla's
new shiny developer tools.

27
00:01:10,930 --> 00:01:14,560
We've got Pavel Feldman, who's
working on the Chrome developer

28
00:01:14,560 --> 00:01:15,210
tools.

29
00:01:15,210 --> 00:01:17,410
And to start us off with
some words about things,

30
00:01:17,410 --> 00:01:27,680
a man who needs no introduction,
a big up to my Chrome boy,

31
00:01:27,680 --> 00:01:29,640
it's Paul Irish.

32
00:01:29,640 --> 00:01:30,790
PAUL IRISH: Thank you.

33
00:01:30,790 --> 00:01:31,290
All right.

34
00:01:31,290 --> 00:01:34,550

35
00:01:34,550 --> 00:01:35,540
Brad, thank you.

36
00:01:35,540 --> 00:01:38,070
So I want to give you a
brief overview of kind

37
00:01:38,070 --> 00:01:41,260
of where we're at in
Web developer tooling.

38
00:01:41,260 --> 00:01:44,300
If we can get my slides
up, we'll be good.

39
00:01:44,300 --> 00:01:46,610
There's been a lot of
iteration movement lately.

40
00:01:46,610 --> 00:01:48,780
But I wanted to first,
kind of bring us back

41
00:01:48,780 --> 00:01:55,544
into kind of the history
of a &mdash; just a moment.

42
00:01:55,544 --> 00:01:56,710
SPEAKER: Click on the big X.

43
00:01:56,710 --> 00:01:57,460
PAUL IRISH: It's not me.

44
00:01:57,460 --> 00:01:59,816

45
00:01:59,816 --> 00:02:01,330
It's that computer.

46
00:02:01,330 --> 00:02:05,162

47
00:02:05,162 --> 00:02:07,080
[INAUDIBLE]

48
00:02:07,080 --> 00:02:08,522
PAUL IRISH: Yeah

49
00:02:08,522 --> 00:02:09,464
SPEAKER: We adjusted.

50
00:02:09,464 --> 00:02:10,410
We're good.

51
00:02:10,410 --> 00:02:11,300
PAUL IRISH: It's right.

52
00:02:11,300 --> 00:02:12,874
It's right.

53
00:02:12,874 --> 00:02:14,832
SPEAKER: Here you go.

54
00:02:14,832 --> 00:02:15,415
PAUL IRISH: Love it.

55
00:02:15,415 --> 00:02:19,310

56
00:02:19,310 --> 00:02:19,810
All right.

57
00:02:19,810 --> 00:02:20,360
Thank you guys.

58
00:02:20,360 --> 00:02:22,318
I'm going to give you a
quick overview of where

59
00:02:22,318 --> 00:02:23,960
we're at with Web
developer tooling.

60
00:02:23,960 --> 00:02:26,043
But to do that, I want to
head back and talk again

61
00:02:26,043 --> 00:02:27,270
on the history.

62
00:02:27,270 --> 00:02:30,090
Back in 2006, Hixie, the
editor of the HTML5 spec,

63
00:02:30,090 --> 00:02:34,490
he was kind of testing
out how HTML is parsed.

64
00:02:34,490 --> 00:02:37,155
And he wrote a tool.

65
00:02:37,155 --> 00:02:40,010

66
00:02:40,010 --> 00:02:43,390
At first, he was
diagramming how DOM

67
00:02:43,390 --> 00:02:45,310
is constructed,
based off of HTML.

68
00:02:45,310 --> 00:02:48,060
And he's like, you know, I can
create this live DOM viewer.

69
00:02:48,060 --> 00:02:50,910
And so here is the
DOM view of what

70
00:02:50,910 --> 00:02:55,740
we've constructed with, in
this case, just a quick P tag,

71
00:02:55,740 --> 00:02:56,450
right?

72
00:02:56,450 --> 00:02:58,290
That's our DOM.

73
00:02:58,290 --> 00:03:02,250
And then it just so happened
that only three months later,

74
00:03:02,250 --> 00:03:04,420
this guy basically debuted.

75
00:03:04,420 --> 00:03:06,340
Just three months
later, Joe Hewitt

76
00:03:06,340 --> 00:03:11,230
released these initial
screenshots of Firebug,

77
00:03:11,230 --> 00:03:15,390
leading us to the angle brackets
representation of the DOM

78
00:03:15,390 --> 00:03:18,350
that we know, and love,
and see every day.

79
00:03:18,350 --> 00:03:25,140
Now, I do want to shout out to
the more OJI developer tool.

80
00:03:25,140 --> 00:03:28,490
This is Venkman, the JavaScript
debugger inside of Firefox.

81
00:03:28,490 --> 00:03:32,530
This debuted around 2001.

82
00:03:32,530 --> 00:03:34,350
So it was really kind
of the first thing.

83
00:03:34,350 --> 00:03:36,930
But since then there's
been a lot of movement.

84
00:03:36,930 --> 00:03:39,270
So fast forwarding,
now I want to show you

85
00:03:39,270 --> 00:03:42,150
where some of the developer
tools are these days.

86
00:03:42,150 --> 00:03:43,990
So first, over on
Firefox, there's

87
00:03:43,990 --> 00:03:45,830
been some fantastic
things happening.

88
00:03:45,830 --> 00:03:48,260
I'm going to show a quick
preview of what things look

89
00:03:48,260 --> 00:03:51,030
like with the WebGL
Shader Editor.

90
00:03:51,030 --> 00:03:56,940
So what we have here
is a WebGL scene.

91
00:03:56,940 --> 00:04:01,550
And we are live
editing a GLSL shader,

92
00:04:01,550 --> 00:04:03,550
kind of changing some of
the dimensions of this.

93
00:04:03,550 --> 00:04:06,520
One of the really nice aspects
I like about this editing

94
00:04:06,520 --> 00:04:11,020
environment is, as we live edit
it and make some mistakes, we

95
00:04:11,020 --> 00:04:14,800
actually get feedback
on validation errors

96
00:04:14,800 --> 00:04:19,350
that we are triggering
in the GLSL.

97
00:04:19,350 --> 00:04:24,630
Now moving outside
of that, there's

98
00:04:24,630 --> 00:04:25,860
been a lot of fantastic work.

99
00:04:25,860 --> 00:04:29,790
This is a screenshot of some new
upcoming work from the memory

100
00:04:29,790 --> 00:04:32,680
tooling inside of
Firefox developer tools.

101
00:04:32,680 --> 00:04:34,450
Keep snapshotting
and showing what's

102
00:04:34,450 --> 00:04:36,429
going on inside of the memory.

103
00:04:36,429 --> 00:04:37,470
You might have seen this.

104
00:04:37,470 --> 00:04:39,053
This is a nice
visualization of what's

105
00:04:39,053 --> 00:04:40,890
happening with CSS transforms.

106
00:04:40,890 --> 00:04:43,610
Really fantastic to understand
how exactly the original shape

107
00:04:43,610 --> 00:04:47,030
is being modified
through transforms.

108
00:04:47,030 --> 00:04:48,470
Also, this is fantastic work.

109
00:04:48,470 --> 00:04:50,136
We're just stopped
here at a breakpoint,

110
00:04:50,136 --> 00:04:52,720
but we understand the various
scopes that are active,

111
00:04:52,720 --> 00:04:55,780
and see for instance, how
a certain variable may

112
00:04:55,780 --> 00:04:57,780
have been available in
a previous scope that

113
00:04:57,780 --> 00:04:58,780
has now been overridden.

114
00:04:58,780 --> 00:05:00,870
So it gets striked out.

115
00:05:00,870 --> 00:05:03,664
And then this was a
fantastic experiment

116
00:05:03,664 --> 00:05:05,080
that I don't think
has landed yet,

117
00:05:05,080 --> 00:05:06,710
but I like where it's going.

118
00:05:06,710 --> 00:05:08,320
It's audio breakpoints.

119
00:05:08,320 --> 00:05:11,860
So basically, kind
of like hearing

120
00:05:11,860 --> 00:05:15,100
when different points
in your code get hit.

121
00:05:15,100 --> 00:05:16,830
I really like this approach.

122
00:05:16,830 --> 00:05:17,330
All right.

123
00:05:17,330 --> 00:05:18,830
So over on Chrome
DevTools, there's

124
00:05:18,830 --> 00:05:20,970
been some fun stuff happening.

125
00:05:20,970 --> 00:05:23,020
You might have seen
screen casting.

126
00:05:23,020 --> 00:05:27,240
So this is an effort to
say, hey, we can actually

127
00:05:27,240 --> 00:05:29,610
take what's on the
screen of your device,

128
00:05:29,610 --> 00:05:32,720
and show it inside of
your desktop browser.

129
00:05:32,720 --> 00:05:36,910
Not only can we show it, but
also have it interactable.

130
00:05:36,910 --> 00:05:38,770
Because typing on a
phone is pretty slow,

131
00:05:38,770 --> 00:05:41,194
we can just type on your
keyboard, click around,

132
00:05:41,194 --> 00:05:43,360
and all those clicks will
be translated into touches

133
00:05:43,360 --> 00:05:46,030
on to the device.

134
00:05:46,030 --> 00:05:49,260
Then a few more good stuff.

135
00:05:49,260 --> 00:05:51,690
This is a flame chart
visualization of the JavaScript

136
00:05:51,690 --> 00:05:53,930
profiler, giving you
good insight as far as

137
00:05:53,930 --> 00:05:57,520
how, across time, your
JavaScript is executing,

138
00:05:57,520 --> 00:05:59,550
understanding what is
sort of the pattern

139
00:05:59,550 --> 00:06:03,580
and rhythm of function
execution inside the browser.

140
00:06:03,580 --> 00:06:05,870
This is device emulation.

141
00:06:05,870 --> 00:06:08,120
So emulating not only
screen resolution,

142
00:06:08,120 --> 00:06:11,760
the device picks a ratio,
the view port configuration,

143
00:06:11,760 --> 00:06:14,970
touch events, and doing that
all right inside of a desktop,

144
00:06:14,970 --> 00:06:18,120
so that we don't actually have
to even go over to the device.

145
00:06:18,120 --> 00:06:20,600
And this is a new upcoming
feature, asynchronous call

146
00:06:20,600 --> 00:06:21,500
stacks.

147
00:06:21,500 --> 00:06:23,550
So we can actually
see from where

148
00:06:23,550 --> 00:06:26,205
we are how we got
there across an XHR

149
00:06:26,205 --> 00:06:28,030
and across a set time out.

150
00:06:28,030 --> 00:06:32,610
So we can trace all the
way back in that full line.

151
00:06:32,610 --> 00:06:35,370
The IE team has
been trucking ever

152
00:06:35,370 --> 00:06:38,545
since the new release
of their F12 DevTools.

153
00:06:38,545 --> 00:06:39,920
They've done some
fantastic work.

154
00:06:39,920 --> 00:06:43,810
This is a quick screen shot of
where the new network tool is.

155
00:06:43,810 --> 00:06:46,380
Really good looking waterfall,
and a lot of detail in there

156
00:06:46,380 --> 00:06:47,800
too.

157
00:06:47,800 --> 00:06:53,330
Also, new to the F12 tools is
proper memory-keep snapshotting

158
00:06:53,330 --> 00:06:54,671
and memory profiling.

159
00:06:54,671 --> 00:06:56,170
So here we could
take two snapshots.

160
00:06:56,170 --> 00:06:59,220
We can compare them,
see what's going on.

161
00:06:59,220 --> 00:07:03,270
And one of my personal favorites
is their new UI responsiveness

162
00:07:03,270 --> 00:07:04,780
panel, which gives
a lot of insight

163
00:07:04,780 --> 00:07:07,280
as far as the operation center
happening inside the browser,

164
00:07:07,280 --> 00:07:08,571
how that relates to frame rate.

165
00:07:08,571 --> 00:07:11,030
So we can help
identify how exactly

166
00:07:11,030 --> 00:07:12,830
we can improve the
performance of the page

167
00:07:12,830 --> 00:07:15,640
and reduce the jank.

168
00:07:15,640 --> 00:07:19,710
So Kenneth, here, from
the RemoteDebug project,

169
00:07:19,710 --> 00:07:23,850
showed this fantastic
demo over a full frontal.

170
00:07:23,850 --> 00:07:27,750
RemoteDebug is a fantastic
way to, basically, bridge

171
00:07:27,750 --> 00:07:29,880
the gap between
different browsers,

172
00:07:29,880 --> 00:07:32,560
their run times, and their
browser developer tools.

173
00:07:32,560 --> 00:07:35,150
So we actually have
Chrome's Developer Tools

174
00:07:35,150 --> 00:07:38,350
interacting with
the Firefox browser.

175
00:07:38,350 --> 00:07:41,220
And not only can we
inspect elements, but also

176
00:07:41,220 --> 00:07:44,620
change the DOM of Firefox using
the Chrome Developer Tools.

177
00:07:44,620 --> 00:07:48,500
And there's a lot more
where that came from.

178
00:07:48,500 --> 00:07:50,040
NJ from Brackets.

179
00:07:50,040 --> 00:07:53,490
I wanted to show this
quick and fantastic demo.

180
00:07:53,490 --> 00:07:57,387
Brackets has long been doing
kind of live CSS development

181
00:07:57,387 --> 00:07:59,220
where you can just
change things on the fly.

182
00:07:59,220 --> 00:08:00,855
But this is the live
HTML development.

183
00:08:00,855 --> 00:08:04,470

184
00:08:04,470 --> 00:08:07,220
Mapping HTML to DOM is
not a trivial thing.

185
00:08:07,220 --> 00:08:10,187
But here, we are moving
around to our HTML.

186
00:08:10,187 --> 00:08:11,020
Our DOM is updating.

187
00:08:11,020 --> 00:08:14,740
And we do a quick view into the
CSS that applies for this H2,

188
00:08:14,740 --> 00:08:16,180
and make those
changes on the fly.

189
00:08:16,180 --> 00:08:20,196
And make it hot pink because
that's the right way to go.

190
00:08:20,196 --> 00:08:20,696
[INAUDIBLE]

191
00:08:20,696 --> 00:08:24,994

192
00:08:24,994 --> 00:08:25,660
PAUL IRISH: All right.

193
00:08:25,660 --> 00:08:29,390
Another fantastic thing
inside of Brackets

194
00:08:29,390 --> 00:08:33,110
is the Theseus JavaScript
debugger, really powerful work.

195
00:08:33,110 --> 00:08:36,059
So here we actually see
a log across our code

196
00:08:36,059 --> 00:08:37,510
of how it actually executed.

197
00:08:37,510 --> 00:08:38,799
We had four calls.

198
00:08:38,799 --> 00:08:40,650
That then entered
into the fetch.

199
00:08:40,650 --> 00:08:43,074
And we can also see,
of those four calls

200
00:08:43,074 --> 00:08:44,740
that entered into the
fetch, two of them

201
00:08:44,740 --> 00:08:45,660
went into the ErrorHandler.

202
00:08:45,660 --> 00:08:46,760
And then we can
actually see, oh,

203
00:08:46,760 --> 00:08:48,010
we went into the ErrorHandler.

204
00:08:48,010 --> 00:08:49,330
What was in the error object?

205
00:08:49,330 --> 00:08:51,740
We can retroactively look
inside of that error object

206
00:08:51,740 --> 00:08:54,510
and inspect that situation.

207
00:08:54,510 --> 00:08:55,670
Henry from NoFlo is here.

208
00:08:55,670 --> 00:08:59,820
And I want to quickly show
what NoFlo looks like.

209
00:08:59,820 --> 00:09:03,780
It's a new kind of
flow-based visual paradigm

210
00:09:03,780 --> 00:09:10,886
for writing JavaScript
applications.

211
00:09:10,886 --> 00:09:12,980
Let me see if I can
get that video back up.

212
00:09:12,980 --> 00:09:15,655

213
00:09:15,655 --> 00:09:16,155
Barely.

214
00:09:16,155 --> 00:09:21,060

215
00:09:21,060 --> 00:09:25,700
But it kind of turns the idea
of looking at code on its head,

216
00:09:25,700 --> 00:09:29,950
and introduces a much
more revolutionary idea

217
00:09:29,950 --> 00:09:32,365
for building together
rich experiences.

218
00:09:32,365 --> 00:09:34,711

219
00:09:34,711 --> 00:09:35,210
All right.

220
00:09:35,210 --> 00:09:37,502
So beyond kind of what's
represented here on the stage,

221
00:09:37,502 --> 00:09:39,376
there's a few other
things that are happening

222
00:09:39,376 --> 00:09:41,520
inside the ecosystem of
browser developer tooling.

223
00:09:41,520 --> 00:09:42,478
I want to quickly show.

224
00:09:42,478 --> 00:09:46,184
The TraceGL project came out
a little while ago, but said,

225
00:09:46,184 --> 00:09:47,600
we're just going
to log absolutely

226
00:09:47,600 --> 00:09:49,530
all the operations
that are happening.

227
00:09:49,530 --> 00:09:51,890
In this case, we are
logging not only all this,

228
00:09:51,890 --> 00:09:53,977
but we inspect retroactively
what happened here.

229
00:09:53,977 --> 00:09:55,810
And we can actually see
these if statements.

230
00:09:55,810 --> 00:09:57,184
They're in red
down at the bottom

231
00:09:57,184 --> 00:09:59,070
because these
conditions were not met.

232
00:09:59,070 --> 00:10:01,389
So visually we see,
oh, these all failed.

233
00:10:01,389 --> 00:10:02,430
We skip those conditions.

234
00:10:02,430 --> 00:10:07,000
And we skip the associated
context blocks with them.

235
00:10:07,000 --> 00:10:08,860
Spy-js is a similar
kind of thing.

236
00:10:08,860 --> 00:10:12,130
This has since been
acquired by the WebStorm,

237
00:10:12,130 --> 00:10:14,240
and kind of consumed
by the WebStorm IDE.

238
00:10:14,240 --> 00:10:17,100
But over on the left-hand
side, we have all the run loops

239
00:10:17,100 --> 00:10:19,355
for different events,
and then the call

240
00:10:19,355 --> 00:10:20,480
stacks that they triggered.

241
00:10:20,480 --> 00:10:22,410
And then we can
identify how exactly

242
00:10:22,410 --> 00:10:24,910
we map those call stacks
into the code, really

243
00:10:24,910 --> 00:10:26,904
nice useable experience.

244
00:10:26,904 --> 00:10:28,570
This is a project
called [? Ear ?] Horn,

245
00:10:28,570 --> 00:10:30,195
but you might have
seen a similar thing

246
00:10:30,195 --> 00:10:32,680
from the Light Table IDE.

247
00:10:32,680 --> 00:10:34,720
Here, we map in the
runtime information

248
00:10:34,720 --> 00:10:36,610
of what's happening
inside the browser

249
00:10:36,610 --> 00:10:38,420
and bringing that
right into the code.

250
00:10:38,420 --> 00:10:41,980
So we can see [? Un Mouse ?]
move, all this, our client X,

251
00:10:41,980 --> 00:10:43,470
our client Y's live updating.

252
00:10:43,470 --> 00:10:47,666
And we can get a good
idea, while looking

253
00:10:47,666 --> 00:10:49,950
at code, what the state
is in the browser.

254
00:10:49,950 --> 00:10:53,880
This is a quick
shot of looking at,

255
00:10:53,880 --> 00:10:57,070
per statement-based,
JavaScript profiling heat map.

256
00:10:57,070 --> 00:10:59,360
So we can see at the
statement-level, or even

257
00:10:59,360 --> 00:11:05,326
expression-level, where
our code is most expensive.

258
00:11:05,326 --> 00:11:06,700
Adobe's been doing
some fantastic

259
00:11:06,700 --> 00:11:07,699
work inside the browser.

260
00:11:07,699 --> 00:11:12,080
This is an experiment for a
GUI for editing CSS shapes.

261
00:11:12,080 --> 00:11:14,320
So we can move around
inside the GUI.

262
00:11:14,320 --> 00:11:15,850
And we update the
CSS-shaped polygon

263
00:11:15,850 --> 00:11:18,240
that's defined underneath it.

264
00:11:18,240 --> 00:11:20,765
And we've seen a fantastic
amount of innovation

265
00:11:20,765 --> 00:11:22,890
when it comes to all the
JavaScript frameworks that

266
00:11:22,890 --> 00:11:25,170
are creating better
tooling for themselves.

267
00:11:25,170 --> 00:11:29,130
So this is React's
Chrome extension.

268
00:11:29,130 --> 00:11:30,842
It looks like kind
of standard DevTools.

269
00:11:30,842 --> 00:11:32,550
But it's actually
completely representing

270
00:11:32,550 --> 00:11:37,570
their kind of applications
state of the world and all

271
00:11:37,570 --> 00:11:38,970
its properties.

272
00:11:38,970 --> 00:11:41,680
And similarly, this is
Ember's Chrome extension.

273
00:11:41,680 --> 00:11:45,290
They have a fantastic
view of all the promises

274
00:11:45,290 --> 00:11:48,190
that are active and
fulfilled inside the browser.

275
00:11:48,190 --> 00:11:50,430
And this is inspiring a
lot of browsers themselves,

276
00:11:50,430 --> 00:11:53,860
as far as how we can better
supply good information

277
00:11:53,860 --> 00:11:58,650
around some of these new things
like promises inside a browser.

278
00:11:58,650 --> 00:12:04,240
So to me, like, what is the role
of developer tools these days?

279
00:12:04,240 --> 00:12:06,960
Allowing us to develop fast
at the speed of our thinking,

280
00:12:06,960 --> 00:12:10,271
letting us go as quick as we
want, making debugging suck

281
00:12:10,271 --> 00:12:10,770
less.

282
00:12:10,770 --> 00:12:13,240
None of us want to be debugging.

283
00:12:13,240 --> 00:12:15,504
Hopefully, tools can help
us avoid the situation

284
00:12:15,504 --> 00:12:16,420
when we are debugging.

285
00:12:16,420 --> 00:12:19,590
But when we're there, it
should be easier for us.

286
00:12:19,590 --> 00:12:22,380
And Web development is hard.

287
00:12:22,380 --> 00:12:24,969
Tools can help keep
us on the golden path,

288
00:12:24,969 --> 00:12:26,510
make sure that things
are performant,

289
00:12:26,510 --> 00:12:29,030
make sure that things
work great across devices.

290
00:12:29,030 --> 00:12:32,560
And tools can help fill in the
gaps of the knowledge that we

291
00:12:32,560 --> 00:12:34,640
don't have and the
things that we forgot.

292
00:12:34,640 --> 00:12:36,730
So I think developing for
the Web, for JavaScript,

293
00:12:36,730 --> 00:12:37,800
can be better.

294
00:12:37,800 --> 00:12:39,780
Everyone on this stage
believes that, has

295
00:12:39,780 --> 00:12:40,790
been developing tools.

296
00:12:40,790 --> 00:12:42,280
And I'm excited to
see what's next.

297
00:12:42,280 --> 00:12:42,780
Thanks.

298
00:12:42,780 --> 00:12:46,161

299
00:12:46,161 --> 00:12:49,746
[APPLAUSE]

300
00:12:49,746 --> 00:12:51,370
JAKE ARCHIBALD: So Paul is
going to duck out now,

301
00:12:51,370 --> 00:12:53,170
because he's got
the dreaded illness.

302
00:12:53,170 --> 00:12:55,970
I can hear a few people
in the room have.

303
00:12:55,970 --> 00:12:57,834
So we've got his stunt double.

304
00:12:57,834 --> 00:12:59,750
Pavel's going to fill
in on the panel for him.

305
00:12:59,750 --> 00:13:01,680
Yeah, I can hear a
few people coughing.

306
00:13:01,680 --> 00:13:03,152
I had it last week, as well.

307
00:13:03,152 --> 00:13:04,735
I've managed to trace
it back, talking

308
00:13:04,735 --> 00:13:06,869
to some of the employees
of GDS who took a trip up

309
00:13:06,869 --> 00:13:07,410
to Newcastle.

310
00:13:07,410 --> 00:13:11,590
And I hear that that's where
this illness first came from.

311
00:13:11,590 --> 00:13:13,070
So it's another
valuable addition

312
00:13:13,070 --> 00:13:14,270
to the world from Newcastle.

313
00:13:14,270 --> 00:13:15,680
Thanks for that guys.

314
00:13:15,680 --> 00:13:17,210
I'm kidding of
course I love Greggs.

315
00:13:17,210 --> 00:13:20,070
Right, first question.

316
00:13:20,070 --> 00:13:24,057
But before we start, these
guys are developing the tools

317
00:13:24,057 --> 00:13:25,890
that are supposed to
make your lives easier.

318
00:13:25,890 --> 00:13:28,130
So if they say anything
you disagree with,

319
00:13:28,130 --> 00:13:31,871
or there's anything you want to
elaborate on, then use onslide.

320
00:13:31,871 --> 00:13:33,620
If that's not working
for you, please just

321
00:13:33,620 --> 00:13:34,620
raise your hand for now.

322
00:13:34,620 --> 00:13:36,660
I'll pick you out
for a question.

323
00:13:36,660 --> 00:13:38,750
The first question comes
from Sebastian Keavy.

324
00:13:38,750 --> 00:13:40,067
Where is Sebastian, over there?

325
00:13:40,067 --> 00:13:41,566
Will you get Sebastian
a microphone?

326
00:13:41,566 --> 00:13:48,370

327
00:13:48,370 --> 00:13:50,314
SEBASTIAN: My question
was [INAUDIBLE].

328
00:13:50,314 --> 00:13:55,045
[LAUGHTER]

329
00:13:55,045 --> 00:13:56,670
SEBASTIAN: In the
future, can we expect

330
00:13:56,670 --> 00:13:59,890
to do all of our development
within the browser?

331
00:13:59,890 --> 00:14:02,380
Will browser DevTools
become a full IDE?

332
00:14:02,380 --> 00:14:05,700
Or should browsers concentrate
on interfacing better

333
00:14:05,700 --> 00:14:06,824
with IDEs?

334
00:14:06,824 --> 00:14:08,740
JAKE ARCHIBALD: So Micromedia
brought a rendering engine

335
00:14:08,740 --> 00:14:10,290
to their IDE 17 years ago.

336
00:14:10,290 --> 00:14:12,511
But now it feels like
browsers are bringing IDEs

337
00:14:12,511 --> 00:14:13,510
to the rendering engine.

338
00:14:13,510 --> 00:14:14,884
And now we have
code editors that

339
00:14:14,884 --> 00:14:17,200
are written entirely
in browser technology.

340
00:14:17,200 --> 00:14:18,940
Joe, I'd like you
to come in on this.

341
00:14:18,940 --> 00:14:22,080
Do you see Firefox's
DevTools becoming a full IDE?

342
00:14:22,080 --> 00:14:24,670

343
00:14:24,670 --> 00:14:26,590
JOE: So I think
nobody would like

344
00:14:26,590 --> 00:14:30,195
us to say you're not allowed
to use Sublime anymore,

345
00:14:30,195 --> 00:14:31,320
or whatever your editor is.

346
00:14:31,320 --> 00:14:32,292
AUDIENCE: Brackets.

347
00:14:32,292 --> 00:14:33,250
JOE: Or Brackets, yeah.

348
00:14:33,250 --> 00:14:36,210
So that's not going to happen.

349
00:14:36,210 --> 00:14:37,820
On the other hand,
there are things

350
00:14:37,820 --> 00:14:41,330
that the browser knows about
how it's laying stuff out

351
00:14:41,330 --> 00:14:43,330
and what values are inside
the JavaScript engine

352
00:14:43,330 --> 00:14:47,049
that you could only
know by being a browser.

353
00:14:47,049 --> 00:14:48,590
So there are times
when you will want

354
00:14:48,590 --> 00:14:51,370
to edit stuff inside
a browser, as well.

355
00:14:51,370 --> 00:14:54,010
So the answer, I think, is both.

356
00:14:54,010 --> 00:14:57,166
JAKE ARCHIBALD: NJ, your answer is
also a browser, right?

357
00:14:57,166 --> 00:14:58,750
NJ: I wouldn't call
it exactly that.

358
00:14:58,750 --> 00:15:01,221
I think our goal is to tie
more closely to browsers.

359
00:15:01,221 --> 00:15:02,720
I mean, exactly
what Joe said, which

360
00:15:02,720 --> 00:15:05,280
is that there are things that
only the browser knows about.

361
00:15:05,280 --> 00:15:06,960
And browsers, in
my opinion, should

362
00:15:06,960 --> 00:15:08,490
focus on what they
do really well,

363
00:15:08,490 --> 00:15:09,614
which is inspection, right?

364
00:15:09,614 --> 00:15:10,917
They're inspecting the runtime.

365
00:15:10,917 --> 00:15:12,500
They can tell us all
this information.

366
00:15:12,500 --> 00:15:14,360
That information, I
think, for quick stuff,

367
00:15:14,360 --> 00:15:15,730
or when you're really
focused on the browser,

368
00:15:15,730 --> 00:15:17,290
it makes sense to have
tools in the browser.

369
00:15:17,290 --> 00:15:19,240
And obviously, it's a
great workflow for that.

370
00:15:19,240 --> 00:15:20,820
But there's times when what
you're really focused on

371
00:15:20,820 --> 00:15:21,741
is your coding, right?

372
00:15:21,741 --> 00:15:24,240
You don't want to live in the
browser when what you're doing

373
00:15:24,240 --> 00:15:24,800
is writing a bunch of code.

374
00:15:24,800 --> 00:15:26,130
And you're just trying
to get stuff working.

375
00:15:26,130 --> 00:15:27,780
And you're iterating
rapidly on your code.

376
00:15:27,780 --> 00:15:29,270
The browser isn't
maybe necessarily

377
00:15:29,270 --> 00:15:30,380
the best environment for that.

378
00:15:30,380 --> 00:15:32,213
So I think what we
should really be focusing

379
00:15:32,213 --> 00:15:34,590
on for that aspect is to
make it so that the browser

380
00:15:34,590 --> 00:15:38,200
information is exposed to
code editors and other kinds

381
00:15:38,200 --> 00:15:41,040
of tooling, NoFlo, or whatever,
so that we can provide

382
00:15:41,040 --> 00:15:42,725
a much richer
development experience

383
00:15:42,725 --> 00:15:45,100
outside of the browser as
well, working with the browser.

384
00:15:45,100 --> 00:15:46,380
HENRI: I agree with you.

385
00:15:46,380 --> 00:15:48,600
That's the whole reason
why I started RemoteDebug.

386
00:15:48,600 --> 00:15:51,190
And Joe, I actually
disagree with you.

387
00:15:51,190 --> 00:15:53,990
Because the browser today
has a lot of information

388
00:15:53,990 --> 00:15:56,300
that is not exposed
to the outer world.

389
00:15:56,300 --> 00:16:00,470
But I think that's a problem of
the state we're in right now.

390
00:16:00,470 --> 00:16:03,045
And because, frankly, what
NJ is building with Brackets

391
00:16:03,045 --> 00:16:05,340
is that he would love
to have that information

392
00:16:05,340 --> 00:16:09,000
available to write better
JavaScript debugging,

393
00:16:09,000 --> 00:16:11,140
get information about the
DOM, the network stack,

394
00:16:11,140 --> 00:16:12,223
all these kinds of things.

395
00:16:12,223 --> 00:16:15,020
I assume you would love to,
to pipe them into your editor.

396
00:16:15,020 --> 00:16:17,530
But he's not allowed because
he cannot get the information.

397
00:16:17,530 --> 00:16:21,290
So I think the responsibility
of the browser windows

398
00:16:21,290 --> 00:16:23,100
is to expose that information.

399
00:16:23,100 --> 00:16:25,720
And that's why I
think we need to start

400
00:16:25,720 --> 00:16:28,760
an effort like RemoteDebug
to unify and build

401
00:16:28,760 --> 00:16:30,410
an interface to our browsers.

402
00:16:30,410 --> 00:16:34,440
So all the tooling vendors
like Brackets, Telemetry,

403
00:16:34,440 --> 00:16:37,040
Benchmarking tools can start
accessing that information

404
00:16:37,040 --> 00:16:40,120
that, right now, only privileged
tools like built-in DevTools

405
00:16:40,120 --> 00:16:41,665
and browsers has access to.

406
00:16:41,665 --> 00:16:44,570
JOE: So there's two
different things there.

407
00:16:44,570 --> 00:16:47,100
Firefox developer
tools work remotely.

408
00:16:47,100 --> 00:16:48,815
They log in through
a TCP socket.

409
00:16:48,815 --> 00:16:50,410
HENRI: I know that.

410
00:16:50,410 --> 00:16:52,770
JOE: All of that stuff you
can get at as well as I can.

411
00:16:52,770 --> 00:16:56,290
So we're not keeping
anything private at all.

412
00:16:56,290 --> 00:16:59,910
And there's a self-documenting
API to get a list of everything

413
00:16:59,910 --> 00:17:02,610
that we are talking to.

414
00:17:02,610 --> 00:17:04,210
There's a second part to it.

415
00:17:04,210 --> 00:17:08,119
And I'm sure there's going to be
another question on this, which

416
00:17:08,119 --> 00:17:14,170
is should there be a standard
protocol by which we debate?

417
00:17:14,170 --> 00:17:15,989
JAKE ARCHIBALD: That's another question.

418
00:17:15,989 --> 00:17:18,349
JOE: I can feel it coming.

419
00:17:18,349 --> 00:17:20,650
NJ: We'll get there.

420
00:17:20,650 --> 00:17:25,134
JAKE ARCHIBALD: Is the browser, because
it has the runtime all built in,

421
00:17:25,134 --> 00:17:26,800
is it in a better
position to do things?

422
00:17:26,800 --> 00:17:29,750
Like even with code, like
Oracle Complete, I mean,

423
00:17:29,750 --> 00:17:31,230
I watch games developers work.

424
00:17:31,230 --> 00:17:34,265
And it seems to me that they
just write a comment, to do,

425
00:17:34,265 --> 00:17:35,140
make Half-Life free.

426
00:17:35,140 --> 00:17:38,980
And then from then they
just hit the Tab key.

427
00:17:38,980 --> 00:17:40,880
You know, the best games
developers are also

428
00:17:40,880 --> 00:17:43,350
the best at Track and
Field, the arcade game.

429
00:17:43,350 --> 00:17:46,620
Is the browser in a better
position to do stuff like that?

430
00:17:46,620 --> 00:17:48,200
JOE: Yes.

431
00:17:48,200 --> 00:17:53,250
So we've got some stuff that
does fairly deep analysis

432
00:17:53,250 --> 00:17:57,800
of JavaScript now, and will do
some fairly clever completions

433
00:17:57,800 --> 00:18:00,630
that is just landing.

434
00:18:00,630 --> 00:18:03,020
I mean, to be honest,
most of that technology

435
00:18:03,020 --> 00:18:05,934
is static, which Brackets
could do just as easily.

436
00:18:05,934 --> 00:18:08,100
NJ: But I think there is
actually value in doing it.

437
00:18:08,100 --> 00:18:09,070
We did some experiments
early on &mdash; we

438
00:18:09,070 --> 00:18:10,890
haven't really done it in
Brackets &mdash; around essentially

439
00:18:10,890 --> 00:18:12,360
querying the runtime
for information.

440
00:18:12,360 --> 00:18:12,480
JOE: Right.

441
00:18:12,480 --> 00:18:13,420
NJ: Like, if you're
stopped at a breakpoint &mdash;

442
00:18:13,420 --> 00:18:13,740
JOE: Right.

443
00:18:13,740 --> 00:18:15,160
NJ: &mdash; you can just ask
it, what's available now.

444
00:18:15,160 --> 00:18:15,810
JOE: There is more stuff there.

445
00:18:15,810 --> 00:18:16,480
Yes.

446
00:18:16,480 --> 00:18:18,820
NJ: And again, we could
do that from a code editor

447
00:18:18,820 --> 00:18:19,890
as well, as long as it's
exposed to the runtime.

448
00:18:19,890 --> 00:18:20,030
JOE: Yeah.

449
00:18:20,030 --> 00:18:21,442
NJ: I guess the other point
I would make &mdash; I don't if I'm

450
00:18:21,442 --> 00:18:23,400
getting away from what
you were asking but &mdash; is

451
00:18:23,400 --> 00:18:25,510
that you also want to
write other kinds of code

452
00:18:25,510 --> 00:18:26,930
besides browser code often.

453
00:18:26,930 --> 00:18:28,772
And so having one environment
for, hey, you know, now I'm

454
00:18:28,772 --> 00:18:29,575
going to do browser
stuff, and now I'm

455
00:18:29,575 --> 00:18:30,695
going to do my
Node stuff, and I'm

456
00:18:30,695 --> 00:18:33,120
going to do my Ruby stuff, or
whatever, seems a little funny.

457
00:18:33,120 --> 00:18:34,640
Of course, if you were
just doing JavaScript,

458
00:18:34,640 --> 00:18:36,860
maybe you could re-target the
in-browser developer tools

459
00:18:36,860 --> 00:18:37,200
to Node.

460
00:18:37,200 --> 00:18:38,960
I mean, you can already do that
with node-inspector and things

461
00:18:38,960 --> 00:18:39,540
like that.

462
00:18:39,540 --> 00:18:41,034
But I think there's
room for lots

463
00:18:41,034 --> 00:18:42,200
of different kinds of tools.

464
00:18:42,200 --> 00:18:43,380
People have lots of
different workflows.

465
00:18:43,380 --> 00:18:44,640
They have to work with
local command-line tools.

466
00:18:44,640 --> 00:18:46,470
They have to do this and that.

467
00:18:46,470 --> 00:18:48,310
In terms of, you
know, the browser

468
00:18:48,310 --> 00:18:50,430
has its role as a
kind of sandbox-place

469
00:18:50,430 --> 00:18:51,700
where you do browser stuff.

470
00:18:51,700 --> 00:18:54,310
And I think that, again,
I think the solution is

471
00:18:54,310 --> 00:18:56,910
you have both kinds of tools
and they talk to each other.

472
00:18:56,910 --> 00:18:58,860
HENRI: Yeah, like,
I don't think having

473
00:18:58,860 --> 00:19:01,450
a contextual DevTool
built into the browser

474
00:19:01,450 --> 00:19:04,810
is ruling out having another
tool like your editor.

475
00:19:04,810 --> 00:19:07,779
But the kind of problem I think
by having really specialized

476
00:19:07,779 --> 00:19:10,070
browser tools for each browser
is that, as a developer,

477
00:19:10,070 --> 00:19:12,890
I need to learn a
new DevTool when

478
00:19:12,890 --> 00:19:14,250
I'm targeting another browser.

479
00:19:14,250 --> 00:19:16,430
So that means my workflow
is kind of broken.

480
00:19:16,430 --> 00:19:19,000
Because if I have
to go with Chrome,

481
00:19:19,000 --> 00:19:20,840
I need learn how to
use Chrome DevTools,

482
00:19:20,840 --> 00:19:25,260
navigate the source
code, set of breakpoints.

483
00:19:25,260 --> 00:19:28,050
If I do the Firefox, I
need to learn their tool.

484
00:19:28,050 --> 00:19:30,724
And to me that's
disconnecting my productivity.

485
00:19:30,724 --> 00:19:32,640
JOE: So there's a lot
we can do to help there.

486
00:19:32,640 --> 00:19:35,210
So you'll notice that
in Firefox DevTools now,

487
00:19:35,210 --> 00:19:38,430
the key sequence is the
same as in Chrome's.

488
00:19:38,430 --> 00:19:40,940
In our box model highlighter
that just landed then

489
00:19:40,940 --> 00:19:45,101
all of the colors to denote
borders, paddings, et cetera,

490
00:19:45,101 --> 00:19:46,100
they're the same colors.

491
00:19:46,100 --> 00:19:48,390
And IE is exactly
the same as well.

492
00:19:48,390 --> 00:19:52,545
So there's stuff we
can do to help there.

493
00:19:52,545 --> 00:19:54,430
I think there are
many reasons why just

494
00:19:54,430 --> 00:19:58,690
saying there should be
only one tool is hard.

495
00:19:58,690 --> 00:20:00,330
That's that old
question again, which

496
00:20:00,330 --> 00:20:01,770
we're going to come back to.

497
00:20:01,770 --> 00:20:02,270
I'm sure.

498
00:20:02,270 --> 00:20:03,130
JAKE ARCHIBALD: Before we move on
to the next question,

499
00:20:03,130 --> 00:20:04,870
I've got a question
from the floor

500
00:20:04,870 --> 00:20:07,380
from everyone's favorite
shaver, Remington Sharp.

501
00:20:07,380 --> 00:20:11,120

502
00:20:11,120 --> 00:20:14,990
REMINGTON: On the point of
working with FireFox DevTools,

503
00:20:14,990 --> 00:20:18,450
working with Chrome DevTools,
working with IE tools,

504
00:20:18,450 --> 00:20:22,390
I haven't used
the F12 tools yet.

505
00:20:22,390 --> 00:20:25,640
And when I look at
the UI responsiveness,

506
00:20:25,640 --> 00:20:27,140
I wonder whether
or not that's going

507
00:20:27,140 --> 00:20:31,010
to give me more insight to the
responsiveness of my web page

508
00:20:31,010 --> 00:20:34,127
across all the browsers, or
if it's just for that browser.

509
00:20:34,127 --> 00:20:35,460
And that's something I'm unsure.

510
00:20:35,460 --> 00:20:37,700
I mean, I'm quite
comfortable in Chrome.

511
00:20:37,700 --> 00:20:39,560
And I can navigate
DevTools very well.

512
00:20:39,560 --> 00:20:45,105
But am I debugging
for Chrome, or am I

513
00:20:45,105 --> 00:20:46,599
debugging across the platform?

514
00:20:46,599 --> 00:20:47,640
In most cases, it's bugs.

515
00:20:47,640 --> 00:20:48,140
Yeah, sure.

516
00:20:48,140 --> 00:20:52,260
But for things like
performance and responsiveness,

517
00:20:52,260 --> 00:20:53,164
I have no clue.

518
00:20:53,164 --> 00:20:54,830
And do we need all
these different tools

519
00:20:54,830 --> 00:20:56,419
to target each browser?

520
00:20:56,419 --> 00:20:58,460
JAKE ARCHIBALD: That actually leads
into our next question.

521
00:20:58,460 --> 00:21:00,626
So I'm going to get heard,
Shane Hudson to read out.

522
00:21:00,626 --> 00:21:03,027
Because it kind of
expands on that.

523
00:21:03,027 --> 00:21:04,520
Microphone for Shane?

524
00:21:04,520 --> 00:21:07,950

525
00:21:07,950 --> 00:21:08,450
SHANE: Hi.

526
00:21:08,450 --> 00:21:12,900
So you rewrote my
question for this.

527
00:21:12,900 --> 00:21:15,110
Initiatives like
RemoteDebug look

528
00:21:15,110 --> 00:21:16,550
to unify development tools.

529
00:21:16,550 --> 00:21:19,220
Is this a good thing or could
it have the diversity of

530
00:21:19,220 --> 00:21:20,120
[INAUDIBLE]?

531
00:21:20,120 --> 00:21:22,910
JOE: So that's
this question then.

532
00:21:22,910 --> 00:21:30,240
So some people would like
to just have one tool.

533
00:21:30,240 --> 00:21:32,430
And obviously, many
tools are being created.

534
00:21:32,430 --> 00:21:36,250

535
00:21:36,250 --> 00:21:39,940
And there's a ton of ways
in which our tools are

536
00:21:39,940 --> 00:21:42,060
specific to what we're doing.

537
00:21:42,060 --> 00:21:46,250
So there's new APIs that
we're experimenting with.

538
00:21:46,250 --> 00:21:47,630
We need developer
tools for that.

539
00:21:47,630 --> 00:21:50,070
And we wouldn't
expect the Chrome team

540
00:21:50,070 --> 00:21:52,480
to provide us with those tools.

541
00:21:52,480 --> 00:21:54,710
And there are
optimization techniques

542
00:21:54,710 --> 00:21:57,780
that will work in one browser
that won't work in another.

543
00:21:57,780 --> 00:22:02,060
I think there are good reasons
why we have an obligation

544
00:22:02,060 --> 00:22:06,280
to tell you about the stuff
that is in our browser.

545
00:22:06,280 --> 00:22:08,910
The only people that can
tell you about it is us.

546
00:22:08,910 --> 00:22:10,300
We have an obligation
to do that.

547
00:22:10,300 --> 00:22:13,100
And so that's what we're doing.

548
00:22:13,100 --> 00:22:18,220
KENNETH: So on that, if
there was a standard way

549
00:22:18,220 --> 00:22:20,320
to get that info
out of the browsers,

550
00:22:20,320 --> 00:22:24,180
then some third party
interested in building

551
00:22:24,180 --> 00:22:27,880
that kind of profiling tools,
specifically given task,

552
00:22:27,880 --> 00:22:30,600
could easily go and
grab the same data,

553
00:22:30,600 --> 00:22:35,450
feed the same HTML JavaScript,
whatever, to IE, Firefox,

554
00:22:35,450 --> 00:22:39,550
Chrome, grab all of those
statistics and show, OK, here's

555
00:22:39,550 --> 00:22:43,500
how this and this thing
performs in that browser.

556
00:22:43,500 --> 00:22:45,920
And right now, that's
something we don't really have.

557
00:22:45,920 --> 00:22:47,210
NJ: We definitely don't
want to kill innovation.

558
00:22:47,210 --> 00:22:49,580
I mean, it's great that you
guys are doing different things.

559
00:22:49,580 --> 00:22:50,560
And you guys are doing
your different things.

560
00:22:50,560 --> 00:22:52,620
But as you mentioned
just now too,

561
00:22:52,620 --> 00:22:53,930
you're trying to make some
things the same, right?

562
00:22:53,930 --> 00:22:55,360
Because you want them
to always be the same.

563
00:22:55,360 --> 00:22:56,450
And for just basic
functionality,

564
00:22:56,450 --> 00:22:57,600
I want to set a breakpoint,
I want to do this,

565
00:22:57,600 --> 00:22:58,260
I want to do that.

566
00:22:58,260 --> 00:22:59,510
Even the more
inspection stuff, it

567
00:22:59,510 --> 00:23:01,176
seems like it would
be valuable to have,

568
00:23:01,176 --> 00:23:04,000
at least even at the
highest, shallowest level,

569
00:23:04,000 --> 00:23:06,170
some kind of just
basically common protocol.

570
00:23:06,170 --> 00:23:08,270
Just to make it so that
we can talk the same way.

571
00:23:08,270 --> 00:23:11,050
And then this browser might
have certain extensions

572
00:23:11,050 --> 00:23:12,205
for the stuff that it does.

573
00:23:12,205 --> 00:23:13,900
And another browser might
have different extensions

574
00:23:13,900 --> 00:23:14,608
for those things.

575
00:23:14,608 --> 00:23:16,410
But on places where
there really doesn't

576
00:23:16,410 --> 00:23:18,060
need to be a huge
difference, at least

577
00:23:18,060 --> 00:23:19,790
in the core
functionality, why not?

578
00:23:19,790 --> 00:23:22,800
HENRI: Well, I would
say, Joe, first of all,

579
00:23:22,800 --> 00:23:24,370
I don't just want one tool.

580
00:23:24,370 --> 00:23:26,770
I really like that we have
multiple tools available.

581
00:23:26,770 --> 00:23:29,819
But as a developer, I don't want
to swap between multiple tools

582
00:23:29,819 --> 00:23:31,860
just because I'm
[? tied into ?] another browser.

583
00:23:31,860 --> 00:23:33,930
I don't want to change my
workflow as a developer

584
00:23:33,930 --> 00:23:36,180
while I'm crafting a
debug in my application,

585
00:23:36,180 --> 00:23:38,494
and learn new
workflows because I'm

586
00:23:38,494 --> 00:23:39,910
[? tied into ?]
multiple browsers.

587
00:23:39,910 --> 00:23:41,680
And that's the reality
that's in front of developers

588
00:23:41,680 --> 00:23:43,685
today is that we have a
bunch of different browsers

589
00:23:43,685 --> 00:23:45,476
with different tools
that we need to learn.

590
00:23:45,476 --> 00:23:47,040
And it's counterproductive.

591
00:23:47,040 --> 00:23:50,985
JOE: So my hope is that your
workflow isn't that different.

592
00:23:50,985 --> 00:23:53,700
You know, setting a
breakpoint, that kind of thing

593
00:23:53,700 --> 00:23:56,255
is, basically, very similar.

594
00:23:56,255 --> 00:23:57,574
And so I'm hoping that &mdash;

595
00:23:57,574 --> 00:23:59,240
HENRI: But why do I
need to do it twice,

596
00:23:59,240 --> 00:24:03,660
once in Firefox DevTools, and
another one in Chrome DevTools.

597
00:24:03,660 --> 00:24:04,160
JOE: Right.

598
00:24:04,160 --> 00:24:05,565
So two different use cases here.

599
00:24:05,565 --> 00:24:07,190
There's what Brackets
are trying to do,

600
00:24:07,190 --> 00:24:10,810
which is to log into our
DevTools, set the breakpoints,

601
00:24:10,810 --> 00:24:13,020
inspect the variables,
that sort of thing.

602
00:24:13,020 --> 00:24:14,754
That's one level of difficulty.

603
00:24:14,754 --> 00:24:16,670
There's a whole different
level of difficulty,

604
00:24:16,670 --> 00:24:19,217
which is, make Chrome
DevTools work against Firefox.

605
00:24:19,217 --> 00:24:19,800
HENRI: I know.

606
00:24:19,800 --> 00:24:21,216
That's a prototype
I'm developing.

607
00:24:21,216 --> 00:24:24,580
JOE: There's a massive, massive
difference between those two.

608
00:24:24,580 --> 00:24:26,731
And what you're getting
into, trying to do that,

609
00:24:26,731 --> 00:24:28,230
is all sorts of
complicated problems

610
00:24:28,230 --> 00:24:30,667
about object lifetime in
the browser, et cetera.

611
00:24:30,667 --> 00:24:32,250
There's a multitude
of problems there.

612
00:24:32,250 --> 00:24:34,650
HENRI: It's that simple.

613
00:24:34,650 --> 00:24:37,140
JOE: Now as far as the
case for simple debug

614
00:24:37,140 --> 00:24:39,619
goes, so just
think about writing

615
00:24:39,619 --> 00:24:40,910
an add-on for a browser, right?

616
00:24:40,910 --> 00:24:44,764
So we started off
with Firefox add-ons,

617
00:24:44,764 --> 00:24:46,180
which will do
absolutely anything.

618
00:24:46,180 --> 00:24:48,200
And then there's a
new API that's safer,

619
00:24:48,200 --> 00:24:49,710
that comes on top of that.

620
00:24:49,710 --> 00:24:53,490
And then it looks like we're
at a state where maybe we

621
00:24:53,490 --> 00:24:57,819
could have the Chrome API
and the Firefox, you know,

622
00:24:57,819 --> 00:24:59,610
Jetpack API, there's
some similarity there.

623
00:24:59,610 --> 00:25:01,170
And maybe we can
extract that standard.

624
00:25:01,170 --> 00:25:02,310
JAKE ARCHIBALD: Well, we've done that
with Greasemonkey, right?

625
00:25:02,310 --> 00:25:03,601
I mean, Greasemonkey let's us &mdash;

626
00:25:03,601 --> 00:25:04,230
JOE: Right.

627
00:25:04,230 --> 00:25:07,730
That kind of approach,
of giving people

628
00:25:07,730 --> 00:25:09,510
what they want, you
know, everything,

629
00:25:09,510 --> 00:25:11,760
filtering it down to what
they need, standardizing it,

630
00:25:11,760 --> 00:25:13,500
that feels like a good approach.

631
00:25:13,500 --> 00:25:16,860
And I'm for that
kind of process.

632
00:25:16,860 --> 00:25:19,330
But it's hard.

633
00:25:19,330 --> 00:25:21,940
PAVEL: So it seems like we're
all in agreement with warring,

634
00:25:21,940 --> 00:25:22,740
right?

635
00:25:22,740 --> 00:25:24,475
We need to compete to innovate.

636
00:25:24,475 --> 00:25:26,260
And nobody's taking that away.

637
00:25:26,260 --> 00:25:27,240
[INAUDIBLE] is sorry.

638
00:25:27,240 --> 00:25:30,166
60 FPS is going to be different
on Firefox from Chrome.

639
00:25:30,166 --> 00:25:31,665
You need to use
different timelines.

640
00:25:31,665 --> 00:25:34,620
You have to use IE's
timeline, at least for now.

641
00:25:34,620 --> 00:25:37,080
Because those pipelines
are entirely different.

642
00:25:37,080 --> 00:25:39,830
The [INAUDIBLE] you won't
see with the Firefox tool.

643
00:25:39,830 --> 00:25:41,250
So if you're going
for high tech,

644
00:25:41,250 --> 00:25:42,890
if you're going for
performance, you

645
00:25:42,890 --> 00:25:47,820
need to stick with the tools
for the browser as of today.

646
00:25:47,820 --> 00:25:50,000
Now, talking about the
baseline that we've all

647
00:25:50,000 --> 00:25:52,825
discussed for a single
ID, or whatever,

648
00:25:52,825 --> 00:25:55,050
that will use that
baseline, I think

649
00:25:55,050 --> 00:25:58,906
that the ball is on your
side at this moment.

650
00:25:58,906 --> 00:26:00,280
Most, or all, of
the browsers are

651
00:26:00,280 --> 00:26:02,640
exposing their
prodigals as of today.

652
00:26:02,640 --> 00:26:07,510
They are different if you try
and bridge them on your side,

653
00:26:07,510 --> 00:26:10,760
and prove that there is a value
in bridging them, and talking

654
00:26:10,760 --> 00:26:12,440
to multiple
browsers, there would

655
00:26:12,440 --> 00:26:14,870
be an incentive for
us to standardize.

656
00:26:14,870 --> 00:26:17,020
Otherwise, as browser
vendors, who would always

657
00:26:17,020 --> 00:26:21,460
want to innovate first
and standardize later.

658
00:26:21,460 --> 00:26:23,210
JAKE ARCHIBALD: This kind of
standardization effort

659
00:26:23,210 --> 00:26:24,710
that you're doing,
is this something

660
00:26:24,710 --> 00:26:26,940
that you see going
to a standards body,

661
00:26:26,940 --> 00:26:29,490
such as the W3 or
the [INAUDIBLE]?

662
00:26:29,490 --> 00:26:31,920
HENRI: Well, we've
been discussing that.

663
00:26:31,920 --> 00:26:33,950
And I think it's too early.

664
00:26:33,950 --> 00:26:36,160
Because frankly,
right now, we don't

665
00:26:36,160 --> 00:26:37,410
know how to build for the Web.

666
00:26:37,410 --> 00:26:39,160
We don't know how to
build Web components.

667
00:26:39,160 --> 00:26:41,680
We don't know how
to build DevTools.

668
00:26:41,680 --> 00:26:44,340
I think what we need to
start and agreeing upon

669
00:26:44,340 --> 00:26:47,340
is the baseline, like,
is our remote debugging,

670
00:26:47,340 --> 00:26:49,430
is that going to use HTTP?

671
00:26:49,430 --> 00:26:50,870
Is it a [? DIP ?] socket?

672
00:26:50,870 --> 00:26:53,230
What is a very
fundamental protocol?

673
00:26:53,230 --> 00:26:56,230
And then we can discuss
all the API details,

674
00:26:56,230 --> 00:26:57,710
like how is the Firefox API?

675
00:26:57,710 --> 00:26:59,300
How is the Chrome API?

676
00:26:59,300 --> 00:27:02,710
The problem is if you're
not a DevTool developer

677
00:27:02,710 --> 00:27:05,140
and you want to interface
with the browser, that

678
00:27:05,140 --> 00:27:06,680
is so goddamned hard.

679
00:27:06,680 --> 00:27:10,380
And what I see when I look at
what Visual Studio or Adobe are

680
00:27:10,380 --> 00:27:12,930
doing, and then they're
sitting and inventing

681
00:27:12,930 --> 00:27:17,424
ways to do instrumentation,
to extract information out

682
00:27:17,424 --> 00:27:19,590
of the web app, so they can
protect that information

683
00:27:19,590 --> 00:27:22,050
and bring it into their editors.

684
00:27:22,050 --> 00:27:24,650
And frankly, I think that's
a complete waste of time.

685
00:27:24,650 --> 00:27:27,181
Because that's the
responsibility of the browser

686
00:27:27,181 --> 00:27:27,680
windows.

687
00:27:27,680 --> 00:27:29,570
You guys are building
the platform.

688
00:27:29,570 --> 00:27:33,380
You should enable the
ecosystem of tooling windows

689
00:27:33,380 --> 00:27:35,830
we have out there to
build tools for the Web.

690
00:27:35,830 --> 00:27:39,090
Right now, you only allow
yourself to build for the Web.

691
00:27:39,090 --> 00:27:41,621
And I think that's
not good enough.

692
00:27:41,621 --> 00:27:43,120
JOE: So can I suggest
a way forward?

693
00:27:43,120 --> 00:27:46,040
The way forward here
is that we start off

694
00:27:46,040 --> 00:27:48,680
with something like a
JavaScript API, which

695
00:27:48,680 --> 00:27:50,360
allows you to do
debugging in a browser,

696
00:27:50,360 --> 00:27:52,200
whether that's
remotely, whether it's

697
00:27:52,200 --> 00:27:53,530
from one web page to another.

698
00:27:53,530 --> 00:27:54,946
I mean, that would
be pretty cool,

699
00:27:54,946 --> 00:27:56,520
to write a debugger
in a web page

700
00:27:56,520 --> 00:28:00,837
to look at the other web
pages, COD issues, obviously.

701
00:28:00,837 --> 00:28:02,420
Ignore the protocol
to start off with.

702
00:28:02,420 --> 00:28:04,520
Do it via JavaScript API.

703
00:28:04,520 --> 00:28:05,620
That's the way forward.

704
00:28:05,620 --> 00:28:09,050
And that is something that
you could build on bit by bit.

705
00:28:09,050 --> 00:28:10,890
But that's going to take time.

706
00:28:10,890 --> 00:28:12,390
JAKE ARCHIBALD: On a related
subject, I've got

707
00:28:12,390 --> 00:28:16,120
the next question
from Remi Sharp again?

708
00:28:16,120 --> 00:28:17,550
So could we get
Remi a microphone?

709
00:28:17,550 --> 00:28:20,730

710
00:28:20,730 --> 00:28:21,980
JOE: Can we just wire Remy up?

711
00:28:21,980 --> 00:28:25,420

712
00:28:25,420 --> 00:28:28,412
REMY: So my question
was rewritten, as well.

713
00:28:28,412 --> 00:28:30,870
JAKE ARCHIBALD: I just made them more
extreme to be more interesting,

714
00:28:30,870 --> 00:28:32,830
right?

715
00:28:32,830 --> 00:28:37,080
REMY: So currently
features launch

716
00:28:37,080 --> 00:28:40,420
before they have DevTools
for ATA promises,

717
00:28:40,420 --> 00:28:42,390
server-sent events,
web audio, and so on.

718
00:28:42,390 --> 00:28:43,880
Is this fair to developers?

719
00:28:43,880 --> 00:28:46,550
Shouldn't we be ensuring
we're developing features

720
00:28:46,550 --> 00:28:48,330
that are inherently debuggable.

721
00:28:48,330 --> 00:28:51,962
I don't actually agree
with the question.

722
00:28:51,962 --> 00:28:53,920
JAKE ARCHIBALD: Well, you say your
bit first if you want.

723
00:28:53,920 --> 00:28:58,160
REMY: Well, experiments come
before standards, right?

724
00:28:58,160 --> 00:28:59,742
It has to.

725
00:28:59,742 --> 00:29:01,450
That's the only way
we make any progress.

726
00:29:01,450 --> 00:29:04,200
So it should be
debuggable, but I

727
00:29:04,200 --> 00:29:07,425
want to be able to
get in there and debug

728
00:29:07,425 --> 00:29:11,160
it whilst the browsers catch
up with me as a developer.

729
00:29:11,160 --> 00:29:14,265
HENRI: So you just
answered your own question.

730
00:29:14,265 --> 00:29:14,890
REMY: Well, no.

731
00:29:14,890 --> 00:29:17,480
Server-sent events is a
really simple example.

732
00:29:17,480 --> 00:29:19,405
We've got tools for
debugging web sockets.

733
00:29:19,405 --> 00:29:21,613
We don't have a tool to
debugging server-sent events.

734
00:29:21,613 --> 00:29:25,150

735
00:29:25,150 --> 00:29:27,840
It's hard for us to go
ahead and debug that.

736
00:29:27,840 --> 00:29:30,890
And why aren't browsers
making that easier for us?

737
00:29:30,890 --> 00:29:33,650
[INAUDIBLE]

738
00:29:33,650 --> 00:29:36,890
PAVEL: I don't think we have
a well-established process

739
00:29:36,890 --> 00:29:39,980
of duplicability
for new features.

740
00:29:39,980 --> 00:29:42,180
We try to have
everything debuggable

741
00:29:42,180 --> 00:29:44,220
by the time it leaves
experiment, or is

742
00:29:44,220 --> 00:29:47,330
no longer behind a flag.

743
00:29:47,330 --> 00:29:49,820
Shadow DOM is probably
a good example of that.

744
00:29:49,820 --> 00:29:50,840
Shadow DOM appeared.

745
00:29:50,840 --> 00:29:54,110
Duplicability was there,
also behind a flag.

746
00:29:54,110 --> 00:29:57,120
And promises are already there.

747
00:29:57,120 --> 00:29:59,490
But there's no built-in
support for them yet.

748
00:29:59,490 --> 00:30:00,700
We're working on that.

749
00:30:00,700 --> 00:30:05,640
So for us, the measure is
be sure [INAUDIBLE] stable.

750
00:30:05,640 --> 00:30:08,180
That's an absolute
requirement for us.

751
00:30:08,180 --> 00:30:10,700
But there's no better process.

752
00:30:10,700 --> 00:30:12,860
And it's an area driven
by our customers.

753
00:30:12,860 --> 00:30:15,910
So if you file box about
lack of duplicability

754
00:30:15,910 --> 00:30:18,340
of experimental
features, it gains stars.

755
00:30:18,340 --> 00:30:20,677
We will definitely look into it.

756
00:30:20,677 --> 00:30:22,510
JAKE ARCHIBALD: The promises bit
is really interesting

757
00:30:22,510 --> 00:30:25,300
because there's a huge thread
in the spec discussion about

758
00:30:25,300 --> 00:30:28,310
promises where they were
saying, we're not going to have

759
00:30:28,310 --> 00:30:30,690
a [? dot-DOM ?] method that
a lot of promises have.

760
00:30:30,690 --> 00:30:34,114
Because that method is
just there for debugging.

761
00:30:34,114 --> 00:30:35,530
And we shouldn't
be putting things

762
00:30:35,530 --> 00:30:38,270
into the spec that are
just there for debugging.

763
00:30:38,270 --> 00:30:40,684

764
00:30:40,684 --> 00:30:42,850
What's your plan for debugging
things like promises?

765
00:30:42,850 --> 00:30:44,540
Is that something
you're looking at?

766
00:30:44,540 --> 00:30:46,110
JOE: Yes.

767
00:30:46,110 --> 00:30:48,760
So we've got this thing
called tag stacks, which

768
00:30:48,760 --> 00:30:52,490
is the thing that you see
in Chrome for looking back

769
00:30:52,490 --> 00:30:56,090
through async things.

770
00:30:56,090 --> 00:30:58,460
I think it'd be good to
have some way of listing

771
00:30:58,460 --> 00:31:01,960
all promises that have been
unfulfilled in some way.

772
00:31:01,960 --> 00:31:03,480
That would be extremely handy.

773
00:31:03,480 --> 00:31:06,550

774
00:31:06,550 --> 00:31:08,320
Yeah, we'd like to do this.

775
00:31:08,320 --> 00:31:10,545
I mean, DevTools are
written in JavaScript.

776
00:31:10,545 --> 00:31:12,670
We'd like it for our own
purposes, if nothing else.

777
00:31:12,670 --> 00:31:13,170
You know.

778
00:31:13,170 --> 00:31:16,457

779
00:31:16,457 --> 00:31:17,290
We're working on it.

780
00:31:17,290 --> 00:31:19,250
I don't know what more
I can say than that.

781
00:31:19,250 --> 00:31:21,077

782
00:31:21,077 --> 00:31:23,410
JAKE ARCHIBALD: I've got a question
more for the audience I guess.

783
00:31:23,410 --> 00:31:26,200
Given all these tools we
have like, variable watching

784
00:31:26,200 --> 00:31:30,300
breakpoints, who here
still uses console.log

785
00:31:30,300 --> 00:31:32,835
as their first bit of debugging?

786
00:31:32,835 --> 00:31:35,810

787
00:31:35,810 --> 00:31:36,960
And I do this as well.

788
00:31:36,960 --> 00:31:39,080
And I find this crazy
because just writing

789
00:31:39,080 --> 00:31:41,195
debugger is less characters.

790
00:31:41,195 --> 00:31:43,885

791
00:31:43,885 --> 00:31:46,470
It's like shaving with
a knife when there's

792
00:31:46,470 --> 00:31:49,610
a perfectly good razor
blade there for you.

793
00:31:49,610 --> 00:31:52,176
Why do you think people
like ghetto debugging?

794
00:31:52,176 --> 00:31:53,800
NJ: Well I think it's
because you don't

795
00:31:53,800 --> 00:31:55,880
have to navigate an
interface, right?

796
00:31:55,880 --> 00:31:58,360
It's like, I know the piece
of information I want.

797
00:31:58,360 --> 00:31:59,230
So when you just put
it in the log stream

798
00:31:59,230 --> 00:32:01,400
I don't have to go twirling
through things, right?

799
00:32:01,400 --> 00:32:03,525
Though, the flip
side is, you have

800
00:32:03,525 --> 00:32:04,900
to know in advance
what you want.

801
00:32:04,900 --> 00:32:06,590
That was kind of the
idea behind Theseus.

802
00:32:06,590 --> 00:32:08,605
And I think this is what some
of the other DevTool stuff

803
00:32:08,605 --> 00:32:08,920
is doing.

804
00:32:08,920 --> 00:32:10,360
And this kind of
omniscient debugging thing

805
00:32:10,360 --> 00:32:12,651
that's been around, I think
it's been in the Java world

806
00:32:12,651 --> 00:32:14,275
for awhile.

807
00:32:14,275 --> 00:32:16,650
You don't have to think in
advance about what information

808
00:32:16,650 --> 00:32:17,150
you need.

809
00:32:17,150 --> 00:32:18,249
You just get it.

810
00:32:18,249 --> 00:32:19,040
And you can get it.

811
00:32:19,040 --> 00:32:21,120
Afterwards, you just sort of
use it and then figure it out.

812
00:32:21,120 --> 00:32:22,930
And I think that's a
really powerful paradigm.

813
00:32:22,930 --> 00:32:24,960
The problem is that it has to
capture lots and lots of data.

814
00:32:24,960 --> 00:32:26,940
So it will be interesting
to see that go further.

815
00:32:26,940 --> 00:32:28,356
Another thing to
Remi's point is &mdash;

816
00:32:28,356 --> 00:32:29,773
and this is something
Theseus does

817
00:32:29,773 --> 00:32:32,022
and I think other things
do &mdash; I think there's actually

818
00:32:32,022 --> 00:32:33,530
a lot of power in
building debugging

819
00:32:33,530 --> 00:32:35,230
tools through
instrumentation, right?

820
00:32:35,230 --> 00:32:37,549
You instrument the JavaScript.

821
00:32:37,549 --> 00:32:39,090
And you can, you
know, like promises,

822
00:32:39,090 --> 00:32:40,450
you can instrument
the promises library

823
00:32:40,450 --> 00:32:41,750
and figure that stuff out.

824
00:32:41,750 --> 00:32:43,660
So actually having
a common library

825
00:32:43,660 --> 00:32:45,440
for doing that kind
of instrumentation

826
00:32:45,440 --> 00:32:47,530
for debugging just
purely in JavaScript

827
00:32:47,530 --> 00:32:49,220
without requiring browser
support would be kind of nice.

828
00:32:49,220 --> 00:32:50,890
And Theseus has the
beginning of that.

829
00:32:50,890 --> 00:32:52,962
It's like a generic
instrumentation library.

830
00:32:52,962 --> 00:32:55,322
JAKE ARCHIBALD: I think aliens are
trying to contact us.

831
00:32:55,322 --> 00:32:58,160
We'll just ignore it for now.

832
00:32:58,160 --> 00:33:00,540
I wonder if it's
entirely the UI thing.

833
00:33:00,540 --> 00:33:04,640
I mean, it reminds me of an
argument I got into at school.

834
00:33:04,640 --> 00:33:06,572
It was typical of my
sense of humor this,

835
00:33:06,572 --> 00:33:07,780
because it was about urinals.

836
00:33:07,780 --> 00:33:10,010
And I pointed out that
the design flaw of urinal

837
00:33:10,010 --> 00:33:13,497
is that they lend themselves to
a certain amount of splashback.

838
00:33:13,497 --> 00:33:15,330
And I said, this is
something we should fix.

839
00:33:15,330 --> 00:33:17,250
And he said to me, no,no.

840
00:33:17,250 --> 00:33:18,920
If you don't get
the splashback, how

841
00:33:18,920 --> 00:33:21,060
can you tell you're pissing
hard like a real man?

842
00:33:21,060 --> 00:33:23,536

843
00:33:23,536 --> 00:33:24,910
This is someone
who doesn't enjoy

844
00:33:24,910 --> 00:33:26,490
being showered with
his own effluent.

845
00:33:26,490 --> 00:33:29,439
But he finds it affirms
his masculinity.

846
00:33:29,439 --> 00:33:31,230
Is that what we're
seeing with console.log?

847
00:33:31,230 --> 00:33:35,750

848
00:33:35,750 --> 00:33:37,850
I'm just using the bare
minimum of the tools

849
00:33:37,850 --> 00:33:39,510
to prove I'm a great coder.

850
00:33:39,510 --> 00:33:42,430

851
00:33:42,430 --> 00:33:43,870
It's proving I'm
not a good coder

852
00:33:43,870 --> 00:33:45,145
if I have to use all
the browser's help.

853
00:33:45,145 --> 00:33:46,811
NJ: I'm going to stop
using console.log.

854
00:33:46,811 --> 00:33:48,635
I don't know.

855
00:33:48,635 --> 00:33:50,295
[INAUDIBLE] comfortable
from now on.

856
00:33:50,295 --> 00:33:52,920
KENNETH: I don't know what this
console.log thing is, you know.

857
00:33:52,920 --> 00:33:54,513
There's [INAUDIBLE] right?

858
00:33:54,513 --> 00:33:55,096
JAKE ARCHIBALD: Exactly.

859
00:33:55,096 --> 00:33:57,607

860
00:33:57,607 --> 00:33:59,690
Maybe that's a good time
to move on to the, oh no.

861
00:33:59,690 --> 00:34:01,468
We've got a question
in the audience.

862
00:34:01,468 --> 00:34:03,884
AUDIENCE: Just one thing, so
I like the urinal [INAUDIBLE]

863
00:34:03,884 --> 00:34:08,520
and the other part is the
element of asynchronicity.

864
00:34:08,520 --> 00:34:10,060
So sometimes it's
quite hard to know

865
00:34:10,060 --> 00:34:11,625
what order things
are triggered in.

866
00:34:11,625 --> 00:34:13,750
So if you've got events
and things like that and we

867
00:34:13,750 --> 00:34:16,790
find that often that
it just makes it easier

868
00:34:16,790 --> 00:34:19,190
to see the flow and
the sequence of things.

869
00:34:19,190 --> 00:34:21,530
So maybe it's the
element of a lot

870
00:34:21,530 --> 00:34:23,460
of things are
asynchronous in a browser.

871
00:34:23,460 --> 00:34:26,980
And it's hard to visualize
that and to reason about that.

872
00:34:26,980 --> 00:34:29,440
Is there a way to make
that better in the tools?

873
00:34:29,440 --> 00:34:33,630
KENNETH: Wouldn't it be nice to
have this map where you can see

874
00:34:33,630 --> 00:34:35,279
[INAUDIBLE] that's
flow in the browser.

875
00:34:35,279 --> 00:34:35,590
I don't know.

876
00:34:35,590 --> 00:34:36,677
NJ: I mean, that is
an interesting thing

877
00:34:36,677 --> 00:34:37,440
about the flow-based approach.

878
00:34:37,440 --> 00:34:38,820
I mean, there's been
flow-based programming

879
00:34:38,820 --> 00:34:39,970
like this for a long time.

880
00:34:39,970 --> 00:34:41,469
But it's kind of
interesting that we

881
00:34:41,469 --> 00:34:42,790
haven't seen it for JavaScript.

882
00:34:42,790 --> 00:34:44,570
And when you're dealing with
large amounts of asynchronous,

883
00:34:44,570 --> 00:34:46,547
I mean, this is the
number one [INAUDIBLE]

884
00:34:46,547 --> 00:34:48,130
I think we have in
Brackets in general

885
00:34:48,130 --> 00:34:50,120
is just dealing with
asynchronous crap, right?

886
00:34:50,120 --> 00:34:51,775
Having visual ways to trace
that stuff is really important.

887
00:34:51,775 --> 00:34:53,909
As I said, Theseus does
a little bit of that.

888
00:34:53,909 --> 00:34:54,950
HENRI: One thought, here.

889
00:34:54,950 --> 00:34:56,860
What if we enable on
the platform level,

890
00:34:56,860 --> 00:34:58,940
like new development
approach, like this

891
00:34:58,940 --> 00:35:00,350
to serve as [INAUDIBLE], right?

892
00:35:00,350 --> 00:35:03,340
What if we allowed
external developers

893
00:35:03,340 --> 00:35:05,610
to build new kind of
tools for the platform.

894
00:35:05,610 --> 00:35:07,559
So it wouldn't only
be the DevTools teams?

895
00:35:07,559 --> 00:35:09,600
JAKE ARCHIBALD: We do have a question
about that coming up.

896
00:35:09,600 --> 00:35:10,725
So we'll save that for now.

897
00:35:10,725 --> 00:35:12,309
We've got a question
at the back?

898
00:35:12,309 --> 00:35:12,850
AUDIENCE: No.

899
00:35:12,850 --> 00:35:14,210
It's just an extension
on the same thing really.

900
00:35:14,210 --> 00:35:15,750
I find for mobile
development a lot

901
00:35:15,750 --> 00:35:17,710
of the time I don't want
to jump into the DevTools

902
00:35:17,710 --> 00:35:19,918
because I'm working on a
very fine grained, something

903
00:35:19,918 --> 00:35:23,170
with focus and blur
events, or touch start,

904
00:35:23,170 --> 00:35:25,650
and various things like that,
and jumping into DevTools

905
00:35:25,650 --> 00:35:27,400
actually interrupts that flow.

906
00:35:27,400 --> 00:35:30,675
So being able to look back as to
what's happened in the last 10

907
00:35:30,675 --> 00:35:31,966
seconds would be really useful.

908
00:35:31,966 --> 00:35:34,770
So that kind of thing
built in to DevTools,

909
00:35:34,770 --> 00:35:36,510
just a snapshot of
what has just happened

910
00:35:36,510 --> 00:35:37,250
rather than what's
happening now.

911
00:35:37,250 --> 00:35:38,510
NJ: Have any of you guys
looked into omniscient

912
00:35:38,510 --> 00:35:38,660
[? to deal with that? ?]

913
00:35:38,660 --> 00:35:41,100
AUDIENCE: That's why I don't
use debugger most of the time.

914
00:35:41,100 --> 00:35:42,808
NJ: In the DevTools,
have you guys though

915
00:35:42,808 --> 00:35:44,359
about looking into that?

916
00:35:44,359 --> 00:35:45,400
Like capturing this data?

917
00:35:45,400 --> 00:35:47,780
PAVEL: Yeah.

918
00:35:47,780 --> 00:35:50,320
Outside of DevTools,
tracing has this feature.

919
00:35:50,320 --> 00:35:51,950
It can record what's happening.

920
00:35:51,950 --> 00:35:55,095
And it shows you a sliding
window of what's just happened.

921
00:35:55,095 --> 00:35:59,120
It is not traced into the
content world, though.

922
00:35:59,120 --> 00:36:02,780
So we don't operate
nodes, just repair.

923
00:36:02,780 --> 00:36:07,647
And in DevTools we haven't
started doing any of it.

924
00:36:07,647 --> 00:36:09,230
JAKE ARCHIBALD: We'll move on
to the next topic.

925
00:36:09,230 --> 00:36:11,266
We've got a question
from Cornell.

926
00:36:11,266 --> 00:36:12,682
Where are you?

927
00:36:12,682 --> 00:36:14,190
A microphone for that man?

928
00:36:14,190 --> 00:36:14,690
CORNELL: Hi.

929
00:36:14,690 --> 00:36:18,510
There are lots of deprecated
APIs and practices

930
00:36:18,510 --> 00:36:22,750
that browsers could
detect and warn about.

931
00:36:22,750 --> 00:36:25,860
How can tools guide
developers towards better code

932
00:36:25,860 --> 00:36:30,000
without expecting developers
to run a specific profiler

933
00:36:30,000 --> 00:36:32,144
or manually interpret
the results?

934
00:36:32,144 --> 00:36:33,810
SPEAKER: I really
liked Firebug for this

935
00:36:33,810 --> 00:36:36,470
actually because it had always
visible a little error-counter

936
00:36:36,470 --> 00:36:37,080
at the bottom.

937
00:36:37,080 --> 00:36:39,587
And knowing that other
Firebug users would see that,

938
00:36:39,587 --> 00:36:40,420
so it spurred me on.

939
00:36:40,420 --> 00:36:42,240
I don't want errors on my pages.

940
00:36:42,240 --> 00:36:43,240
Imagine the shame of it.

941
00:36:43,240 --> 00:36:44,300
You know?

942
00:36:44,300 --> 00:36:46,400
Is this a useful thing?

943
00:36:46,400 --> 00:36:47,079
JAKE ARCHIBALD: So yes.

944
00:36:47,079 --> 00:36:49,120
One of things that we are
putting serious thought

945
00:36:49,120 --> 00:36:51,610
into doing is to splitting
the web console in two.

946
00:36:51,610 --> 00:36:54,550
So one part of it would be
logging and one part of it

947
00:36:54,550 --> 00:36:57,390
would be JavaScript.

948
00:36:57,390 --> 00:36:59,639
So we're putting lots and
lots of extra warnings

949
00:36:59,639 --> 00:37:00,930
into the console at the moment.

950
00:37:00,930 --> 00:37:02,560
There are all sorts
of security things

951
00:37:02,560 --> 00:37:08,780
like there are calls
errors in there, et cetera.

952
00:37:08,780 --> 00:37:10,660
And I think we should
be having more of them.

953
00:37:10,660 --> 00:37:12,939
And that basically encompasses
what you're saying.

954
00:37:12,939 --> 00:37:14,980
But it's going to make a
complete mess of the web

955
00:37:14,980 --> 00:37:15,896
console if we do that.

956
00:37:15,896 --> 00:37:17,300
So we'll have two panels.

957
00:37:17,300 --> 00:37:18,855
That's what we'll do.

958
00:37:18,855 --> 00:37:19,980
So that's what we're doing.

959
00:37:19,980 --> 00:37:21,729
That's what we're
probably planning to do.

960
00:37:21,729 --> 00:37:25,530

961
00:37:25,530 --> 00:37:26,610
It's not code yet.

962
00:37:26,610 --> 00:37:27,892
That's what the plan is.

963
00:37:27,892 --> 00:37:29,850
PAVEL: We are not quite
splitting the consoles.

964
00:37:29,850 --> 00:37:34,000
But we're also working on
more warnings on deprecations,

965
00:37:34,000 --> 00:37:36,330
and not only deprecations,
but the performance

966
00:37:36,330 --> 00:37:40,291
issues, and potential
problematics for everything.

967
00:37:40,291 --> 00:37:42,665
HENRI: I would love to see
some [? linking ?] tools built

968
00:37:42,665 --> 00:37:45,450
in to the DevTools that
are contextual, right?

969
00:37:45,450 --> 00:37:47,470
So while the app is
running, then it could say,

970
00:37:47,470 --> 00:37:50,280
hey, this API is being
used, just deprecated.

971
00:37:50,280 --> 00:37:51,760
This is just this
goes, hey, you're

972
00:37:51,760 --> 00:37:54,045
doing something that
is causing jank,

973
00:37:54,045 --> 00:37:56,420
that would be nice to have an
ongoing checklist of seeing

974
00:37:56,420 --> 00:37:57,110
stuff, right?

975
00:37:57,110 --> 00:37:59,140
Instead of just a
warning in a console.

976
00:37:59,140 --> 00:37:59,640
JAKE ARCHIBALD: Right.

977
00:37:59,640 --> 00:38:03,440
So one of the things we have I
think right now on Firefox OS

978
00:38:03,440 --> 00:38:08,350
is, on top of the display,
on top of your webpage,

979
00:38:08,350 --> 00:38:09,784
you've got a little
thing floating

980
00:38:09,784 --> 00:38:11,700
over the top, that tells
you about JavaScript.

981
00:38:11,700 --> 00:38:12,850
It tells you about jank.

982
00:38:12,850 --> 00:38:14,433
It tells you about
that sort of thing.

983
00:38:14,433 --> 00:38:16,740
There's a bunch of little
things that will do that.

984
00:38:16,740 --> 00:38:18,430
PAVEL: So there's
also a lot of things

985
00:38:18,430 --> 00:38:20,130
could be done using
instrumenting codes.

986
00:38:20,130 --> 00:38:22,990
We have a Prodigal
API that allows

987
00:38:22,990 --> 00:38:26,280
installing a pre-processor
that would instrument all

988
00:38:26,280 --> 00:38:30,200
the content from JavaScript
and chase it, log it, and do

989
00:38:30,200 --> 00:38:31,950
whatever you want with it.

990
00:38:31,950 --> 00:38:35,090
So we expect a lot of
innovation to come from there,

991
00:38:35,090 --> 00:38:38,360
from the outside, that would be
analyzed and promote the tool

992
00:38:38,360 --> 00:38:39,472
itself.

993
00:38:39,472 --> 00:38:40,680
NJ: Is that shipping already?

994
00:38:40,680 --> 00:38:41,221
PAVEL: It is.

995
00:38:41,221 --> 00:38:44,700
It is there for quite some time.

996
00:38:44,700 --> 00:38:50,932
JAKE ARCHIBALD: We've got tools like
Timeline and Chrome has

997
00:38:50,932 --> 00:38:53,850
as well, are we
seeing users use that?

998
00:38:53,850 --> 00:38:55,384
Or do want to be
in that position

999
00:38:55,384 --> 00:38:56,800
where we want to
tell people, hey,

1000
00:38:56,800 --> 00:38:58,630
you have layout
thrashing going on

1001
00:38:58,630 --> 00:39:00,466
without them having
to go to that and say,

1002
00:39:00,466 --> 00:39:01,840
this is what layout
thrashing is,

1003
00:39:01,840 --> 00:39:03,460
this is how you can find
out where it's happening.

1004
00:39:03,460 --> 00:39:05,700
But we know, just from
a small little test,

1005
00:39:05,700 --> 00:39:06,600
that it is happening.

1006
00:39:06,600 --> 00:39:07,849
PAVEL: It wasn't the question.

1007
00:39:07,849 --> 00:39:10,215
It was the answer, right?

1008
00:39:10,215 --> 00:39:10,715
JAKE ARCHIBALD: Yeah.

1009
00:39:10,715 --> 00:39:11,520
Can we have that?

1010
00:39:11,520 --> 00:39:14,140
And when can we have it?

1011
00:39:14,140 --> 00:39:17,640
HENRI: But I think that is
the solution to proper bit

1012
00:39:17,640 --> 00:39:19,820
performance, better
information to developers.

1013
00:39:19,820 --> 00:39:23,994
Just like YSlow did it for
bit performance, right?

1014
00:39:23,994 --> 00:39:26,160
Most of the others was just
want to have a checklist

1015
00:39:26,160 --> 00:39:29,870
to see, hey, I need to
complete these 500 issues,

1016
00:39:29,870 --> 00:39:32,960
or what I have in my app,
and then I'm good, right?

1017
00:39:32,960 --> 00:39:36,300
PAVEL: We do want to make
Timeline more popular.

1018
00:39:36,300 --> 00:39:37,570
We want draw attention to it.

1019
00:39:37,570 --> 00:39:38,403
And we will do that.

1020
00:39:38,403 --> 00:39:41,884
And you will see warnings.

1021
00:39:41,884 --> 00:39:43,581
JAKE ARCHIBALD: Makes sense.

1022
00:39:43,581 --> 00:39:44,080
Right.

1023
00:39:44,080 --> 00:39:45,220
We'll move on to
the next question.

1024
00:39:45,220 --> 00:39:46,320
This is from Kyle Simpson.

1025
00:39:46,320 --> 00:39:47,580
Where's Kyle?

1026
00:39:47,580 --> 00:39:48,080
Over there.

1027
00:39:48,080 --> 00:39:48,913
Microphone for Kyle.

1028
00:39:48,913 --> 00:39:55,684

1029
00:39:55,684 --> 00:39:56,350
KYLE: All right.

1030
00:39:56,350 --> 00:39:58,580
So disclosure of
bias, a couple years

1031
00:39:58,580 --> 00:40:01,190
ago I worked with Joe Walker
on the Firefox developer tools

1032
00:40:01,190 --> 00:40:01,690
team.

1033
00:40:01,690 --> 00:40:03,240
So you just have to
keep that in mind

1034
00:40:03,240 --> 00:40:04,380
when I ask these questions.

1035
00:40:04,380 --> 00:40:09,490
First is, what's stopping every
browser from providing headless

1036
00:40:09,490 --> 00:40:12,750
access and automation,
kind of like PhantomJS,

1037
00:40:12,750 --> 00:40:14,120
but for testing and processing.

1038
00:40:14,120 --> 00:40:16,280
And that's not just
JavaScript, that's

1039
00:40:16,280 --> 00:40:18,260
the entire stack
with HTML and CSS,

1040
00:40:18,260 --> 00:40:19,930
but sort of headless
into the tools.

1041
00:40:19,930 --> 00:40:22,388
So this shifts us away from
what's happening in the browser

1042
00:40:22,388 --> 00:40:26,020
to happening
outside the browser.

1043
00:40:26,020 --> 00:40:28,470
JAKE ARCHIBALD: Pavel, Joe, ship it?

1044
00:40:28,470 --> 00:40:32,679
JOE: So the very short answer
to your question is nothing.

1045
00:40:32,679 --> 00:40:33,470
What's stopping us?

1046
00:40:33,470 --> 00:40:35,810
Nothing.

1047
00:40:35,810 --> 00:40:37,650
There's a finer question.

1048
00:40:37,650 --> 00:40:42,390
What actually do you
want from headless?

1049
00:40:42,390 --> 00:40:45,180
What's the question behind it?

1050
00:40:45,180 --> 00:40:46,157
KYLE: I want PhantomJS.

1051
00:40:46,157 --> 00:40:47,740
But I want it from
the browser itself.

1052
00:40:47,740 --> 00:40:49,698
I don't want to have some
forked other project.

1053
00:40:49,698 --> 00:40:52,637
I want to be able to spin
up kind of like a UI web

1054
00:40:52,637 --> 00:40:55,220
view, [INAUDIBLE] Firefox, and
the UI web view of the problem.

1055
00:40:55,220 --> 00:40:56,094
JOE: So it's testing.

1056
00:40:56,094 --> 00:40:58,642
KYLE: Some other tools, testing,
regression, performance,

1057
00:40:58,642 --> 00:40:59,350
All those things.

1058
00:40:59,350 --> 00:40:59,720
JOE: Right.

1059
00:40:59,720 --> 00:41:00,220
OK.

1060
00:41:00,220 --> 00:41:02,670

1061
00:41:02,670 --> 00:41:07,749
So yes there is SlimerJS,
which is basically

1062
00:41:07,749 --> 00:41:08,540
this sort of thing.

1063
00:41:08,540 --> 00:41:09,860
It's not 100% headless.

1064
00:41:09,860 --> 00:41:10,865
It's nearly headless.

1065
00:41:10,865 --> 00:41:13,830

1066
00:41:13,830 --> 00:41:15,140
It's kind of maybe here.

1067
00:41:15,140 --> 00:41:18,670

1068
00:41:18,670 --> 00:41:21,860
So yes, I mean, that's
the most as I can say.

1069
00:41:21,860 --> 00:41:24,110
I mean, I'm kind of out of
out of my depth here a bit.

1070
00:41:24,110 --> 00:41:27,330
Because the answer
to this question

1071
00:41:27,330 --> 00:41:29,880
is kind of like deeper
browser engineering than it

1072
00:41:29,880 --> 00:41:32,100
is DevTools engineering.

1073
00:41:32,100 --> 00:41:39,190
We've had new APIs recently that
should make this a lot easier.

1074
00:41:39,190 --> 00:41:42,300
And I'm fairly sure that Slimer
is working on those APIs.

1075
00:41:42,300 --> 00:41:46,540

1076
00:41:46,540 --> 00:41:48,940
PAVEL: We have a new
version of web driver

1077
00:41:48,940 --> 00:41:51,060
is implemented on top of
the DevTools Prodigal.

1078
00:41:51,060 --> 00:41:54,340
So you can actually drive
things in the browser.

1079
00:41:54,340 --> 00:41:58,430
And there's also a telemetry API
that allows headless operation.

1080
00:41:58,430 --> 00:41:59,920
And that's actually
how Chrome team

1081
00:41:59,920 --> 00:42:02,280
is testing against regressions.

1082
00:42:02,280 --> 00:42:05,710
So whenever you have a content
that you don't want to regress

1083
00:42:05,710 --> 00:42:07,850
in scrolling, you're
using telemetry

1084
00:42:07,850 --> 00:42:09,800
to implement the
[INAUDIBLE] script.

1085
00:42:09,800 --> 00:42:10,460
So it is there.

1086
00:42:10,460 --> 00:42:12,055
It is publicly available.

1087
00:42:12,055 --> 00:42:12,680
You can use it.

1088
00:42:12,680 --> 00:42:14,490
But it's not standardized.

1089
00:42:14,490 --> 00:42:15,250
And it's Chrome.

1090
00:42:15,250 --> 00:42:18,711

1091
00:42:18,711 --> 00:42:20,960
JOE: I mean, WebDriver is
enough of a standard, right?

1092
00:42:20,960 --> 00:42:23,770
I mean, there's that
inside Firefox now.

1093
00:42:23,770 --> 00:42:26,570
Some internal Firefox
tests use that.

1094
00:42:26,570 --> 00:42:29,920
So that's becoming more of
a cross-browser standard.

1095
00:42:29,920 --> 00:42:32,790
So let me come back
to why headless.

1096
00:42:32,790 --> 00:42:35,370
You want to be able to run
it without touching it,

1097
00:42:35,370 --> 00:42:38,690
as opposed to you don't
want to see it, right?

1098
00:42:38,690 --> 00:42:43,075
Because nearly headless is OK
if it's not a visual problem.

1099
00:42:43,075 --> 00:42:44,700
If what you want is
ultimately testing,

1100
00:42:44,700 --> 00:42:48,526
you don't matter if the
screen flicks briefly.

1101
00:42:48,526 --> 00:42:50,234
KYLE: So there is the
testing side of it.

1102
00:42:50,234 --> 00:42:50,662
JOE: Right.

1103
00:42:50,662 --> 00:42:51,860
KYLE: There's the
testing side of it.

1104
00:42:51,860 --> 00:42:53,990
But there's also a
functionality side of it.

1105
00:42:53,990 --> 00:42:57,700
People use PhantomJS to spin
up a headless browser that they

1106
00:42:57,700 --> 00:42:59,749
can render screenshots
from, or things like that.

1107
00:42:59,749 --> 00:43:01,790
That's the sort of thing
I'm talking about, being

1108
00:43:01,790 --> 00:43:06,430
able to, in the build process,
spin up a tool for regression

1109
00:43:06,430 --> 00:43:09,160
testing, or pulling out
rendering, or analyzing

1110
00:43:09,160 --> 00:43:11,410
the way things are working,
all those sorts of things.

1111
00:43:11,410 --> 00:43:11,909
JOE: Yeah.

1112
00:43:11,909 --> 00:43:14,250
And part of the problem really
is that PhantomJS is not,

1113
00:43:14,250 --> 00:43:16,390
you think it's Chrome or
something, but it's not.

1114
00:43:16,390 --> 00:43:17,920
It's kind of Chrome
from a few years

1115
00:43:17,920 --> 00:43:21,030
ago with some other weird
bits and minus that.

1116
00:43:21,030 --> 00:43:22,010
Yes.

1117
00:43:22,010 --> 00:43:25,037
I think it'd be nice if
we were better at that.

1118
00:43:25,037 --> 00:43:27,120
KYLE: But if we go to the
developer tools actually

1119
00:43:27,120 --> 00:43:29,161
do matter here because,
for the testing purposes,

1120
00:43:29,161 --> 00:43:31,500
a lot of times you want to
extract information that

1121
00:43:31,500 --> 00:43:33,880
would be available
in developer tools

1122
00:43:33,880 --> 00:43:35,130
as a part of those components.

1123
00:43:35,130 --> 00:43:36,480
Because if this is a
part of your test cycle

1124
00:43:36,480 --> 00:43:38,495
you might want to
audit the things that

1125
00:43:38,495 --> 00:43:40,404
have not happened in trace.

1126
00:43:40,404 --> 00:43:42,937
[INAUDIBLE] So it
should be a [INAUDIBLE].

1127
00:43:42,937 --> 00:43:44,645
JAKE ARCHIBALD: Was that something
that RemoteDebug

1128
00:43:44,645 --> 00:43:45,769
would be able to help with?

1129
00:43:45,769 --> 00:43:49,610
If we had a headless version
of these browsers could then &mdash;

1130
00:43:49,610 --> 00:43:51,712
HENRI: I see that as a
natural extension, right?

1131
00:43:51,712 --> 00:43:53,670
If we had a generic
interface with the browser,

1132
00:43:53,670 --> 00:43:57,860
no matter if a headless
instance of Chrome or Safari.

1133
00:43:57,860 --> 00:44:00,280
Then we would be able to
interface with the browser.

1134
00:44:00,280 --> 00:44:03,514
We would be able to take a
tool like Chrome's telemetry

1135
00:44:03,514 --> 00:44:05,305
and use it across
browsers to do comparison

1136
00:44:05,305 --> 00:44:07,910
of browser performance.

1137
00:44:07,910 --> 00:44:10,060
It would enable a different
generation of tools

1138
00:44:10,060 --> 00:44:10,760
as I see it.

1139
00:44:10,760 --> 00:44:13,610
And things that we now
do specific to PhantomJS,

1140
00:44:13,610 --> 00:44:17,360
and specific to
Slimer, I just want

1141
00:44:17,360 --> 00:44:19,036
to interface with the browsers.

1142
00:44:19,036 --> 00:44:20,910
And VIP drive is not
enough because VIP drive

1143
00:44:20,910 --> 00:44:23,450
is focused only on
automated testing.

1144
00:44:23,450 --> 00:44:26,240
I want to get information
about Timeline events, and all

1145
00:44:26,240 --> 00:44:29,250
these other things that the
browser currently has, right?

1146
00:44:29,250 --> 00:44:31,458
JAKE ARCHIBALD: We have a question
from the audience over here.

1147
00:44:31,458 --> 00:44:32,189

1148
00:44:32,189 --> 00:44:34,105
AUDIENCE: This is more
a user-perspective kind

1149
00:44:34,105 --> 00:44:36,950
of question, but with
window.error being so flaky,

1150
00:44:36,950 --> 00:44:39,870
is it possible for the
browsers to put DevTools

1151
00:44:39,870 --> 00:44:41,710
when they record an
error, to actually like,

1152
00:44:41,710 --> 00:44:43,640
ping an endpoint
somewhere, which

1153
00:44:43,640 --> 00:44:45,780
would &mdash; so you might
specify in the head

1154
00:44:45,780 --> 00:44:50,370
this onerror ping my server
with the error details

1155
00:44:50,370 --> 00:44:51,470
in the stack trace.

1156
00:44:51,470 --> 00:44:53,530
So that way if
there's a complete js

1157
00:44:53,530 --> 00:44:56,880
failure due to cause or some
other unseen event, that you

1158
00:44:56,880 --> 00:44:58,600
have an automated
kind of browser

1159
00:44:58,600 --> 00:45:01,650
would tell you this and give
you user-metrics and statistics.

1160
00:45:01,650 --> 00:45:03,772

1161
00:45:03,772 --> 00:45:06,230
KENNETH: So you want to get
that information from the view?

1162
00:45:06,230 --> 00:45:08,381
Or you want to get it when
you are running locally?

1163
00:45:08,381 --> 00:45:09,130
I didn't get that?

1164
00:45:09,130 --> 00:45:11,625

1165
00:45:11,625 --> 00:45:13,750
AUDIENCE: We had an error
where we put cross origin

1166
00:45:13,750 --> 00:45:15,505
anonymous on a
Google Map script.

1167
00:45:15,505 --> 00:45:17,425
And basically, Google
deployed a new version

1168
00:45:17,425 --> 00:45:19,790
of Maps, which completely
broke all the JavaScript,

1169
00:45:19,790 --> 00:45:21,060
nothing would run.

1170
00:45:21,060 --> 00:45:22,910
So there was no error
reporting, no nothing.

1171
00:45:22,910 --> 00:45:24,590
The [INAUDIBLE]
at Chrome said, we

1172
00:45:24,590 --> 00:45:27,520
don't want to run this because
there's a security error.

1173
00:45:27,520 --> 00:45:29,200
So would it be possible
for the browser

1174
00:45:29,200 --> 00:45:32,390
to actually ping, so say,
if you had a metatag,

1175
00:45:32,390 --> 00:45:35,309
say, onerror ping,
[INAUDIBLE] error reporting.

1176
00:45:35,309 --> 00:45:37,350
And basically, you would
just send a stack trace.

1177
00:45:37,350 --> 00:45:39,000
HENRI: Isn't there
a spec around this?

1178
00:45:39,000 --> 00:45:41,600
JAKE ARCHIBALD: This is one of the things
that [INAUDIBLE] people say.

1179
00:45:41,600 --> 00:45:43,350
native is way better
than the Web at this,

1180
00:45:43,350 --> 00:45:46,350
is getting metrics on what
the hell's going on there.

1181
00:45:46,350 --> 00:45:48,987
We should be better at this.

1182
00:45:48,987 --> 00:45:50,570
JOE: Well, this goes
back to the point

1183
00:45:50,570 --> 00:45:52,620
before about do
we build features

1184
00:45:52,620 --> 00:45:54,640
that have debugging
built into them.

1185
00:45:54,640 --> 00:45:56,140
I mean, we saw that
promises didn't.

1186
00:45:56,140 --> 00:45:57,764
But I think what you
were referring to,

1187
00:45:57,764 --> 00:46:01,090
CSP has a specific
feature for logging back.

1188
00:46:01,090 --> 00:46:04,662
Do we need something like
that for error logging?

1189
00:46:04,662 --> 00:46:06,120
JAKE ARCHIBALD: A question
from the audience.

1190
00:46:06,120 --> 00:46:07,890
Sir?

1191
00:46:07,890 --> 00:46:09,566
AUDIENCE: Just,
sorry, back to that.

1192
00:46:09,566 --> 00:46:11,690
What was actually your
problem with window.onerror,

1193
00:46:11,690 --> 00:46:14,500
because at the [? Guardian ?]
we do exactly what you say

1194
00:46:14,500 --> 00:46:15,625
and it works perfectly.

1195
00:46:15,625 --> 00:46:16,166
AUDIENCE: No.

1196
00:46:16,166 --> 00:46:18,489
But like say if there's
a cause error, that

1197
00:46:18,489 --> 00:46:20,585
wouldn't be reported
in [? onerror ?]

1198
00:46:20,585 --> 00:46:21,585
You will never get that.

1199
00:46:21,585 --> 00:46:23,970
So basically, you're saying
you need to pull up the script

1200
00:46:23,970 --> 00:46:25,990
[? if you've got headers. ?]
The window.onerror would then

1201
00:46:25,990 --> 00:46:27,280
report to you you
had a cause error.

1202
00:46:27,280 --> 00:46:27,450
AUDIENCE: Yes.

1203
00:46:27,450 --> 00:46:28,230
I guess so, yeah.

1204
00:46:28,230 --> 00:46:31,000
AUDIENCE: Or your
basically saying,

1205
00:46:31,000 --> 00:46:33,842
if you missed a code on it,
your window.onerror statement

1206
00:46:33,842 --> 00:46:36,670
or something, that would
break your [INAUDIBLE].

1207
00:46:36,670 --> 00:46:38,110
JOE: So something
to pipe what you

1208
00:46:38,110 --> 00:46:40,880
would see as an error in
console to your server.

1209
00:46:40,880 --> 00:46:42,630
JAKE ARCHIBALD: The whole of
your [INAUDIBLE] panel,

1210
00:46:42,630 --> 00:46:44,607
to redirect the whole
of that lot back to you.

1211
00:46:44,607 --> 00:46:45,190
AUDIENCE: Yes.

1212
00:46:45,190 --> 00:46:46,280
JAKE ARCHIBALD: You know, that
would seems like

1213
00:46:46,280 --> 00:46:46,950
AUDIENCE: So basically because
I think it's very flaky.

1214
00:46:46,950 --> 00:46:49,667
It doesn't really
work most of the time.

1215
00:46:49,667 --> 00:46:53,560
So it would be quite handy to
have. [INAUDIBLE] to tell you

1216
00:46:53,560 --> 00:46:55,530
what was going on.

1217
00:46:55,530 --> 00:46:57,930
JAKE ARCHIBALD: I feel like there
could be some privacy

1218
00:46:57,930 --> 00:46:59,380
issue or something.

1219
00:46:59,380 --> 00:47:02,042
You need to think about it

1220
00:47:02,042 --> 00:47:04,018
AUDIENCE: Even if you
went through Google.

1221
00:47:04,018 --> 00:47:06,095
And then they like,
anonymize that.

1222
00:47:06,095 --> 00:47:07,944
You've got to like, [INAUDIBLE].

1223
00:47:07,944 --> 00:47:12,924
JOE: Is this helping
privacy, or &mdash; Scary.

1224
00:47:12,924 --> 00:47:15,912
[INAUDIBLE]

1225
00:47:15,912 --> 00:47:19,410
AUDIENCE: I've got a Facebook
[? app to do this ?].

1226
00:47:19,410 --> 00:47:21,570
JAKE ARCHIBALD: A question
at the front here.

1227
00:47:21,570 --> 00:47:22,650
Can we get a microphone?

1228
00:47:22,650 --> 00:47:29,551

1229
00:47:29,551 --> 00:47:30,092
AUDIENCE: Hi.

1230
00:47:30,092 --> 00:47:32,980
So I tried to push around
[INAUDIBLE] the performance

1231
00:47:32,980 --> 00:47:35,230
and [INAUDIBLE] group to do
exactly what you guys were

1232
00:47:35,230 --> 00:47:35,870
talking about.

1233
00:47:35,870 --> 00:47:38,696
It's quite clear that Chrome
has some [INAUDIBLE] telemetry

1234
00:47:38,696 --> 00:47:40,400
UPIs.

1235
00:47:40,400 --> 00:47:42,480
So my question is more
or less a call to action.

1236
00:47:42,480 --> 00:47:43,855
So I tried to push
it into group.

1237
00:47:43,855 --> 00:47:46,585
But so far, in both of those
groups, the [INAUDIBLE] group

1238
00:47:46,585 --> 00:47:49,460
and [INAUDIBLE]
performance group &mdash; so far

1239
00:47:49,460 --> 00:47:52,040
nobody was really interested
in going forward with this.

1240
00:47:52,040 --> 00:47:55,082
If you guys have it and why
just don't put a first version

1241
00:47:55,082 --> 00:47:57,640
together with what we all have
there and try to draft of what

1242
00:47:57,640 --> 00:47:59,765
can be standardized and
what cannot be standardized

1243
00:47:59,765 --> 00:48:01,470
and start working on it.

1244
00:48:01,470 --> 00:48:03,030
PAVEL: We were
just waiting for it

1245
00:48:03,030 --> 00:48:06,505
to prove itself usable
and user friendly.

1246
00:48:06,505 --> 00:48:09,550
And for now, we're just
innovating and moving

1247
00:48:09,550 --> 00:48:12,780
rapidly there.

1248
00:48:12,780 --> 00:48:14,170
So we just need time.

1249
00:48:14,170 --> 00:48:16,350
And we need more
initiative from you,

1250
00:48:16,350 --> 00:48:19,040
from your side, more
pushing from you.

1251
00:48:19,040 --> 00:48:22,230
AUDIENCE: That was my first way
of pushing you is [INAUDIBLE].

1252
00:48:22,230 --> 00:48:23,800
JAKE ARCHIBALD: Well, we're going to move
on to our last question, which

1253
00:48:23,800 --> 00:48:25,008
is a good question to end on.

1254
00:48:25,008 --> 00:48:27,522
And it's from Remi Sharp again.

1255
00:48:27,522 --> 00:48:28,980
So if we can get
Remi a microphone.

1256
00:48:28,980 --> 00:48:30,700
Just strap it to him.

1257
00:48:30,700 --> 00:48:34,250

1258
00:48:34,250 --> 00:48:39,000
REMY: So I'd like contributing
to developer tools

1259
00:48:39,000 --> 00:48:44,477
to be made easier, not just
adding a panel or tweaking

1260
00:48:44,477 --> 00:48:45,060
functionality.

1261
00:48:45,060 --> 00:48:47,030
How can I get involved?

1262
00:48:47,030 --> 00:48:49,607
And I had originally
tacked on this.

1263
00:48:49,607 --> 00:48:51,190
Things like Greasemonkey
made it very,

1264
00:48:51,190 --> 00:48:55,320
very easy to hack the
page and make it &mdash; improve

1265
00:48:55,320 --> 00:49:00,060
for me as the visitor, or
the user, or the developer.

1266
00:49:00,060 --> 00:49:03,500
I'd like to see that kind of
super-low barrier of entry

1267
00:49:03,500 --> 00:49:08,060
for all of the DevTools,
except for Apple

1268
00:49:08,060 --> 00:49:10,757
because they don't play ball.

1269
00:49:10,757 --> 00:49:12,590
SPEAKER: Jake and me
spent an hour yesterday

1270
00:49:12,590 --> 00:49:14,740
making all these
questions really short.

1271
00:49:14,740 --> 00:49:17,972
JAKE ARCHIBALD: Yeah, I know, right?

1272
00:49:17,972 --> 00:49:22,550
So if a developer wants to get
involved in Chrome DevTools,

1273
00:49:22,550 --> 00:49:24,270
what can they do?

1274
00:49:24,270 --> 00:49:26,812
PAVEL: We're not
particularly good at that.

1275
00:49:26,812 --> 00:49:31,420
So if you want to contribute
to [INAUDIBLE] the entry bar's

1276
00:49:31,420 --> 00:49:34,780
fairly high because we are
a part of Blink source tree.

1277
00:49:34,780 --> 00:49:36,330
So it's not good.

1278
00:49:36,330 --> 00:49:42,480
The extensions API is not rich
enough for your needs, right?

1279
00:49:42,480 --> 00:49:44,010
And it's not rich for a reason.

1280
00:49:44,010 --> 00:49:46,070
We don't want people
to fight for resources

1281
00:49:46,070 --> 00:49:47,650
and break each other.

1282
00:49:47,650 --> 00:49:53,050
So we're just trying to get
better at that in both ways,

1283
00:49:53,050 --> 00:49:56,430
in contributing to core and
providing more richer extension

1284
00:49:56,430 --> 00:49:57,080
APIs.

1285
00:49:57,080 --> 00:50:01,830
But for now you get
a wiki or something

1286
00:50:01,830 --> 00:50:03,360
and follow the
instructions and you

1287
00:50:03,360 --> 00:50:08,070
manage to [? deploy a patch. ?]
I feel a bit sorry for you.

1288
00:50:08,070 --> 00:50:11,910
But that's about it
with Chrome as of today.

1289
00:50:11,910 --> 00:50:13,010
So it's bad.

1290
00:50:13,010 --> 00:50:15,230
JOE: So we can do,
I mean, Firefox,

1291
00:50:15,230 --> 00:50:18,140
you can hack anything on it.

1292
00:50:18,140 --> 00:50:20,060
It's all JavaScript
and our DevTool.

1293
00:50:20,060 --> 00:50:22,910
So there isn't a limit
to what you can do.

1294
00:50:22,910 --> 00:50:24,655
The downside is next
month it will break.

1295
00:50:24,655 --> 00:50:27,770

1296
00:50:27,770 --> 00:50:30,590
We are trying to
create some APIs that

1297
00:50:30,590 --> 00:50:33,640
are more standardized,
that won't break.

1298
00:50:33,640 --> 00:50:36,905
And we spent some time with
the other guys working out

1299
00:50:36,905 --> 00:50:37,780
what they would like.

1300
00:50:37,780 --> 00:50:40,780
And we've done
stuff with Angular

1301
00:50:40,780 --> 00:50:44,570
to try and have customer
extensions there.

1302
00:50:44,570 --> 00:50:49,790
If there's something that we're
doing that doesn't help you,

1303
00:50:49,790 --> 00:50:51,920
then shout to us.

1304
00:50:51,920 --> 00:50:55,235
REMY: The thing is that's
more kind of like high level,

1305
00:50:55,235 --> 00:50:57,590
the experienced developer
can do that kind of thing.

1306
00:50:57,590 --> 00:51:01,796
I'm talking about, Greasemonkey
is a really good example.

1307
00:51:01,796 --> 00:51:03,670
People can just pick up
a Greasemonkey script

1308
00:51:03,670 --> 00:51:08,160
and install it for themselves
to make &mdash; I make my banking site

1309
00:51:08,160 --> 00:51:09,910
readable using Greasemonkey.

1310
00:51:09,910 --> 00:51:11,950
I want to be able to
do that with DevTools.

1311
00:51:11,950 --> 00:51:14,290
Like being above the font
was a huge deal for me.

1312
00:51:14,290 --> 00:51:15,950
Because I don't like tiny fonts.

1313
00:51:15,950 --> 00:51:18,705
And now, both Firefox
and Chrome do it.

1314
00:51:18,705 --> 00:51:21,060
But before I had to
tweak a style sheet,

1315
00:51:21,060 --> 00:51:23,720
which was a little bit
more of a barrier of entry.

1316
00:51:23,720 --> 00:51:26,150
It's kind of making
that easier &mdash;

1317
00:51:26,150 --> 00:51:28,237
JAKE ARCHIBALD: So you want the
Greasemonkey script

1318
00:51:28,237 --> 00:51:29,570
to plug into DevTools in effect.

1319
00:51:29,570 --> 00:51:30,460
That kind of thing.

1320
00:51:30,460 --> 00:51:31,834
REMY: Sort of,
I'm really talking

1321
00:51:31,834 --> 00:51:33,640
about kind of the
low-barrier of entry,

1322
00:51:33,640 --> 00:51:38,960
to make it easy for anyone here,
to make the DevTools better.

1323
00:51:38,960 --> 00:51:40,960
PAVEL: Well you want a
better deployment for it?

1324
00:51:40,960 --> 00:51:42,152
Or you want if for yourself?

1325
00:51:42,152 --> 00:51:42,860
REMY: For myself.

1326
00:51:42,860 --> 00:51:44,340
Because, yeah, once
you kind of go,

1327
00:51:44,340 --> 00:51:47,460
right, here's
Greasemonkey type access,

1328
00:51:47,460 --> 00:51:50,774
then yes, it's got to
be a complete cluster.

1329
00:51:50,774 --> 00:51:52,440
But I'm talking about
for the individual

1330
00:51:52,440 --> 00:51:56,048
to be able to hack
their own DevTools.

1331
00:51:56,048 --> 00:51:58,190
AUDIENCE: I've got an
example that it is useful.

1332
00:51:58,190 --> 00:52:00,690
In Yahoo, for example, I wanted
to fix things and make comps

1333
00:52:00,690 --> 00:52:02,940
and make PhotoShop things,
and never anything worked.

1334
00:52:02,940 --> 00:52:04,597
But when I bought a
Greasemonkey script

1335
00:52:04,597 --> 00:52:06,520
and sent people the
link, all of the sudden,

1336
00:52:06,520 --> 00:52:09,210
they saw the page change,
and basically interact

1337
00:52:09,210 --> 00:52:10,392
with the change already.

1338
00:52:10,392 --> 00:52:12,475
So a script that will
interface to developer tools

1339
00:52:12,475 --> 00:52:14,400
will allow me to
do that as well.

1340
00:52:14,400 --> 00:52:16,025
We don't want to
reinvent Greasemonkey,

1341
00:52:16,025 --> 00:52:19,753
but making it as easy to show
what a debugging step would

1342
00:52:19,753 --> 00:52:22,230
look like, or a tutorial how
debugging works via JavaScript

1343
00:52:22,230 --> 00:52:23,646
while you're
scripting the DevTool

1344
00:52:23,646 --> 00:52:25,500
would really, really be useful.

1345
00:52:25,500 --> 00:52:28,525
JAKE ARCHIBALD: So one thing we're
trying to do, this is a road,

1346
00:52:28,525 --> 00:52:30,100
and we're some way
down this road.

1347
00:52:30,100 --> 00:52:33,650
What would be very cool
is if you could simply

1348
00:52:33,650 --> 00:52:37,240
clone Repo on Git,
which is our DevTools.

1349
00:52:37,240 --> 00:52:39,126
And you could now
say, in your browser,

1350
00:52:39,126 --> 00:52:40,250
don't look inside yourself.

1351
00:52:40,250 --> 00:52:41,250
Look over there.

1352
00:52:41,250 --> 00:52:43,520
And it's all just tech files.

1353
00:52:43,520 --> 00:52:46,620
Actually, there's quite a few
bits done that work already.

1354
00:52:46,620 --> 00:52:48,900
Like, you can already say,
don't look inside yourself.

1355
00:52:48,900 --> 00:52:50,176
Look there.

1356
00:52:50,176 --> 00:52:51,300
It's not a separate region.

1357
00:52:51,300 --> 00:52:53,050
KENNETH: You can already do that
with Chrome today. [INAUDIBLE]

1358
00:52:53,050 --> 00:52:55,240
PAVEL: Chrome has it
for a couple of years.

1359
00:52:55,240 --> 00:52:57,920
But it's not getting traction.

1360
00:52:57,920 --> 00:53:00,150
It helps the adoption.

1361
00:53:00,150 --> 00:53:02,609
It helps getting
more contributors

1362
00:53:02,609 --> 00:53:04,942
because it's easier to set
up that environment than hack

1363
00:53:04,942 --> 00:53:05,590
on dev tools.

1364
00:53:05,590 --> 00:53:08,260
But people don't use it for
like on a regular basis.

1365
00:53:08,260 --> 00:53:10,822
It's just too inconvenient.

1366
00:53:10,822 --> 00:53:12,720
AUDIENCE: But if
you advertise it?

1367
00:53:12,720 --> 00:53:13,710
PAVEL: I think so.

1368
00:53:13,710 --> 00:53:15,590
AUDIENCE: You've been saying
that we have it [INAUDIBLE]

1369
00:53:15,590 --> 00:53:16,839
uses it, but nobody finds it &mdash;

1370
00:53:16,839 --> 00:53:19,580
PAVEL: It has been
advertised quite some, when

1371
00:53:19,580 --> 00:53:21,770
the remote debugging appeared.

1372
00:53:21,770 --> 00:53:24,560
Because remote debugging was
approved by the external front

1373
00:53:24,560 --> 00:53:27,120
and running as a
web page externally.

1374
00:53:27,120 --> 00:53:29,400
But we could, Remi, we could
do something like that.

1375
00:53:29,400 --> 00:53:30,970
JAKE ARCHIBALD: Yeah, because that's
a big starting step,

1376
00:53:30,970 --> 00:53:33,011
being able to just say,
OK, instead of loading up

1377
00:53:33,011 --> 00:53:35,580
the internal DevTools, point
it to the copy that I've got.

1378
00:53:35,580 --> 00:53:36,500
And then I could start hacking.

1379
00:53:36,500 --> 00:53:37,370
NJ: You have a
buttoned in DevTools.

1380
00:53:37,370 --> 00:53:38,954
That's like fork
DevTools and then

1381
00:53:38,954 --> 00:53:40,370
it spits all the
code out for you.

1382
00:53:40,370 --> 00:53:40,970
And it's another directory.

1383
00:53:40,970 --> 00:53:41,803
And you can edit it.

1384
00:53:41,803 --> 00:53:43,760
JAKE ARCHIBALD: Well, unfortunately,
we're out of time.

1385
00:53:43,760 --> 00:53:45,530
I can see a lot of
people have questions.

1386
00:53:45,530 --> 00:53:47,405
But the very best of
the people on this panel

1387
00:53:47,405 --> 00:53:48,590
will be in pub this evening.

1388
00:53:48,590 --> 00:53:50,964
The people who go home early
don't really care about you.

1389
00:53:50,964 --> 00:53:53,580

1390
00:53:53,580 --> 00:53:55,440
But that brings us onto a break.

1391
00:53:55,440 --> 00:53:58,436
So you can grab a coffee
before the next session,

1392
00:53:58,436 --> 00:53:59,880
which is build process.

1393
00:53:59,880 --> 00:54:03,130
But thank you very
much to the panelists.

1394
00:54:03,130 --> 00:54:10,839

