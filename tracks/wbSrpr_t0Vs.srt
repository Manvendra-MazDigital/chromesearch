1
00:00:00,000 --> 00:00:00,497

2
00:00:00,497 --> 00:12:37,510
[MUSIC PLAYING]

3
00:12:37,510 --> 00:12:38,210
ANDREW BETTS: Good morning,
everyone.

4
00:12:38,210 --> 00:12:41,121
Welcome to Edge.

5
00:12:41,121 --> 00:12:43,990
If you're not in your seat,
can you find a seat?

6
00:12:43,990 --> 00:12:45,240
And we'll make a start.

7
00:12:45,240 --> 00:12:48,010

8
00:12:48,010 --> 00:12:49,650
My name is Andrew Betts.

9
00:12:49,650 --> 00:12:51,270
I'm from "The Financial
Times," which is a

10
00:12:51,270 --> 00:12:54,760
distinctively pink financial
newspaper.

11
00:12:54,760 --> 00:12:59,580
And this is Edge Conf.

12
00:12:59,580 --> 00:13:00,420
We have Wi-Fi.

13
00:13:00,420 --> 00:13:01,760
That's the most important
thing.

14
00:13:01,760 --> 00:13:03,990
So probably most of you have
discovered it already.

15
00:13:03,990 --> 00:13:07,280
It's GoogleGuest, you don't
need a password.

16
00:13:07,280 --> 00:13:08,775
And I have a few other
announcements that I need to

17
00:13:08,775 --> 00:13:10,900
make before we make a start.

18
00:13:10,900 --> 00:13:15,260
So first of all, Edge is
quite an experiment.

19
00:13:15,260 --> 00:13:18,100
And things may go wrong.

20
00:13:18,100 --> 00:13:20,020
In fact, about seven things
have gone wrong already.

21
00:13:20,020 --> 00:13:21,710
[LAUGHTER]

22
00:13:21,710 --> 00:13:25,720
ANDREW BETTS: So I'm just going
to give you a rundown of

23
00:13:25,720 --> 00:13:28,210
the thinking that went behind
the design of the debate

24
00:13:28,210 --> 00:13:31,400
format and how we're expecting
the even to run.

25
00:13:31,400 --> 00:13:33,480
So each session's
an hour long.

26
00:13:33,480 --> 00:13:36,650
We start with a 10-minute
opening talk.

27
00:13:36,650 --> 00:13:39,410
We have primary questions for
the debate that we've

28
00:13:39,410 --> 00:13:42,280
preselected from a Google
Moderator, or which have been

29
00:13:42,280 --> 00:13:44,670
composed by the moderators
of the sessions.

30
00:13:44,670 --> 00:13:46,830
And those have been seated
into the audience.

31
00:13:46,830 --> 00:13:49,400
So the people in the audience
who are asking questions

32
00:13:49,400 --> 00:13:51,980
should know who they are.

33
00:13:51,980 --> 00:13:54,300
We have around 7-10 minutes
of debate on each of those

34
00:13:54,300 --> 00:13:55,520
primary questions.

35
00:13:55,520 --> 00:13:58,160
And we're looking for
interventions from everyone.

36
00:13:58,160 --> 00:14:01,940
So if you have a point to make,
then jump in an make it,

37
00:14:01,940 --> 00:14:03,580
and make your voice heard.

38
00:14:03,580 --> 00:14:06,675
It should be on topic.

39
00:14:06,675 --> 00:14:08,250
[LAUGHTER]

40
00:14:08,250 --> 00:14:08,520
ANDREW BETTS: Yes.

41
00:14:08,520 --> 00:14:12,820
Don't just wax lyrical
about anything.

42
00:14:12,820 --> 00:14:15,330
So if you have a point to make
that's on the topic of the

43
00:14:15,330 --> 00:14:19,560
primary question, then jump
into the debate and

44
00:14:19,560 --> 00:14:20,810
participate.

45
00:14:20,810 --> 00:14:23,260

46
00:14:23,260 --> 00:14:24,950
Tips.

47
00:14:24,950 --> 00:14:28,280
If you think you have seven
points to make, choose the

48
00:14:28,280 --> 00:14:30,310
most important one.

49
00:14:30,310 --> 00:14:32,960
Because we don't have time
to hear all of them.

50
00:14:32,960 --> 00:14:35,530
And you don't need to introduce
yourself, because we

51
00:14:35,530 --> 00:14:39,840
have this tool, which Wesley
Hales from Apigee has created,

52
00:14:39,840 --> 00:14:44,350
and which we're assured will
be working perfectly today.

53
00:14:44,350 --> 00:14:47,260
Which will enable everyone to
requests speaking time.

54
00:14:47,260 --> 00:14:49,410
So at the beginning of every
session, you'll see a URL on

55
00:14:49,410 --> 00:14:50,310
the screen.

56
00:14:50,310 --> 00:14:54,090
Tap that into your smartphone,
and you'll see a remote on

57
00:14:54,090 --> 00:14:56,510
your smartphone that allows you
to request speaking time.

58
00:14:56,510 --> 00:14:58,790
So you can say, I want to
speak in the debate.

59
00:14:58,790 --> 00:15:00,150
You'll come up on the screen.

60
00:15:00,150 --> 00:15:03,540
The moderator will be able to
then call you to say what you

61
00:15:03,540 --> 00:15:05,110
want to say.

62
00:15:05,110 --> 00:15:05,920
30 seconds is good.

63
00:15:05,920 --> 00:15:07,080
A minute is probably
pushing it.

64
00:15:07,080 --> 00:15:09,380
So try and keep it short.

65
00:15:09,380 --> 00:15:14,410
And keep it on topic.

66
00:15:14,410 --> 00:15:15,910
This is the schedule
for the day.

67
00:15:15,910 --> 00:15:18,010
So we're starting with
Responsive Images.

68
00:15:18,010 --> 00:15:19,880
We've got Rendering Performance,
Third Party

69
00:15:19,880 --> 00:15:21,390
Scripts, Real Time Data.

70
00:15:21,390 --> 00:15:24,680
We're breaking for
lunch at 1:15.

71
00:15:24,680 --> 00:15:28,630
And lunch will be in this
room I believe.

72
00:15:28,630 --> 00:15:30,970
Offline, Legacy Clients, and
we finish up with Payments.

73
00:15:30,970 --> 00:15:35,090
Then after Payments, we have
dinner, which will be upstairs

74
00:15:35,090 --> 00:15:36,290
in The Canteen.

75
00:15:36,290 --> 00:15:40,410
And then we go to the party.

76
00:15:40,410 --> 00:15:42,720
We have a hub page,
EdgeConf.com/hub.

77
00:15:42,720 --> 00:15:44,850
If you go to that on your phone,
you'll get all the

78
00:15:44,850 --> 00:15:46,150
links to the session remotes.

79
00:15:46,150 --> 00:15:51,900
So you can get an easy link
rather than having to see the

80
00:15:51,900 --> 00:15:53,690
URL at the beginning of every
session, you can get the links

81
00:15:53,690 --> 00:15:55,280
directly from that page.

82
00:15:55,280 --> 00:15:59,440
There's also a link on that
page to our feedback form.

83
00:15:59,440 --> 00:16:01,390
And it's really important for
us, particularly as we're

84
00:16:01,390 --> 00:16:03,370
trying loads of new
things today, that

85
00:16:03,370 --> 00:16:06,670
everyone gives us feedback.

86
00:16:06,670 --> 00:16:08,550
So do please fill that form
in some point towards

87
00:16:08,550 --> 00:16:11,190
the end of the day.

88
00:16:11,190 --> 00:16:15,510
Here are the people who you need
to see thank for today.

89
00:16:15,510 --> 00:16:18,870
I'm the curator of the event,
so I chose all the speakers

90
00:16:18,870 --> 00:16:21,500
and invited them to be here.

91
00:16:21,500 --> 00:16:23,600
Pete LePage from Google
is here in the room.

92
00:16:23,600 --> 00:16:26,660
Or is he having a heart
attack somewhere?

93
00:16:26,660 --> 00:16:29,200
Yes, there he is.

94
00:16:29,200 --> 00:16:30,890
Tim Davenport, my colleague
at FT Labs.

95
00:16:30,890 --> 00:16:31,980
He's back in London.

96
00:16:31,980 --> 00:16:35,340
Has been sorting out delicate
logistics for us.

97
00:16:35,340 --> 00:16:37,565
Vivian Cromwell, who should
be here somewhere.

98
00:16:37,565 --> 00:16:38,430
Is she here?

99
00:16:38,430 --> 00:16:39,190
Not here yet.

100
00:16:39,190 --> 00:16:41,500
Not here yet.

101
00:16:41,500 --> 00:16:44,960
She's been liaising with a lot
of Google people for us.

102
00:16:44,960 --> 00:16:47,170
Jen Bouchard from Facebook,
who's not here but is

103
00:16:47,170 --> 00:16:50,660
frantically organizing our
afterparty this evening.

104
00:16:50,660 --> 00:16:52,680
Wesley Hales from Apigee.

105
00:16:52,680 --> 00:16:54,900
He has put a phenomenal amount
of work into creating the

106
00:16:54,900 --> 00:16:56,960
moderation tool that you'll
be using today.

107
00:16:56,960 --> 00:16:59,320
And he is really keen to hear
from anyone who has

108
00:16:59,320 --> 00:17:00,950
trouble using it.

109
00:17:00,950 --> 00:17:01,930
So where are you?

110
00:17:01,930 --> 00:17:02,810
Put your hand up.

111
00:17:02,810 --> 00:17:04,290
He's right over there.

112
00:17:04,290 --> 00:17:09,520
So if you can't make it work,
then go and see him.

113
00:17:09,520 --> 00:17:11,270
Also, if you can't make it
work, don't feel like you

114
00:17:11,270 --> 00:17:12,650
can't just put your hand up.

115
00:17:12,650 --> 00:17:15,410
Just get involved
any way you can.

116
00:17:15,410 --> 00:17:17,280
And Dave Stanton from Pixelbots,
who designed the

117
00:17:17,280 --> 00:17:19,780
Edge Conf website.

118
00:17:19,780 --> 00:17:21,740
So the organizations
involved today.

119
00:17:21,740 --> 00:17:22,970
FT Labs.

120
00:17:22,970 --> 00:17:25,109
We created and curated
the event.

121
00:17:25,109 --> 00:17:27,769
Google Chrome, in providing this
amazing venue and doing

122
00:17:27,769 --> 00:17:29,380
all the hosting for us.

123
00:17:29,380 --> 00:17:31,620
Facebook, organizing
our afterparty.

124
00:17:31,620 --> 00:17:34,110
And we also would like to thank
Akamai and Adobe for

125
00:17:34,110 --> 00:17:37,680
sponsoring a couple
of our sessions.

126
00:17:37,680 --> 00:17:38,850
So important stuff.

127
00:17:38,850 --> 00:17:43,260
We have some fabulous prizes,
mostly to encourage you all to

128
00:17:43,260 --> 00:17:45,040
submit feedback.

129
00:17:45,040 --> 00:17:47,880
But also for the most inspired
intervention.

130
00:17:47,880 --> 00:17:50,550
So we want to hear people making
really good points

131
00:17:50,550 --> 00:17:53,510
about new use cases, new
problems, new solutions that

132
00:17:53,510 --> 00:17:55,920
they have which maybe
we don't know about.

133
00:17:55,920 --> 00:17:57,780
And it's that kind of thing that
we really want to hear

134
00:17:57,780 --> 00:18:00,460
and which we'll be giving
prizes for.

135
00:18:00,460 --> 00:18:02,500
And we also gave everyone a
raffle ticket when they came

136
00:18:02,500 --> 00:18:06,090
in, so there will be a
random draw as well.

137
00:18:06,090 --> 00:18:10,160
And those fabulous prizes
are Chromebook Pixels.

138
00:18:10,160 --> 00:18:11,170
Whoo!

139
00:18:11,170 --> 00:18:12,962
[LAUGHTER]

140
00:18:12,962 --> 00:18:14,330
STEVE THAIR: Let's do
that one again.

141
00:18:14,330 --> 00:18:14,710
ANDREW BETTS: Woo!

142
00:18:14,710 --> 00:18:15,634
STEVE THAIR: Chromebook Pixels!

143
00:18:15,634 --> 00:18:16,470
Woo.

144
00:18:16,470 --> 00:18:17,930
WHOLE AUDIENCE: Woo!

145
00:18:17,930 --> 00:18:19,750
ANDREW BETTS: Steve, you're far
better at this than I am.

146
00:18:19,750 --> 00:18:21,590
[LAUGHTER]

147
00:18:21,590 --> 00:18:23,780
ANDREW BETTS: So you can
look forward to that.

148
00:18:23,780 --> 00:18:27,572
And, of course part of the
reason we're all here today is

149
00:18:27,572 --> 00:18:30,270
to support Girls Who Code, which
is a fabulous charity

150
00:18:30,270 --> 00:18:32,950
based here in New York City
that promotes women in

151
00:18:32,950 --> 00:18:36,440
technology and teaching
girls to program.

152
00:18:36,440 --> 00:18:37,530
And I think that's an objective

153
00:18:37,530 --> 00:18:38,740
we can all get behind.

154
00:18:38,740 --> 00:18:42,480
So thank you very much for your
contributions already and

155
00:18:42,480 --> 00:18:45,310
the contributions that you'll
make today to that cause.

156
00:18:45,310 --> 00:18:48,030
So without further ado,
our first session

157
00:18:48,030 --> 00:18:51,970
is Responsive Images.

158
00:18:51,970 --> 00:18:54,510
And the moderator
for this session

159
00:18:54,510 --> 00:18:57,415
will be Marcos Caceres?

160
00:18:57,415 --> 00:18:58,050
Is that right?

161
00:18:58,050 --> 00:18:58,500
Yes!

162
00:18:58,500 --> 00:19:00,710
Marcos Caceres from Mozilla.

163
00:19:00,710 --> 00:19:03,808
So Marcos, come up and make
your introductions.

164
00:19:03,808 --> 00:19:12,430
[APPLAUSE]

165
00:19:12,430 --> 00:19:13,230
MARCOS CACERES: I'm
already on.

166
00:19:13,230 --> 00:19:14,770
And I didn't touch anything.

167
00:19:14,770 --> 00:19:22,550
So come on up, folks, and
I'll introduce you here.

168
00:19:22,550 --> 00:19:24,750
So take a seat.

169
00:19:24,750 --> 00:19:28,830
This is Yoav Weiss.

170
00:19:28,830 --> 00:19:31,420
I'll try to keep everything
very brief as we get

171
00:19:31,420 --> 00:19:32,280
established.

172
00:19:32,280 --> 00:19:34,940
So Yoav's been doing quite a
lot of work with responsive

173
00:19:34,940 --> 00:19:36,420
images of late.

174
00:19:36,420 --> 00:19:37,770
He's heavily involved
in the Responsive

175
00:19:37,770 --> 00:19:40,020
Images Community Group.

176
00:19:40,020 --> 00:19:42,950
And we have Peter Miller.

177
00:19:42,950 --> 00:19:44,510
So Peter Miller's
our developer.

178
00:19:44,510 --> 00:19:47,800
Works on a lot of concert-heavy
websites,

179
00:19:47,800 --> 00:19:48,600
image-heavy websites.

180
00:19:48,600 --> 00:19:50,780
So great experience.

181
00:19:50,780 --> 00:19:53,020
Ann Robson writes.

182
00:19:53,020 --> 00:19:54,620
Also works for &mdash;

183
00:19:54,620 --> 00:19:55,340
ANN ROBSON: Yammer.

184
00:19:55,340 --> 00:19:57,660
MARCOS CACERES: Yammer &mdash;
sorry, I forgot.

185
00:19:57,660 --> 00:19:59,650
Ann has fantastic stuff
about web performance.

186
00:19:59,650 --> 00:20:02,430
Has some great ideas about how
we can address some of the

187
00:20:02,430 --> 00:20:05,890
responsive images problems
using progressive jpegs.

188
00:20:05,890 --> 00:20:08,640
Estelle Weyl.

189
00:20:08,640 --> 00:20:11,690
Has everyone heard of the
clown car technique?

190
00:20:11,690 --> 00:20:12,690
The creator.

191
00:20:12,690 --> 00:20:16,560
So we're going to hopefully talk
a little bit about that.

192
00:20:16,560 --> 00:20:19,870
And John Mellor works
at Google.

193
00:20:19,870 --> 00:20:22,830
And John Mellor's probably the
only person on Earth who can

194
00:20:22,830 --> 00:20:26,760
tell you the difference between
a device pixel, a real

195
00:20:26,760 --> 00:20:31,910
pixel, a CSS pixel, and all
sorts of other pixels.

196
00:20:31,910 --> 00:20:33,770
So he can do it all
in his head.

197
00:20:33,770 --> 00:20:35,980
It's pretty crazy.

198
00:20:35,980 --> 00:20:41,470
So first up we have Yoav,
who's going to give a 10

199
00:20:41,470 --> 00:20:44,990
minute talk, basically outlining
what the current

200
00:20:44,990 --> 00:20:49,150
solutions are that we've been
basically discussing for the

201
00:20:49,150 --> 00:20:50,840
last two years.

202
00:20:50,840 --> 00:20:51,710
Trying to come up
with a solution

203
00:20:51,710 --> 00:20:52,750
for responsive images.

204
00:20:52,750 --> 00:20:55,540
Take it away.

205
00:20:55,540 --> 00:20:56,790
We'll swap seats.

206
00:20:56,790 --> 00:21:23,980

207
00:21:23,980 --> 00:21:26,300
YOAV WEISS: So hi.

208
00:21:26,300 --> 00:21:28,030
As Marcos said, I'm
Yoav Weiss.

209
00:21:28,030 --> 00:21:31,070
I'm here to talk about
responsive images.

210
00:21:31,070 --> 00:21:34,640
I'll try to sum up two
years of discussions

211
00:21:34,640 --> 00:21:35,900
into 10 minutes talk.

212
00:21:35,900 --> 00:21:39,270
So bear with me.

213
00:21:39,270 --> 00:21:42,230
So first, in the mid-2000s,
all we had

214
00:21:42,230 --> 00:21:44,840
was mobile-only sites.

215
00:21:44,840 --> 00:21:51,360
They were kind of lame, with
very slim content, highly

216
00:21:51,360 --> 00:21:53,560
optimized images.

217
00:21:53,560 --> 00:21:55,320
It got a little better
with the iPhone.

218
00:21:55,320 --> 00:21:59,490
But it wasn't that hot.

219
00:21:59,490 --> 00:22:03,000
Then responsive web design
became a thing.

220
00:22:03,000 --> 00:22:04,460
Which was very cool.

221
00:22:04,460 --> 00:22:06,235
One code base to
rule them all.

222
00:22:06,235 --> 00:22:10,180
You can serve all the devices
through a single site.

223
00:22:10,180 --> 00:22:17,530
But the problem is, it
was kind of slow.

224
00:22:17,530 --> 00:22:22,070
It became a synonym to
slow mobile website.

225
00:22:22,070 --> 00:22:25,460
Which is a problem.

226
00:22:25,460 --> 00:22:30,780
So the reason is that most
sites just serve the same

227
00:22:30,780 --> 00:22:33,615
resources to both mobile
and desktop.

228
00:22:33,615 --> 00:22:37,050

229
00:22:37,050 --> 00:22:40,650
And most of that
data is images.

230
00:22:40,650 --> 00:22:45,140
So there are a lot of
savings to be made.

231
00:22:45,140 --> 00:22:48,070

232
00:22:48,070 --> 00:22:52,080
I wrote a utility, which
Tim Kadlec runs.

233
00:22:52,080 --> 00:22:54,240
Tim Kadlec is a developer.

234
00:22:54,240 --> 00:22:55,490
Sorry for name-dropping.

235
00:22:55,490 --> 00:22:57,610

236
00:22:57,610 --> 00:23:02,390
But basically, we saw that up
to 72% of the image data can

237
00:23:02,390 --> 00:23:04,630
be saved for some
of the viewports

238
00:23:04,630 --> 00:23:05,880
in some of the cases.

239
00:23:05,880 --> 00:23:08,430
So there's a lot of savings
to be made.

240
00:23:08,430 --> 00:23:13,040
And the retina only makes things
worse, because the gap

241
00:23:13,040 --> 00:23:17,450
between the smallest viewport,
smallest images you want to

242
00:23:17,450 --> 00:23:20,180
send and the highest resolution
images you want to

243
00:23:20,180 --> 00:23:21,955
send is getting bigger.

244
00:23:21,955 --> 00:23:24,930

245
00:23:24,930 --> 00:23:32,460
With most devs owning retina
devices, most devs are sending

246
00:23:32,460 --> 00:23:35,930
high-resolution images
to all devices.

247
00:23:35,930 --> 00:23:41,350
So this is the responsive images
problem which we like

248
00:23:41,350 --> 00:23:44,020
to divide into two
major use cases.

249
00:23:44,020 --> 00:23:46,700
The first one is resolution
switching.

250
00:23:46,700 --> 00:23:55,830
Serving different dimension
images to different devices.

251
00:23:55,830 --> 00:24:00,320
The images are the same images,
same proportions.

252
00:24:00,320 --> 00:24:02,030
They're not cropped.

253
00:24:02,030 --> 00:24:06,820
But basically, the quality
is different.

254
00:24:06,820 --> 00:24:09,390
This is one example of that.

255
00:24:09,390 --> 00:24:16,010
And it can be further divided
into DPR switching, serving

256
00:24:16,010 --> 00:24:19,990
retina images only to retina
devices, and viewport

257
00:24:19,990 --> 00:24:25,890
switching, which is adapting
the image dimensions to the

258
00:24:25,890 --> 00:24:35,170
actual display, to the size in
which they will be displayed.

259
00:24:35,170 --> 00:24:38,720
Then the other major use
case is art direction.

260
00:24:38,720 --> 00:24:42,100
Basically, it's content
optimization without wasting

261
00:24:42,100 --> 00:24:43,150
too many bytes.

262
00:24:43,150 --> 00:24:47,480
It's matching the images
to the layout in a

263
00:24:47,480 --> 00:24:48,680
way that makes sense.

264
00:24:48,680 --> 00:24:52,810
So either a crop or different
proportions or something that

265
00:24:52,810 --> 00:24:59,000
works according to the actual
responsive break points.

266
00:24:59,000 --> 00:25:04,460
From a survey we ran, a lot of
developers are already doing

267
00:25:04,460 --> 00:25:05,510
that using hacks.

268
00:25:05,510 --> 00:25:07,695
So this is a major use case.

269
00:25:07,695 --> 00:25:11,810

270
00:25:11,810 --> 00:25:13,520
So we've talked about
the problem.

271
00:25:13,520 --> 00:25:15,750
Let's talk about
the solutions.

272
00:25:15,750 --> 00:25:19,700
There are several proposed
standard solutions.

273
00:25:19,700 --> 00:25:23,640
There's a Source Set attribute,
Picture element,

274
00:25:23,640 --> 00:25:25,250
Client Hints header.

275
00:25:25,250 --> 00:25:29,880
And I put a question mark in
because it's not really a

276
00:25:29,880 --> 00:25:30,900
standard solution.

277
00:25:30,900 --> 00:25:32,900
This is just a proposal
at the moment.

278
00:25:32,900 --> 00:25:34,410
But the responsive
image container.

279
00:25:34,410 --> 00:25:36,860
I'll talk about each
one in detail.

280
00:25:36,860 --> 00:25:38,040
So Source Set.

281
00:25:38,040 --> 00:25:42,210
Basically, it's the same old
image tag, now with a new

282
00:25:42,210 --> 00:25:46,440
attribute that can include
multiple resources according

283
00:25:46,440 --> 00:25:48,800
to the DPR and the viewport.

284
00:25:48,800 --> 00:25:54,170
It's a slightly controversial
statement, but it addresses,

285
00:25:54,170 --> 00:25:57,800
mainly, the resolution switching
case and much less

286
00:25:57,800 --> 00:25:59,300
the art direction case.

287
00:25:59,300 --> 00:26:00,550
Some people disagree.

288
00:26:00,550 --> 00:26:03,740

289
00:26:03,740 --> 00:26:05,280
The current implementation.

290
00:26:05,280 --> 00:26:07,520
Source Set is currently
implemented in

291
00:26:07,520 --> 00:26:10,150
WebKit and in Blink.

292
00:26:10,150 --> 00:26:11,900
It's behind a flag in Blink.

293
00:26:11,900 --> 00:26:14,330
And it's not yet shipped
in WebKit, but it's

294
00:26:14,330 --> 00:26:15,760
there in the code base.

295
00:26:15,760 --> 00:26:17,805
Firefox will soon follow.

296
00:26:17,805 --> 00:26:20,620

297
00:26:20,620 --> 00:26:27,220
Basically, it looks something
like this you specified the 1x

298
00:26:27,220 --> 00:26:31,760
or 2x or 1 and 1/2 x or 3x
qualifiers for each image

299
00:26:31,760 --> 00:26:39,070
resource you add to the page.

300
00:26:39,070 --> 00:26:43,670
The entire spec also includes
viewport switching, which

301
00:26:43,670 --> 00:26:45,035
looks something like this.

302
00:26:45,035 --> 00:26:49,820

303
00:26:49,820 --> 00:26:54,640
For each resource, you specify
the max viewport for which it

304
00:26:54,640 --> 00:27:00,980
can be applied to, and the x
factor that's adapted to it.

305
00:27:00,980 --> 00:27:04,150
The problem with that,
it gives you a lot

306
00:27:04,150 --> 00:27:05,340
of expressive power.

307
00:27:05,340 --> 00:27:09,220
But you also have to, in some
cases, like you can see in the

308
00:27:09,220 --> 00:27:14,090
example I put up, define a
single URL several times.

309
00:27:14,090 --> 00:27:20,670
Because it fits several DPR
and viewport combinations.

310
00:27:20,670 --> 00:27:22,920
Then we have Picture,
which is mainly

311
00:27:22,920 --> 00:27:24,635
targeted at art direction.

312
00:27:24,635 --> 00:27:27,770

313
00:27:27,770 --> 00:27:32,570
It's an element with multiple
source children.

314
00:27:32,570 --> 00:27:36,710
Each one of them is specifying
an image resource based on

315
00:27:36,710 --> 00:27:40,910
media queries and
possibly type.

316
00:27:40,910 --> 00:27:46,350
The first matching resource is
downloaded and displayed.

317
00:27:46,350 --> 00:27:48,420
It looks something like this.

318
00:27:48,420 --> 00:27:51,410
And as you can see, it
can mix source set

319
00:27:51,410 --> 00:27:54,760
into the source elements.

320
00:27:54,760 --> 00:27:59,400
So you can define an
art-directed image with

321
00:27:59,400 --> 00:28:03,730
multiple DPR versions of it.

322
00:28:03,730 --> 00:28:11,350
And the media attributes you use
here are most probably the

323
00:28:11,350 --> 00:28:16,850
same media values that you use
for your layout break points,

324
00:28:16,850 --> 00:28:20,710
unlike viewport resolution
switching, which can be

325
00:28:20,710 --> 00:28:24,640
independent of the
layout viewport.

326
00:28:24,640 --> 00:28:30,020
Then we have, as a third
contender or third proposal,

327
00:28:30,020 --> 00:28:31,220
we have Client Hints.

328
00:28:31,220 --> 00:28:32,930
That is unlike the two others.

329
00:28:32,930 --> 00:28:35,150
It's not a market-based
solution, it's

330
00:28:35,150 --> 00:28:37,480
an HTTP-based solution.

331
00:28:37,480 --> 00:28:43,440
And basically, the client sends
out its capabilities.

332
00:28:43,440 --> 00:28:46,000
It sends out hints through
the server,

333
00:28:46,000 --> 00:28:48,760
saying, this is my DPR.

334
00:28:48,760 --> 00:28:51,170
This is my viewport
width or height.

335
00:28:51,170 --> 00:28:53,950
The actual values are
still debated.

336
00:28:53,950 --> 00:28:57,040
But this is the general
spirit.

337
00:28:57,040 --> 00:29:00,090
And everything is done
on the server side.

338
00:29:00,090 --> 00:29:04,000
It's server logic that serves
one resource or the other.

339
00:29:04,000 --> 00:29:08,470

340
00:29:08,470 --> 00:29:11,740
One recent change to
that proposal is

341
00:29:11,740 --> 00:29:13,350
that it's opt-in only.

342
00:29:13,350 --> 00:29:16,950
The hints are not sent on
the first HTML request.

343
00:29:16,950 --> 00:29:24,680
On the other hand, it saved us
from adding data to request

344
00:29:24,680 --> 00:29:27,190
where the server is not going
to do anything about it.

345
00:29:27,190 --> 00:29:33,570
So that's a recent compromise
that may be able to push the

346
00:29:33,570 --> 00:29:36,430
spec forward.

347
00:29:36,430 --> 00:29:43,130
Then you have something I'm
proposing as more of a

348
00:29:43,130 --> 00:29:44,430
long-term solution.

349
00:29:44,430 --> 00:29:48,930
This is not something that's on
anyone's immediate radar.

350
00:29:48,930 --> 00:29:53,390
But it's a long-term solution
I'm proposing that's a file

351
00:29:53,390 --> 00:29:58,950
format-based approach, where
each target resolution that we

352
00:29:58,950 --> 00:30:02,000
want to serve is represented
in a layer in

353
00:30:02,000 --> 00:30:03,960
some sort of a container.

354
00:30:03,960 --> 00:30:09,380
And these layers are building up
one on top of the other so

355
00:30:09,380 --> 00:30:13,890
that the browser can download
a certain number of layers,

356
00:30:13,890 --> 00:30:16,890
and then add more layers
on that, enhancing the

357
00:30:16,890 --> 00:30:19,060
quality of the image.

358
00:30:19,060 --> 00:30:22,730
It can address both resolution
switching and art direction.

359
00:30:22,730 --> 00:30:26,030
And I'll just show you
a bunch of examples.

360
00:30:26,030 --> 00:30:31,030
So basically, for resolution
switching, we have this photo

361
00:30:31,030 --> 00:30:34,120
that, if we look into
the layers that

362
00:30:34,120 --> 00:30:37,020
compose it, it's a thumbnail.

363
00:30:37,020 --> 00:30:40,140
Then an enhancement layer,
which is basically the

364
00:30:40,140 --> 00:30:45,160
thumbnail upscaled, with a dif
from the original image

365
00:30:45,160 --> 00:30:46,470
downscaled.

366
00:30:46,470 --> 00:30:53,150
So an enhancement layer, and
another one that's basically

367
00:30:53,150 --> 00:30:58,740
used to recreate the original
image without adding many

368
00:30:58,740 --> 00:31:01,720
bytes to the process.

369
00:31:01,720 --> 00:31:03,530
Overhead is very small.

370
00:31:03,530 --> 00:31:07,200
And for art direction, the
same can be applied.

371
00:31:07,200 --> 00:31:10,380
So this bigger image that's
used everywhere for art

372
00:31:10,380 --> 00:31:14,100
direction can be split
into a crop.

373
00:31:14,100 --> 00:31:20,160
Then an enhancement layer
and another one.

374
00:31:20,160 --> 00:31:25,090
The advantages are that
markup is not touched.

375
00:31:25,090 --> 00:31:26,920
You have a single file
per image, so

376
00:31:26,920 --> 00:31:28,240
it's easy to maintain.

377
00:31:28,240 --> 00:31:31,600
And the best one for me is
that the browser can just

378
00:31:31,600 --> 00:31:33,290
download difs.

379
00:31:33,290 --> 00:31:37,180
If they had downloaded one image
and then something in

380
00:31:37,180 --> 00:31:39,340
the browser's environment
has changed, you can

381
00:31:39,340 --> 00:31:41,810
download the dif.

382
00:31:41,810 --> 00:31:46,730
The disadvantages are that it's
complicated to implement.

383
00:31:46,730 --> 00:31:50,510
And basically, the coding
performance and network

384
00:31:50,510 --> 00:31:55,100
performance without HTTP2
is currently a mystery.

385
00:31:55,100 --> 00:31:59,920
We need to further investigate
that in order to know if it's

386
00:31:59,920 --> 00:32:03,580
feasible or not without HTTP2
and in terms of the coding

387
00:32:03,580 --> 00:32:05,270
performance.

388
00:32:05,270 --> 00:32:09,570
And last-minute slides added
by John Mellor here.

389
00:32:09,570 --> 00:32:13,762
Maybe you want to
talk about that?

390
00:32:13,762 --> 00:32:15,012
JOHN MELLOR: Sure I guess.

391
00:32:15,012 --> 00:32:20,510

392
00:32:20,510 --> 00:32:22,980
So a possible way of making this
responsive image format

393
00:32:22,980 --> 00:32:26,850
container load more
efficiently.

394
00:32:26,850 --> 00:32:29,530
When you're making several range
requests or something

395
00:32:29,530 --> 00:32:31,920
and you don't want to leave gaps
in between and wait for a

396
00:32:31,920 --> 00:32:34,010
round trip each time.

397
00:32:34,010 --> 00:32:38,870
It will load all the images
on the page in parallel,

398
00:32:38,870 --> 00:32:40,620
progressively.

399
00:32:40,620 --> 00:32:43,210
So I've taken [INAUDIBLE]
website.

400
00:32:43,210 --> 00:32:46,030
I've stolen this, sorry.

401
00:32:46,030 --> 00:32:48,310
On the left you see the images
being loaded one by one,

402
00:32:48,310 --> 00:32:49,580
sequentially.

403
00:32:49,580 --> 00:32:50,940
On the right, you see
the images being

404
00:32:50,940 --> 00:32:53,190
loaded all in parallel.

405
00:32:53,190 --> 00:32:56,910
It's the same progressive
jpegs on both sides.

406
00:32:56,910 --> 00:33:00,670
On the left, I'm truncating the
stream of images, so that

407
00:33:00,670 --> 00:33:03,420
you get the first image, and
then I truncate at some point.

408
00:33:03,420 --> 00:33:05,450
On the right, I truncate all
the images at the same

409
00:33:05,450 --> 00:33:06,920
percentage.

410
00:33:06,920 --> 00:33:09,470
So this is 5% of the
image bytes.

411
00:33:09,470 --> 00:33:11,120
And you can see that on
both sides, the page

412
00:33:11,120 --> 00:33:12,780
doesn't look great.

413
00:33:12,780 --> 00:33:17,240
But by the time you've got to
10% of the image bytes,

414
00:33:17,240 --> 00:33:19,480
already on the right you can
kind of see what the page

415
00:33:19,480 --> 00:33:20,620
looks like.

416
00:33:20,620 --> 00:33:22,150
All the images are really
blurry and so on.

417
00:33:22,150 --> 00:33:25,300
But that at least filled
their space well.

418
00:33:25,300 --> 00:33:29,800
Whereas on the left, you can see
the start of the top left

419
00:33:29,800 --> 00:33:32,600
image, but all the other images
haven't even started

420
00:33:32,600 --> 00:33:35,460
loading yet.

421
00:33:35,460 --> 00:33:41,350
As you gradually load more,
say you're on &mdash;

422
00:33:41,350 --> 00:33:42,300
MALE SPEAKER: [INAUDIBLE]

423
00:33:42,300 --> 00:33:43,725
JOHN MELLOR: OK.

424
00:33:43,725 --> 00:33:46,700
Say you get to 25%,
for example.

425
00:33:46,700 --> 00:33:49,900
Now that page on the right,
we're only loaded a quarter of

426
00:33:49,900 --> 00:33:53,612
the image bytes, but it already
starts to look OK.

427
00:33:53,612 --> 00:33:55,770
The images aren't crisp,
but they're

428
00:33:55,770 --> 00:33:57,630
still perfectly usable.

429
00:33:57,630 --> 00:34:00,350
Whereas on the left, we have the
super crisp, lovely image

430
00:34:00,350 --> 00:34:02,970
in the top left, but the
other images haven't

431
00:34:02,970 --> 00:34:04,220
even started loading.

432
00:34:04,220 --> 00:34:06,240

433
00:34:06,240 --> 00:34:10,969
By the time you get to 50%,
the page on the right now

434
00:34:10,969 --> 00:34:11,760
looks perfect.

435
00:34:11,760 --> 00:34:15,046
You can almost not tell
that it hasn't

436
00:34:15,046 --> 00:34:17,110
finished loading and images.

437
00:34:17,110 --> 00:34:18,329
Whereas on the left,
again, we've only

438
00:34:18,329 --> 00:34:21,219
got half the images.

439
00:34:21,219 --> 00:34:23,719
And then, as you load more
bytes, the page on the right

440
00:34:23,719 --> 00:34:25,270
gradually becomes
a super-crisp,

441
00:34:25,270 --> 00:34:26,540
retina beautiful page.

442
00:34:26,540 --> 00:34:29,555
But it's a very subtle
difference between that and

443
00:34:29,555 --> 00:34:30,773
the 1x image.

444
00:34:30,773 --> 00:34:36,949
Whereas on the left, only now,
at 100%, do we actually all

445
00:34:36,949 --> 00:34:38,199
the images at all visible.

446
00:34:38,199 --> 00:34:41,850

447
00:34:41,850 --> 00:34:43,320
ANN ROBSON: This is great.

448
00:34:43,320 --> 00:34:46,330
I love that you're giving
something to the users like

449
00:34:46,330 --> 00:34:47,170
well, they're waiting.

450
00:34:47,170 --> 00:34:49,469
That's brilliant.

451
00:34:49,469 --> 00:34:51,300
That's what I love about
progressive jpegs, is that

452
00:34:51,300 --> 00:34:54,840
it'll download the first scan
as soon as possible.

453
00:34:54,840 --> 00:34:57,330
MARCOS CACERES: So I think
that's a good lead-in to the

454
00:34:57,330 --> 00:35:03,240
first question that we have,
which is from Jake Archibald.

455
00:35:03,240 --> 00:35:05,496
Hope I pronounced that right.

456
00:35:05,496 --> 00:35:07,410
Jake, do you have your
question with you?

457
00:35:07,410 --> 00:35:08,660
JAKE ARCHIBALD: Yeah, do
I get a microphone?

458
00:35:08,660 --> 00:35:09,510
MARCOS CACERES: Yes.

459
00:35:09,510 --> 00:35:10,760
Mic runner, please.

460
00:35:10,760 --> 00:35:13,600

461
00:35:13,600 --> 00:35:14,687
There goes Pete.

462
00:35:14,687 --> 00:35:16,670
[LAUGHS]

463
00:35:16,670 --> 00:35:19,610
He's going to be really slim
by the end of the day.

464
00:35:19,610 --> 00:35:20,830
JAKE ARCHIBALD: Hey.

465
00:35:20,830 --> 00:35:25,730
So I currently send a 2 times or
2.5 times images, and just

466
00:35:25,730 --> 00:35:26,980
compress the hell out of it.

467
00:35:26,980 --> 00:35:32,440
And the file size is roughly
the same as a 1x image.

468
00:35:32,440 --> 00:35:34,730
And that seems to do the job.

469
00:35:34,730 --> 00:35:36,800
Why do we need all these
extra markup examples?

470
00:35:36,800 --> 00:35:39,390
And if in the future, John's
solution could come in and

471
00:35:39,390 --> 00:35:41,620
stop the download at
some point, surely

472
00:35:41,620 --> 00:35:44,070
that's all we need.

473
00:35:44,070 --> 00:35:46,310
MARCOS CACERES: So go ahead
and start then.

474
00:35:46,310 --> 00:35:47,610
JOHN MELLOR: So should we
start with the existing

475
00:35:47,610 --> 00:35:50,980
fixed-width and flexible-width
images?

476
00:35:50,980 --> 00:35:52,580
So this ties into what Yoav
was saying earlier about

477
00:35:52,580 --> 00:35:53,210
resolution switching.

478
00:35:53,210 --> 00:35:54,530
There's two kinds.

479
00:35:54,530 --> 00:35:56,960
There's DPR switching, where
your images are a fixed size,

480
00:35:56,960 --> 00:35:59,150
like a logo or an icon.

481
00:35:59,150 --> 00:36:00,810
It's going to be the
same width, say 32

482
00:36:00,810 --> 00:36:03,000
pixels, on all devices.

483
00:36:03,000 --> 00:36:05,970
And all you need to do is switch
it out based on the

484
00:36:05,970 --> 00:36:08,360
device's pic screen density.

485
00:36:08,360 --> 00:36:11,380
So you might need a 2x image on
a retina screen, a 3x image

486
00:36:11,380 --> 00:36:13,610
on Samsung Galaxy S4,
that kind of thing.

487
00:36:13,610 --> 00:36:16,220
But all you're doing is changing
it based on the

488
00:36:16,220 --> 00:36:17,690
device-pixel ratio.

489
00:36:17,690 --> 00:36:22,140
With a flexible-width image,
say you've got width 100%.

490
00:36:22,140 --> 00:36:24,000
Then suddenly, the width
for the viewport

491
00:36:24,000 --> 00:36:25,260
of the device matters.

492
00:36:25,260 --> 00:36:28,400
And so your phones, your
tablets, your laptops, they

493
00:36:28,400 --> 00:36:29,412
all have different
widths, they all

494
00:36:29,412 --> 00:36:31,730
need different images.

495
00:36:31,730 --> 00:36:35,220
And here, a simple technique,
which gets you up to double

496
00:36:35,220 --> 00:36:38,550
the resolution image by
compressing it more heavily,

497
00:36:38,550 --> 00:36:43,310
isn't going to scale to an
8 times bigger image.

498
00:36:43,310 --> 00:36:47,880
MARCOS CACERES: So what
do you think?

499
00:36:47,880 --> 00:36:49,280
YOAV WEISS: One more thing.

500
00:36:49,280 --> 00:36:52,440
Regarding the compressive
images hack &mdash;

501
00:36:52,440 --> 00:36:54,580
MARCOS CACERES: Explain what
the compressive images &mdash;

502
00:36:54,580 --> 00:36:56,960
YOAV WEISS: What to Jake
was talking about.

503
00:36:56,960 --> 00:37:05,420
Basically, taking the high-res
images and extremely

504
00:37:05,420 --> 00:37:12,490
compressing them so that they
will be, when downsized to 1x

505
00:37:12,490 --> 00:37:14,960
display dimensions, they
will still a good.

506
00:37:14,960 --> 00:37:20,470
And also, for retina, they look
quite fine, because the

507
00:37:20,470 --> 00:37:22,940
actual display dimensions
are &mdash;

508
00:37:22,940 --> 00:37:24,620
MARCOS CACERES: Hang on, sir.

509
00:37:24,620 --> 00:37:27,570
I'm seeing a few people
looking at you going &mdash;

510
00:37:27,570 --> 00:37:29,160
Let's see if we can explain
that a little better.

511
00:37:29,160 --> 00:37:30,390
Does anyone want
to have a go at

512
00:37:30,390 --> 00:37:31,550
explaining it a little better?

513
00:37:31,550 --> 00:37:32,860
ANN ROBSON: I can try.

514
00:37:32,860 --> 00:37:33,400
Hello.

515
00:37:33,400 --> 00:37:37,530
Somebody discovered that if
they keep the resolution

516
00:37:37,530 --> 00:37:40,430
really high in an image, but
they put the compression down

517
00:37:40,430 --> 00:37:41,460
to, I think 0 &mdash;

518
00:37:41,460 --> 00:37:42,130
is that correct?

519
00:37:42,130 --> 00:37:43,000
YOAV WEISS: That's correct.

520
00:37:43,000 --> 00:37:45,450
ANN ROBSON: So they'll actually
get a smaller file

521
00:37:45,450 --> 00:37:49,780
size that is higher resolution
and it looks good on retina

522
00:37:49,780 --> 00:37:54,430
images, and you have a smaller
file size for speed.

523
00:37:54,430 --> 00:37:56,190
So it's actually best
of both worlds.

524
00:37:56,190 --> 00:37:57,685
And it's an amazing discovery.

525
00:37:57,685 --> 00:38:00,620

526
00:38:00,620 --> 00:38:03,220
MARCOS CACERES: I'm sure if we
go back to 1996, we might find

527
00:38:03,220 --> 00:38:04,120
the same thing.

528
00:38:04,120 --> 00:38:04,900
But who knows?

529
00:38:04,900 --> 00:38:07,420
Because we were doing it from
modems and stuff anyway.

530
00:38:07,420 --> 00:38:11,620
So I guess what I'm wondering
is, what might be some of the

531
00:38:11,620 --> 00:38:12,230
side effects?

532
00:38:12,230 --> 00:38:16,640
Because we're sending
four times the data.

533
00:38:16,640 --> 00:38:18,440
Basically sending an image
that's two times

534
00:38:18,440 --> 00:38:20,010
or even more bigger.

535
00:38:20,010 --> 00:38:22,120
The size might be three times.

536
00:38:22,120 --> 00:38:26,600
So can the browser really
handle that?

537
00:38:26,600 --> 00:38:29,625
Do we know if there's side
effects within the browser?

538
00:38:29,625 --> 00:38:32,600

539
00:38:32,600 --> 00:38:33,970
Maybe John's in a good
position because

540
00:38:33,970 --> 00:38:36,016
he's closer to Chrome.

541
00:38:36,016 --> 00:38:39,210
JOHN MELLOR: We don't really
have the research yet.

542
00:38:39,210 --> 00:38:41,720
It's going to take four
times the memory.

543
00:38:41,720 --> 00:38:44,770
On an image-heavy page, that
might blow your memory budget.

544
00:38:44,770 --> 00:38:46,490
And suddenly things like
painting and scrolling might

545
00:38:46,490 --> 00:38:47,370
get slower.

546
00:38:47,370 --> 00:38:49,276
It's hard to know.

547
00:38:49,276 --> 00:38:50,800
We need more research,
basically.

548
00:38:50,800 --> 00:38:52,440
ANN ROBSON: Right We need
to experiment with that.

549
00:38:52,440 --> 00:38:54,370
But it's a super interesting
idea.

550
00:38:54,370 --> 00:38:54,980
YOAV WEISS: Yeah.

551
00:38:54,980 --> 00:38:59,860
Basically it's on the agenda to
get some real hard data on

552
00:38:59,860 --> 00:39:03,490
the implications of that.

553
00:39:03,490 --> 00:39:05,550
MARCOS CACERES: On the
agenda of who?

554
00:39:05,550 --> 00:39:08,550
YOAV WEISS: On the Responsive
Images Community Group's

555
00:39:08,550 --> 00:39:12,330
agenda to get some hard
data on that for the

556
00:39:12,330 --> 00:39:14,210
DPR switching case.

557
00:39:14,210 --> 00:39:18,850
But exactly as John said, it
doesn't cover all the cases.

558
00:39:18,850 --> 00:39:23,970
And it can cause decoding
performance and memory issues.

559
00:39:23,970 --> 00:39:29,830
So if you're using that, you
need to test it well to make

560
00:39:29,830 --> 00:39:32,846
sure there are no problems
because we don't have general

561
00:39:32,846 --> 00:39:33,910
data on that.

562
00:39:33,910 --> 00:39:35,270
MARCOS CACERES: So I'm going to
bounce a question to Peter

563
00:39:35,270 --> 00:39:38,630
Miller, because he's working
on a lot of &mdash;

564
00:39:38,630 --> 00:39:42,330
You work on some fashion
websites, and you've done &mdash;

565
00:39:42,330 --> 00:39:47,110
Anyway, from whichever ones,
obviously it'd have access to

566
00:39:47,110 --> 00:39:49,780
the very high-resolution
pictures that are coming

567
00:39:49,780 --> 00:39:52,660
straight from photographers.

568
00:39:52,660 --> 00:39:54,780
What would this mean
for maybe you guys?

569
00:39:54,780 --> 00:39:56,030
Would it mean anything?

570
00:39:56,030 --> 00:39:58,402

571
00:39:58,402 --> 00:40:00,450
PETER MILLER: Well, first of
all, I've looked at the

572
00:40:00,450 --> 00:40:02,870
solution and I've got
a retina Macbook.

573
00:40:02,870 --> 00:40:08,180
And I think it's still a matter
of subjective opinion,

574
00:40:08,180 --> 00:40:12,360
maybe, about whether this does
look as good as real retina

575
00:40:12,360 --> 00:40:15,010
images or 2x images.

576
00:40:15,010 --> 00:40:19,120
But I think, possibly thinking
about it even today, is the

577
00:40:19,120 --> 00:40:23,780
bigger problem that, OK, we
can send these pseudo 2x

578
00:40:23,780 --> 00:40:27,420
images down to be shrunk
down at 50%.

579
00:40:27,420 --> 00:40:32,270
But what happens when we maybe
want to expand those images or

580
00:40:32,270 --> 00:40:34,590
have them been more of
a percentage width?

581
00:40:34,590 --> 00:40:37,450
And then suddenly, we're
actually showing those highly

582
00:40:37,450 --> 00:40:43,100
compressed 2x images at their
physical 1x size And then

583
00:40:43,100 --> 00:40:45,530
maybe they look even worse.

584
00:40:45,530 --> 00:40:47,610
ESTELLE WEYL: I think whenever
we have this debate, we also

585
00:40:47,610 --> 00:40:51,540
still have to remember people
who have metered bandwidth.

586
00:40:51,540 --> 00:40:55,010
Because yeah, on your Macbook
Pro, on your Wi-Fi, it's going

587
00:40:55,010 --> 00:40:55,620
to be great.

588
00:40:55,620 --> 00:40:58,550
But someone doesn't want to
download that when they're

589
00:40:58,550 --> 00:41:00,730
paying $19 for &mdash;

590
00:41:00,730 --> 00:41:01,960
MARCOS CACERES: Yeah,
absolutely.

591
00:41:01,960 --> 00:41:04,620
But let's hold on that one,
because that one takes us off

592
00:41:04,620 --> 00:41:06,760
to the following question.

593
00:41:06,760 --> 00:41:09,750
So I want to not go into
those exact concerns.

594
00:41:09,750 --> 00:41:13,600
Because what Ann originally
said was, you can make a

595
00:41:13,600 --> 00:41:17,230
larger image that's actually
smaller in kilobytes.

596
00:41:17,230 --> 00:41:20,090
And so in a sense, it doesn't
really apply.

597
00:41:20,090 --> 00:41:20,640
But it does.

598
00:41:20,640 --> 00:41:22,570
But we're getting exactly
to the point &mdash;

599
00:41:22,570 --> 00:41:24,780
ESTELLE WEYL: We also have to
think about Android 2.4 and

600
00:41:24,780 --> 00:41:26,960
older Androids, which are
still being sold today.

601
00:41:26,960 --> 00:41:29,380
Because they don't have
the memory capacity.

602
00:41:29,380 --> 00:41:29,560
MARCOS CACERES: Right.

603
00:41:29,560 --> 00:41:33,130
Even Firefox OS is 250 megabytes
of RAM on that.

604
00:41:33,130 --> 00:41:36,850
And it struggles.

605
00:41:36,850 --> 00:41:39,210
So absolutely.

606
00:41:39,210 --> 00:41:45,650
So I think we should probably
move on to the next topic.

607
00:41:45,650 --> 00:41:48,195
So the second question.

608
00:41:48,195 --> 00:41:52,060

609
00:41:52,060 --> 00:41:53,570
Is there a George Crawford?

610
00:41:53,570 --> 00:41:59,984

611
00:41:59,984 --> 00:42:00,490
GEORGE CRAWFORD: Hi.

612
00:42:00,490 --> 00:42:01,690
This is one of the anonymous

613
00:42:01,690 --> 00:42:03,390
questions from Google Moderator.

614
00:42:03,390 --> 00:42:06,360
Is DPI negotiation
only a stopgap?

615
00:42:06,360 --> 00:42:09,180
Bandwidth keeps growing
exponentially, LCD prices are

616
00:42:09,180 --> 00:42:12,090
dropping, GPUs benefit
from Moore's Law.

617
00:42:12,090 --> 00:42:14,190
In several years, would it
make sense to just send

618
00:42:14,190 --> 00:42:16,482
high-resolution images
to all users?

619
00:42:16,482 --> 00:42:21,070

620
00:42:21,070 --> 00:42:22,350
MARCOS CACERES: The
implications &mdash;

621
00:42:22,350 --> 00:42:24,230
and this goes back if
we look at all of

622
00:42:24,230 --> 00:42:26,890
computing history, right?

623
00:42:26,890 --> 00:42:30,430
Will 64 K be enough?

624
00:42:30,430 --> 00:42:31,580
Computers just get faster.

625
00:42:31,580 --> 00:42:35,090
And yet, we seem to find
ourselves in the same

626
00:42:35,090 --> 00:42:36,240
situation over and over again.

627
00:42:36,240 --> 00:42:39,650
Back in 1996, like I was saying
before, we had modems

628
00:42:39,650 --> 00:42:42,090
and we have to compress the
crap out of images then as

629
00:42:42,090 --> 00:42:45,110
well to cater to users that were
just getting cable, and

630
00:42:45,110 --> 00:42:49,316
who didn't have cable and still
were on 54 K. 54 broad

631
00:42:49,316 --> 00:42:50,970
rate modems.

632
00:42:50,970 --> 00:42:54,560
So thoughts?

633
00:42:54,560 --> 00:42:56,265
Should we really worry
that much?

634
00:42:56,265 --> 00:42:58,980
Should we stop caring?

635
00:42:58,980 --> 00:43:00,340
I know everybody's
probably excited.

636
00:43:00,340 --> 00:43:01,160
ANN ROBSON: You were all like &mdash;

637
00:43:01,160 --> 00:43:02,915
[LAUGHTER]

638
00:43:02,915 --> 00:43:05,140
MARCOS CACERES: Let's
do a round and

639
00:43:05,140 --> 00:43:06,310
bounce back if we can.

640
00:43:06,310 --> 00:43:08,460
But let's keep it short.

641
00:43:08,460 --> 00:43:10,890
ANN ROBSON: I think it would be
nice if we could just send

642
00:43:10,890 --> 00:43:13,140
super large images.

643
00:43:13,140 --> 00:43:15,250
But I don't think we can
do that quite yet.

644
00:43:15,250 --> 00:43:19,130
And I think that the responsive
images, it's such a

645
00:43:19,130 --> 00:43:22,010
topic because we're getting
smaller and slower, and we're

646
00:43:22,010 --> 00:43:24,680
getting bigger and faster
at the same time.

647
00:43:24,680 --> 00:43:27,560
So this is spreading out.

648
00:43:27,560 --> 00:43:29,500
I have, obviously,
my opinions.

649
00:43:29,500 --> 00:43:33,570
But I think that we need a
response images container.

650
00:43:33,570 --> 00:43:37,240
Could be, possibly, a
progressive jpeg that has

651
00:43:37,240 --> 00:43:39,600
really small scans and
really large scans.

652
00:43:39,600 --> 00:43:44,670
And possibly the browser only
downloads what it needs.

653
00:43:44,670 --> 00:43:46,285
MARCOS CACERES: We have a
delegate in the queue.

654
00:43:46,285 --> 00:43:48,310
I'll just get Mike [INAUDIBLE]

655
00:43:48,310 --> 00:43:49,560
ready.

656
00:43:49,560 --> 00:43:51,330

657
00:43:51,330 --> 00:43:55,545
If you can jump to
a mic, Mike.

658
00:43:55,545 --> 00:43:57,580
Do you want to quickly
jump in on this?

659
00:43:57,580 --> 00:44:00,430
PETER MILLER: I think, staying
in a hotel room in New York

660
00:44:00,430 --> 00:44:03,330
City, it actually feels like
we're quite a few years away

661
00:44:03,330 --> 00:44:08,560
from being very fastly connected
across everywhere.

662
00:44:08,560 --> 00:44:11,250
But also, you've got to think
data plans, roaming.

663
00:44:11,250 --> 00:44:13,160
You want to give the users,
maybe, an option to have a

664
00:44:13,160 --> 00:44:14,170
low-resolution mode.

665
00:44:14,170 --> 00:44:16,560
But if we're just always sending
that high resolution.

666
00:44:16,560 --> 00:44:19,930
But also allowing for the
art direction case.

667
00:44:19,930 --> 00:44:21,380
I don't think that this
caters for that.

668
00:44:21,380 --> 00:44:24,190

669
00:44:24,190 --> 00:44:28,690
YOAV WEISS: I think that, as
Ann started to say, Moore's

670
00:44:28,690 --> 00:44:34,500
Law is not giving us
expanded bandwidth.

671
00:44:34,500 --> 00:44:37,900
We get a larger range
of devices.

672
00:44:37,900 --> 00:44:42,220
We have capable smaller
devices.

673
00:44:42,220 --> 00:44:47,250
And the bandwidth coverage
is not ubiquitous.

674
00:44:47,250 --> 00:44:50,370
So basically, it's a question
that asks us whether we can

675
00:44:50,370 --> 00:44:52,440
look into the future.

676
00:44:52,440 --> 00:44:57,010
And unfortunately, we can't.

677
00:44:57,010 --> 00:45:00,970
In 20 years, it may
be relevant.

678
00:45:00,970 --> 00:45:02,260
MARCOS CACERES: We can't look
into the future, but we can

679
00:45:02,260 --> 00:45:03,850
see what the trends are.

680
00:45:03,850 --> 00:45:09,690
We know that we have now Google
Glass and Samsung's

681
00:45:09,690 --> 00:45:11,450
watch and things like that.

682
00:45:11,450 --> 00:45:11,980
YOAV WEISS: Exactly.

683
00:45:11,980 --> 00:45:14,860
MARCOS CACERES: In a sense,
we know a little bit where

684
00:45:14,860 --> 00:45:15,940
machines are going.

685
00:45:15,940 --> 00:45:19,400
And again, we're going to
see the same cycle.

686
00:45:19,400 --> 00:45:22,180
ANN ROBSON: So basically, the
problem is getting worse.

687
00:45:22,180 --> 00:45:23,520
MARCOS CACERES: So
we found Mike?

688
00:45:23,520 --> 00:45:24,860
MALE SPEAKER: Yes.

689
00:45:24,860 --> 00:45:25,310
MIKE: Can you hear me?

690
00:45:25,310 --> 00:45:25,800
MARCOS CACERES: Yup.

691
00:45:25,800 --> 00:45:26,730
Do you want to jump in?

692
00:45:26,730 --> 00:45:27,820
MIKE: Yeah.

693
00:45:27,820 --> 00:45:30,620
Just a quick question.

694
00:45:30,620 --> 00:45:34,710
One of you mentioned, what if
you have a small image?

695
00:45:34,710 --> 00:45:38,540
Using high compression at a
large size that was initially

696
00:45:38,540 --> 00:45:40,890
seen small, but then expanded.

697
00:45:40,890 --> 00:45:44,590
It seems to be a consequence
of the jpeg format.

698
00:45:44,590 --> 00:45:48,190
What about new formats,
such as WebP, and

699
00:45:48,190 --> 00:45:50,000
using things like that?

700
00:45:50,000 --> 00:45:52,100
MARCOS CACERES: So maybe
I'll get John to

701
00:45:52,100 --> 00:45:54,880
respond to that one.

702
00:45:54,880 --> 00:45:56,270
JOHN MELLOR: So I'm not
an expert on WebP,

703
00:45:56,270 --> 00:46:01,040
but it tends to give &mdash;

704
00:46:01,040 --> 00:46:03,725
it seems to have two things
that are nice.

705
00:46:03,725 --> 00:46:06,310
It gives slightly better
performance, and compression

706
00:46:06,310 --> 00:46:09,200
performance, ranging
from 25 to 60.

707
00:46:09,200 --> 00:46:11,220
Well, it depends what you're
doing with it.

708
00:46:11,220 --> 00:46:16,440
But it's also, when very highly
compressed, you get

709
00:46:16,440 --> 00:46:18,300
less of the blocking artifact
you get with jpeg.

710
00:46:18,300 --> 00:46:21,570
So you can actually afford a
greater compression ratio than

711
00:46:21,570 --> 00:46:24,820
you would use with jpeg.

712
00:46:24,820 --> 00:46:26,340
So that can help.

713
00:46:26,340 --> 00:46:27,740
But there's issues with
[INAUDIBLE] support

714
00:46:27,740 --> 00:46:28,650
and so on of course.

715
00:46:28,650 --> 00:46:31,380
ANN ROBSON: Also, with WebP,
perceived performance is

716
00:46:31,380 --> 00:46:33,430
slower than progressive
jpeg, right?

717
00:46:33,430 --> 00:46:37,080
Because you're actually
getting a scan

718
00:46:37,080 --> 00:46:38,860
earlier than a WebP.

719
00:46:38,860 --> 00:46:42,010
Even if a WebP is a smaller file
size, progressive jpeg is

720
00:46:42,010 --> 00:46:43,260
going to beat it every time.

721
00:46:43,260 --> 00:46:45,580

722
00:46:45,580 --> 00:46:47,410
MARCOS CACERES: Someone can
correct me here, but it

723
00:46:47,410 --> 00:46:49,446
doesn't support progressive
loading.

724
00:46:49,446 --> 00:46:50,580
Or does it?

725
00:46:50,580 --> 00:46:51,840
ANN ROBSON: That's
a good question.

726
00:46:51,840 --> 00:46:52,540
JOHN MELLOR: There's no counter
[INAUDIBLE] for

727
00:46:52,540 --> 00:46:53,890
progressive loading.

728
00:46:53,890 --> 00:46:56,290
MARCOS CACERES: So I think
that's, at least from service

729
00:46:56,290 --> 00:46:59,480
perspective, following the bug
about WebP, that's a real

730
00:46:59,480 --> 00:47:00,980
showstopper for us.

731
00:47:00,980 --> 00:47:02,230
ESTELLE WEYL: Correct.

732
00:47:02,230 --> 00:47:05,750

733
00:47:05,750 --> 00:47:12,270
YOAV WEISS: So I'm not sure a
future progressive WebP can

734
00:47:12,270 --> 00:47:14,460
answer that, or a progressive
jpeg.

735
00:47:14,460 --> 00:47:17,560
But basically, I think
that it's not a

736
00:47:17,560 --> 00:47:18,750
question of image format.

737
00:47:18,750 --> 00:47:21,710
Because we have progressive
image formats, or we can

738
00:47:21,710 --> 00:47:25,400
easily come up with
the responsive

739
00:47:25,400 --> 00:47:26,450
image container stuff.

740
00:47:26,450 --> 00:47:27,670
We can easily.

741
00:47:27,670 --> 00:47:34,290
It's a prototype, but it's not
complicated to get this done.

742
00:47:34,290 --> 00:47:36,790
The problem is that currently,
there are no fetching

743
00:47:36,790 --> 00:47:40,820
mechanisms in place that can
download only the start of the

744
00:47:40,820 --> 00:47:46,170
image for low-resolution
devices, and download the

745
00:47:46,170 --> 00:47:49,770
entire image for high-resolution
devices that

746
00:47:49,770 --> 00:47:53,180
have the bandwidth and have the
capability to decode it.

747
00:47:53,180 --> 00:47:58,620
And I think that getting the
fetching mechanism in place

748
00:47:58,620 --> 00:48:06,212
would be an enabler for such
optimization, for such formats

749
00:48:06,212 --> 00:48:07,075
to be useful

750
00:48:07,075 --> 00:48:07,890
MARCOS CACERES: I
want to quickly

751
00:48:07,890 --> 00:48:10,660
get Estelle's thoughts.

752
00:48:10,660 --> 00:48:12,510
ESTELLE WEYL: So I was going
back to the original question.

753
00:48:12,510 --> 00:48:15,060

754
00:48:15,060 --> 00:48:16,230
I think we're never going
to be able to just

755
00:48:16,230 --> 00:48:19,400
have one image solution.

756
00:48:19,400 --> 00:48:22,410
Because you don't have the same
image if your device is

757
00:48:22,410 --> 00:48:25,860
this big versus if your
image is this big.

758
00:48:25,860 --> 00:48:28,480
For those listening to audio,
you don't want to have the

759
00:48:28,480 --> 00:48:32,810
same image if you have
a 20 inch image

760
00:48:32,810 --> 00:48:34,130
versus a half inch image.

761
00:48:34,130 --> 00:48:35,950
ANN ROBSON: But we actually
could do that, right?

762
00:48:35,950 --> 00:48:39,060
Because with a progressive jpeg,
you can have a variable

763
00:48:39,060 --> 00:48:41,870
number of scans, and the scans
are of increasing quality.

764
00:48:41,870 --> 00:48:44,250
So you could have, say, 40.

765
00:48:44,250 --> 00:48:46,205
Let's expand our minds
about this.

766
00:48:46,205 --> 00:48:47,300
Is that correct?

767
00:48:47,300 --> 00:48:48,620
We could.

768
00:48:48,620 --> 00:48:53,400
YOAV WEISS: If you're getting
into 40 times bigger zone, you

769
00:48:53,400 --> 00:48:55,620
will get color distortion.

770
00:48:55,620 --> 00:48:56,910
ESTELLE WEYL: I'm talking
about the art direction.

771
00:48:56,910 --> 00:48:59,300
If you're going to &mdash;

772
00:48:59,300 --> 00:49:01,880
ANN ROBSON: Putting the art
direction topic aside for a

773
00:49:01,880 --> 00:49:05,840
second, you actually can have a
progressive jpeg that has a

774
00:49:05,840 --> 00:49:09,800
very small scan and then
very high resolution.

775
00:49:09,800 --> 00:49:13,160
So you can have a tiny image
that downloads very quickly,

776
00:49:13,160 --> 00:49:17,180
and you can have a super
large HD image for &mdash;

777
00:49:17,180 --> 00:49:19,230
ESTELLE WEYL: Yeah, but I think
we can't put the art

778
00:49:19,230 --> 00:49:21,050
direction aside, because
we are serving so

779
00:49:21,050 --> 00:49:22,080
many different devices.

780
00:49:22,080 --> 00:49:27,180
So I think the answer to the
question is I don't think

781
00:49:27,180 --> 00:49:29,900
serving one image will be the
solution in the end, because

782
00:49:29,900 --> 00:49:34,872
we are reaching such a
plethora of devices.

783
00:49:34,872 --> 00:49:36,170
MARCOS CACERES: We're
going to continue

784
00:49:36,170 --> 00:49:37,250
to be the next question.

785
00:49:37,250 --> 00:49:38,790
It's very much related
to this.

786
00:49:38,790 --> 00:49:44,150
So before I do that, that I'm
going to queue up Kyle.

787
00:49:44,150 --> 00:49:45,380
Kyle, do you have
a mic already?

788
00:49:45,380 --> 00:49:48,420
Where's Kyle?

789
00:49:48,420 --> 00:49:49,070
MALE SPEAKER: [INAUDIBLE]

790
00:49:49,070 --> 00:49:50,650
MARCOS CACERES: Sorry,
Kyle seems to &mdash;

791
00:49:50,650 --> 00:49:52,750
ESTELLE WEYL: He's over there.

792
00:49:52,750 --> 00:49:55,100
MARCOS CACERES: So I'm
going to cue up Kyle.

793
00:49:55,100 --> 00:49:55,970
He's right there.

794
00:49:55,970 --> 00:50:00,090
So Kyle, just a quick
question or comment.

795
00:50:00,090 --> 00:50:03,480
KYLE: So a lot of these
solutions seem to be art

796
00:50:03,480 --> 00:50:05,040
direction-centric.

797
00:50:05,040 --> 00:50:07,570
I want the best possible images
that can be there.

798
00:50:07,570 --> 00:50:10,730
But responsive seems to respond
to maybe the screen

799
00:50:10,730 --> 00:50:13,270
size, maybe to the bandwidth,
but it doesn't seem to react

800
00:50:13,270 --> 00:50:14,040
to the environment.

801
00:50:14,040 --> 00:50:17,750
Say if I start out loading a
Flickr page that the battery

802
00:50:17,750 --> 00:50:20,920
power is at 50%, I've got plenty
of processing power.

803
00:50:20,920 --> 00:50:24,370
But if I'm now at 2%, maybe
the device should start

804
00:50:24,370 --> 00:50:26,070
choosing not to render
these higher things.

805
00:50:26,070 --> 00:50:29,810
So can't we have solutions that
allow apps to respond to

806
00:50:29,810 --> 00:50:33,160
more complex situations than
just the screen size?

807
00:50:33,160 --> 00:50:36,940

808
00:50:36,940 --> 00:50:38,240
MARCOS CACERES: We're going
to cover that as well.

809
00:50:38,240 --> 00:50:41,640
But if somebody wants to
make a quick comment?

810
00:50:41,640 --> 00:50:44,270
YOAV WEISS: Just a
quick comment.

811
00:50:44,270 --> 00:50:48,970
That's something that certainly
should be possible

812
00:50:48,970 --> 00:50:51,010
when we're talking about
resolution switching, when

813
00:50:51,010 --> 00:50:53,940
we're talking about things that
won't break the layout

814
00:50:53,940 --> 00:51:00,440
but just would give the user a
lower-quality image when it

815
00:51:00,440 --> 00:51:03,390
can't download the high-res
quality image.

816
00:51:03,390 --> 00:51:07,070
And this is something that
should be heuristically

817
00:51:07,070 --> 00:51:08,300
possible with Source Set.

818
00:51:08,300 --> 00:51:15,120
So the browser in Source Set,
basically the spec contains an

819
00:51:15,120 --> 00:51:18,740
asterisk saying, eventually the
browser can do whatever

820
00:51:18,740 --> 00:51:19,990
the hell it wants.

821
00:51:19,990 --> 00:51:22,070

822
00:51:22,070 --> 00:51:25,210
So the browser can decide,
based on user preference,

823
00:51:25,210 --> 00:51:29,340
based on environment, based on
battery to not download the

824
00:51:29,340 --> 00:51:31,770
high-res images, but
the lower-res ones.

825
00:51:31,770 --> 00:51:32,970
MARCOS CACERES: So it's
kind of a good

826
00:51:32,970 --> 00:51:33,740
thing and a bad thing.

827
00:51:33,740 --> 00:51:36,980
But it does mean it's
a declarative model.

828
00:51:36,980 --> 00:51:38,100
You're handing over control.

829
00:51:38,100 --> 00:51:39,870
You're saying to the browser,
this is what I

830
00:51:39,870 --> 00:51:41,690
got, deal with that.

831
00:51:41,690 --> 00:51:44,020
Do it best for the user.

832
00:51:44,020 --> 00:51:44,560
YOAV WEISS: Yeah.

833
00:51:44,560 --> 00:51:50,340
I don't think this should be
something decided by the web

834
00:51:50,340 --> 00:51:53,460
developer, because I don't think
they have this kind of

835
00:51:53,460 --> 00:51:55,220
information.

836
00:51:55,220 --> 00:51:58,040
We cannot have this kind of
information available to the

837
00:51:58,040 --> 00:51:59,030
web developer.

838
00:51:59,030 --> 00:52:01,860
This is something that should be
done by the browser with a

839
00:52:01,860 --> 00:52:04,300
user preference.

840
00:52:04,300 --> 00:52:06,310
MARCOS CACERES: I'm going to
be moderator here and jump

841
00:52:06,310 --> 00:52:07,260
over to the next question,
because

842
00:52:07,260 --> 00:52:08,290
they're all related anyway.

843
00:52:08,290 --> 00:52:09,860
So we'll [INAUDIBLE]

844
00:52:09,860 --> 00:52:11,620
the points.

845
00:52:11,620 --> 00:52:12,870
Calvin Spealman.

846
00:52:12,870 --> 00:52:15,890

847
00:52:15,890 --> 00:52:17,650
Your question.

848
00:52:17,650 --> 00:52:18,900
So runner.

849
00:52:18,900 --> 00:52:26,510

850
00:52:26,510 --> 00:52:27,290
CALVIN SPEALMAN: Yeah.

851
00:52:27,290 --> 00:52:30,030
I was basically wondering about
if we are fighting a

852
00:52:30,030 --> 00:52:32,630
losing battle by continually
generating all these different

853
00:52:32,630 --> 00:52:35,240
sizes and different resolutions
up front when

854
00:52:35,240 --> 00:52:39,950
there's constantly devices,
constantly different sizes.

855
00:52:39,950 --> 00:52:41,770
We're always going to be
constantly trying to catch up

856
00:52:41,770 --> 00:52:45,210
and generating more and more
images, as opposed to having

857
00:52:45,210 --> 00:52:47,610
some server-side solution that
does it dynamically and

858
00:52:47,610 --> 00:52:50,200
optimizes the set of
images we have.

859
00:52:50,200 --> 00:52:52,500
MARCOS CACERES: So I think this
ties in briefly to the

860
00:52:52,500 --> 00:52:56,060
stuff that John was presenting
before, and also to the

861
00:52:56,060 --> 00:53:00,880
progressive jpeg, to having
those multiple scans.

862
00:53:00,880 --> 00:53:05,820
So John, with the kind of work
that you've been doing, what

863
00:53:05,820 --> 00:53:06,680
are you seeing?

864
00:53:06,680 --> 00:53:08,330
What are the numbers
telling you there?

865
00:53:08,330 --> 00:53:11,735

866
00:53:11,735 --> 00:53:13,500
JOHN MELLOR: I guess there's two
aspects of this question.

867
00:53:13,500 --> 00:53:18,920
On the server side, sure, you
don't want the artist to be

868
00:53:18,920 --> 00:53:20,930
manually saving out
20 different

869
00:53:20,930 --> 00:53:22,210
versions of every image.

870
00:53:22,210 --> 00:53:24,290
It's not scalable.

871
00:53:24,290 --> 00:53:29,120
So I guess on the server side,
you have to be, at the moment,

872
00:53:29,120 --> 00:53:31,000
dynamically creating these
images by automatically

873
00:53:31,000 --> 00:53:33,300
resizing them.

874
00:53:33,300 --> 00:53:36,620
But then, I guess I can
[INAUDIBLE] as well, it would

875
00:53:36,620 --> 00:53:39,205
be nice if there was only one
image you have to save.

876
00:53:39,205 --> 00:53:43,270
You just tell your Photoshop
or whatever, save out one

877
00:53:43,270 --> 00:53:44,640
ultra high-resolution image.

878
00:53:44,640 --> 00:53:48,520
And the [INAUDIBLE] downloads
just the beginning of it,

879
00:53:48,520 --> 00:53:49,430
however much it needs.

880
00:53:49,430 --> 00:53:49,690
CALVIN SPEALMAN: Yeah.

881
00:53:49,690 --> 00:53:50,300
That's perfect.

882
00:53:50,300 --> 00:53:52,240
I think that's the most
elegant solution.

883
00:53:52,240 --> 00:53:55,420
I think that's the second most
elegant solution is like with

884
00:53:55,420 --> 00:53:58,780
Clients Hints, and having the
server serve up different

885
00:53:58,780 --> 00:54:01,070
resolutions, different versions
of the image.

886
00:54:01,070 --> 00:54:02,810
But it has to be automatic.

887
00:54:02,810 --> 00:54:11,190
We should not be creating x
number of images to serve to

888
00:54:11,190 --> 00:54:12,490
different devices.

889
00:54:12,490 --> 00:54:16,680
And we are fighting a losing
battle in that case.

890
00:54:16,680 --> 00:54:17,790
PETER MILLER: I think the &mdash;

891
00:54:17,790 --> 00:54:18,630
MARCO CACERES: Quick audience.

892
00:54:18,630 --> 00:54:19,880
Did you have a question?

893
00:54:19,880 --> 00:54:22,420

894
00:54:22,420 --> 00:54:24,150
AUDIENCE: But if you have that
situation, aren't you going to

895
00:54:24,150 --> 00:54:26,140
end up in the thing that
all the developers were

896
00:54:26,140 --> 00:54:28,980
complaining about when the
operators started to compress

897
00:54:28,980 --> 00:54:30,930
your images on mobile
networks.

898
00:54:30,930 --> 00:54:32,770
And they said, just
get out of my way.

899
00:54:32,770 --> 00:54:34,180
I don't want you to
touch my stuff.

900
00:54:34,180 --> 00:54:37,970
If you've got some automated
system that sits between the

901
00:54:37,970 --> 00:54:40,670
thing you're creating, the same
problem that three years

902
00:54:40,670 --> 00:54:42,860
ago you were all
whinging about.

903
00:54:42,860 --> 00:54:45,120
ESTELLE WEYL: My thought was
that this would be &mdash;

904
00:54:45,120 --> 00:54:46,430
I think it should
be server side.

905
00:54:46,430 --> 00:54:50,870
So that the developer is
actually deciding what you're

906
00:54:50,870 --> 00:54:52,120
sending over.

907
00:54:52,120 --> 00:54:55,190

908
00:54:55,190 --> 00:54:59,110
The browser should not be
altering images is my thought.

909
00:54:59,110 --> 00:55:01,080
JOHN MELLOR: But the developer
doesn't know the bandwidth of

910
00:55:01,080 --> 00:55:02,360
the client.

911
00:55:02,360 --> 00:55:04,240
ESTELLE WEYL: No.

912
00:55:04,240 --> 00:55:06,720
When we're all said and done,
when we have Client Hints and

913
00:55:06,720 --> 00:55:08,910
everything else, it should be
the server that's making the

914
00:55:08,910 --> 00:55:11,750
20 images and serving the
correct image based on the

915
00:55:11,750 --> 00:55:16,050
Client Hints or the Source Set,
not the browser that's

916
00:55:16,050 --> 00:55:18,500
taking an image and deciding
that the upper left hand

917
00:55:18,500 --> 00:55:21,370
corner should be shown instead
of the middle of it.

918
00:55:21,370 --> 00:55:23,310
JOHN MELLOR: It seems a lot
easier for the browser to take

919
00:55:23,310 --> 00:55:25,350
user's preference into
account though.

920
00:55:25,350 --> 00:55:29,110
If the user decides, they're
roaming or something, and they

921
00:55:29,110 --> 00:55:31,100
only want the very low
resolution image.

922
00:55:31,100 --> 00:55:33,190
Then do you want
an extra Client

923
00:55:33,190 --> 00:55:34,200
Hint saying, I'm roaming.

924
00:55:34,200 --> 00:55:37,540
An extra Client Hint saying
these kinds of things?

925
00:55:37,540 --> 00:55:39,465
ESTELLE WEYL: No.

926
00:55:39,465 --> 00:55:42,910
The browser can say &mdash;

927
00:55:42,910 --> 00:55:45,380
When you have Client Hints &mdash;

928
00:55:45,380 --> 00:55:46,940
Should we ask the question about
Client Hints that we're

929
00:55:46,940 --> 00:55:48,392
going to ask later?

930
00:55:48,392 --> 00:55:50,450
MARCO CACERES: No.

931
00:55:50,450 --> 00:55:53,000
We are talking about &mdash;

932
00:55:53,000 --> 00:55:55,410
I don't think we need to move
to that question yet.

933
00:55:55,410 --> 00:55:58,690
Because we are dealing with or
discussing a very serious

934
00:55:58,690 --> 00:56:03,090
problem, which is A, how can
computers really decide this?

935
00:56:03,090 --> 00:56:04,820
How do we set the
break points?

936
00:56:04,820 --> 00:56:08,120
Or not even the break points,
but this looks good here, so

937
00:56:08,120 --> 00:56:09,310
sent this, and so on.

938
00:56:09,310 --> 00:56:13,630
So having that level of control,
as Steve was saying

939
00:56:13,630 --> 00:56:16,110
before, that was pissing
people off, developers,

940
00:56:16,110 --> 00:56:17,660
because it didn't look good.

941
00:56:17,660 --> 00:56:20,540
And to some degree, well,
that's what we really

942
00:56:20,540 --> 00:56:21,100
need to look at.

943
00:56:21,100 --> 00:56:22,750
Can we computationally
do that?

944
00:56:22,750 --> 00:56:25,880
And John's research seems
to suggest that it can.

945
00:56:25,880 --> 00:56:32,300
Because at least the user gets
the initial layout with the

946
00:56:32,300 --> 00:56:34,340
nice images or beginnings
of a nice image.

947
00:56:34,340 --> 00:56:37,510
And then from there, you start
progressively improving it.

948
00:56:37,510 --> 00:56:39,120
So how much do you
need to push it?

949
00:56:39,120 --> 00:56:40,300
And what does it mean
on the server?

950
00:56:40,300 --> 00:56:43,150
It's kind of hard to know.

951
00:56:43,150 --> 00:56:46,450
YOAV WEISS: My opinion on this
is that basically you need all

952
00:56:46,450 --> 00:56:51,070
solutions to be automizable.

953
00:56:51,070 --> 00:56:56,500
So you can do either dynamic or
a build step or something

954
00:56:56,500 --> 00:57:00,360
on the server side that does all
the grunt work for you as

955
00:57:00,360 --> 00:57:01,610
a developer.

956
00:57:01,610 --> 00:57:04,250

957
00:57:04,250 --> 00:57:06,930
At least we must have
some solutions that

958
00:57:06,930 --> 00:57:08,180
don't require it.

959
00:57:08,180 --> 00:57:10,730

960
00:57:10,730 --> 00:57:11,800
MARCO CACERES: So I've got two
questions from the floor.

961
00:57:11,800 --> 00:57:13,740
I've got one from &mdash;

962
00:57:13,740 --> 00:57:14,950
your name?

963
00:57:14,950 --> 00:57:15,610
Sorry.

964
00:57:15,610 --> 00:57:18,310
OK.

965
00:57:18,310 --> 00:57:20,380
I thought you were going
to ask a question.

966
00:57:20,380 --> 00:57:20,920
No problem.

967
00:57:20,920 --> 00:57:21,580
Go ahead.

968
00:57:21,580 --> 00:57:24,780
AUDIENCE: So if we start
generating 20, 30 different

969
00:57:24,780 --> 00:57:28,930
versions of files on the server
side and start doing

970
00:57:28,930 --> 00:57:31,720
very Client Hint headers or
whatever, are we going to have

971
00:57:31,720 --> 00:57:36,200
problems where the edge caches
just can't keep all of these?

972
00:57:36,200 --> 00:57:38,960
We're going to be pulling out 20
different times the number

973
00:57:38,960 --> 00:57:40,950
of files on all the
edge caches.

974
00:57:40,950 --> 00:57:44,360
Are CDNs going to be useful
anymore at that point?

975
00:57:44,360 --> 00:57:45,610
How's it going to scale?

976
00:57:45,610 --> 00:57:51,200

977
00:57:51,200 --> 00:57:55,360
YOAV WEISS: Since the Client
Hints is one hints per header,

978
00:57:55,360 --> 00:57:57,320
so very woodwork.

979
00:57:57,320 --> 00:58:02,490
But I think the edge caches will
have to adapt to the new

980
00:58:02,490 --> 00:58:05,660
reality of much more
images than before.

981
00:58:05,660 --> 00:58:09,630
But since I don't think
this will be &mdash;

982
00:58:09,630 --> 00:58:11,270
it may be exponential.

983
00:58:11,270 --> 00:58:14,410
But there will be time
to adapt, as far as

984
00:58:14,410 --> 00:58:15,980
the edge caches go.

985
00:58:15,980 --> 00:58:17,690
So that's my opinion.

986
00:58:17,690 --> 00:58:18,380
AUDIENCE: --1.1 yet.

987
00:58:18,380 --> 00:58:19,540
MARCO CACERES: Hang on.

988
00:58:19,540 --> 00:58:22,300
Don't speak without the mic.

989
00:58:22,300 --> 00:58:25,480
So I was going to jump to &mdash;

990
00:58:25,480 --> 00:58:26,820
I'll go to Matt.

991
00:58:26,820 --> 00:58:27,730
I think you had a question?

992
00:58:27,730 --> 00:58:27,970
No?

993
00:58:27,970 --> 00:58:28,310
You're good?

994
00:58:28,310 --> 00:58:28,650
MATT: We covered it.

995
00:58:28,650 --> 00:58:29,640
MARCO CACERES: OK cool.

996
00:58:29,640 --> 00:58:34,640
So Peter, you're looking like
you want to say something.

997
00:58:34,640 --> 00:58:35,900
PETER MILLER: When the original
question was first

998
00:58:35,900 --> 00:58:40,065
asked, the case that comes to
my mind is still the art

999
00:58:40,065 --> 00:58:40,590
direction case.

1000
00:58:40,590 --> 00:58:42,480
Because it is very
important for

1001
00:58:42,480 --> 00:58:44,350
publications that I work on.

1002
00:58:44,350 --> 00:58:47,910
And the crop has to be right.

1003
00:58:47,910 --> 00:58:50,130
And that's why we do do
upfront generation.

1004
00:58:50,130 --> 00:58:51,100
We have picture editors.

1005
00:58:51,100 --> 00:58:53,630
And they are in charge of
saying, when this image is

1006
00:58:53,630 --> 00:58:57,500
displayed at this size, then
here's a crop I want.

1007
00:58:57,500 --> 00:58:59,530
But I've worked with content
management systems in the past

1008
00:58:59,530 --> 00:59:02,210
that will define that
given coordinates.

1009
00:59:02,210 --> 00:59:05,490
Yes, we can automatically resize
images dynamically.

1010
00:59:05,490 --> 00:59:08,700
But maybe we could allow picture
editors to dynamically

1011
00:59:08,700 --> 00:59:11,110
come in and draw some
coordinates for different use

1012
00:59:11,110 --> 00:59:12,580
cases in different contexts.

1013
00:59:12,580 --> 00:59:16,040
And the question about whether
it's the browser that decides

1014
00:59:16,040 --> 00:59:17,600
it or it's the developer
that decides it.

1015
00:59:17,600 --> 00:59:18,110
Absolutely.

1016
00:59:18,110 --> 00:59:20,250
I think it has to be the
browser decides it.

1017
00:59:20,250 --> 00:59:22,950
It's not just the resolution
of the screen.

1018
00:59:22,950 --> 00:59:24,230
It's not just the size
of the screen.

1019
00:59:24,230 --> 00:59:25,400
Is not just the battery power.

1020
00:59:25,400 --> 00:59:29,230
It's actually everything else
to do with what's rendering

1021
00:59:29,230 --> 00:59:30,020
that image element.

1022
00:59:30,020 --> 00:59:31,390
And it's not just the HTML.

1023
00:59:31,390 --> 00:59:33,210
It's the style sheet as well.

1024
00:59:33,210 --> 00:59:35,600
MARCO CACERES: This leads me,
really, to the next question,

1025
00:59:35,600 --> 00:59:38,700
which is by Jeffrey
[INAUDIBLE].

1026
00:59:38,700 --> 00:59:39,760
Is he here?

1027
00:59:39,760 --> 00:59:40,720
JEFFREY: Yeah.

1028
00:59:40,720 --> 00:59:41,970
MARCO CACERES: There he is.

1029
00:59:41,970 --> 00:59:47,750

1030
00:59:47,750 --> 00:59:50,570
JEFFREY: Thank you.

1031
00:59:50,570 --> 00:59:55,210
So this is an annoying
theoretical purity question,

1032
00:59:55,210 --> 00:59:57,260
supplied by the moderator.

1033
00:59:57,260 --> 00:59:59,550
And I have a complicated
relationship to it, because

1034
00:59:59,550 --> 01:00:02,690
since 1998, I've been beating
the drum for separation of

1035
01:00:02,690 --> 01:00:04,670
presentation and structure.

1036
01:00:04,670 --> 01:00:10,620
But I'm also a big supporter of
Matt, Marcos, and picture.

1037
01:00:10,620 --> 01:00:12,550
Hey, buddy.

1038
01:00:12,550 --> 01:00:15,400
"Is it problematic that we
describe the presentation of

1039
01:00:15,400 --> 01:00:18,290
images in markup against our
typical mantra to separate

1040
01:00:18,290 --> 01:00:19,570
presentation from content?

1041
01:00:19,570 --> 01:00:22,910
And, if so, does the
specification of a myriad of

1042
01:00:22,910 --> 01:00:25,500
sizes make this worse?"

1043
01:00:25,500 --> 01:00:28,680
MARCO CACERES: So we saw this.

1044
01:00:28,680 --> 01:00:31,400
Hopefully you had the same kind
of gut reaction when you

1045
01:00:31,400 --> 01:00:34,840
saw both source set and
picture and went &mdash;

1046
01:00:34,840 --> 01:00:37,240
When you saw the code up on the
screen, and you kind of

1047
01:00:37,240 --> 01:00:39,460
went, ugh, really?

1048
01:00:39,460 --> 01:00:42,140
We have to type all those
times 1 and times 2?

1049
01:00:42,140 --> 01:00:45,340
And you saw the picture bloats
all over the place.

1050
01:00:45,340 --> 01:00:47,730
And it has media queries
in it as well.

1051
01:00:47,730 --> 01:00:50,420
So this goes straight too &mdash;

1052
01:00:50,420 --> 01:00:52,420
I know Jeffrey didn't ask that
question specifically.

1053
01:00:52,420 --> 01:00:56,620
But like he said, it's bad,
because we are putting media

1054
01:00:56,620 --> 01:01:00,552
queries into our markup.

1055
01:01:00,552 --> 01:01:01,740
What can we do there?

1056
01:01:01,740 --> 01:01:04,180
Is there possible solutions?

1057
01:01:04,180 --> 01:01:05,750
ESTELLE WEYL: So the reason
that there's a difference

1058
01:01:05,750 --> 01:01:08,400
between images and background
images is because the image

1059
01:01:08,400 --> 01:01:10,880
tag, img, is a foreground
image.

1060
01:01:10,880 --> 01:01:12,200
It's content.

1061
01:01:12,200 --> 01:01:14,960
Versus all the design that
we have on the web page.

1062
01:01:14,960 --> 01:01:17,310
So yes, we do have
to keep it &mdash;

1063
01:01:17,310 --> 01:01:19,460
the image is actually content.

1064
01:01:19,460 --> 01:01:19,930
MARCO CACERES: Right.

1065
01:01:19,930 --> 01:01:22,370
But what about the media
query component?

1066
01:01:22,370 --> 01:01:24,500
ESTELLE WEYL: The media
query should be &mdash;

1067
01:01:24,500 --> 01:01:26,280
that's why we're trying to
come up with all these

1068
01:01:26,280 --> 01:01:28,960
different solutions, and why
the picture element and the

1069
01:01:28,960 --> 01:01:30,350
source set look so ugly.

1070
01:01:30,350 --> 01:01:33,210
And actually why I like the
clown car technique, because

1071
01:01:33,210 --> 01:01:36,910
it actually separates
out the content.

1072
01:01:36,910 --> 01:01:39,150
MARCO CACERES: Just for people
who don't know the clown car

1073
01:01:39,150 --> 01:01:42,190
technique, just super,
super Twitter-sized.

1074
01:01:42,190 --> 01:01:43,550
ESTELLE WEYL: OK.

1075
01:01:43,550 --> 01:01:45,280
Three tweets.

1076
01:01:45,280 --> 01:01:49,670
It's basically instead of
pulling in an image,

1077
01:01:49,670 --> 01:01:50,790
it pulls in an SVG.

1078
01:01:50,790 --> 01:01:53,220
And inside the SVG, that's
where all the

1079
01:01:53,220 --> 01:01:54,160
media queries are.

1080
01:01:54,160 --> 01:01:57,540
So it pulls in the correct image
based on the container

1081
01:01:57,540 --> 01:01:59,270
of the SVG.

1082
01:01:59,270 --> 01:02:01,360
And it works fairly well.

1083
01:02:01,360 --> 01:02:03,630
It's basically a stopgap
solution while we're trying to

1084
01:02:03,630 --> 01:02:05,470
figure out the correct
solution.

1085
01:02:05,470 --> 01:02:09,000
But the reason that I liked
the clown car technique is

1086
01:02:09,000 --> 01:02:12,110
because it actually separated
out content from presentation

1087
01:02:12,110 --> 01:02:15,430
from behavior from images.

1088
01:02:15,430 --> 01:02:17,540
PETER MILLER: I think it
absolutely is a problem that

1089
01:02:17,540 --> 01:02:20,370
we're defining the media
queries in the HTML.

1090
01:02:20,370 --> 01:02:22,070
I don't think it's a
problem of bloat.

1091
01:02:22,070 --> 01:02:22,950
That's fine.

1092
01:02:22,950 --> 01:02:26,530
I think we can give the HTML all
the sources of the images,

1093
01:02:26,530 --> 01:02:27,740
as I was saying before.

1094
01:02:27,740 --> 01:02:31,860
But I think the problem is
illustrated in the case where,

1095
01:02:31,860 --> 01:02:36,940
let's say, on a 500 pixel-wide
screen, virtual pixels, you

1096
01:02:36,940 --> 01:02:39,340
have an image at 100% width.

1097
01:02:39,340 --> 01:02:42,190
On a 700-pixel screen, you might
actually have that image

1098
01:02:42,190 --> 01:02:45,270
at 50% width, because you've got
a second column come in.

1099
01:02:45,270 --> 01:02:48,150
And OK, fine, when I'm writing
HTML, maybe I'll

1100
01:02:48,150 --> 01:02:49,320
take that into mind.

1101
01:02:49,320 --> 01:02:51,350
But what if it's not an HTML
generation problem?

1102
01:02:51,350 --> 01:02:56,480
What if it's a render problem,
where when a user's logged in,

1103
01:02:56,480 --> 01:02:57,570
then you have a sidebar?

1104
01:02:57,570 --> 01:02:58,760
But when they're
not, you don't.

1105
01:02:58,760 --> 01:03:03,370
And in CSS, I can have the
column at 50% or 100% if it's

1106
01:03:03,370 --> 01:03:06,430
got a sibling with a
logged-in sidebar.

1107
01:03:06,430 --> 01:03:08,550
But I'm going to want a
different image source to

1108
01:03:08,550 --> 01:03:09,700
apply to that element.

1109
01:03:09,700 --> 01:03:11,500
And that's why a technique that
takes into account the

1110
01:03:11,500 --> 01:03:14,030
actual width of the image
element rather than the width

1111
01:03:14,030 --> 01:03:16,090
of the screen I think is
absolutely essential.

1112
01:03:16,090 --> 01:03:18,440
And that's why I do still
have a problem

1113
01:03:18,440 --> 01:03:20,705
with the page element.

1114
01:03:20,705 --> 01:03:22,440
MARCO CACERES: I think Yoav
will come in and &mdash;

1115
01:03:22,440 --> 01:03:23,292
YOAV WEISS: Yeah.

1116
01:03:23,292 --> 01:03:24,500
[LAUGHTER]

1117
01:03:24,500 --> 01:03:27,280
MARCO CACERES: So this is
alluding to, some people might

1118
01:03:27,280 --> 01:03:32,550
have heard about,
element queries.

1119
01:03:32,550 --> 01:03:36,050
Which is like CSS applied to a
particular container element.

1120
01:03:36,050 --> 01:03:38,900
And it's pretty cool.

1121
01:03:38,900 --> 01:03:39,990
PETER MILLER: Has
its problems.

1122
01:03:39,990 --> 01:03:42,030
MARCO CACERES: It has
its problems.

1123
01:03:42,030 --> 01:03:44,920
JONATHAN KLEIN: So actually,
they are

1124
01:03:44,920 --> 01:03:46,220
several questions here.

1125
01:03:46,220 --> 01:03:51,230
First, for the separation of
content and presentation, I

1126
01:03:51,230 --> 01:03:53,190
think it's a problem.

1127
01:03:53,190 --> 01:03:58,500
I think that this is something
that can be resolved by drying

1128
01:03:58,500 --> 01:04:02,240
out the media queries out of
HTML and into some sort of a

1129
01:04:02,240 --> 01:04:03,890
media query variable.

1130
01:04:03,890 --> 01:04:06,220
MARCO CACERES: Drying
out being?

1131
01:04:06,220 --> 01:04:08,206
YOAV WEISS: Don't
repeat yourself.

1132
01:04:08,206 --> 01:04:09,490
MARCO CACERES: Thank you.

1133
01:04:09,490 --> 01:04:15,000
YOAV WEISS: Just basically
creating variables that say

1134
01:04:15,000 --> 01:04:19,460
mobile, whatever that means.

1135
01:04:19,460 --> 01:04:23,060
Basically create named media
queries and use them instead

1136
01:04:23,060 --> 01:04:26,050
of the actual media queries
wherever you have media

1137
01:04:26,050 --> 01:04:27,360
queries in your markup.

1138
01:04:27,360 --> 01:04:32,720
Be it picture or external
style sheets, or

1139
01:04:32,720 --> 01:04:34,120
in the CSS as well.

1140
01:04:34,120 --> 01:04:37,350
There is work in the CSS Working
group regarding that.

1141
01:04:37,350 --> 01:04:42,060
I have no idea when it will
go in, but people

1142
01:04:42,060 --> 01:04:43,720
are working on it.

1143
01:04:43,720 --> 01:04:48,280
And so regarding that, I think
that will resolve most of the

1144
01:04:48,280 --> 01:04:51,700
issues that from this
separation of

1145
01:04:51,700 --> 01:04:55,680
concerns point of view.

1146
01:04:55,680 --> 01:04:56,740
MARCO CACERES: Hang on.

1147
01:04:56,740 --> 01:04:58,190
So a question I have is &mdash;

1148
01:04:58,190 --> 01:05:02,230
OK, so a picture is probably
the main offender here.

1149
01:05:02,230 --> 01:05:05,950

1150
01:05:05,950 --> 01:05:07,550
Should we even bother
to continue to work

1151
01:05:07,550 --> 01:05:08,540
on it in that sense?

1152
01:05:08,540 --> 01:05:10,900
YOAV WEISS: I don't think
picture is the

1153
01:05:10,900 --> 01:05:12,380
most visible offender.

1154
01:05:12,380 --> 01:05:16,610
But again, there are
style sheets.

1155
01:05:16,610 --> 01:05:21,680
If I'll have my way, media
attributes will be everywhere.

1156
01:05:21,680 --> 01:05:24,240
Which I probably won't
have my way.

1157
01:05:24,240 --> 01:05:27,800
But I think that there are a lot
of resources that can be

1158
01:05:27,800 --> 01:05:30,650
downloaded based on media.

1159
01:05:30,650 --> 01:05:38,290
And I think we need to have
some shortcut for media

1160
01:05:38,290 --> 01:05:40,860
queries that we don't have to
repeat them everywhere,

1161
01:05:40,860 --> 01:05:42,150
including in CSS.

1162
01:05:42,150 --> 01:05:45,180
Because in CSS, we repeat
them as well.

1163
01:05:45,180 --> 01:05:48,400
And regarding the element
queries stuff.

1164
01:05:48,400 --> 01:05:50,900
First of all, I'd like to say
that the main advantage of the

1165
01:05:50,900 --> 01:05:55,790
clown car technique versus
basically anything else is

1166
01:05:55,790 --> 01:05:59,140
that it basically emulates
element queries.

1167
01:05:59,140 --> 01:06:02,710
The media queries there referred
to the viewport of

1168
01:06:02,710 --> 01:06:06,620
the SVG, not the viewport
of the document.

1169
01:06:06,620 --> 01:06:12,370
So while it creates some
delay in download,

1170
01:06:12,370 --> 01:06:16,260
it's sometimes necessary.

1171
01:06:16,260 --> 01:06:20,610
There are cases where it's
useful, extremely useful.

1172
01:06:20,610 --> 01:06:24,530
But the problem with element
queries is that you cannot

1173
01:06:24,530 --> 01:06:28,330
start downloading the resource
before you have layout, which

1174
01:06:28,330 --> 01:06:34,136
means you add a significant
delay to the entire page load.

1175
01:06:34,136 --> 01:06:36,962
MARCO CACERES: So Ann, do you
have any comments about &mdash;

1176
01:06:36,962 --> 01:06:40,570

1177
01:06:40,570 --> 01:06:40,840
ANN ROBSON: Yeah.

1178
01:06:40,840 --> 01:06:42,680
I'm still a fan of progressive
jpegs.

1179
01:06:42,680 --> 01:06:43,330
And I think that &mdash;

1180
01:06:43,330 --> 01:06:48,470
[LAUGHTER]

1181
01:06:48,470 --> 01:06:51,470
ANN ROBSON: No, I think that
there's definitely &mdash;

1182
01:06:51,470 --> 01:06:52,910
The art direction
case, it doesn't

1183
01:06:52,910 --> 01:06:55,460
really handle, obviously.

1184
01:06:55,460 --> 01:06:57,240
But I don't think that we should
forget about it as a

1185
01:06:57,240 --> 01:07:00,370
file format that we
might explore.

1186
01:07:00,370 --> 01:07:02,140
And we often do forget about
progressive jpegs.

1187
01:07:02,140 --> 01:07:03,200
I think we forgot about
progressive

1188
01:07:03,200 --> 01:07:04,450
jpegs for 10 years.

1189
01:07:04,450 --> 01:07:07,186

1190
01:07:07,186 --> 01:07:11,162
MARCO CACERES: What is the
reason we forgot about them?

1191
01:07:11,162 --> 01:07:13,514
What browser doesn't really
support them?

1192
01:07:13,514 --> 01:07:14,764
ANN ROBSON: Oh.

1193
01:07:14,764 --> 01:07:17,760

1194
01:07:17,760 --> 01:07:19,670
I think that in general,
there's pretty

1195
01:07:19,670 --> 01:07:21,180
good browser support.

1196
01:07:21,180 --> 01:07:23,280
I think that the reason browsers
don't support them is

1197
01:07:23,280 --> 01:07:24,990
because we stopped using them.

1198
01:07:24,990 --> 01:07:28,880
And I think we stopped using
them because things changed.

1199
01:07:28,880 --> 01:07:31,340
We had a faster connections.

1200
01:07:31,340 --> 01:07:34,020
But then things kind of reverted
with mobile, and we

1201
01:07:34,020 --> 01:07:36,970
went back to where we were,
where speed turned out to be

1202
01:07:36,970 --> 01:07:38,220
an issue again.

1203
01:07:38,220 --> 01:07:42,584

1204
01:07:42,584 --> 01:07:43,506
MARCO CACERES: Cool.

1205
01:07:43,506 --> 01:07:44,430
ANN ROBSON: That's it.

1206
01:07:44,430 --> 01:07:47,990
MARCO CACERES: So there's one
question from the audience.

1207
01:07:47,990 --> 01:07:48,860
Go ahead.

1208
01:07:48,860 --> 01:07:50,270
AUDIENCE: Sounded like the best
solution for a pictured

1209
01:07:50,270 --> 01:07:53,680
element is basically to
move the rules to CSS.

1210
01:07:53,680 --> 01:07:56,610
You can go back to regular IMG
and have something that says,

1211
01:07:56,610 --> 01:08:00,370
in CSS, for all images which
have a path that looks like

1212
01:08:00,370 --> 01:08:04,400
this, then apply these rules
to add .2x to the path.

1213
01:08:04,400 --> 01:08:06,720
This allows you to move the more
presentational parts of

1214
01:08:06,720 --> 01:08:09,290
it to the CSS while still
keeping the content, namely

1215
01:08:09,290 --> 01:08:12,100
the fallback image,
in the HTML.

1216
01:08:12,100 --> 01:08:15,540
And you can use something like
a regex to not have to write

1217
01:08:15,540 --> 01:08:18,590
this 2x, that 2x, something
else 2x for 2x version of

1218
01:08:18,590 --> 01:08:21,500
every single image you have.

1219
01:08:21,500 --> 01:08:24,460
You can sort of do this right
now using attribute selectors

1220
01:08:24,460 --> 01:08:25,410
and IMG tag.

1221
01:08:25,410 --> 01:08:26,340
MARCO CACERES: Using
what selectors?

1222
01:08:26,340 --> 01:08:27,580
AUDIENCE: You can sort
of do this now

1223
01:08:27,580 --> 01:08:28,680
using attribute selectors.

1224
01:08:28,680 --> 01:08:29,510
MARCO CACERES: Attribute
selectors.

1225
01:08:29,510 --> 01:08:29,870
AUDIENCE: Yeah.

1226
01:08:29,870 --> 01:08:32,689
But one per SOC, which
would be annoying.

1227
01:08:32,689 --> 01:08:33,960
MARCO CACERES: Right.

1228
01:08:33,960 --> 01:08:34,229
Yeah.

1229
01:08:34,229 --> 01:08:36,050
So it's kind of like
a mix of things.

1230
01:08:36,050 --> 01:08:39,609
So I'm sure one of these other
guys will be able to talk

1231
01:08:39,609 --> 01:08:41,029
about their concerns there.

1232
01:08:41,029 --> 01:08:44,109
I can give a little.

1233
01:08:44,109 --> 01:08:47,100
Some of the main problem that
we're trying to solve with

1234
01:08:47,100 --> 01:08:50,960
responsive images as a whole is
integrating nicely into how

1235
01:08:50,960 --> 01:08:53,319
browsers load images and
performance wise.

1236
01:08:53,319 --> 01:09:00,350
So to block and wait for a style
sheet to download that

1237
01:09:00,350 --> 01:09:04,000
will give you the instructions
to then be able to fetch the

1238
01:09:04,000 --> 01:09:09,100
files that you need will
probably cause issues.

1239
01:09:09,100 --> 01:09:11,080
Part of the stuff that Yoav
was talking about before,

1240
01:09:11,080 --> 01:09:17,890
about these CSS-based variables
they can put in is

1241
01:09:17,890 --> 01:09:19,689
that you would need to insert
them at the top of the

1242
01:09:19,689 --> 01:09:22,620
document in line so then they
would actually parse before

1243
01:09:22,620 --> 01:09:23,490
anything else.

1244
01:09:23,490 --> 01:09:28,569
So there's big performance
issues with all this.

1245
01:09:28,569 --> 01:09:31,779
It's a cool solution,
and I'm not saying

1246
01:09:31,779 --> 01:09:32,450
that it wouldn't work.

1247
01:09:32,450 --> 01:09:35,340
But it's working out how all the
dynamics work there within

1248
01:09:35,340 --> 01:09:36,979
the browser.

1249
01:09:36,979 --> 01:09:37,670
It's pretty crazy.

1250
01:09:37,670 --> 01:09:39,482
Does anyone want to add?

1251
01:09:39,482 --> 01:09:41,140
You're all probably
ones that had a &mdash;

1252
01:09:41,140 --> 01:09:44,609
YOAV WEISS: I just want to add
that it's basically violating

1253
01:09:44,609 --> 01:09:47,790
the separation of concerns
from the

1254
01:09:47,790 --> 01:09:49,040
other side of the spectrum.

1255
01:09:49,040 --> 01:09:51,729

1256
01:09:51,729 --> 01:09:55,700
Basically, your content
is now part of your

1257
01:09:55,700 --> 01:09:58,820
presentation in a way.

1258
01:09:58,820 --> 01:10:04,235
Because the content URLs
rely on the CSS.

1259
01:10:04,235 --> 01:10:06,910

1260
01:10:06,910 --> 01:10:13,220
For CSS caching, content images
tend to change often.

1261
01:10:13,220 --> 01:10:17,780
Everything that's in
CSS usually changes

1262
01:10:17,780 --> 01:10:19,310
less often than that.

1263
01:10:19,310 --> 01:10:23,470
So it can be cached for a
while, for a long while.

1264
01:10:23,470 --> 01:10:26,340

1265
01:10:26,340 --> 01:10:30,280
It violates the layers as far
as I'm concerned, in a way.

1266
01:10:30,280 --> 01:10:32,790
MARCO CACERES: So let's
take that one up.

1267
01:10:32,790 --> 01:10:35,030
So I've got another question
from the audience.

1268
01:10:35,030 --> 01:10:36,260
And another one from &mdash;

1269
01:10:36,260 --> 01:10:37,700
So I've got a couple here.

1270
01:10:37,700 --> 01:10:40,880
I'm going to go there first,
and then we'll bounce to &mdash;

1271
01:10:40,880 --> 01:10:42,540
Sorry, you already have
the mic, so go ahead.

1272
01:10:42,540 --> 01:10:43,390
And then I'll bounce to you.

1273
01:10:43,390 --> 01:10:43,780
Sorry.

1274
01:10:43,780 --> 01:10:47,560
AUDIENCE: Just to counteract
that, how you say if you need

1275
01:10:47,560 --> 01:10:50,650
to download the CSS first in
order to display the image.

1276
01:10:50,650 --> 01:10:53,750
But that the CSS modifies the
size of the image, which could

1277
01:10:53,750 --> 01:10:55,915
modify the art direction
and the actual one

1278
01:10:55,915 --> 01:10:57,270
that you want to use.

1279
01:10:57,270 --> 01:11:00,250
Isn't that important?

1280
01:11:00,250 --> 01:11:01,850
MARCO CACERES: It is.

1281
01:11:01,850 --> 01:11:05,580
But like I said, it's all
trades and balances.

1282
01:11:05,580 --> 01:11:12,690
Because we are trying to keep
the performance high.

1283
01:11:12,690 --> 01:11:14,460
So there is going to be a
penalty for everything.

1284
01:11:14,460 --> 01:11:15,940
So where you defer.

1285
01:11:15,940 --> 01:11:18,710
Like Yoav was saying, the
separations of concern, it's

1286
01:11:18,710 --> 01:11:21,330
going to have issues
with how the images

1287
01:11:21,330 --> 01:11:22,460
are loaded and when.

1288
01:11:22,460 --> 01:11:25,050
So if the things have to be
deferred, then you might defer

1289
01:11:25,050 --> 01:11:28,280
layout, and that's going to
impact the user's perception

1290
01:11:28,280 --> 01:11:30,290
of whatever application
you're trying to run.

1291
01:11:30,290 --> 01:11:33,810
So again, we need to test
a lot of this stuff.

1292
01:11:33,810 --> 01:11:35,800
We don't know.

1293
01:11:35,800 --> 01:11:37,820
Even though we've been talking
about it, now it's really time

1294
01:11:37,820 --> 01:11:40,390
to start testing.

1295
01:11:40,390 --> 01:11:42,430
AUDIENCE: I guess I just
had more of a direct

1296
01:11:42,430 --> 01:11:43,180
question for Peter.

1297
01:11:43,180 --> 01:11:44,220
Sorry to put you on the spot.

1298
01:11:44,220 --> 01:11:48,220
But given the art direction
perspective, I was wondering

1299
01:11:48,220 --> 01:11:51,200
if you could talk a little bit
about, from your standpoint,

1300
01:11:51,200 --> 01:11:53,670
what is best practice
right now?

1301
01:11:53,670 --> 01:11:57,280
Given that it's not all just
programmers trying to do stuff

1302
01:11:57,280 --> 01:11:58,300
in an automated fashion.

1303
01:11:58,300 --> 01:12:00,560
Because every time I've tried
to do that, I fail.

1304
01:12:00,560 --> 01:12:03,380
And the art director looks to me
and is like, no, we need to

1305
01:12:03,380 --> 01:12:06,420
cop it this way instead.

1306
01:12:06,420 --> 01:12:08,180
MARCO CACERES: I want you to
answer that, but I think this

1307
01:12:08,180 --> 01:12:09,260
is a great question.

1308
01:12:09,260 --> 01:12:11,660
Because it's really
about what should

1309
01:12:11,660 --> 01:12:13,800
developers be doing today?

1310
01:12:13,800 --> 01:12:16,590
And I think John
has some ideas.

1311
01:12:16,590 --> 01:12:19,480
Ann's already talked about
let's try out these

1312
01:12:19,480 --> 01:12:21,220
progressive jpegs.

1313
01:12:21,220 --> 01:12:23,270
And Yoav and I have been working
on the standards,

1314
01:12:23,270 --> 01:12:25,620
trying to look forward.

1315
01:12:25,620 --> 01:12:27,540
Estelle's been experimenting
with the client kind of

1316
01:12:27,540 --> 01:12:29,500
techniques.

1317
01:12:29,500 --> 01:12:31,050
So we have five minutes.

1318
01:12:31,050 --> 01:12:33,820
One minute each, what can
developers do today?

1319
01:12:33,820 --> 01:12:35,120
Starting with Peter.

1320
01:12:35,120 --> 01:12:35,380
PETER MILLER: OK.

1321
01:12:35,380 --> 01:12:36,350
Well here's what we're doing.

1322
01:12:36,350 --> 01:12:41,170
We're sending lots of the jpeg
sources into the HTML as a

1323
01:12:41,170 --> 01:12:45,300
JSON string on a
data attribute.

1324
01:12:45,300 --> 01:12:50,545
We've got JavaScript running
that, after the CSS has

1325
01:12:50,545 --> 01:12:53,460
evaluated layout, will pick the
right source, and apply

1326
01:12:53,460 --> 01:12:54,665
it, and on resize, change it.

1327
01:12:54,665 --> 01:12:57,000
Yeah, the performance isn't
great for that.

1328
01:12:57,000 --> 01:13:01,300
But to answer a little of
what Yoav was saying.

1329
01:13:01,300 --> 01:13:05,810
I think that having a default
source there, low-res your

1330
01:13:05,810 --> 01:13:10,310
best guess is, I think, an OK
way to go for we have now.

1331
01:13:10,310 --> 01:13:14,110
MARCO CACERES: Ann, what do you
recommend for developers?

1332
01:13:14,110 --> 01:13:16,860
ANN ROBSON: I think that
what we have now

1333
01:13:16,860 --> 01:13:20,260
is a bunch of hacks.

1334
01:13:20,260 --> 01:13:22,990
So that's what we have.

1335
01:13:22,990 --> 01:13:24,690
I think we should
try and focus &mdash;

1336
01:13:24,690 --> 01:13:25,980
I love that we're doing this.

1337
01:13:25,980 --> 01:13:28,610
And actually, I think what we're
talking about are big

1338
01:13:28,610 --> 01:13:30,640
wins and solutions for
responsive images.

1339
01:13:30,640 --> 01:13:34,650
And I think we should really
be forward-thinking in not

1340
01:13:34,650 --> 01:13:37,120
forget all of the different
options and all of our

1341
01:13:37,120 --> 01:13:40,640
different paths and
explore them all.

1342
01:13:40,640 --> 01:13:41,890
MARCO CACERES: That's great.

1343
01:13:41,890 --> 01:13:44,320

1344
01:13:44,320 --> 01:13:48,770
YOAV WEISS: I think that all
current hacks have performance

1345
01:13:48,770 --> 01:13:49,850
trade offs.

1346
01:13:49,850 --> 01:13:53,900
All current hacks, basically,
you're deferring the loading

1347
01:13:53,900 --> 01:13:58,180
of the image to a later time
in order to download the

1348
01:13:58,180 --> 01:14:00,040
appropriate one.

1349
01:14:00,040 --> 01:14:05,580
I think that things
will look up soon.

1350
01:14:05,580 --> 01:14:08,210
Things will get better soon.

1351
01:14:08,210 --> 01:14:10,540
There is currently work in the
Responsive Images Community

1352
01:14:10,540 --> 01:14:14,400
Group on an x-picture
polyfill &mdash;

1353
01:14:14,400 --> 01:14:15,620
MARCO CACERES: --web
components.

1354
01:14:15,620 --> 01:14:19,675
YOAV WEISS: --that uses web
components in order to emulate

1355
01:14:19,675 --> 01:14:20,990
the picture.

1356
01:14:20,990 --> 01:14:25,380
It won't work with
the preloader.

1357
01:14:25,380 --> 01:14:31,710
But if you don't have any
blocking scripts at the page's

1358
01:14:31,710 --> 01:14:35,610
top, it should have similar
performance

1359
01:14:35,610 --> 01:14:37,750
characteristics as image.

1360
01:14:37,750 --> 01:14:41,850
So current hacks all
have problems.

1361
01:14:41,850 --> 01:14:45,020
Future hacks will get better.

1362
01:14:45,020 --> 01:14:47,110
And then there is
a Source Set.

1363
01:14:47,110 --> 01:14:48,580
Hopefully it will ship &mdash;

1364
01:14:48,580 --> 01:14:50,920
MARCO CACERES: Soon enough.

1365
01:14:50,920 --> 01:14:55,010
YOAV WEISS: --in a release
build soon enough.

1366
01:14:55,010 --> 01:14:56,030
MARCO CACERES: OK.

1367
01:14:56,030 --> 01:14:57,820
ESTELLE WEYL: So I guess the
question is what developers

1368
01:14:57,820 --> 01:14:58,630
should be doing now.

1369
01:14:58,630 --> 01:15:01,480
And what developers should be
do now is being concerned

1370
01:15:01,480 --> 01:15:03,980
about what they're sending over
the wires and making sure

1371
01:15:03,980 --> 01:15:06,700
that they're not sending
huge assets to

1372
01:15:06,700 --> 01:15:08,480
limited bandwidth devices.

1373
01:15:08,480 --> 01:15:13,440
And in terms of what we should
be doing is, the spec author

1374
01:15:13,440 --> 01:15:14,780
should be doing, is
we should also &mdash;

1375
01:15:14,780 --> 01:15:17,810
I think what I haven't heard,
and I just thought of while I

1376
01:15:17,810 --> 01:15:21,670
was on stage &mdash; so I don't know,
maybe it has been &mdash;

1377
01:15:21,670 --> 01:15:24,670
there's the image element
you can clip and

1378
01:15:24,670 --> 01:15:26,370
pick certain areas.

1379
01:15:26,370 --> 01:15:30,720
So maybe figuring out a way to
do that on the back end or

1380
01:15:30,720 --> 01:15:32,330
through Client Hint so that
you're actually just

1381
01:15:32,330 --> 01:15:34,630
downloading based on that
instead of downloading the

1382
01:15:34,630 --> 01:15:35,190
whole image.

1383
01:15:35,190 --> 01:15:35,350
MARCO CACERES: Right.

1384
01:15:35,350 --> 01:15:36,560
So just expanding on that one.

1385
01:15:36,560 --> 01:15:38,030
It's basically just taking &mdash;

1386
01:15:38,030 --> 01:15:40,470
you have your normal image, and
then you select the area

1387
01:15:40,470 --> 01:15:41,430
that you want to crop out.

1388
01:15:41,430 --> 01:15:44,150
And basically you just
crop it out with CSS.

1389
01:15:44,150 --> 01:15:45,550
It's a good way of doing
art direction.

1390
01:15:45,550 --> 01:15:48,836
And it fits quite well with
compressive images as well.

1391
01:15:48,836 --> 01:15:50,936
JOHN MELLOR: So I'll give
several answers.

1392
01:15:50,936 --> 01:15:53,116
For CSS, you can just use media
queries to switch out

1393
01:15:53,116 --> 01:15:54,380
the right image.

1394
01:15:54,380 --> 01:15:56,270
It's in a better state
these days.

1395
01:15:56,270 --> 01:15:58,800
For HTML, there's a few
different things.

1396
01:15:58,800 --> 01:16:01,150
For fixed-size images, if you're
just switching based on

1397
01:16:01,150 --> 01:16:04,100
device-pixel ratio, compressive
images, like

1398
01:16:04,100 --> 01:16:06,950
serving a double-size but highly
compressed image, is

1399
01:16:06,950 --> 01:16:08,590
reasonable.

1400
01:16:08,590 --> 01:16:12,550
Source Set will be nice, but
only once browsers support it.

1401
01:16:12,550 --> 01:16:14,820
For viewport-based switching,
where you need to take into

1402
01:16:14,820 --> 01:16:18,920
account flexible images, I think
the best solution these

1403
01:16:18,920 --> 01:16:23,770
days is to load a very
low-quality placeholder which

1404
01:16:23,770 --> 01:16:26,000
is directly referenced
from your HTML.

1405
01:16:26,000 --> 01:16:29,100
And then, later on, using
Javascript, you swap it out

1406
01:16:29,100 --> 01:16:32,800
with an appropriate-resolution
image, based on the actual

1407
01:16:32,800 --> 01:16:33,760
image size or whatever.

1408
01:16:33,760 --> 01:16:35,140
MARCO CACERES: And would
you use the classic &mdash;

1409
01:16:35,140 --> 01:16:36,060
I don't know even know
if this works here.

1410
01:16:36,060 --> 01:16:40,835
But there was a low source,
low SRC attribute on HTML.

1411
01:16:40,835 --> 01:16:41,640
JOHN MELLOR: I just use SRC.

1412
01:16:41,640 --> 01:16:44,750
So put the locals you want in
SRC and use JavaScript to

1413
01:16:44,750 --> 01:16:47,360
replace that with a better
quality one once you've loaded

1414
01:16:47,360 --> 01:16:49,170
that in the background.

1415
01:16:49,170 --> 01:16:50,570
So you get kind of this
progressive thing.

1416
01:16:50,570 --> 01:16:53,000
Where the page loads in low
quality quickly, and gradually

1417
01:16:53,000 --> 01:16:54,990
becomes higher quality.

1418
01:16:54,990 --> 01:16:57,730
So I actually released the
library for this yesterday.

1419
01:16:57,730 --> 01:16:58,980
It's on GitHub.com/JohnM
ellor/RespSwap.js.

1420
01:16:58,980 --> 01:17:02,980

1421
01:17:02,980 --> 01:17:05,660
Very early stages.

1422
01:17:05,660 --> 01:17:08,110
Finally, for art direction,
where you actually need a

1423
01:17:08,110 --> 01:17:10,270
different image, rather than
just a different resolution,

1424
01:17:10,270 --> 01:17:12,320
the same image.

1425
01:17:12,320 --> 01:17:14,550
You can't load a low-quality
placeholder because you don't

1426
01:17:14,550 --> 01:17:16,360
know what image it's
going to be.

1427
01:17:16,360 --> 01:17:18,680
And so for that, you
can something like

1428
01:17:18,680 --> 01:17:20,850
Picturefill or whatever.

1429
01:17:20,850 --> 01:17:24,400
But don't use Picturefill
for report switching.

1430
01:17:24,400 --> 01:17:26,140
MARCO CACERES: So Picturefill,
for people who don't

1431
01:17:26,140 --> 01:17:27,340
know what that is.

1432
01:17:27,340 --> 01:17:29,820
Picturefill, you
can Google it.

1433
01:17:29,820 --> 01:17:30,470
You'll find it pretty quick.

1434
01:17:30,470 --> 01:17:34,930
And it's basically similar
syntax to the picture element,

1435
01:17:34,930 --> 01:17:39,460
but done with, I think divs
and spans or something.

1436
01:17:39,460 --> 01:17:40,960
But it basically works.

1437
01:17:40,960 --> 01:17:43,370
JOHN MELLOR: But a downside is
that the images don't load

1438
01:17:43,370 --> 01:17:46,570
until the page is fully finished
loading and you've

1439
01:17:46,570 --> 01:17:48,250
reached DOMContentLoaded.

1440
01:17:48,250 --> 01:17:51,620
And so your images will start
loading much later than if

1441
01:17:51,620 --> 01:17:54,600
you've got a placeholder
or something.

1442
01:17:54,600 --> 01:17:59,870
YOAV WEISS: Just to emphasize on
that, Picturefill should be

1443
01:17:59,870 --> 01:18:05,600
used for art direction and not
for resolution switching.

1444
01:18:05,600 --> 01:18:06,690
ESTELLE WEYL: I'd like
to add one comment.

1445
01:18:06,690 --> 01:18:09,120
With the Picturefill, the reason
that it's an issue is

1446
01:18:09,120 --> 01:18:12,170
because it's on
DOMContentLoaded.

1447
01:18:12,170 --> 01:18:15,780
We should make on
DOMContentLoaded much faster.

1448
01:18:15,780 --> 01:18:19,340
It shouldn't be taking 10
seconds to download your page.

1449
01:18:19,340 --> 01:18:21,175
And that's one thing we should
definitely work on is &mdash;

1450
01:18:21,175 --> 01:18:22,640
MARCO CACERES: That one, I think
we'll hopefully cover it

1451
01:18:22,640 --> 01:18:24,320
in one of the other sessions.

1452
01:18:24,320 --> 01:18:25,520
Because that's part of
the performancing.

1453
01:18:25,520 --> 01:18:28,810
So there is work around that
that we would basically say.

1454
01:18:28,810 --> 01:18:30,070
I'm just wrapping up here
for the session.

1455
01:18:30,070 --> 01:18:33,140
But it basically would just
say, my page is ready now.

1456
01:18:33,140 --> 01:18:37,660
So as an author, you say, forget
DOMContentLoaded, but

1457
01:18:37,660 --> 01:18:38,800
page is done!

1458
01:18:38,800 --> 01:18:42,700
And you send a fake
DOMContentLoaded that

1459
01:18:42,700 --> 01:18:46,700
indicates to the browser, now
I'm ready to do other stuff.

1460
01:18:46,700 --> 01:18:50,990
So please join me in thanking
the panel here.

1461
01:18:50,990 --> 01:19:02,130
[APPLAUSE]

1462
01:19:02,130 --> 01:19:04,066
ANDREW BETTS: [INAUDIBLE]

1463
01:19:04,066 --> 01:19:04,550
MARCO CACERES: Sorry?

1464
01:19:04,550 --> 01:19:06,002
ANDREW BETTS: You didn't
give the caveat.

1465
01:19:06,002 --> 01:19:07,940
[INAUDIBLE]

1466
01:19:07,940 --> 01:19:09,820
Thanks guys.

1467
01:19:09,820 --> 01:19:11,910
So sorry about the technical
problems in the first session.

1468
01:19:11,910 --> 01:19:13,290
We have a web server
that we evidently

1469
01:19:13,290 --> 01:19:15,170
need to reboot somewhere.

1470
01:19:15,170 --> 01:19:17,380
So while we do that,
let's crack on

1471
01:19:17,380 --> 01:19:18,230
with the second session.

1472
01:19:18,230 --> 01:19:22,160
So we have Andre Behrens from
"The New York Times," who will

1473
01:19:22,160 --> 01:19:25,370
be leading our Rendering
Performance session.

1474
01:19:25,370 --> 01:19:28,200
We'll start off just
as we are.

1475
01:19:28,200 --> 01:19:30,040
So if you have a question,
just raise your hand.

1476
01:19:30,040 --> 01:19:33,780
And as soon as we can get the
moderation tool working, we'll

1477
01:19:33,780 --> 01:19:34,653
be switching to that.

1478
01:19:34,653 --> 01:19:38,120
Thanks for your patience, and
help me welcome Andre Behrens.

1479
01:19:38,120 --> 01:19:44,940
[APPLAUSE]

1480
01:19:44,940 --> 01:19:46,505
ANDRE BEHRENS: If everyone
could just come up.

1481
01:19:46,505 --> 01:19:49,195

1482
01:19:49,195 --> 01:19:51,570
Hey, Paul.

1483
01:19:51,570 --> 01:19:51,890
Hey.

1484
01:19:51,890 --> 01:19:54,610
How you doing?

1485
01:19:54,610 --> 01:19:54,880
OK.

1486
01:19:54,880 --> 01:19:57,210
So we're going about rendering
performance.

1487
01:19:57,210 --> 01:19:59,940
Or as I like to think of it, the
war on purple and green.

1488
01:19:59,940 --> 01:20:01,585
I'm sure you've engaged
in that yourselves

1489
01:20:01,585 --> 01:20:03,760
from time to time.

1490
01:20:03,760 --> 01:20:11,355
On our panel today we have Josh
Peek from GitHub, Ariya

1491
01:20:11,355 --> 01:20:14,380
Hidayat from Sencha.

1492
01:20:14,380 --> 01:20:18,600
We have our opening speaker,
Jonathan Klein from Etsy.

1493
01:20:18,600 --> 01:20:20,910
We have Paul Lewis
from Google.

1494
01:20:20,910 --> 01:20:22,890
And we have Eli Fidler
from BlackBerry.

1495
01:20:22,890 --> 01:20:25,825
So let's just go in with
the presentation.

1496
01:20:25,825 --> 01:20:27,484
You ready to go?

1497
01:20:27,484 --> 01:20:30,440
JONATHAN KLEIN: I'm going to
put this up on the screen.

1498
01:20:30,440 --> 01:20:31,690
ANDRE BEHRENS: Can we get
the presentation on?

1499
01:20:31,690 --> 01:20:34,850

1500
01:20:34,850 --> 01:20:37,250
JONATHAN KLEIN: Cool.

1501
01:20:37,250 --> 01:20:39,006
OK.

1502
01:20:39,006 --> 01:20:40,678
When we talk about rendering
performance, we're really

1503
01:20:40,678 --> 01:20:42,360
talking about this
number here.

1504
01:20:42,360 --> 01:20:46,220
Most monitors and devices we
have today are rendered &mdash;

1505
01:20:46,220 --> 01:20:48,190
ANDRE BEHRENS: Mic.

1506
01:20:48,190 --> 01:20:48,460
JONATHAN KLEIN: Hey.

1507
01:20:48,460 --> 01:20:48,990
That's a lot better.

1508
01:20:48,990 --> 01:20:50,170
Thanks.

1509
01:20:50,170 --> 01:20:52,780
Most monitors and devices we
have today are rendering at

1510
01:20:52,780 --> 01:20:54,550
about 60 frames per second.

1511
01:20:54,550 --> 01:20:56,240
So we talk about rendering
performance, we're really

1512
01:20:56,240 --> 01:20:59,000
talking about trying to get your
application to render at

1513
01:20:59,000 --> 01:21:01,180
60 frames per second with
all animations, with

1514
01:21:01,180 --> 01:21:03,660
scrolling, et cetera.

1515
01:21:03,660 --> 01:21:06,200
If you do the math on this,
it means that we have 16.6

1516
01:21:06,200 --> 01:21:09,400
milliseconds, approximately,
to get a paint event done.

1517
01:21:09,400 --> 01:21:11,320
So any time you have a paint
event that's taking longer

1518
01:21:11,320 --> 01:21:14,070
than that to render on your
page, you're going to get jank

1519
01:21:14,070 --> 01:21:14,650
on the page.

1520
01:21:14,650 --> 01:21:17,410
And it's going to be slow.

1521
01:21:17,410 --> 01:21:19,920
Luckily, we have tools today
that make this pretty easy to

1522
01:21:19,920 --> 01:21:21,270
see what's going on.

1523
01:21:21,270 --> 01:21:22,880
This is an example of
Chrome DevTools.

1524
01:21:22,880 --> 01:21:24,830
All you do is turn
on the continuous

1525
01:21:24,830 --> 01:21:26,330
page repainting mode.

1526
01:21:26,330 --> 01:21:28,500
And in the upper right section
of the page, you'll get a nice

1527
01:21:28,500 --> 01:21:30,000
meter that tells you
exactly how long

1528
01:21:30,000 --> 01:21:31,310
the paints are taking.

1529
01:21:31,310 --> 01:21:32,590
This is on the Edge
Conf website.

1530
01:21:32,590 --> 01:21:34,960
You can see here,
2.7 milliseconds

1531
01:21:34,960 --> 01:21:35,480
for this paint event.

1532
01:21:35,480 --> 01:21:37,580
And then there's a meter on the
right there that says it's

1533
01:21:37,580 --> 01:21:40,280
ranging between 2.6 and 4.6.

1534
01:21:40,280 --> 01:21:42,070
This is a very, very
fast paints.

1535
01:21:42,070 --> 01:21:45,830
If our budget is 16.6
milliseconds, then 2.7 is well

1536
01:21:45,830 --> 01:21:47,620
within that budget.

1537
01:21:47,620 --> 01:21:49,620
And as you scroll the page,
this meter will adjust

1538
01:21:49,620 --> 01:21:51,080
depending on how long the
paints are taking.

1539
01:21:51,080 --> 01:21:54,940
So any time you see this meter
spike above 16.6 milliseconds,

1540
01:21:54,940 --> 01:21:57,620
you're going to get that jank
that I talked about.

1541
01:21:57,620 --> 01:21:59,630
And jank is something that
I'm sure we've all seen.

1542
01:21:59,630 --> 01:22:02,700
It's basically when you're
scrolling a page and it hangs,

1543
01:22:02,700 --> 01:22:05,010
or animation is happening
and you can't scroll.

1544
01:22:05,010 --> 01:22:07,760
Anytime where the page
performance drops below 60

1545
01:22:07,760 --> 01:22:08,910
frames per second.

1546
01:22:08,910 --> 01:22:11,670
And again, this happens pretty
widely on the web today.

1547
01:22:11,670 --> 01:22:12,830
And it's a pretty big problem.

1548
01:22:12,830 --> 01:22:18,790
And that's the term that's
been generated for it.

1549
01:22:18,790 --> 01:22:19,720
What causes jank?

1550
01:22:19,720 --> 01:22:20,650
Now that we know what it is.

1551
01:22:20,650 --> 01:22:23,630
Well, this slide I pulled
directly from the Jank Busters

1552
01:22:23,630 --> 01:22:25,730
Google I/O talk earlier
this year.

1553
01:22:25,730 --> 01:22:27,840
And I think it gives a good
overview of the main things

1554
01:22:27,840 --> 01:22:30,210
that are important
to think about.

1555
01:22:30,210 --> 01:22:32,110
These things really fall
into two categories.

1556
01:22:32,110 --> 01:22:36,160
So first is unnecessary
paints.

1557
01:22:36,160 --> 01:22:38,300
So this is if you have, maybe
your paints are fast, but you

1558
01:22:38,300 --> 01:22:39,580
have too many of them.

1559
01:22:39,580 --> 01:22:41,920
So you try to jam hundreds
of paints into a

1560
01:22:41,920 --> 01:22:42,870
single scroll event.

1561
01:22:42,870 --> 01:22:44,430
And that's just not going to
perform well, no matter what

1562
01:22:44,430 --> 01:22:45,490
you're doing.

1563
01:22:45,490 --> 01:22:47,390
And the other category
is long paints.

1564
01:22:47,390 --> 01:22:49,240
So these are examples where you
might have a single paint

1565
01:22:49,240 --> 01:22:51,470
event, but it takes more
than your budget of 60

1566
01:22:51,470 --> 01:22:54,710
milliseconds to render.

1567
01:22:54,710 --> 01:22:56,370
And there are some examples
here of different event

1568
01:22:56,370 --> 01:22:59,020
handlers that can cause that
problem, CSS issues, and just

1569
01:22:59,020 --> 01:23:02,040
visually complex pages.

1570
01:23:02,040 --> 01:23:03,550
Why do we care about jank?

1571
01:23:03,550 --> 01:23:05,270
Why do we care about rendering
performance in general?

1572
01:23:05,270 --> 01:23:07,310
People have talked a lot
historically about page

1573
01:23:07,310 --> 01:23:10,660
performance itself, but this
idea of rendering performance

1574
01:23:10,660 --> 01:23:13,470
is fairly new.

1575
01:23:13,470 --> 01:23:15,500
During Edge London earlier
this year, we heard Shane

1576
01:23:15,500 --> 01:23:18,240
O'Sullivan say that Facebook
artificially lowered the frame

1577
01:23:18,240 --> 01:23:21,610
rate on their iOS and Android
apps from 60 frames per second

1578
01:23:21,610 --> 01:23:24,300
down to 30 frames per second,
and engagement collapsed,

1579
01:23:24,300 --> 01:23:26,320
according to him.

1580
01:23:26,320 --> 01:23:28,020
On a native app, it's
pretty easy to get

1581
01:23:28,020 --> 01:23:29,620
60 frames per second.

1582
01:23:29,620 --> 01:23:31,920
If you get down to 30,
that's pretty bad.

1583
01:23:31,920 --> 01:23:33,990
So they artificially did this
to, he said, a small

1584
01:23:33,990 --> 01:23:35,630
[INAUDIBLE] of the users,
maybe a few

1585
01:23:35,630 --> 01:23:37,220
dozen million users.

1586
01:23:37,220 --> 01:23:38,320
[LAUGHS]

1587
01:23:38,320 --> 01:23:40,100
And it caused major problems.

1588
01:23:40,100 --> 01:23:43,080
At Etsy, we did a similar test,
in the sense that we

1589
01:23:43,080 --> 01:23:46,170
started prefetching JavaScript
on our search results page.

1590
01:23:46,170 --> 01:23:48,330
When the JavaScript came down
the pipe and was actually

1591
01:23:48,330 --> 01:23:51,530
executed by the browser,
we got janky behavior.

1592
01:23:51,530 --> 01:23:53,690
So essentially, you'd see in
the Chrome console that the

1593
01:23:53,690 --> 01:23:56,090
JavaScript came in,
and then the page

1594
01:23:56,090 --> 01:23:56,810
performance would degrade.

1595
01:23:56,810 --> 01:23:59,020
You couldn't scroll the page
and it was really nasty.

1596
01:23:59,020 --> 01:24:01,060
We were monitoring all the
business metrics on this page

1597
01:24:01,060 --> 01:24:02,670
when we were testing
this change out.

1598
01:24:02,670 --> 01:24:05,410
And as soon as we rolled it out,
the business metrics got

1599
01:24:05,410 --> 01:24:06,960
a lot worse across the board.

1600
01:24:06,960 --> 01:24:07,600
So we rolled it back.

1601
01:24:07,600 --> 01:24:09,260
And we were unable to make that
change with the current

1602
01:24:09,260 --> 01:24:11,570
implementation.

1603
01:24:11,570 --> 01:24:15,670
This is all to say that right
now, in many cases, rendering

1604
01:24:15,670 --> 01:24:18,050
performance is more important
than full-page performance.

1605
01:24:18,050 --> 01:24:20,370
If your page is fully loaded,
you might think, OK, I'm done.

1606
01:24:20,370 --> 01:24:21,730
It happened quickly,
that's fine.

1607
01:24:21,730 --> 01:24:23,855
But if the user can't scroll and
interact with the page, or

1608
01:24:23,855 --> 01:24:26,360
your animations are slow, it's
going to really torpedo

1609
01:24:26,360 --> 01:24:29,130
engagement.

1610
01:24:29,130 --> 01:24:29,870
How do we fix it?

1611
01:24:29,870 --> 01:24:33,190
Well, that previous slide I put
up has some good advice.

1612
01:24:33,190 --> 01:24:35,840
Basically, we just use the tools
that exist today to hunt

1613
01:24:35,840 --> 01:24:38,730
down these painful repaints
or unnecessary repaints

1614
01:24:38,730 --> 01:24:40,780
and then fix them.

1615
01:24:40,780 --> 01:24:43,420
Again, these things come from
visually complex elements.

1616
01:24:43,420 --> 01:24:45,240
But luckily, the designers
are telling us today

1617
01:24:45,240 --> 01:24:46,630
that flat is cool.

1618
01:24:46,630 --> 01:24:50,450
So it's very easy to have a
nice site and a fast site.

1619
01:24:50,450 --> 01:24:52,650
All you do is just have a
flat, no gradients, no

1620
01:24:52,650 --> 01:24:54,250
background images, no nothing.

1621
01:24:54,250 --> 01:24:55,380
Just flat colors.

1622
01:24:55,380 --> 01:24:58,420
And then you're good
to go on all front.

1623
01:24:58,420 --> 01:25:00,710
But seriously, what are some
real techniques that we can

1624
01:25:00,710 --> 01:25:02,900
talk about today that make
an impact on rendering

1625
01:25:02,900 --> 01:25:04,640
performance?

1626
01:25:04,640 --> 01:25:06,610
The first is using
requestAnimationFrame instead

1627
01:25:06,610 --> 01:25:08,160
of setTimeout.

1628
01:25:08,160 --> 01:25:10,940
Historically, if you want to
execute something on an often

1629
01:25:10,940 --> 01:25:13,800
basis, but not as quickly as
possible, you use setTimeout

1630
01:25:13,800 --> 01:25:16,810
in JavaScript to delay that
event a given number of

1631
01:25:16,810 --> 01:25:17,800
milliseconds.

1632
01:25:17,800 --> 01:25:19,920
And people would do things like
take 1,000 milliseconds,

1633
01:25:19,920 --> 01:25:22,300
divide by et cetera
to try to get 16.6

1634
01:25:22,300 --> 01:25:24,090
millisecond execution times.

1635
01:25:24,090 --> 01:25:26,670
But we'd rather have people
use, going forward,

1636
01:25:26,670 --> 01:25:27,870
requestAnimationFrame.

1637
01:25:27,870 --> 01:25:30,850
This is a native browser API
that can optimize these

1638
01:25:30,850 --> 01:25:31,970
rendering events.

1639
01:25:31,970 --> 01:25:33,480
It can do things like turn
off the animation

1640
01:25:33,480 --> 01:25:34,950
so the tab is hidden.

1641
01:25:34,950 --> 01:25:37,560
It can optimize battery usage
on mobile devices.

1642
01:25:37,560 --> 01:25:39,140
And since it's a native browser
API, it's just going

1643
01:25:39,140 --> 01:25:41,500
to be more efficient at
doing animations.

1644
01:25:41,500 --> 01:25:43,780
Support across browsers is
pretty good, certainly in

1645
01:25:43,780 --> 01:25:44,430
modern browsers.

1646
01:25:44,430 --> 01:25:46,480
You can shim it for older
versions of IE.

1647
01:25:46,480 --> 01:25:47,750
But it's well-supported
across all

1648
01:25:47,750 --> 01:25:51,130
modern versions of browsers.

1649
01:25:51,130 --> 01:25:53,610
Another thing to point out is
that consistent frame rate is

1650
01:25:53,610 --> 01:25:56,010
better than a high, variable
frame rate.

1651
01:25:56,010 --> 01:25:58,380
So if you can get your page to
render consistently at 40

1652
01:25:58,380 --> 01:26:00,570
frames per second the entire
time, that's better than

1653
01:26:00,570 --> 01:26:02,690
having it render at 60
sometimes, but as soon as the

1654
01:26:02,690 --> 01:26:06,290
user scrolls or an animation
fires, it drops down to 30 and

1655
01:26:06,290 --> 01:26:07,680
bounces back and forth.

1656
01:26:07,680 --> 01:26:09,290
That's a terrible experience
for end users.

1657
01:26:09,290 --> 01:26:11,200
So you want to make sure that
the page is rendering in a

1658
01:26:11,200 --> 01:26:12,450
consistent fashion.

1659
01:26:12,450 --> 01:26:14,720

1660
01:26:14,720 --> 01:26:16,230
Another technique is
to paint less.

1661
01:26:16,230 --> 01:26:17,680
So we talked about how
having too many

1662
01:26:17,680 --> 01:26:19,150
paints can be an issue.

1663
01:26:19,150 --> 01:26:21,160
A lot of time, this comes down
to just bashing your paints

1664
01:26:21,160 --> 01:26:23,370
together and trying to do these
large updates to the

1665
01:26:23,370 --> 01:26:25,030
screen fewer times.

1666
01:26:25,030 --> 01:26:27,270
So just one slightly larger
paint that's still within your

1667
01:26:27,270 --> 01:26:31,320
budget of 60 milliseconds, but
not having tons of paints that

1668
01:26:31,320 --> 01:26:32,910
execute on every scroll
event, or every

1669
01:26:32,910 --> 01:26:35,380
hover event, et cetera.

1670
01:26:35,380 --> 01:26:37,240
You can consider the
translateZ hack.

1671
01:26:37,240 --> 01:26:39,190
We have some experts on the
panel here today that can talk

1672
01:26:39,190 --> 01:26:39,940
more about that.

1673
01:26:39,940 --> 01:26:42,780
But essentially, when you add
translateZ(0) to an element in

1674
01:26:42,780 --> 01:26:45,010
CSS, it doesn't actually
animate that element.

1675
01:26:45,010 --> 01:26:47,410
Bu it does move it to a
different compositing layer,

1676
01:26:47,410 --> 01:26:49,220
which can be very useful for
something that's being painted

1677
01:26:49,220 --> 01:26:49,940
very often.

1678
01:26:49,940 --> 01:26:51,340
So it'll get put under
the GPU, and the GPU

1679
01:26:51,340 --> 01:26:54,000
can optimize that.

1680
01:26:54,000 --> 01:26:57,220
Speaking of the GPU, you want to
make sure you're optimizing

1681
01:26:57,220 --> 01:27:00,022
how often you're uploading
textures to the GPU.

1682
01:27:00,022 --> 01:27:02,960
The GPU is extremely good at
manipulating textures that

1683
01:27:02,960 --> 01:27:04,230
have been shipped to it.

1684
01:27:04,230 --> 01:27:08,320
But if you saturate that bus
between the CPU and the GPU by

1685
01:27:08,320 --> 01:27:11,020
trying to push textures back
and forth, you're going to

1686
01:27:11,020 --> 01:27:11,930
have problems.

1687
01:27:11,930 --> 01:27:14,690
So this really comes down to
understanding when your

1688
01:27:14,690 --> 01:27:17,330
forcing stuff to go to the GPU,
and trying to make sure

1689
01:27:17,330 --> 01:27:18,290
you're not doing
that too much.

1690
01:27:18,290 --> 01:27:19,520
But doing it enough
to leverage it

1691
01:27:19,520 --> 01:27:22,440
when it make sense.

1692
01:27:22,440 --> 01:27:24,240
And then finally, this comes
from a post that was written

1693
01:27:24,240 --> 01:27:27,380
by Paul Lewis, one of our
panelists, over here.

1694
01:27:27,380 --> 01:27:30,450
"Don't guess it, test it." It's
really hard to give you

1695
01:27:30,450 --> 01:27:32,890
hard and fast rules for
rendering performance on the

1696
01:27:32,890 --> 01:27:35,940
web today, because they're
so specific to the site

1697
01:27:35,940 --> 01:27:37,290
characteristics.

1698
01:27:37,290 --> 01:27:39,470
It can be a single animation
that's causing your problems.

1699
01:27:39,470 --> 01:27:42,040
It can be a single CSS
rule in some cases.

1700
01:27:42,040 --> 01:27:44,450
So it really comes down to using
the tools to find out

1701
01:27:44,450 --> 01:27:47,130
where your page is slow.

1702
01:27:47,130 --> 01:27:49,290
If you want more resources,
there's a great site put

1703
01:27:49,290 --> 01:27:51,580
together some folks at
Google, JankFree.org.

1704
01:27:51,580 --> 01:27:55,350
It aggregates slides, videos,
and articles about this topic.

1705
01:27:55,350 --> 01:27:57,315
And there's a lot of excellent
information on there.

1706
01:27:57,315 --> 01:28:01,130
And with that, I'm going to
turn it over to the panel.

1707
01:28:01,130 --> 01:28:02,530
ANDRE BEHRENS: You
want to switch?

1708
01:28:02,530 --> 01:28:03,890
Here, you hold onto that.

1709
01:28:03,890 --> 01:28:05,140
JONATHAN KLEIN: OK.

1710
01:28:05,140 --> 01:28:09,614

1711
01:28:09,614 --> 01:28:10,582
MALE SPEAKER: [INAUDIBLE]

1712
01:28:10,582 --> 01:28:11,832
ANDRE BEHRENS: OK.

1713
01:28:11,832 --> 01:28:13,970

1714
01:28:13,970 --> 01:28:18,480
We're going to try and get up
the contribution screen here.

1715
01:28:18,480 --> 01:28:19,670
MALE SPEAKER: There you go.

1716
01:28:19,670 --> 01:28:22,000
ANDRE BEHRENS: Beautiful.

1717
01:28:22,000 --> 01:28:22,180
OK.

1718
01:28:22,180 --> 01:28:26,240
So let's go to our first
question, Pete Miller.

1719
01:28:26,240 --> 01:28:27,490
Someone get a microphone
to Pete.

1720
01:28:27,490 --> 01:28:30,800

1721
01:28:30,800 --> 01:28:32,050
PETER MILLER: [INAUDIBLE]
question.

1722
01:28:32,050 --> 01:28:33,760

1723
01:28:33,760 --> 01:28:35,210
So anonymous question here.

1724
01:28:35,210 --> 01:28:38,875
If there were a YSlow for
rendering performance, what

1725
01:28:38,875 --> 01:28:40,420
would its tests be?

1726
01:28:40,420 --> 01:28:42,260
What changes would be easiest
to implement.

1727
01:28:42,260 --> 01:28:45,245
And which would have
the biggest impact?

1728
01:28:45,245 --> 01:28:45,700
All right.

1729
01:28:45,700 --> 01:28:46,800
Someone form the panel
want to go?

1730
01:28:46,800 --> 01:28:49,780
Paul, do you have an
idea for that one?

1731
01:28:49,780 --> 01:28:52,730
PAUL LEWIS: I think we covered
this in the introduction talk.

1732
01:28:52,730 --> 01:28:55,790
A YSlow for rendering
performance is &mdash;

1733
01:28:55,790 --> 01:28:58,970
I won't go so far as to say
useless, but it's going to be

1734
01:28:58,970 --> 01:28:59,650
very difficult.

1735
01:28:59,650 --> 01:29:01,530
Because what are we're
looking for?

1736
01:29:01,530 --> 01:29:02,920
We're looking for
layout problems.

1737
01:29:02,920 --> 01:29:04,960
What triggers the
layout problem?

1738
01:29:04,960 --> 01:29:06,280
Is it that you clicked
this button up

1739
01:29:06,280 --> 01:29:07,420
here in the top corner?

1740
01:29:07,420 --> 01:29:09,990
Is that you were scrolling and
we did something Parallaxy and

1741
01:29:09,990 --> 01:29:11,760
that caused a layout problem?

1742
01:29:11,760 --> 01:29:14,950
You start to get into very,
very specific to your

1743
01:29:14,950 --> 01:29:18,880
application where your problems
are going to show up.

1744
01:29:18,880 --> 01:29:22,070
So having an automated
testing framework

1745
01:29:22,070 --> 01:29:22,910
is going to be tricky.

1746
01:29:22,910 --> 01:29:24,540
That's not to say we
shouldn't try it.

1747
01:29:24,540 --> 01:29:27,230
But it's not always going to
be the easiest thing to do.

1748
01:29:27,230 --> 01:29:29,520
So it's something that you'd run
into YSlow, where it goes,

1749
01:29:29,520 --> 01:29:31,340
hey, you did this,
and you did this.

1750
01:29:31,340 --> 01:29:32,150
We should look at it.

1751
01:29:32,150 --> 01:29:35,480
But I'm not at this point
sure how broadly

1752
01:29:35,480 --> 01:29:37,410
effective it would be.

1753
01:29:37,410 --> 01:29:38,660
JONATHAN KLEIN: Yeah.

1754
01:29:38,660 --> 01:29:40,500

1755
01:29:40,500 --> 01:29:42,320
I think it's really hard
to automate that.

1756
01:29:42,320 --> 01:29:47,460
But because YSlow is partly
used as an on-demand tool,

1757
01:29:47,460 --> 01:29:49,800
that's what the dev tools
provide for you today.

1758
01:29:49,800 --> 01:29:51,770
If you're using YSlow in a sense
that you just pull up a

1759
01:29:51,770 --> 01:29:54,840
page and run it manually through
the Chrome extension,

1760
01:29:54,840 --> 01:29:57,030
that's what you can do today
with the existing tooling, and

1761
01:29:57,030 --> 01:29:59,010
see the rendering performance
for your given site.

1762
01:29:59,010 --> 01:30:00,620
So we have something similar.

1763
01:30:00,620 --> 01:30:04,240
It's just very, very difficult
to automate as policy.

1764
01:30:04,240 --> 01:30:06,360
ARIYA HIDAYAT: So one thing that
you can do is to apply

1765
01:30:06,360 --> 01:30:08,480
specific restrictions
in your project.

1766
01:30:08,480 --> 01:30:12,020
For example, Jonathan mentioned
about not using

1767
01:30:12,020 --> 01:30:13,420
requestAnimationFrame.

1768
01:30:13,420 --> 01:30:16,790
So you can put some check in
your CI system to prevent

1769
01:30:16,790 --> 01:30:20,650
somebody from accidentally
putting that use of

1770
01:30:20,650 --> 01:30:21,770
setTimeout.

1771
01:30:21,770 --> 01:30:25,520
So if there's a new additional
setTimeout code, code appears

1772
01:30:25,520 --> 01:30:27,370
on some of the JavaScript
files.

1773
01:30:27,370 --> 01:30:28,880
That should trigger warning.

1774
01:30:28,880 --> 01:30:31,760
Because the project used
requestAnimationFrame by

1775
01:30:31,760 --> 01:30:33,830
default, for example.

1776
01:30:33,830 --> 01:30:33,960
JOSHUA PEEK: Yeah.

1777
01:30:33,960 --> 01:30:37,970
I guess the YSlow stuff normally
runs on page load,

1778
01:30:37,970 --> 01:30:39,990
but obviously all these
rendering performance problems

1779
01:30:39,990 --> 01:30:42,330
are something that's happening
as your app is running.

1780
01:30:42,330 --> 01:30:45,470
So there's not really a way
to profile that initially.

1781
01:30:45,470 --> 01:30:47,220
So it's basically what we
already have now, which is the

1782
01:30:47,220 --> 01:30:49,330
timeline view of showing
all these problems.

1783
01:30:49,330 --> 01:30:50,530
And Chrome does a
pretty good job.

1784
01:30:50,530 --> 01:30:53,570
I like the new little Warning
icon you get when you trigger

1785
01:30:53,570 --> 01:30:54,820
a layout in the timeline.

1786
01:30:54,820 --> 01:30:57,660
And so that's a pretty good
situation right now.

1787
01:30:57,660 --> 01:30:58,010
PAUL LEWIS: Yeah.

1788
01:30:58,010 --> 01:31:00,190
And there are other things.

1789
01:31:00,190 --> 01:31:02,150
There are things like telemetry,
which Adobe had

1790
01:31:02,150 --> 01:31:04,540
been using brilliantly
for top coat.

1791
01:31:04,540 --> 01:31:07,660
So when check in code, telemetry
is a Python-based

1792
01:31:07,660 --> 01:31:10,430
framework that the Chrome
engineers use.

1793
01:31:10,430 --> 01:31:15,690
And it runs a bunch of tests
against pages for things like

1794
01:31:15,690 --> 01:31:17,380
smoothness of scrolling.

1795
01:31:17,380 --> 01:31:19,870
And that's definitely something
I'm interested in

1796
01:31:19,870 --> 01:31:20,680
looking at a little bit more.

1797
01:31:20,680 --> 01:31:24,470
Because there may be things that
we should be looking at

1798
01:31:24,470 --> 01:31:30,290
that give us a least an insight
into how the change we

1799
01:31:30,290 --> 01:31:33,090
made in our code affected
rendering performance.

1800
01:31:33,090 --> 01:31:34,830
And it may be that there's a
certain amount of scripting

1801
01:31:34,830 --> 01:31:37,060
that's required from the
developers to set this up in a

1802
01:31:37,060 --> 01:31:39,110
meaningful way for that
particular project.

1803
01:31:39,110 --> 01:31:40,230
But that might be something
that we want

1804
01:31:40,230 --> 01:31:41,720
to take a look at.

1805
01:31:41,720 --> 01:31:43,690
And if you are interested, give
me a shout after this,

1806
01:31:43,690 --> 01:31:45,520
because I'm actually really
interested to find people who

1807
01:31:45,520 --> 01:31:47,490
want to try it.

1808
01:31:47,490 --> 01:31:50,450
To bust out telemetry
and give it a go.

1809
01:31:50,450 --> 01:31:53,750
ELI FIDLER: I think also the
question is really, what are

1810
01:31:53,750 --> 01:31:54,790
the magic bullets?

1811
01:31:54,790 --> 01:31:57,520
I do this on my site
and it gets fast.

1812
01:31:57,520 --> 01:31:59,600
And there's enough things
going on in rendering

1813
01:31:59,600 --> 01:32:03,200
performance in most cases that
there isn't a hard and fast

1814
01:32:03,200 --> 01:32:04,260
rule there.

1815
01:32:04,260 --> 01:32:06,820
Things are very different
on different platforms.

1816
01:32:06,820 --> 01:32:09,270
So in addition to being specific
to your site, it's

1817
01:32:09,270 --> 01:32:11,280
specific to the device that
you're running on.

1818
01:32:11,280 --> 01:32:13,280
It's specific to the version
of the browser that you're

1819
01:32:13,280 --> 01:32:14,900
running on that device.

1820
01:32:14,900 --> 01:32:17,120
And so testing is really
the best way.

1821
01:32:17,120 --> 01:32:20,180
And testing on as many devices
as possible is the best way.

1822
01:32:20,180 --> 01:32:22,670
Which is not, I'm sure, what
everybody who builds content

1823
01:32:22,670 --> 01:32:24,110
wants to hear.

1824
01:32:24,110 --> 01:32:26,060
But of course, there are some
things that are good and that,

1825
01:32:26,060 --> 01:32:29,020
I think, people have started
to do a lot more.

1826
01:32:29,020 --> 01:32:32,260
Being declarative is usually
better than being imperative.

1827
01:32:32,260 --> 01:32:35,440
So if you're going to do an
animation, use CSS animations

1828
01:32:35,440 --> 01:32:36,500
or CSS transitions.

1829
01:32:36,500 --> 01:32:39,880
Browsers are getting much better
at optimizing things

1830
01:32:39,880 --> 01:32:42,290
that are left up
to the browser.

1831
01:32:42,290 --> 01:32:44,550
And historically, you haven't
been able to do that, because

1832
01:32:44,550 --> 01:32:45,670
performance hasn't been good.

1833
01:32:45,670 --> 01:32:48,388
But now it's a lot better.

1834
01:32:48,388 --> 01:32:51,330
ANDRE BEHRENS: Well, thinking
about YSlow is not just the

1835
01:32:51,330 --> 01:32:53,450
specific implementation
detail.

1836
01:32:53,450 --> 01:32:57,040
When I think about other people
that I work with and

1837
01:32:57,040 --> 01:33:04,130
multiple levels, are there
any big, obvious things?

1838
01:33:04,130 --> 01:33:07,310
Part of YSlow's powers
is just the marketing

1839
01:33:07,310 --> 01:33:08,450
message that it delivered.

1840
01:33:08,450 --> 01:33:10,520
We have these things.

1841
01:33:10,520 --> 01:33:12,550
OK, we should definitely all
be gzipping everything.

1842
01:33:12,550 --> 01:33:16,430
And it sort of consolidated
things that had been known.

1843
01:33:16,430 --> 01:33:18,840
ELI FIDLER: I think CSS
transitions, as opposed to

1844
01:33:18,840 --> 01:33:22,350
JavaScript animations, is an
obvious one that most people

1845
01:33:22,350 --> 01:33:24,240
are getting now.

1846
01:33:24,240 --> 01:33:28,200
My personal one that I've
noticed a lot is people really

1847
01:33:28,200 --> 01:33:30,290
like one-pixel offset,
one-pixel blur

1848
01:33:30,290 --> 01:33:32,340
drop shadows on text.

1849
01:33:32,340 --> 01:33:33,780
That's a really expensive
operation.

1850
01:33:33,780 --> 01:33:35,030
Don't do that.

1851
01:33:35,030 --> 01:33:37,346

1852
01:33:37,346 --> 01:33:37,840
ANDRE BEHRENS: All right.

1853
01:33:37,840 --> 01:33:40,550
I think we'll move on to
our next question.

1854
01:33:40,550 --> 01:33:40,835
OK.

1855
01:33:40,835 --> 01:33:42,085
Jake Archibald.

1856
01:33:42,085 --> 01:33:49,790

1857
01:33:49,790 --> 01:33:50,020
JAKE ARCHIBALD: All right.

1858
01:33:50,020 --> 01:33:53,440
So tricks like translateZ,
putting that on an element is

1859
01:33:53,440 --> 01:33:57,020
quite often a silver bullet
in terms of performance.

1860
01:33:57,020 --> 01:33:59,040
But could that be an
anti-pattern tomorrow?

1861
01:33:59,040 --> 01:34:01,380
Like when we used to tell people
to concatenate strings

1862
01:34:01,380 --> 01:34:03,870
using array.join and we now know
that's faster than just

1863
01:34:03,870 --> 01:34:05,400
doing string plus string.

1864
01:34:05,400 --> 01:34:06,800
Is translateZ going to
be the same thing?

1865
01:34:06,800 --> 01:34:11,310

1866
01:34:11,310 --> 01:34:12,800
PAUL LEWIS: Possibly.

1867
01:34:12,800 --> 01:34:18,040
There are three steps,
I think, to

1868
01:34:18,040 --> 01:34:19,070
most performance problems.

1869
01:34:19,070 --> 01:34:21,930
Which is first of all, there's
the don't-do-it stage, where

1870
01:34:21,930 --> 01:34:24,190
we just blindly, do
not do this thing.

1871
01:34:24,190 --> 01:34:25,520
It will be bad.

1872
01:34:25,520 --> 01:34:27,770
Then there's the next step where
we go, ah, now we can

1873
01:34:27,770 --> 01:34:29,920
make it less bad if you
were to do this thing.

1874
01:34:29,920 --> 01:34:32,660
Which is where I categorize
the translateZ hack.

1875
01:34:32,660 --> 01:34:34,830
It's something we'd rather
you didn't have to do.

1876
01:34:34,830 --> 01:34:37,340
But sometimes you've got to
step in and do it, just to

1877
01:34:37,340 --> 01:34:38,980
hint things up a little bit.

1878
01:34:38,980 --> 01:34:40,850
Then there's the final step,
which this, this is not a

1879
01:34:40,850 --> 01:34:42,090
problem anymore.

1880
01:34:42,090 --> 01:34:44,060
Now, there's the other thing
where you go, oh, actually, of

1881
01:34:44,060 --> 01:34:47,080
a sudden it's an anti-pattern.

1882
01:34:47,080 --> 01:34:50,350
So the array concat versus
array.join versus string

1883
01:34:50,350 --> 01:34:53,290
concat thing is the one that's
often mentioned.

1884
01:34:53,290 --> 01:34:56,110
And I think the only thing you
can do there is profile.

1885
01:34:56,110 --> 01:34:57,080
Again, we've said it before.

1886
01:34:57,080 --> 01:34:59,900
But if you're profiling and
it's part of your build

1887
01:34:59,900 --> 01:35:02,640
process, then when something
changes in the implementation,

1888
01:35:02,640 --> 01:35:03,700
you're going to see it.

1889
01:35:03,700 --> 01:35:04,680
You're going to go,
whoa, something

1890
01:35:04,680 --> 01:35:05,770
went really slow here.

1891
01:35:05,770 --> 01:35:06,670
I wasn't expecting that.

1892
01:35:06,670 --> 01:35:07,460
What was it?

1893
01:35:07,460 --> 01:35:10,410
And you can figure out what it
is that's actually triggering

1894
01:35:10,410 --> 01:35:10,900
your problem.

1895
01:35:10,900 --> 01:35:13,960
So yes, it may be a problem
in the future.

1896
01:35:13,960 --> 01:35:17,010
There's no crystal ball gazing,
as far as I can tell.

1897
01:35:17,010 --> 01:35:19,930
But profile is the
answer for me.

1898
01:35:19,930 --> 01:35:20,240
JONATHAN KLEIN: Yeah.

1899
01:35:20,240 --> 01:35:22,550
And I would say that any time
you're doing something that's

1900
01:35:22,550 --> 01:35:23,670
known to be a hack &mdash;

1901
01:35:23,670 --> 01:35:25,130
that's definitely
a hack, right?

1902
01:35:25,130 --> 01:35:26,880
That's probably not going to be
something that we want to

1903
01:35:26,880 --> 01:35:27,980
be doing forever.

1904
01:35:27,980 --> 01:35:30,290
So any time that you feel like
you're adding some code that's

1905
01:35:30,290 --> 01:35:31,610
just not standards compliant.

1906
01:35:31,610 --> 01:35:34,200
Or translateZ(0) doesn't make
a lot of sense from a future

1907
01:35:34,200 --> 01:35:35,330
proofing point of view.

1908
01:35:35,330 --> 01:35:37,320
I think it makes sense to
abstract that stuff away.

1909
01:35:37,320 --> 01:35:40,920
Because chances are, it's going
to change going forward.

1910
01:35:40,920 --> 01:35:42,450
Because it's not
part of a spec.

1911
01:35:42,450 --> 01:35:44,650
It's just a workaround.

1912
01:35:44,650 --> 01:35:47,590
PAUL LEWIS: One thing I really
don't like, just being me for

1913
01:35:47,590 --> 01:35:50,920
a second, is the fact that we
don't give you a way to say

1914
01:35:50,920 --> 01:35:53,750
that you want something
on its own layer.

1915
01:35:53,750 --> 01:35:56,260
I don't have a problem with
the developer saying that.

1916
01:35:56,260 --> 01:36:01,270
There's a balancing act of
should the developer have to

1917
01:36:01,270 --> 01:36:04,450
worry about layers versus should
the browser just take

1918
01:36:04,450 --> 01:36:06,440
care of everything.

1919
01:36:06,440 --> 01:36:09,250
And in a perfect world, yeah,
the browser would maybe get

1920
01:36:09,250 --> 01:36:10,230
everything right for you.

1921
01:36:10,230 --> 01:36:12,850
It'd be able to guess your
intent perfectly.

1922
01:36:12,850 --> 01:36:16,410
But if it can't, then surely the
best next step is not to

1923
01:36:16,410 --> 01:36:19,105
provide a hack, but to provide
a decent API that says, yeah,

1924
01:36:19,105 --> 01:36:20,910
you know what, if you need
to call this, call this.

1925
01:36:20,910 --> 01:36:22,890
This is what it'll do.

1926
01:36:22,890 --> 01:36:26,880
And if you want to abuse it,
OK, that's your call.

1927
01:36:26,880 --> 01:36:30,190
You're the developer
and we trust you.

1928
01:36:30,190 --> 01:36:31,440
And you're not an idiot.

1929
01:36:31,440 --> 01:36:34,000

1930
01:36:34,000 --> 01:36:36,690
That's just generally how I feel
about this kind of stuff.

1931
01:36:36,690 --> 01:36:36,870
JOSHUA PEEK: Yeah.

1932
01:36:36,870 --> 01:36:39,800
It's definitely a leaky
extraction for us.

1933
01:36:39,800 --> 01:36:43,120
So I think if the layer
compositing system is

1934
01:36:43,120 --> 01:36:45,510
something that you really need
to be concerned about as a

1935
01:36:45,510 --> 01:36:48,080
developer, it should be
an explicit opt-in.

1936
01:36:48,080 --> 01:36:52,190
Not going into this magic voodoo
property that you read

1937
01:36:52,190 --> 01:36:54,070
about on Stack Overflow and you
don't really understand

1938
01:36:54,070 --> 01:36:54,500
how it works.

1939
01:36:54,500 --> 01:36:58,710
But having explicit API for
declaring layers is, I think,

1940
01:36:58,710 --> 01:37:00,450
a good idea, if that's something
we need to be

1941
01:37:00,450 --> 01:37:01,870
concerned about.

1942
01:37:01,870 --> 01:37:05,450
ELI FIDLER: So translateZ(0) is,
obviously, a hack to force

1943
01:37:05,450 --> 01:37:06,590
compositing.

1944
01:37:06,590 --> 01:37:10,260
And I think it's actually a
really good declarative API

1945
01:37:10,260 --> 01:37:13,110
if, right after you put that on,
or at some point later in

1946
01:37:13,110 --> 01:37:15,450
your page, you're about to
animate the value of

1947
01:37:15,450 --> 01:37:16,130
translateZ.

1948
01:37:16,130 --> 01:37:18,520
Or you're about to animate
the value of translate3d.

1949
01:37:18,520 --> 01:37:21,050
Then you are exactly saying,
this is something I'm setting

1950
01:37:21,050 --> 01:37:22,430
now because I'm going
to animate it later.

1951
01:37:22,430 --> 01:37:24,410
And that's why it does
what it does.

1952
01:37:24,410 --> 01:37:27,250
So that you have your content
promoted into a layer, so that

1953
01:37:27,250 --> 01:37:30,040
when you animate it, the
next frame is ready.

1954
01:37:30,040 --> 01:37:32,590
And a number of properties
are like that.

1955
01:37:32,590 --> 01:37:35,020
Those are the properties right
now that force compositing.

1956
01:37:35,020 --> 01:37:37,350
And they're there specifically
so that, if you are going to

1957
01:37:37,350 --> 01:37:40,810
animate then, you're primed
and ready to go.

1958
01:37:40,810 --> 01:37:42,890
And maybe there are
more things that

1959
01:37:42,890 --> 01:37:44,110
should be like that.

1960
01:37:44,110 --> 01:37:46,630
But I'm very hesitant about
saying that we should

1961
01:37:46,630 --> 01:37:49,460
introduce a new property that
says, promote to layer.

1962
01:37:49,460 --> 01:37:52,260
Because promote to layer isn't
something that web developers

1963
01:37:52,260 --> 01:37:53,910
should care about.

1964
01:37:53,910 --> 01:37:57,050
PAUL LEWIS: If you don't have
that, then you have this thing

1965
01:37:57,050 --> 01:38:01,690
where developers can't get
good performing code.

1966
01:38:01,690 --> 01:38:03,840
They don't have anything
other than a hack.

1967
01:38:03,840 --> 01:38:07,010
And so either the browser has to
infer perfectly the intent

1968
01:38:07,010 --> 01:38:09,650
of the developer and get it
right, or we have the

1969
01:38:09,650 --> 01:38:11,900
alternative, which is give them
a way of saying, no, this

1970
01:38:11,900 --> 01:38:12,920
is what I really mean.

1971
01:38:12,920 --> 01:38:15,090
And they're doing that through
this back door at the moment.

1972
01:38:15,090 --> 01:38:16,480
Which kind of makes me
feel uncomfortable.

1973
01:38:16,480 --> 01:38:19,950
Because it does give rise to,
hey, implementation's changed.

1974
01:38:19,950 --> 01:38:21,680
Now your expectation
needs to change.

1975
01:38:21,680 --> 01:38:24,270
Which is, I think, a slightly
unfair position to put a

1976
01:38:24,270 --> 01:38:25,286
developer in.

1977
01:38:25,286 --> 01:38:28,490
But maybe that's just me.

1978
01:38:28,490 --> 01:38:30,050
ANDRE BEHRENS: It's kind of
interesting to ask what the

1979
01:38:30,050 --> 01:38:32,520
distinction is between
translateZ and promote to

1980
01:38:32,520 --> 01:38:36,230
layer in terms of actual
developer life experience.

1981
01:38:36,230 --> 01:38:38,140
AUDIENCE: Can I jump
in for a sec?

1982
01:38:38,140 --> 01:38:42,540
I feel like I've seen developers
animating top or

1983
01:38:42,540 --> 01:38:46,050
left, setting something
position-fixed a lot, and then

1984
01:38:46,050 --> 01:38:48,280
not realizing that that's
going to have different

1985
01:38:48,280 --> 01:38:51,000
performance implications than
animating something with

1986
01:38:51,000 --> 01:38:53,960
translate or even margin.

1987
01:38:53,960 --> 01:39:00,110
So I feel like if we wanted to
let someone animate top but

1988
01:39:00,110 --> 01:39:03,290
give it the performance of
something in it's own

1989
01:39:03,290 --> 01:39:09,990
compositing layer, than using
some sort of layer-promoting

1990
01:39:09,990 --> 01:39:14,110
API would make sense in that
case, potentially.

1991
01:39:14,110 --> 01:39:16,770
ELI FIDLER: Your specific
example right now also does

1992
01:39:16,770 --> 01:39:18,330
force a layer on
most platforms.

1993
01:39:18,330 --> 01:39:20,960
If you set something to fixed
positioning and then animate

1994
01:39:20,960 --> 01:39:21,710
top, it will &mdash;

1995
01:39:21,710 --> 01:39:22,960
AUDIENCE: [INAUDIBLE]

1996
01:39:22,960 --> 01:39:25,700

1997
01:39:25,700 --> 01:39:28,750
ARIYA HIDAYAT: Just adding one
more twist to the topic.

1998
01:39:28,750 --> 01:39:31,280
We also have to remember that
translateZ, or even

1999
01:39:31,280 --> 01:39:33,670
compositing layer, is just
half of the equation.

2000
01:39:33,670 --> 01:39:37,760
For example, if you do that but
you try to animate, say,

2001
01:39:37,760 --> 01:39:40,090
blur radius or border radius,
it doesn't really help.

2002
01:39:40,090 --> 01:39:42,650
Because there are only a couple
of properties that you

2003
01:39:42,650 --> 01:39:47,300
can apply to the GPU texture
that can be executed by the

2004
01:39:47,300 --> 01:39:50,380
GPU efficiently.

2005
01:39:50,380 --> 01:39:54,310
So again, explicit or implicit,
or half-explicit,

2006
01:39:54,310 --> 01:39:57,530
half-implicit, web developer
person still needs to know

2007
01:39:57,530 --> 01:40:00,590
that only certain properties
you can run

2008
01:40:00,590 --> 01:40:03,500
on the layer itself.

2009
01:40:03,500 --> 01:40:08,160
PAUL LEWIS: And generally, the
way I always pitch it is

2010
01:40:08,160 --> 01:40:10,180
you're going to promote to
isolate a layer that's

2011
01:40:10,180 --> 01:40:12,010
probably going to get painted.

2012
01:40:12,010 --> 01:40:17,050
Because you're going to move
it, scale it, fade it, or

2013
01:40:17,050 --> 01:40:18,020
rotate it, I think.

2014
01:40:18,020 --> 01:40:19,340
ARIYA HIDAYAT: And filter.

2015
01:40:19,340 --> 01:40:19,950
PAUL LEWIS: Or filter.

2016
01:40:19,950 --> 01:40:22,885
And Paul Irish actually
helped me figure &mdash;

2017
01:40:22,885 --> 01:40:26,620
he came up with those four,
which is really helpful.

2018
01:40:26,620 --> 01:40:30,660
So if you're going to do one of
those things, or if you're

2019
01:40:30,660 --> 01:40:33,200
going to paint something and
it's going to affect other

2020
01:40:33,200 --> 01:40:34,680
elements, then it's a good
time to isolate it.

2021
01:40:34,680 --> 01:40:36,840
Other than that, like you said,
it's probably not going

2022
01:40:36,840 --> 01:40:37,610
offer you anything.

2023
01:40:37,610 --> 01:40:39,870
And you're potentially creating
more of a problem,

2024
01:40:39,870 --> 01:40:41,370
because you're going to have to
upload a texture for that

2025
01:40:41,370 --> 01:40:42,580
layer to the GPU.

2026
01:40:42,580 --> 01:40:46,350
And if you're on a constrained
device, like mobile one, well,

2027
01:40:46,350 --> 01:40:48,820
you're going to pay that
tax every time

2028
01:40:48,820 --> 01:40:51,870
you change that layer.

2029
01:40:51,870 --> 01:40:52,800
JONATHAN KLEIN: One of the
interesting things, I think,

2030
01:40:52,800 --> 01:40:54,780
about the web that's happening
right now is

2031
01:40:54,780 --> 01:40:56,110
that we have two &mdash;

2032
01:40:56,110 --> 01:40:57,600
or not even two, but whatever.

2033
01:40:57,600 --> 01:40:59,630
A gradient of use cases.

2034
01:40:59,630 --> 01:41:01,560
Because the browser now becomes
this platform where

2035
01:41:01,560 --> 01:41:04,440
you can do complex animations,
you can do full gaming

2036
01:41:04,440 --> 01:41:05,860
experiences, et cetera.

2037
01:41:05,860 --> 01:41:08,010
But you can also build a
pretty static website.

2038
01:41:08,010 --> 01:41:10,060
So when we talk about developers
shouldn't have to

2039
01:41:10,060 --> 01:41:11,840
worry about this, well, if
you're building a high

2040
01:41:11,840 --> 01:41:13,500
performance game in the browser,
you probably should

2041
01:41:13,500 --> 01:41:14,700
have to worry about
that, right?

2042
01:41:14,700 --> 01:41:17,380
But if you're building your
blog, you shouldn't.

2043
01:41:17,380 --> 01:41:20,940
So I think there needs to be a
facility for both camps of

2044
01:41:20,940 --> 01:41:23,740
people to be able to use these
tools effectively without

2045
01:41:23,740 --> 01:41:25,940
having to worry too much if
you're on the low end, but you

2046
01:41:25,940 --> 01:41:27,860
should be able to access those
APIs if you're working on

2047
01:41:27,860 --> 01:41:29,730
something really complex.

2048
01:41:29,730 --> 01:41:32,150
ANDRE BEHRENS: I think we'll
move on to our next question.

2049
01:41:32,150 --> 01:41:34,556
Ben Holland.

2050
01:41:34,556 --> 01:41:35,806
Grab the mic.

2051
01:41:35,806 --> 01:41:39,990

2052
01:41:39,990 --> 01:41:42,030
BEN HOLLAND: So we have
reasonably good tools and

2053
01:41:42,030 --> 01:41:44,000
insight into rendering
performance in a dev

2054
01:41:44,000 --> 01:41:45,800
environment .

2055
01:41:45,800 --> 01:41:47,810
But not data from the field.

2056
01:41:47,810 --> 01:41:50,220
What events or metrics would we
ideally like to be able to

2057
01:41:50,220 --> 01:41:52,645
measure and report on
for real users?

2058
01:41:52,645 --> 01:41:56,880

2059
01:41:56,880 --> 01:42:00,390
JOSHUA PEEK: The only thing we
can do live in production is

2060
01:42:00,390 --> 01:42:02,950
measure like the Window
Performance APIs.

2061
01:42:02,950 --> 01:42:03,700
Those are pretty great.

2062
01:42:03,700 --> 01:42:05,780
But those only affect
initial load.

2063
01:42:05,780 --> 01:42:08,160
You don't get anything
after the fact.

2064
01:42:08,160 --> 01:42:11,830
So being able to hap into the
timeline from JavaScript and

2065
01:42:11,830 --> 01:42:14,330
get the actual values
would be great.

2066
01:42:14,330 --> 01:42:20,020
We do some stuff where we
profile method times and then

2067
01:42:20,020 --> 01:42:23,720
report these back over Ajax
in our production app.

2068
01:42:23,720 --> 01:42:27,680
But you can't get access to any
timeline data live from

2069
01:42:27,680 --> 01:42:28,290
JavaScript.

2070
01:42:28,290 --> 01:42:31,855
So having those would
be great.

2071
01:42:31,855 --> 01:42:32,280
JONATHAN KLEIN: Yeah.

2072
01:42:32,280 --> 01:42:34,720
I'd love to have real user data
in production as well,

2073
01:42:34,720 --> 01:42:37,520
but I'd also love to have even
better synthetic tooling

2074
01:42:37,520 --> 01:42:39,480
around it for remote use.

2075
01:42:39,480 --> 01:42:41,540
So what I mean by that is to
say, right now there's no

2076
01:42:41,540 --> 01:42:44,350
JavaScript API into the frame
rate, for example, that the

2077
01:42:44,350 --> 01:42:47,380
Chrome DevTools gives you for
that rendering meter.

2078
01:42:47,380 --> 01:42:48,870
So it'd great if you could
just hook into that with

2079
01:42:48,870 --> 01:42:50,980
JavaScript, because then you
could write tools that would

2080
01:42:50,980 --> 01:42:54,320
basically change different
events, hide nodes while

2081
01:42:54,320 --> 01:42:57,410
scrolling the page, and then
read off those frame numbers

2082
01:42:57,410 --> 01:42:58,530
and the paint numbers.

2083
01:42:58,530 --> 01:43:00,510
And then you could very quickly
narrow it down in an

2084
01:43:00,510 --> 01:43:03,860
automated fashion on the area
that's causing a problem.

2085
01:43:03,860 --> 01:43:07,390
So I think that's the next step,
is how can we get code

2086
01:43:07,390 --> 01:43:11,710
around that paint meter, so we
can easily find out where the

2087
01:43:11,710 --> 01:43:12,150
problem areas are.

2088
01:43:12,150 --> 01:43:13,220
PAUL LEWIS: I think that's
interesting.

2089
01:43:13,220 --> 01:43:16,210
But is that in a lab
environment or

2090
01:43:16,210 --> 01:43:17,290
is that in the live?

2091
01:43:17,290 --> 01:43:21,740
The reason I ask is because if
you're talking about live, say

2092
01:43:21,740 --> 01:43:25,080
frames per second, it's very
difficult to separate signal

2093
01:43:25,080 --> 01:43:26,150
from noise.

2094
01:43:26,150 --> 01:43:30,330
Because you don't know if it's
contention at the OS level, if

2095
01:43:30,330 --> 01:43:33,660
it's a badly-configured monitor,
terrible GPU drivers,

2096
01:43:33,660 --> 01:43:35,870
contention at the Chrome
level, or browser-level

2097
01:43:35,870 --> 01:43:39,300
contention actually within the
page and a bottleneck there.

2098
01:43:39,300 --> 01:43:42,990
So just a simple frames per
second probably wouldn't give

2099
01:43:42,990 --> 01:43:43,640
you that much.

2100
01:43:43,640 --> 01:43:46,090
But in a lab environment, where
you can be pretty sure

2101
01:43:46,090 --> 01:43:48,390
that there's nothing else
running and so on, then that

2102
01:43:48,390 --> 01:43:50,480
seems to me to be a reasonable
first step.

2103
01:43:50,480 --> 01:43:50,800
JONATHAN KLEIN: Yeah.

2104
01:43:50,800 --> 01:43:51,700
I was thinking a lab.

2105
01:43:51,700 --> 01:43:54,120
Because right now, if you want
to take a page and figure out

2106
01:43:54,120 --> 01:43:55,760
why its rendering performance
is bad, it

2107
01:43:55,760 --> 01:43:56,990
takes a lot of work.

2108
01:43:56,990 --> 01:43:58,910
So if you could build better
tooling around that in a lab

2109
01:43:58,910 --> 01:44:00,690
environment, it can be very fast
to narrow down on where

2110
01:44:00,690 --> 01:44:01,630
the problem is.

2111
01:44:01,630 --> 01:44:02,160
But you're right.

2112
01:44:02,160 --> 01:44:03,885
It's not going to work very well
in the real world today.

2113
01:44:03,885 --> 01:44:05,850
ANDRE BEHRENS: I think we have
a question from the room.

2114
01:44:05,850 --> 01:44:07,100
James Ide.

2115
01:44:07,100 --> 01:44:12,190

2116
01:44:12,190 --> 01:44:16,960
JAMES: Hi So for some context,
I feel like a lot of the

2117
01:44:16,960 --> 01:44:19,336
performance characteristics of
how browsers work, like a lot

2118
01:44:19,336 --> 01:44:22,490
of the things in Jonathan's
slides, are understood by a

2119
01:44:22,490 --> 01:44:23,880
lot of web developers.

2120
01:44:23,880 --> 01:44:26,120
And the DevTools have
gone great.

2121
01:44:26,120 --> 01:44:27,450
Even 11's really great now.

2122
01:44:27,450 --> 01:44:29,710
You should check it out.

2123
01:44:29,710 --> 01:44:33,630
But understanding how the
browser works is great if

2124
01:44:33,630 --> 01:44:36,210
you're a one-man show
and you're building

2125
01:44:36,210 --> 01:44:37,780
your own web page.

2126
01:44:37,780 --> 01:44:40,400
And as soon as you start to have
a large team working on

2127
01:44:40,400 --> 01:44:42,630
your product, it's very easy
for someone to introduce a

2128
01:44:42,630 --> 01:44:43,660
regression.

2129
01:44:43,660 --> 01:44:45,230
So I'm wondering &mdash;

2130
01:44:45,230 --> 01:44:48,330
For example, at Facebook, we
have a library called React,

2131
01:44:48,330 --> 01:44:51,230
which helps avoid layouts
thrash when we

2132
01:44:51,230 --> 01:44:52,550
render our web pages.

2133
01:44:52,550 --> 01:44:55,960
And I'm wondering if there
are, let's say

2134
01:44:55,960 --> 01:45:00,960
organizationally scalable APIs
that the browser vendors can

2135
01:45:00,960 --> 01:45:01,840
provide to us.

2136
01:45:01,840 --> 01:45:04,720
So concretely speaking,
maybe asynchronous

2137
01:45:04,720 --> 01:45:06,340
APIs to decode images.

2138
01:45:06,340 --> 01:45:08,940
Or asynchronous APIs
to compute the

2139
01:45:08,940 --> 01:45:10,590
dimensions a DOM element.

2140
01:45:10,590 --> 01:45:12,050
Things that are asynchronous
and slow down

2141
01:45:12,050 --> 01:45:14,230
the page right now.

2142
01:45:14,230 --> 01:45:16,790
Are there these types of things
that the DOM could

2143
01:45:16,790 --> 01:45:19,640
provide to us that you think
would be Helpful

2144
01:45:19,640 --> 01:45:21,180
ELI FIDLER: I think that's
actually one of the most

2145
01:45:21,180 --> 01:45:25,580
interesting areas of active
development in at least most

2146
01:45:25,580 --> 01:45:27,170
of the popular web engines
right now.

2147
01:45:27,170 --> 01:45:31,500
Definitely WebKit and Blink
are both working on &mdash;

2148
01:45:31,500 --> 01:45:32,410
they call it different things.

2149
01:45:32,410 --> 01:45:34,830
But some sort of incremental
layout, where certain

2150
01:45:34,830 --> 01:45:37,580
properties, when you request
them from JavaScript, don't

2151
01:45:37,580 --> 01:45:39,950
trigger a full re-layout
of the page.

2152
01:45:39,950 --> 01:45:44,410
And I can't give you a list
of what works right now or

2153
01:45:44,410 --> 01:45:45,370
anything, because
a lot of this is

2154
01:45:45,370 --> 01:45:46,670
research code right now.

2155
01:45:46,670 --> 01:45:50,670
But this is a very good example
of where the browser

2156
01:45:50,670 --> 01:45:53,560
can make things fast without
you changing anything.

2157
01:45:53,560 --> 01:45:55,980
So right now, there's a couple
of properties that you ask

2158
01:45:55,980 --> 01:46:00,160
for, like Offset Width, that
will trigger a full re-layout

2159
01:46:00,160 --> 01:46:01,230
of the entire page.

2160
01:46:01,230 --> 01:46:03,350
And it doesn't technically
have to.

2161
01:46:03,350 --> 01:46:05,640
But right now, the way that
the engines work,

2162
01:46:05,640 --> 01:46:06,620
that's what they do.

2163
01:46:06,620 --> 01:46:08,510
So stay tuned.

2164
01:46:08,510 --> 01:46:10,970
But there's a lot of things
there that are getting faster

2165
01:46:10,970 --> 01:46:13,420
without web developers having
to change things.

2166
01:46:13,420 --> 01:46:18,770
In terms of adding new DOM
APIs, we have standards

2167
01:46:18,770 --> 01:46:22,700
bodies, and they accept
public comments.

2168
01:46:22,700 --> 01:46:25,950
Definitely we've seen a lot
of people providing

2169
01:46:25,950 --> 01:46:27,870
that sort of feedback.

2170
01:46:27,870 --> 01:46:30,035
ANDRE BEHRENS: We have another
question from Mike Petrovich.

2171
01:46:30,035 --> 01:46:34,720

2172
01:46:34,720 --> 01:46:35,970
Mic?

2173
01:46:35,970 --> 01:46:40,170

2174
01:46:40,170 --> 01:46:43,210
MIKE PETROVICH: So to John's
point about synthetic testing,

2175
01:46:43,210 --> 01:46:46,740
I know Etsy does synthetic
testing for initial page speed

2176
01:46:46,740 --> 01:46:47,790
performance.

2177
01:46:47,790 --> 01:46:51,210
But if we did something like
that with using Selenium test.

2178
01:46:51,210 --> 01:46:52,020
In that it's a [INAUDIBLE]

2179
01:46:52,020 --> 01:46:56,060
environment that would
actually, in a

2180
01:46:56,060 --> 01:46:59,330
context-sensitive area
for your app, how

2181
01:46:59,330 --> 01:47:00,210
it's meant to work.

2182
01:47:00,210 --> 01:47:01,670
Clicking around.

2183
01:47:01,670 --> 01:47:04,690
200 milliseconds later, clicking
this other element.

2184
01:47:04,690 --> 01:47:07,230
And that's all affected by
different rendering speeds and

2185
01:47:07,230 --> 01:47:08,665
also JavaScript evaluations.

2186
01:47:08,665 --> 01:47:11,950
So it's more of a real-world
example than just straight up,

2187
01:47:11,950 --> 01:47:13,530
how long did it take
to render this?

2188
01:47:13,530 --> 01:47:16,110
And it doesn't work at a
generalized level, like

2189
01:47:16,110 --> 01:47:17,280
there's usually a consensus.

2190
01:47:17,280 --> 01:47:20,530
But on a very contextual
basis.

2191
01:47:20,530 --> 01:47:24,890
What about using automated
behavioral tools such as that?

2192
01:47:24,890 --> 01:47:25,250
JONATHAN KLEIN: Yes.

2193
01:47:25,250 --> 01:47:26,980
We sort of that today
with web page tests.

2194
01:47:26,980 --> 01:47:29,650
So Pat's here, he built an
awesome tool that allows you

2195
01:47:29,650 --> 01:47:33,100
to do multi-page flows and see
screenshots for every step of

2196
01:47:33,100 --> 01:47:36,030
the way, and look at waterfall
that show JavaScript

2197
01:47:36,030 --> 01:47:37,960
execution, and even see how long
those things are taking,

2198
01:47:37,960 --> 01:47:41,030
and even monitor CPU during
that process.

2199
01:47:41,030 --> 01:47:43,390
So that's, I think, the best
proxy we have for it today.

2200
01:47:43,390 --> 01:47:45,610
But again, one of the
challenging things is that we

2201
01:47:45,610 --> 01:47:49,760
can't currently get data on
frame rate or paint events out

2202
01:47:49,760 --> 01:47:51,150
of the browser through an API.

2203
01:47:51,150 --> 01:47:53,730
So that's where you run
into that wall.

2204
01:47:53,730 --> 01:47:56,500
So you can get part of the way
there, but you still can't

2205
01:47:56,500 --> 01:47:59,850
calculate how long a paint
takes, as far as I'm aware.

2206
01:47:59,850 --> 01:48:00,980
Unless you patch
Chrome, maybe.

2207
01:48:00,980 --> 01:48:01,890
I don't know.

2208
01:48:01,890 --> 01:48:04,230
PAUL LEWIS: Telemetry actually
runs Chrome with a very

2209
01:48:04,230 --> 01:48:07,360
specific flag-enabled GPU
benchmarking, which enables a

2210
01:48:07,360 --> 01:48:10,620
GPU benchmarking API.

2211
01:48:10,620 --> 01:48:12,860
And that will give
you some stuff.

2212
01:48:12,860 --> 01:48:14,980
And in fact, that's the
reason telemetry can

2213
01:48:14,980 --> 01:48:16,430
get the data out.

2214
01:48:16,430 --> 01:48:19,320
The other thing you can do is
connect to DevTools over the

2215
01:48:19,320 --> 01:48:23,490
WebSocket, and get it to run
through the thing, pull off

2216
01:48:23,490 --> 01:48:25,680
the timeline data, and
then check for paint

2217
01:48:25,680 --> 01:48:26,740
records and so forth.

2218
01:48:26,740 --> 01:48:28,120
So there are things there.

2219
01:48:28,120 --> 01:48:34,100
They are not, I would say, that
easily grunt task-able,

2220
01:48:34,100 --> 01:48:36,670
and just easily inserted into
your workflow today.

2221
01:48:36,670 --> 01:48:39,360
And I think that's something
I'm very interested in, is

2222
01:48:39,360 --> 01:48:41,590
whether we can actually make
that a thing that's easy for

2223
01:48:41,590 --> 01:48:44,460
developers to just include
in their build steps.

2224
01:48:44,460 --> 01:48:46,470
ARIYA HIDAYAT: A good example
of the use of telemetry is

2225
01:48:46,470 --> 01:48:48,030
Adobe's topcoat project.

2226
01:48:48,030 --> 01:48:51,060
I think they have a fantastic
dashboard that shows how long

2227
01:48:51,060 --> 01:48:53,450
does it take to render a
button for every single

2228
01:48:53,450 --> 01:48:55,300
revision of the code,
of the CSS.

2229
01:48:55,300 --> 01:48:58,400
So if you accidentally change
the CSS and it slows down the

2230
01:48:58,400 --> 01:49:00,450
rendering of the button, then
you'll know it immediately.

2231
01:49:00,450 --> 01:49:03,860
I think this is all using
Chrome telemetry.

2232
01:49:03,860 --> 01:49:04,830
ANDRE BEHRENS: All right.

2233
01:49:04,830 --> 01:49:06,250
Next question.

2234
01:49:06,250 --> 01:49:07,596
[INAUDIBLE]?

2235
01:49:07,596 --> 01:49:08,846
AUDIENCE: Yup.

2236
01:49:08,846 --> 01:49:11,410

2237
01:49:11,410 --> 01:49:12,660
ANDRE BEHRENS: Microphone.

2238
01:49:12,660 --> 01:49:18,720

2239
01:49:18,720 --> 01:49:20,990
AUDIENCE: So the question
is, how can we track the

2240
01:49:20,990 --> 01:49:23,660
performance detriment that
third-party scripts, such as

2241
01:49:23,660 --> 01:49:26,080
ads, social buttons, or anything
you want to add, have

2242
01:49:26,080 --> 01:49:27,170
on rendering performance?

2243
01:49:27,170 --> 01:49:30,060
And steps to mediate that
without being too hacky.

2244
01:49:30,060 --> 01:49:33,610

2245
01:49:33,610 --> 01:49:34,948
JONATHAN KLEIN: Come
back in two hours.

2246
01:49:34,948 --> 01:49:36,580
[LAUGHTER]

2247
01:49:36,580 --> 01:49:38,900
PAUL LEWIS: I think profile.

2248
01:49:38,900 --> 01:49:41,820
You should know how your
app is running.

2249
01:49:41,820 --> 01:49:43,690
And then you should know what
happens when you add that

2250
01:49:43,690 --> 01:49:48,110
thing in, and see what
the change is.

2251
01:49:48,110 --> 01:49:52,250
If it's hideous, then you
need to make a decision.

2252
01:49:52,250 --> 01:49:56,280
I think operating blindly
with your code is a

2253
01:49:56,280 --> 01:49:58,440
very dangerous approach.

2254
01:49:58,440 --> 01:50:00,090
For me it is fairly simple.

2255
01:50:00,090 --> 01:50:01,470
Get used to the tools
that are available.

2256
01:50:01,470 --> 01:50:04,120
They are great tools.

2257
01:50:04,120 --> 01:50:06,730
And just go make sure you
understand how it runs before

2258
01:50:06,730 --> 01:50:08,750
and after the third-party
script, to know whether it was

2259
01:50:08,750 --> 01:50:09,710
worth adding it in.

2260
01:50:09,710 --> 01:50:13,620
Because anything you add
is going to have a tax.

2261
01:50:13,620 --> 01:50:16,450
it's just whether you're
happy to pay the tax.

2262
01:50:16,450 --> 01:50:18,275
That's really the question.

2263
01:50:18,275 --> 01:50:21,060
ELI FIDLER: When we've talked a
lot about painting, we find

2264
01:50:21,060 --> 01:50:24,820
that a lot of the issues about
badly-written third-party code

2265
01:50:24,820 --> 01:50:27,670
is not so much about painting,
but about adding extra event

2266
01:50:27,670 --> 01:50:30,480
handlers, or doing busy
work when other

2267
01:50:30,480 --> 01:50:31,800
things could be happening.

2268
01:50:31,800 --> 01:50:36,610
And the remote Web Inspector
from DevTools, or whatever's

2269
01:50:36,610 --> 01:50:39,400
available on all the browsers
today, are really good at

2270
01:50:39,400 --> 01:50:42,050
showing, you had a scroll event,
and somebody had an

2271
01:50:42,050 --> 01:50:44,690
on-scroll handler, and it ran
for five seconds, and it came

2272
01:50:44,690 --> 01:50:47,640
from Facebook.

2273
01:50:47,640 --> 01:50:49,973
Facebook doesn't actually have
a scroll handler that takes

2274
01:50:49,973 --> 01:50:50,456
five seconds.

2275
01:50:50,456 --> 01:50:52,388
[LAUGHTER]

2276
01:50:52,388 --> 01:50:57,240

2277
01:50:57,240 --> 01:50:59,290
ANDRE BEHRENS: So let's
go onto the next one.

2278
01:50:59,290 --> 01:51:00,540
Edd Sowden.

2279
01:51:00,540 --> 01:51:08,220

2280
01:51:08,220 --> 01:51:11,000
EDD SOWDEN: This was an
anonymous question.

2281
01:51:11,000 --> 01:51:13,090
"What is the easiest thing
browser vendors could do to

2282
01:51:13,090 --> 01:51:15,460
make it easy for developers to
optimize the performance of

2283
01:51:15,460 --> 01:51:16,710
their sites?

2284
01:51:16,710 --> 01:51:20,920

2285
01:51:20,920 --> 01:51:22,408
[LAUGHTER]

2286
01:51:22,408 --> 01:51:22,904
JONATHAN KLEIN: No one?

2287
01:51:22,904 --> 01:51:24,400
[LAUGHTER]

2288
01:51:24,400 --> 01:51:26,140
JOSHUA PEEK: It's just the
YSlow question again.

2289
01:51:26,140 --> 01:51:30,140
What are these magic
things you can do?

2290
01:51:30,140 --> 01:51:31,860
JONATHAN KLEIN: I think more
to that point &mdash; we talked

2291
01:51:31,860 --> 01:51:33,680
about this in the last
session, actually.

2292
01:51:33,680 --> 01:51:37,660
Because browsers are now being
put on watches and glasses in

2293
01:51:37,660 --> 01:51:40,430
really low-end phones, it's
hard to say what can the

2294
01:51:40,430 --> 01:51:42,810
browsers do to just make
our jobs easier.

2295
01:51:42,810 --> 01:51:45,570
Because devices keep getting
lower-powered.

2296
01:51:45,570 --> 01:51:48,790
So I think we're going to keep
seeing new environments for

2297
01:51:48,790 --> 01:51:49,710
browsers to operate in.

2298
01:51:49,710 --> 01:51:51,115
And it's hard to say,
the browser's

2299
01:51:51,115 --> 01:51:53,260
will just fix it all.

2300
01:51:53,260 --> 01:51:55,230
PAUL LEWIS: More tools.

2301
01:51:55,230 --> 01:51:56,290
That's the only thing
I think of.

2302
01:51:56,290 --> 01:51:57,390
More tools.

2303
01:51:57,390 --> 01:51:58,690
But that's got to be balanced.

2304
01:51:58,690 --> 01:52:00,050
Because you want &mdash;

2305
01:52:00,050 --> 01:52:01,370
If you've ever used tracing.

2306
01:52:01,370 --> 01:52:02,280
Tracing is brilliant.

2307
01:52:02,280 --> 01:52:05,040
But it's overwhelming at first
when you hit that thing.

2308
01:52:05,040 --> 01:52:08,600
You're like, what have you
just done to my eyes.

2309
01:52:08,600 --> 01:52:11,790
So here has to be balance.

2310
01:52:11,790 --> 01:52:13,750
For example, you can't actually
drill down in Chrome

2311
01:52:13,750 --> 01:52:15,530
DevTools today inside
paint records.

2312
01:52:15,530 --> 01:52:17,650
The know that you spent some
time painting, but you don't

2313
01:52:17,650 --> 01:52:18,840
know what was painted.

2314
01:52:18,840 --> 01:52:23,310
We recently added details on
image decode and resize so

2315
01:52:23,310 --> 01:52:26,630
that you know which image was
decoded and resized, which is

2316
01:52:26,630 --> 01:52:27,310
invaluable.

2317
01:52:27,310 --> 01:52:32,390
So we can continue to iterate
and improve the tools so that

2318
01:52:32,390 --> 01:52:36,510
you're in no doubt as to where
your bottlenecks came from.

2319
01:52:36,510 --> 01:52:39,990
But to make your life
easier, you're the

2320
01:52:39,990 --> 01:52:42,560
ones writing the code.

2321
01:52:42,560 --> 01:52:44,360
ELI FIDLER: I make browsers, so
I need you to answer that

2322
01:52:44,360 --> 01:52:45,760
question for me.

2323
01:52:45,760 --> 01:52:49,230
But one thing that I always ask
when I go to conferences

2324
01:52:49,230 --> 01:52:51,960
like this is I talk to web
developers and I say, what are

2325
01:52:51,960 --> 01:52:54,940
the tools that you need that
would tell you things that you

2326
01:52:54,940 --> 01:52:56,310
can actually act on?

2327
01:52:56,310 --> 01:52:58,400
So when I ask, what
do you need?

2328
01:52:58,400 --> 01:53:00,650
And people tell me, I want to
know what's going on in the

2329
01:53:00,650 --> 01:53:03,130
paint record.

2330
01:53:03,130 --> 01:53:05,910
And then you say, oh, but that
will be different tomorrow, or

2331
01:53:05,910 --> 01:53:08,540
that will be different on
different device by an order

2332
01:53:08,540 --> 01:53:11,950
of magnitude, which it often is,
that becomes information

2333
01:53:11,950 --> 01:53:13,820
that's very difficult
for them to act on.

2334
01:53:13,820 --> 01:53:16,020
So there are some developers who
deliberately target every

2335
01:53:16,020 --> 01:53:17,900
single device out there with
individualized code.

2336
01:53:17,900 --> 01:53:19,900
But those developers are very
rare, when you have the kind

2337
01:53:19,900 --> 01:53:22,330
of money and time to
spend on that.

2338
01:53:22,330 --> 01:53:25,040
So tell us what you
need to know.

2339
01:53:25,040 --> 01:53:26,520
And we will try to
make that happen.

2340
01:53:26,520 --> 01:53:28,680
Also, we try to just make
everything fast.

2341
01:53:28,680 --> 01:53:31,190
ARIYA HIDAYAT: So I have this
gut feeling that in the near

2342
01:53:31,190 --> 01:53:33,955
future, the rendering
performance tool, especially

2343
01:53:33,955 --> 01:53:37,150
with painting, will fall
into two categories.

2344
01:53:37,150 --> 01:53:41,680
One is how to improve from 10
frames per second to 30, and

2345
01:53:41,680 --> 01:53:46,160
the other one is how to go
from 40 to 60 or 58 to 60

2346
01:53:46,160 --> 01:53:47,380
frames per second.

2347
01:53:47,380 --> 01:53:50,200
Because what you're looking
for is that quick fix.

2348
01:53:50,200 --> 01:53:54,286
So that instead of 10, you run
up to 30 frames per second.

2349
01:53:54,286 --> 01:53:56,220
ANDRE BEHRENS: And you
had a question?

2350
01:53:56,220 --> 01:53:59,500
AUDIENCE: Just to say, one thing
that you can do is tell

2351
01:53:59,500 --> 01:54:00,380
us there is a problem.

2352
01:54:00,380 --> 01:54:02,975
So I think, granted, we don't
have best practices exactly at

2353
01:54:02,975 --> 01:54:05,800
how to solve it.

2354
01:54:05,800 --> 01:54:07,590
I get the point about doing
synthetic testing.

2355
01:54:07,590 --> 01:54:13,310
But most people on the panel
agreed that the profile of how

2356
01:54:13,310 --> 01:54:15,730
many frames per second you
get varies per device.

2357
01:54:15,730 --> 01:54:18,720
And of course, you can't
simulate all these different

2358
01:54:18,720 --> 01:54:19,370
situations.

2359
01:54:19,370 --> 01:54:23,000
If we had some sort of real
user monitoring at least

2360
01:54:23,000 --> 01:54:27,000
telling us, hey, there is a
problem on whatever Android

2361
01:54:27,000 --> 01:54:32,130
device X on this page frequently
enough, then that

2362
01:54:32,130 --> 01:54:35,520
would motivate me to go buy that
device and run some more

2363
01:54:35,520 --> 01:54:38,960
test just to balance the
different effects.

2364
01:54:38,960 --> 01:54:42,760
Even ahead of having the best
practices for exactly how

2365
01:54:42,760 --> 01:54:45,410
would I fix my codes
to make it go away.

2366
01:54:45,410 --> 01:54:46,250
JONATHAN KLEIN: I think
that's a great point.

2367
01:54:46,250 --> 01:54:50,755
And something that that brings
to mind is with the YSlow tool

2368
01:54:50,755 --> 01:54:52,305
release and the web performance
movement that's

2369
01:54:52,305 --> 01:54:54,160
been going on for the past 10
years, we've had a lot of

2370
01:54:54,160 --> 01:54:56,450
studies that come out, saying,
look at the top 1,000 Alexa

2371
01:54:56,450 --> 01:54:58,460
sites, and how bad they are,
and these best practices.

2372
01:54:58,460 --> 01:55:00,520
That hasn't happened yet,
I think, with rendering

2373
01:55:00,520 --> 01:55:01,060
performance.

2374
01:55:01,060 --> 01:55:03,770
So I think it'd be useful just
to have somebody go out and

2375
01:55:03,770 --> 01:55:06,210
look at popular sites, and be
like, look, there are problems

2376
01:55:06,210 --> 01:55:08,290
here on these devices,
on these browsers.

2377
01:55:08,290 --> 01:55:10,940
And just expose it on a wider
basis so that people are aware

2378
01:55:10,940 --> 01:55:11,355
of the problem.

2379
01:55:11,355 --> 01:55:13,730
Because I think in this
community, it's

2380
01:55:13,730 --> 01:55:14,410
obviously well known.

2381
01:55:14,410 --> 01:55:15,890
But I think in the wider
community people don't think

2382
01:55:15,890 --> 01:55:18,530
as much about rendering
performance.

2383
01:55:18,530 --> 01:55:21,070
ARIYA HIDAYAT: Does anyone know
if Google reduces page

2384
01:55:21,070 --> 01:55:24,190
rank for sites that are slow?

2385
01:55:24,190 --> 01:55:28,030
[LAUGHTER]

2386
01:55:28,030 --> 01:55:30,350
ARIYA HIDAYAT: I'm not saying.

2387
01:55:30,350 --> 01:55:31,000
No idea.

2388
01:55:31,000 --> 01:55:31,800
I'm just asking.

2389
01:55:31,800 --> 01:55:33,050
I have no idea.

2390
01:55:33,050 --> 01:55:37,700

2391
01:55:37,700 --> 01:55:38,080
ANDRE BEHRENS: All right.

2392
01:55:38,080 --> 01:55:41,095
Our next question comes
from Dunston Castin.

2393
01:55:41,095 --> 01:55:46,830

2394
01:55:46,830 --> 01:55:47,370
DUNSTON: Hey.

2395
01:55:47,370 --> 01:55:50,490
So my experience with paint
performance usually drops

2396
01:55:50,490 --> 01:55:52,840
frames with garbage collection
events and memory management.

2397
01:55:52,840 --> 01:55:55,880
What responsibility should web
developers take on for those

2398
01:55:55,880 --> 01:55:57,885
two things, memory management
and garbage collection?

2399
01:55:57,885 --> 01:56:02,260

2400
01:56:02,260 --> 01:56:02,530
PAUL LEWIS: OK.

2401
01:56:02,530 --> 01:56:08,390
So the immediate thing is that
GC causes jank because GC's

2402
01:56:08,390 --> 01:56:10,950
almost guaranteed to push you
over that frame budget of 16

2403
01:56:10,950 --> 01:56:13,000
milliseconds.

2404
01:56:13,000 --> 01:56:15,900
Your only option is to
try and avoid GC.

2405
01:56:15,900 --> 01:56:19,730
This, I think, depends on how
big a problem this is for you.

2406
01:56:19,730 --> 01:56:22,800
How much memory churn you
actually have, how much time

2407
01:56:22,800 --> 01:56:25,640
garbage collection is actually
taking, and how often it runs.

2408
01:56:25,640 --> 01:56:27,100
Which is going to be very
specific to your own

2409
01:56:27,100 --> 01:56:27,870
application.

2410
01:56:27,870 --> 01:56:29,120
There are things.

2411
01:56:29,120 --> 01:56:31,820

2412
01:56:31,820 --> 01:56:34,120
On HTML5 Rocks, we have an
article about using static

2413
01:56:34,120 --> 01:56:37,350
memory pools to recycle
objects and so forth.

2414
01:56:37,350 --> 01:56:41,310
You're avoiding object creation,
which tends to be

2415
01:56:41,310 --> 01:56:43,910
good for GC.

2416
01:56:43,910 --> 01:56:48,950
But personally speaking,
I don't believe it's &mdash;

2417
01:56:48,950 --> 01:56:52,130
People have requested, can we
have a garbage collection API?

2418
01:56:52,130 --> 01:56:56,110
And I would be concerned about
a browser including that,

2419
01:56:56,110 --> 01:57:00,150
because that one could get
really hairy very quickly.

2420
01:57:00,150 --> 01:57:02,800

2421
01:57:02,800 --> 01:57:06,130
ANDRE BEHRENS: What would
be the problems?

2422
01:57:06,130 --> 01:57:10,890
PAUL LEWIS: The browser is
uniquely positioned to &mdash;

2423
01:57:10,890 --> 01:57:12,110
Your page is not the
only thing that's

2424
01:57:12,110 --> 01:57:13,100
running in the browser.

2425
01:57:13,100 --> 01:57:15,380
So it's in a unique position
to know when

2426
01:57:15,380 --> 01:57:16,970
garbage should be collected.

2427
01:57:16,970 --> 01:57:20,980
And if you were to force the
issue, you may, basically,

2428
01:57:20,980 --> 01:57:23,675
make the wrong call.

2429
01:57:23,675 --> 01:57:27,610
This is one of these times
where, as I say, the browser

2430
01:57:27,610 --> 01:57:29,690
is the one that has all the
information and knows when

2431
01:57:29,690 --> 01:57:31,600
it's the right time to
pick up garbage.

2432
01:57:31,600 --> 01:57:34,680
Ideally, you want it to do it
at the best point for every

2433
01:57:34,680 --> 01:57:36,740
application that's running.

2434
01:57:36,740 --> 01:57:37,820
But that's the nature
of [INAUDIBLE].

2435
01:57:37,820 --> 01:57:40,590
ARIYA HIDAYAT: What if the GC
API is just a strong hint for

2436
01:57:40,590 --> 01:57:42,960
the browser to do garbage
[INAUDIBLE]

2437
01:57:42,960 --> 01:57:44,260
when it's possible?

2438
01:57:44,260 --> 01:57:47,540
PAUL LEWIS: So if you do that,
then what happens if it

2439
01:57:47,540 --> 01:57:50,230
ignores you?

2440
01:57:50,230 --> 01:57:52,140
Or you get different browsers
ignoring you

2441
01:57:52,140 --> 01:57:53,110
at different times?

2442
01:57:53,110 --> 01:57:55,230
Is it any better than
the browser just

2443
01:57:55,230 --> 01:57:56,990
making the call itself?

2444
01:57:56,990 --> 01:57:58,790
ARIYA HIDAYAT: But that's the
same situation like the

2445
01:57:58,790 --> 01:58:00,620
translateZ layer hacks, right?

2446
01:58:00,620 --> 01:58:01,360
PAUL LEWIS: Yeah.

2447
01:58:01,360 --> 01:58:01,940
No, exactly.

2448
01:58:01,940 --> 01:58:05,200
And so some of this stuff is
just real-world, yeah, we're

2449
01:58:05,200 --> 01:58:06,540
just going to do
this right now.

2450
01:58:06,540 --> 01:58:09,510
We wish we didn't, because
we just want to get

2451
01:58:09,510 --> 01:58:12,780
stuff that runs well.

2452
01:58:12,780 --> 01:58:14,850
ELI FIDLER: We've gotten
complaints, mostly from sites

2453
01:58:14,850 --> 01:58:18,060
that do permanent animation
all the time,

2454
01:58:18,060 --> 01:58:19,310
that GCs are a problem.

2455
01:58:19,310 --> 01:58:21,160
And that's things like games.

2456
01:58:21,160 --> 01:58:25,600
And if you're writing something
that is truly

2457
01:58:25,600 --> 01:58:29,600
interrupted by GCs on a regular
basis, then you just

2458
01:58:29,600 --> 01:58:31,040
have to create less garbage.

2459
01:58:31,040 --> 01:58:34,720
But building a game that's going
to run at 60 FPS while

2460
01:58:34,720 --> 01:58:37,280
doing complicated things is a
hard problem no matter what

2461
01:58:37,280 --> 01:58:39,410
environment it's running in and
no matter what language

2462
01:58:39,410 --> 01:58:40,530
you're running it in.

2463
01:58:40,530 --> 01:58:44,480
So you can't expect that the
browser's just going

2464
01:58:44,480 --> 01:58:45,410
to do it for you.

2465
01:58:45,410 --> 01:58:47,870
And I don't think that you could
make an easy decision,

2466
01:58:47,870 --> 01:58:50,770
even if you had a guaranteed
API that said, GC now?

2467
01:58:50,770 --> 01:58:52,300
You couldn't make an easy
decision about when

2468
01:58:52,300 --> 01:58:53,550
to call that API.

2469
01:58:53,550 --> 01:58:57,040

2470
01:58:57,040 --> 01:58:58,760
ANDRE BEHRENS: I'm curious.

2471
01:58:58,760 --> 01:59:00,940
We hear again and again when
we talk about rendering

2472
01:59:00,940 --> 01:59:03,085
performance, we have to test,
we have to look, we have to

2473
01:59:03,085 --> 01:59:04,810
look at specific things.

2474
01:59:04,810 --> 01:59:07,840
What is the brightest sign of
hope for the next thing that's

2475
01:59:07,840 --> 01:59:10,140
going to be easier to handle?

2476
01:59:10,140 --> 01:59:14,030
I'm curious, if anyone
has a perspective.

2477
01:59:14,030 --> 01:59:15,280
PAUL LEWIS: When you say
easier to handle &mdash;

2478
01:59:15,280 --> 01:59:18,880

2479
01:59:18,880 --> 01:59:21,480
ANDRE BEHRENS: In the sense of
the timeline view, made at

2480
01:59:21,480 --> 01:59:23,650
least getting a handle on
it easier than it was.

2481
01:59:23,650 --> 01:59:26,150
You could actually see it.

2482
01:59:26,150 --> 01:59:30,090
I know the inability to
see pictures in the &mdash;

2483
01:59:30,090 --> 01:59:30,460
[INAUDIBLE]

2484
01:59:30,460 --> 01:59:32,780
seen picture decode and say, oh,
that was a picture decode.

2485
01:59:32,780 --> 01:59:34,150
That's what that thing was.

2486
01:59:34,150 --> 01:59:36,270
Having that show up in
the tools is a easier

2487
01:59:36,270 --> 01:59:37,750
thing to deal with.

2488
01:59:37,750 --> 01:59:39,860
Is there anything that either
is going to go away or is

2489
01:59:39,860 --> 01:59:42,820
going to be much easier
to test for?

2490
01:59:42,820 --> 01:59:47,530
PAUL LEWIS: In terms of going
away, from Chrome perspective,

2491
01:59:47,530 --> 01:59:49,370
image decodes and resizes
are, at the

2492
01:59:49,370 --> 01:59:51,930
moment, extremely expensive.

2493
01:59:51,930 --> 01:59:55,680
And as we all probably
know, 60% of the

2494
01:59:55,680 --> 01:59:57,700
average page is images.

2495
01:59:57,700 --> 02:00:01,820
So if you can fix image decoding
and resizing as a

2496
02:00:01,820 --> 02:00:06,210
bottleneck, that helps
enormously with that problem.

2497
02:00:06,210 --> 02:00:09,510
So our engineers are definitely
looking at ways to

2498
02:00:09,510 --> 02:00:10,590
make that a thing.

2499
02:00:10,590 --> 02:00:14,090
The other that you often
see is the main thread.

2500
02:00:14,090 --> 02:00:16,680
The contention on the main
thread being so high such that

2501
02:00:16,680 --> 02:00:21,020
work can't continue, and the
app becomes unresponsive.

2502
02:00:21,020 --> 02:00:25,640
And we're looking at ways of
reducing the workload.

2503
02:00:25,640 --> 02:00:27,690
That doesn't always necessarily
mean firing off

2504
02:00:27,690 --> 02:00:31,750
more threads, which I think is
the sometimes mooted idea.

2505
02:00:31,750 --> 02:00:36,430
Which is, in Chrome's case,
we have a fairly

2506
02:00:36,430 --> 02:00:38,720
thread-heavy app.

2507
02:00:38,720 --> 02:00:41,160
So just creating more threads
wouldn't necessarily solve it.

2508
02:00:41,160 --> 02:00:43,500
So what you actually want
to do is do the work

2509
02:00:43,500 --> 02:00:45,640
in a smarter way.

2510
02:00:45,640 --> 02:00:48,050
So, for example, putting more
work that is suitable for the

2511
02:00:48,050 --> 02:00:51,450
GPU to go to the GPU,
that kind of stuff.

2512
02:00:51,450 --> 02:00:53,810
From a developer's point of
view, none of that actually

2513
02:00:53,810 --> 02:00:57,670
requires action other than try
and reduce the work that

2514
02:00:57,670 --> 02:00:59,662
you're doing, which has
always been the case.

2515
02:00:59,662 --> 02:01:02,600
If you're layout-bound try
and reduce layout.

2516
02:01:02,600 --> 02:01:05,510
Even if layout gets faster in
the browser, you still want to

2517
02:01:05,510 --> 02:01:06,780
do less of it.

2518
02:01:06,780 --> 02:01:08,720
Performance is the
art of doing the

2519
02:01:08,720 --> 02:01:09,970
least amount of work.

2520
02:01:09,970 --> 02:01:12,570

2521
02:01:12,570 --> 02:01:14,610
ANDRE BEHRENS: I think we have
a question from the crowd.

2522
02:01:14,610 --> 02:01:16,220
Suraj.

2523
02:01:16,220 --> 02:01:16,530
Yes.

2524
02:01:16,530 --> 02:01:17,780
Microphone.

2525
02:01:17,780 --> 02:01:20,580

2526
02:01:20,580 --> 02:01:21,290
AUDIENCE: Hi.

2527
02:01:21,290 --> 02:01:23,050
I have a very simple question.

2528
02:01:23,050 --> 02:01:26,720
So a few weeks ago, I was
developing this web

2529
02:01:26,720 --> 02:01:27,880
application.

2530
02:01:27,880 --> 02:01:31,880
I don't have any complicated
CSS going on, no timeouts,

2531
02:01:31,880 --> 02:01:33,290
very simple layout.

2532
02:01:33,290 --> 02:01:35,990
But it just uses a
lot of images.

2533
02:01:35,990 --> 02:01:40,020
So it [INAUDIBLE] images from
Picasa and it shows it to you.

2534
02:01:40,020 --> 02:01:41,630
And it's just slow.

2535
02:01:41,630 --> 02:01:44,000
Especially the first time, the
rendering performance is just

2536
02:01:44,000 --> 02:01:45,660
really bad.

2537
02:01:45,660 --> 02:01:49,000
So what, as a developer, I
can do to increase that

2538
02:01:49,000 --> 02:01:50,250
performance?

2539
02:01:50,250 --> 02:01:53,280

2540
02:01:53,280 --> 02:01:55,520
PAUL LEWIS: That is a tough one
right now, if I'm honest.

2541
02:01:55,520 --> 02:01:59,020
From my point of view,
we don't have &mdash;

2542
02:01:59,020 --> 02:02:01,630
so when the page is rasterizing,
it does the image

2543
02:02:01,630 --> 02:02:04,500
decodes and resizes in line
as a sort of dependency.

2544
02:02:04,500 --> 02:02:06,990
It gets this draw bitmap where
it goes, OK, now I need to

2545
02:02:06,990 --> 02:02:07,740
draw an image.

2546
02:02:07,740 --> 02:02:09,840
And I need to decode
that image and

2547
02:02:09,840 --> 02:02:11,110
resize it if necessary.

2548
02:02:11,110 --> 02:02:14,400
And then I can actually
rasterize it into the page.

2549
02:02:14,400 --> 02:02:15,630
That all happens in line.

2550
02:02:15,630 --> 02:02:20,480
If it was decoupled from the
rasterization and there was a

2551
02:02:20,480 --> 02:02:22,790
gap where it was, then it
appeared later, that

2552
02:02:22,790 --> 02:02:23,370
might be one thing.

2553
02:02:23,370 --> 02:02:25,935
But as a developer, there's
not a lot you can do.

2554
02:02:25,935 --> 02:02:29,390
Apart from perhaps batch in your
images, is something you

2555
02:02:29,390 --> 02:02:30,510
could potentially look at.

2556
02:02:30,510 --> 02:02:32,180
Because if it's all
done on demand &mdash;

2557
02:02:32,180 --> 02:02:34,540
So again, this is from a
Chrome prospective &mdash;

2558
02:02:34,540 --> 02:02:36,470
it looks at what it needs
to rasterize.

2559
02:02:36,470 --> 02:02:39,550
If that's 30 images, 30 images
are going to get queued up for

2560
02:02:39,550 --> 02:02:43,120
decoding and resizing
in one go.

2561
02:02:43,120 --> 02:02:46,300
It depends on the app, but it
might be better to hold off

2562
02:02:46,300 --> 02:02:48,600
and go, can I do these
one by one?

2563
02:02:48,600 --> 02:02:51,470
Or just over a few frames
so that I'm not hitting

2564
02:02:51,470 --> 02:02:53,150
everything at once.

2565
02:02:53,150 --> 02:02:55,090
That sometimes may be a thing.

2566
02:02:55,090 --> 02:02:58,310
But I offer advice without
knowing the

2567
02:02:58,310 --> 02:03:00,160
application in detail.

2568
02:03:00,160 --> 02:03:02,296
So use it wisely.

2569
02:03:02,296 --> 02:03:04,040
[LAUGHTER]

2570
02:03:04,040 --> 02:03:06,000
ARIYA HIDAYAT: Does it need
to show all of those

2571
02:03:06,000 --> 02:03:07,250
30 images at once?

2572
02:03:07,250 --> 02:03:12,780

2573
02:03:12,780 --> 02:03:13,320
AUDIENCE: Not really.

2574
02:03:13,320 --> 02:03:16,270
And that was one of the
things I tried to do.

2575
02:03:16,270 --> 02:03:19,010
To just show that images,
whatever is

2576
02:03:19,010 --> 02:03:21,660
visible in one page size.

2577
02:03:21,660 --> 02:03:24,870
But even then, first time, you
are getting, let's say,

2578
02:03:24,870 --> 02:03:28,630
images, it's visibly slow.

2579
02:03:28,630 --> 02:03:32,440
And I've seen similar pattern
in other websites, too,

2580
02:03:32,440 --> 02:03:34,100
well-known websites.

2581
02:03:34,100 --> 02:03:35,890
So I wasn't sure if there's
anything that can

2582
02:03:35,890 --> 02:03:38,400
be done about it.

2583
02:03:38,400 --> 02:03:41,580
PAUL LEWIS: We are trying to
get reduced the tax that is

2584
02:03:41,580 --> 02:03:44,880
levied for decodes
and resizes.

2585
02:03:44,880 --> 02:03:47,300
ELI FIDLER: We just do a whole
panel talking about images.

2586
02:03:47,300 --> 02:03:48,850
Images are expensive.

2587
02:03:48,850 --> 02:03:51,640
Having to touch every pixel in
an image and doing decodes and

2588
02:03:51,640 --> 02:03:53,420
things like that is an
expensive operation.

2589
02:03:53,420 --> 02:03:55,910
There's fundamentally no way
around the fact that we have

2590
02:03:55,910 --> 02:03:58,650
to do a lot of work when
we show images.

2591
02:03:58,650 --> 02:04:00,500
But the techniques that were
talked about in the last

2592
02:04:00,500 --> 02:04:02,140
panel &mdash; especially if you
control your images.

2593
02:04:02,140 --> 02:04:03,440
In your case, you may not.

2594
02:04:03,440 --> 02:04:07,600
But putting low-quality images
in as placeholders, and then

2595
02:04:07,600 --> 02:04:10,010
asynchronously bringing in
higher-quality versions.

2596
02:04:10,010 --> 02:04:13,800
Or carefully choosing what types
of images that you're

2597
02:04:13,800 --> 02:04:16,760
using, what compression formats,
that sort of thing,

2598
02:04:16,760 --> 02:04:20,240
for whatever's fast for your
specific operation is

2599
02:04:20,240 --> 02:04:23,000
something that you can do to
optimize image-heavy sites.

2600
02:04:23,000 --> 02:04:24,540
But fundamentally, images
are expensive.

2601
02:04:24,540 --> 02:04:25,410
There's no way around that.

2602
02:04:25,410 --> 02:04:27,710
PAUL LEWIS: It's interesting, as
a side note, that when the

2603
02:04:27,710 --> 02:04:31,850
last panel was talking,
there was a lot of

2604
02:04:31,850 --> 02:04:33,440
discussion about bandwidth.

2605
02:04:33,440 --> 02:04:35,590
And that's only part of the
picture when you're talking

2606
02:04:35,590 --> 02:04:36,280
about images.

2607
02:04:36,280 --> 02:04:38,510
Which is, the other side of this
is, how long, then, does

2608
02:04:38,510 --> 02:04:40,830
it take me to decode
it and resize it?

2609
02:04:40,830 --> 02:04:43,050
So you actually need a
full understanding.

2610
02:04:43,050 --> 02:04:47,340
You could save time on the
transfer of an image, yay.

2611
02:04:47,340 --> 02:04:49,870
And then have something that is
actually really horrible to

2612
02:04:49,870 --> 02:04:53,810
decode, or is horrible to resize
on the other side.

2613
02:04:53,810 --> 02:04:57,510
So your overall picture is
actually either worse or the

2614
02:04:57,510 --> 02:04:58,130
same or better.

2615
02:04:58,130 --> 02:05:01,910
But you need to understand the
whole lifecycle of an image to

2616
02:05:01,910 --> 02:05:05,510
actually know whether or not
you're doing the right thing.

2617
02:05:05,510 --> 02:05:08,700
And also, the low-quality
placeholder switched out with

2618
02:05:08,700 --> 02:05:11,080
a high-res one could
be really good.

2619
02:05:11,080 --> 02:05:12,780
But then you're also trading off
the fact that you probably

2620
02:05:12,780 --> 02:05:15,410
have a second request to get
your higher-res image.

2621
02:05:15,410 --> 02:05:18,040
So it's not just straightforward
often anyway.

2622
02:05:18,040 --> 02:05:20,470
And it's very specific to your
app what it is that's

2623
02:05:20,470 --> 02:05:21,390
worthwhile doing.

2624
02:05:21,390 --> 02:05:22,660
ARIYA HIDAYAT: It'll be
interesting to see if, in the

2625
02:05:22,660 --> 02:05:26,240
near future, instead of a single
CPU alone responsible

2626
02:05:26,240 --> 02:05:29,300
for images, we could
GPAC co-processors.

2627
02:05:29,300 --> 02:05:31,110
Ooh.

2628
02:05:31,110 --> 02:05:31,700
ANDRE BEHRENS: I
think we have a

2629
02:05:31,700 --> 02:05:32,950
question from Jake Archibald.

2630
02:05:32,950 --> 02:05:37,810

2631
02:05:37,810 --> 02:05:39,490
ELI FIDLER: While he's getting
the mic, image decoding is

2632
02:05:39,490 --> 02:05:42,710
actually hardware-accelerated
in many cases.

2633
02:05:42,710 --> 02:05:45,450
JAKE ARCHIBALD: So on the
scrolling-to-load-images

2634
02:05:45,450 --> 02:05:48,140
thing, like when they're out of
you, use a scroll event to

2635
02:05:48,140 --> 02:05:50,040
bring the images in, I just
wanted to point out that

2636
02:05:50,040 --> 02:05:52,640
that's a massive anti-pattern
on mobile.

2637
02:05:52,640 --> 02:05:56,240
Because if the radio falls
asleep, any device with a

2638
02:05:56,240 --> 02:05:58,480
cellular connection, waking
that radio up comes with a

2639
02:05:58,480 --> 02:06:01,310
huge latency and will
ruin the battery.

2640
02:06:01,310 --> 02:06:03,590
On the resource priority spec,
we've got a new attribute

2641
02:06:03,590 --> 02:06:05,060
called Postpone, which
hands that

2642
02:06:05,060 --> 02:06:06,500
power back to the browser.

2643
02:06:06,500 --> 02:06:08,660
And lets the browser
render without &mdash;

2644
02:06:08,660 --> 02:06:11,550
it can defer the image loading,
downloading, if it's

2645
02:06:11,550 --> 02:06:12,800
out of view.

2646
02:06:12,800 --> 02:06:16,000

2647
02:06:16,000 --> 02:06:17,830
PAUL LEWIS: As well as
deferring the image

2648
02:06:17,830 --> 02:06:20,060
downloading, I'd actually love
the ability to defer it

2649
02:06:20,060 --> 02:06:22,530
decoding as well.

2650
02:06:22,530 --> 02:06:24,970
I don't see why you'd have
one not the other.

2651
02:06:24,970 --> 02:06:25,720
Don't load this.

2652
02:06:25,720 --> 02:06:26,320
OK, do load it.

2653
02:06:26,320 --> 02:06:27,070
Fine.

2654
02:06:27,070 --> 02:06:28,050
But don't decode it.

2655
02:06:28,050 --> 02:06:30,260
OK, do decode it, it's fine.

2656
02:06:30,260 --> 02:06:33,010
That seems to go hand-in-hand
to me.

2657
02:06:33,010 --> 02:06:34,010
Unless I'm crazy.

2658
02:06:34,010 --> 02:06:35,500
It's possible.

2659
02:06:35,500 --> 02:06:37,590
ELI FIDLER: That's exactly the
magic of Web Audio for Audio.

2660
02:06:37,590 --> 02:06:39,770
Because decoding the audio is
expensive, so you want to do

2661
02:06:39,770 --> 02:06:40,930
it first so it's ready.

2662
02:06:40,930 --> 02:06:43,050
Maybe we can do Web
Audio for images.

2663
02:06:43,050 --> 02:06:45,320
Somebody write a spec.

2664
02:06:45,320 --> 02:06:46,570
PAUL LEWIS: That's
a great idea.

2665
02:06:46,570 --> 02:06:49,720

2666
02:06:49,720 --> 02:06:50,970
ANDRE BEHRENS: Next question.

2667
02:06:50,970 --> 02:06:53,290

2668
02:06:53,290 --> 02:06:54,540
Matt Todd.

2669
02:06:54,540 --> 02:07:06,530

2670
02:07:06,530 --> 02:07:10,320
MATT TODD: This is an
enormous question.

2671
02:07:10,320 --> 02:07:12,880
What have been the biggest wins
and wastes of time at

2672
02:07:12,880 --> 02:07:13,920
real websites?

2673
02:07:13,920 --> 02:07:18,550
And I think balancing that
between front-end developers

2674
02:07:18,550 --> 02:07:23,130
and web developers, but also
from browser implementation

2675
02:07:23,130 --> 02:07:27,745
development, what have been
really rewarding endeavors and

2676
02:07:27,745 --> 02:07:31,150
what have been huge wastes of
time to have taken more time

2677
02:07:31,150 --> 02:07:34,710
to actually produce any
kind of benefit?

2678
02:07:34,710 --> 02:07:38,750
ELI FIDLER: We still see a lot
of sites that, in busy loops,

2679
02:07:38,750 --> 02:07:43,220
add one node to the DOM and then
ask for a property that

2680
02:07:43,220 --> 02:07:45,250
requires you to do a layout,
and then add a note to the

2681
02:07:45,250 --> 02:07:47,510
DOM, and then ask for a property
that requires a

2682
02:07:47,510 --> 02:07:49,490
layout, in a really
tight loop.

2683
02:07:49,490 --> 02:07:51,420
And this is a huge
anti-pattern.

2684
02:07:51,420 --> 02:07:52,680
We've been telling people
this forever.

2685
02:07:52,680 --> 02:07:55,450
Most people are pretty good
about batching nodes dumped

2686
02:07:55,450 --> 02:07:56,680
into the DOM and that
sort of thing.

2687
02:07:56,680 --> 02:07:59,510
But still, a ton of people
do this all the time.

2688
02:07:59,510 --> 02:08:02,830
JOSHUA PEEK: I feel like that
doesn't happen so much where

2689
02:08:02,830 --> 02:08:03,690
you see the tight loop.

2690
02:08:03,690 --> 02:08:05,790
But it's more so that you
have all these other

2691
02:08:05,790 --> 02:08:06,700
components on the page.

2692
02:08:06,700 --> 02:08:09,150
Where one will add something
to the DOM, and something

2693
02:08:09,150 --> 02:08:12,540
unrelated can trigger
to compute stop.

2694
02:08:12,540 --> 02:08:14,910
And it just happens as
you render this page.

2695
02:08:14,910 --> 02:08:16,570
So a lot of it's
uncoordinated.

2696
02:08:16,570 --> 02:08:20,070
It's not these little tight &mdash;

2697
02:08:20,070 --> 02:08:22,000
The tight loop things,
I think, for

2698
02:08:22,000 --> 02:08:22,820
painting and rendering.

2699
02:08:22,820 --> 02:08:25,650
But a lot of people just have
all these components.

2700
02:08:25,650 --> 02:08:28,410
And then some affect the DOM
and some require reading.

2701
02:08:28,410 --> 02:08:31,930
So I think you see that among
just having a ton of

2702
02:08:31,930 --> 02:08:33,610
stuff on your page.

2703
02:08:33,610 --> 02:08:37,810
PAUL LEWIS: From my point of
view, the biggest waste of

2704
02:08:37,810 --> 02:08:41,160
time I think I've seen would
be CSS selector matching,

2705
02:08:41,160 --> 02:08:42,900
which is remarkably fast.

2706
02:08:42,900 --> 02:08:46,720
And if you're optimizing your
selectors for matching, it's

2707
02:08:46,720 --> 02:08:49,870
probably not something you're
going to see every turn on.

2708
02:08:49,870 --> 02:08:53,990
The thing that I've seen the
most use come from would be

2709
02:08:53,990 --> 02:08:57,760
promoting for isolation, putting
elements onto their

2710
02:08:57,760 --> 02:08:59,860
own layer when they're
frequently painted.

2711
02:08:59,860 --> 02:09:02,160
That's the one I've seen
work the most.

2712
02:09:02,160 --> 02:09:04,450
JOSHUA PEEK: I agree mostly on
the selector matching stuff.

2713
02:09:04,450 --> 02:09:08,520
But if you look at some really
huge DOMs, that have maybe

2714
02:09:08,520 --> 02:09:11,710
like 30,000 nodes, and
you have just a

2715
02:09:11,710 --> 02:09:13,120
buildup of all the CSS.

2716
02:09:13,120 --> 02:09:16,110
And typically people have so
many descendant selectors that

2717
02:09:16,110 --> 02:09:18,310
just target an anchor element.

2718
02:09:18,310 --> 02:09:23,410
And if you add a ton of anchor
elements in this DOM, that's

2719
02:09:23,410 --> 02:09:23,840
going to add up.

2720
02:09:23,840 --> 02:09:27,630
So it's not that every rule
matters, but there's ones that

2721
02:09:27,630 --> 02:09:28,670
you can call out.

2722
02:09:28,670 --> 02:09:29,050
PAUL LEWIS: Right.

2723
02:09:29,050 --> 02:09:30,050
For sure.

2724
02:09:30,050 --> 02:09:32,550
But I would argue that was a
fairly extreme case, unless

2725
02:09:32,550 --> 02:09:34,970
I'm misunderstanding
your description.

2726
02:09:34,970 --> 02:09:37,360
I think for most people and most
applications where the

2727
02:09:37,360 --> 02:09:39,370
DOM is not 30,000 nodes &mdash;

2728
02:09:39,370 --> 02:09:41,240
Wow.

2729
02:09:41,240 --> 02:09:43,340
JOSHUA PEEK: It's a GitHub
commit difs.

2730
02:09:43,340 --> 02:09:45,180
PAUL LEWIS: Boom.

2731
02:09:45,180 --> 02:09:46,290
ELI FIDLER: We see a lot
of sites that are

2732
02:09:46,290 --> 02:09:47,410
over 100,000 nodes.

2733
02:09:47,410 --> 02:09:48,190
PAUL LEWIS: Really?

2734
02:09:48,190 --> 02:09:49,590
Wow.

2735
02:09:49,590 --> 02:09:52,580
I'm just going to let that
sink in for a bit.

2736
02:09:52,580 --> 02:09:53,370
ANDRE BEHRENS: Jonathan,
I was wondering what

2737
02:09:53,370 --> 02:09:54,430
your experience was.

2738
02:09:54,430 --> 02:09:56,740
JOSHUA PEEK: At Etsy,
unfortunately, the big winds

2739
02:09:56,740 --> 02:09:59,570
have been removing content or
removing design elements.

2740
02:09:59,570 --> 02:10:04,510
So removing drop shadows off of
every element on the page.

2741
02:10:04,510 --> 02:10:07,050
Things like getting rid
of animated carousels.

2742
02:10:07,050 --> 02:10:09,640
Sometimes those things are hard
to pass through, because

2743
02:10:09,640 --> 02:10:11,540
the designers or the UX people
really want that.

2744
02:10:11,540 --> 02:10:13,210
But at the end of the day,
you have to test it.

2745
02:10:13,210 --> 02:10:16,670
And if people want a jank-free
experience more than they want

2746
02:10:16,670 --> 02:10:19,366
drop shadows, then that's what
you should give them.

2747
02:10:19,366 --> 02:10:21,328
ANDRE BEHRENS: We have a
question from John Mung.

2748
02:10:21,328 --> 02:10:25,810

2749
02:10:25,810 --> 02:10:26,040
JOHN: Hi.

2750
02:10:26,040 --> 02:10:29,550
We've talk about images,
decoding and resizing being

2751
02:10:29,550 --> 02:10:30,970
very expensive.

2752
02:10:30,970 --> 02:10:33,440
Do we know of any example
libraries or example

2753
02:10:33,440 --> 02:10:36,270
implementations that use web
workers and transferable

2754
02:10:36,270 --> 02:10:38,490
objects to have a significant
impact on this?

2755
02:10:38,490 --> 02:10:39,570
PAUL LEWIS: Oh dear.

2756
02:10:39,570 --> 02:10:40,820
Yes.

2757
02:10:40,820 --> 02:10:43,790
I did do, actually, an
experiment with this one where

2758
02:10:43,790 --> 02:10:47,020
I actually created canvas
elements for all the images

2759
02:10:47,020 --> 02:10:53,490
and used workers to decode
and resize the images.

2760
02:10:53,490 --> 02:10:55,550
So you can do it, is
the first answer.

2761
02:10:55,550 --> 02:10:57,540
Whether you should do it becomes
the next question.

2762
02:10:57,540 --> 02:10:59,380
And no would be &mdash;

2763
02:10:59,380 --> 02:11:00,230
[LAUGHTER]

2764
02:11:00,230 --> 02:11:02,700
PAUL LEWIS: Because
you have to manage

2765
02:11:02,700 --> 02:11:04,340
all the images yourself.

2766
02:11:04,340 --> 02:11:06,510
Is it in view?

2767
02:11:06,510 --> 02:11:08,030
Is it decoded already?

2768
02:11:08,030 --> 02:11:10,010
Have I decoded this
thing before?

2769
02:11:10,010 --> 02:11:12,740
All these things that the
browser does fantastically

2770
02:11:12,740 --> 02:11:14,330
well for you, you are
now having to

2771
02:11:14,330 --> 02:11:16,390
take care of yourself.

2772
02:11:16,390 --> 02:11:18,620
And you could shoot yourself
in the foot so hard and so

2773
02:11:18,620 --> 02:11:22,800
fast that I feel duty-bound to
say, you can do it, but don't.

2774
02:11:22,800 --> 02:11:23,830
But you can do it.

2775
02:11:23,830 --> 02:11:25,100
And it's cool.

2776
02:11:25,100 --> 02:11:27,010
ELI FIDLER: Especially on
mobile, I think it will

2777
02:11:27,010 --> 02:11:28,710
definitely, definitely
not be a win.

2778
02:11:28,710 --> 02:11:31,460
So even if you can get the
image decoded a couple of

2779
02:11:31,460 --> 02:11:33,910
milliseconds faster, the amount
of time that you're

2780
02:11:33,910 --> 02:11:37,350
going to be moving pixels
around, saturating your memory

2781
02:11:37,350 --> 02:11:42,580
bus and the battery impact of
running these web workers at

2782
02:11:42,580 --> 02:11:45,130
the same time is going to be
way, way worse than just

2783
02:11:45,130 --> 02:11:46,220
decoding the images normally.

2784
02:11:46,220 --> 02:11:49,060
PAUL LEWIS: Because you're going
to spawn a new worker.

2785
02:11:49,060 --> 02:11:52,200
So you haven't got enough cause
on mobile, probably, to

2786
02:11:52,200 --> 02:11:55,340
support that decision.

2787
02:11:55,340 --> 02:11:58,350
And it's going to be slower
because it's JavaScript.

2788
02:11:58,350 --> 02:11:59,840
But you are in control.

2789
02:11:59,840 --> 02:12:02,260
You are in total control.

2790
02:12:02,260 --> 02:12:04,590
So that's the trade
off you're making.

2791
02:12:04,590 --> 02:12:06,890
Control for all that.

2792
02:12:06,890 --> 02:12:07,050
ANDRE BEHRENS: OK.

2793
02:12:07,050 --> 02:12:08,946
We have another question
from Sergei.

2794
02:12:08,946 --> 02:12:13,730

2795
02:12:13,730 --> 02:12:17,560
SERGEI: We've had a lot of
challenges explaining network

2796
02:12:17,560 --> 02:12:20,330
performance, basically the
other side of performance

2797
02:12:20,330 --> 02:12:23,930
through designers and
businesspeople.

2798
02:12:23,930 --> 02:12:26,410
And a lot of rendering
performance, actually, is much

2799
02:12:26,410 --> 02:12:29,390
closer to the product they might
actually understand.

2800
02:12:29,390 --> 02:12:32,160
Do you have any suggestions on
how we organize the process

2801
02:12:32,160 --> 02:12:36,840
for making them understand all
these sides of the issues.

2802
02:12:36,840 --> 02:12:38,700
ANDRE BEHRENS: Jonathan?

2803
02:12:38,700 --> 02:12:38,820
JONATHAN KLEIN: Yeah.

2804
02:12:38,820 --> 02:12:41,650
I think similar to network
performance, you have to show

2805
02:12:41,650 --> 02:12:42,280
it to them.

2806
02:12:42,280 --> 02:12:44,630
And in a lot of cases, it's a
lot easier to see rendering

2807
02:12:44,630 --> 02:12:47,080
improvements being
problematic.

2808
02:12:47,080 --> 02:12:49,440
Especially if you have low-end
devices that you can show

2809
02:12:49,440 --> 02:12:49,920
people with.

2810
02:12:49,920 --> 02:12:52,070
So I think it's a question of
getting it in front of them.

2811
02:12:52,070 --> 02:12:53,570
And like you said, it's
closer to the product.

2812
02:12:53,570 --> 02:12:55,480
It's closer to the design
side of things.

2813
02:12:55,480 --> 02:12:58,010
So I think it should be easier
for those people to have a bit

2814
02:12:58,010 --> 02:12:59,470
more intuitive.

2815
02:12:59,470 --> 02:13:03,098
But I think demonstration
is the best option.

2816
02:13:03,098 --> 02:13:04,090
ANDRE BEHRENS: Yeah.

2817
02:13:04,090 --> 02:13:05,970
ELI FIDLER: I think also demoing
on cellular instead of

2818
02:13:05,970 --> 02:13:08,856
Wi-Fi helps a lot.

2819
02:13:08,856 --> 02:13:12,700
If I'm just demoing on a
constrained device, pick one.

2820
02:13:12,700 --> 02:13:13,250
Look.

2821
02:13:13,250 --> 02:13:13,750
Slow.

2822
02:13:13,750 --> 02:13:14,110
Look.

2823
02:13:14,110 --> 02:13:14,660
Fast.

2824
02:13:14,660 --> 02:13:17,216
Which would you rather ship?

2825
02:13:17,216 --> 02:13:19,530
the 10-speed's pretty
easy then, I think.

2826
02:13:19,530 --> 02:13:20,990
Or easier.

2827
02:13:20,990 --> 02:13:21,990
JONATHAN KLEIN: And then one
thing that was really

2828
02:13:21,990 --> 02:13:24,600
successful for WPU was just
business metrics.

2829
02:13:24,600 --> 02:13:25,600
And we have some of
that data now.

2830
02:13:25,600 --> 02:13:28,460
It's starting to come out
from Facebook and SE.

2831
02:13:28,460 --> 02:13:30,470
So I think showing that
information is really

2832
02:13:30,470 --> 02:13:32,430
important, to say, this
doesn't really impact

2833
02:13:32,430 --> 02:13:34,624
engagement.

2834
02:13:34,624 --> 02:13:36,050
We have a question
from Paul lrish.

2835
02:13:36,050 --> 02:13:44,020

2836
02:13:44,020 --> 02:13:46,780
PAUL IRISH: I think I was going
to mostly ask about the

2837
02:13:46,780 --> 02:13:51,720
same sort of thing, but I'm
interested in ways to

2838
02:13:51,720 --> 02:13:53,570
communicate what the impact.

2839
02:13:53,570 --> 02:13:56,570
Because network performance,
page load time, is a really

2840
02:13:56,570 --> 02:13:57,570
easy metric.

2841
02:13:57,570 --> 02:14:00,200
We can track that across
browsers, across different

2842
02:14:00,200 --> 02:14:01,120
connectivity.

2843
02:14:01,120 --> 02:14:03,400
Rendering perf.

2844
02:14:03,400 --> 02:14:06,290
There's not much in the way
of numbers that we can

2845
02:14:06,290 --> 02:14:09,060
demonstrate, say, this is the
impact that I had, or this is

2846
02:14:09,060 --> 02:14:10,180
where our problem's
at right now.

2847
02:14:10,180 --> 02:14:12,700
We need to bring it down here.

2848
02:14:12,700 --> 02:14:16,790
So do you have any ideas on
making things a bit more

2849
02:14:16,790 --> 02:14:20,330
quantitative so that management
and clients can

2850
02:14:20,330 --> 02:14:25,090
really see the impact that we
have, and then understand that

2851
02:14:25,090 --> 02:14:26,650
there is a problem that
we need to solve

2852
02:14:26,650 --> 02:14:29,662
before we get into it.

2853
02:14:29,662 --> 02:14:30,110
JONATHAN KLEIN: Yeah.

2854
02:14:30,110 --> 02:14:30,710
That's a great question.

2855
02:14:30,710 --> 02:14:31,900
Because everyone quotes
these stats.

2856
02:14:31,900 --> 02:14:34,420
Like 100 milliseconds on
Amazon was 1% revenue.

2857
02:14:34,420 --> 02:14:37,430
But you can't say like 3 frames
per second was half a

2858
02:14:37,430 --> 02:14:38,590
present revenue or something
like that.

2859
02:14:38,590 --> 02:14:40,890
So I think we just have to have
real studies that have

2860
02:14:40,890 --> 02:14:41,990
been done by real companies.

2861
02:14:41,990 --> 02:14:45,590
And ideally, companies that
are in your market.

2862
02:14:45,590 --> 02:14:47,370
So again, it's a
tough problem.

2863
02:14:47,370 --> 02:14:49,080
But I think we just need to
have more people doing

2864
02:14:49,080 --> 02:14:49,540
experiments.

2865
02:14:49,540 --> 02:14:52,120
And be willing to slow down
half their traffic to 30

2866
02:14:52,120 --> 02:14:54,235
frames per second and
see what happens.

2867
02:14:54,235 --> 02:14:56,440
PAUL LEWIS: We are now at the
point where the browser is

2868
02:14:56,440 --> 02:15:00,400
capable of 60 frames a second,
which hasn't always been true.

2869
02:15:00,400 --> 02:15:03,900
But now that it is, we're
playing catch-up with the page

2870
02:15:03,900 --> 02:15:06,190
load time part of the
performance, and now we need

2871
02:15:06,190 --> 02:15:07,070
to ask that question.

2872
02:15:07,070 --> 02:15:11,920
Say, as an industry, as a body
of developers, we are

2873
02:15:11,920 --> 02:15:15,050
interested, I hope, in seeing
how the actual runtime

2874
02:15:15,050 --> 02:15:18,800
experience affects our
users, and how much

2875
02:15:18,800 --> 02:15:19,990
it affects our users.

2876
02:15:19,990 --> 02:15:22,400
Because we don't know today, is
at the same, is it less, is

2877
02:15:22,400 --> 02:15:24,290
it more than the
page load time?

2878
02:15:24,290 --> 02:15:28,080
Because they load once,
hopefully, and run

2879
02:15:28,080 --> 02:15:29,830
it for a long time.

2880
02:15:29,830 --> 02:15:34,180
So 100 milliseconds different on
rendering for page load is

2881
02:15:34,180 --> 02:15:37,610
a very different deal to
repeatedly hitting them with

2882
02:15:37,610 --> 02:15:38,170
100 miliseconds.

2883
02:15:38,170 --> 02:15:41,180
But we don't know
how big that is.

2884
02:15:41,180 --> 02:15:45,540
So we don't have a good answer,
I don't think, on how

2885
02:15:45,540 --> 02:15:46,980
much it affects the
bottom line.

2886
02:15:46,980 --> 02:15:48,930
But I think we need to find
out, and pretty quickly.

2887
02:15:48,930 --> 02:15:51,558

2888
02:15:51,558 --> 02:15:52,000
ANDRE BEHRENS: All right.

2889
02:15:52,000 --> 02:15:53,860
I think that about wraps
it up for us.

2890
02:15:53,860 --> 02:15:56,876
Are we ready for lunch?

2891
02:15:56,876 --> 02:15:59,550
[LAUGHTER]

2892
02:15:59,550 --> 02:16:00,860
ANDRE BEHRENS: Oh, someone has
a microphone ready to go?

2893
02:16:00,860 --> 02:16:01,320
AUDIENCE: Yeah.

2894
02:16:01,320 --> 02:16:02,070
ANDRE BEHRENS: That's fine.

2895
02:16:02,070 --> 02:16:04,060
AUDIENCE: One question.

2896
02:16:04,060 --> 02:16:06,170
My biggest problem with
rendering performance is that

2897
02:16:06,170 --> 02:16:08,930
I cannot describe my intent
to the browser.

2898
02:16:08,930 --> 02:16:12,810
I cannot describe my intent that
I want this element to

2899
02:16:12,810 --> 02:16:15,560
have higher priority when
branded over another.

2900
02:16:15,560 --> 02:16:17,820
And I think that's the biggest
problem for me which we're

2901
02:16:17,820 --> 02:16:18,550
talking rendering performance.

2902
02:16:18,550 --> 02:16:21,290
That the browser is making false
assumptions of what my

2903
02:16:21,290 --> 02:16:23,020
intent is in my layout out.

2904
02:16:23,020 --> 02:16:24,800
And I think this goes together
with images.

2905
02:16:24,800 --> 02:16:27,450
This image should be rendered
before that.

2906
02:16:27,450 --> 02:16:30,500
This box should be rendered
before this box.

2907
02:16:30,500 --> 02:16:32,940
And what are we doing to look
into that so I, as a

2908
02:16:32,940 --> 02:16:35,509
developer, can declare my intend
to the browser so the

2909
02:16:35,509 --> 02:16:37,000
browser can make or the
rendering agent can make a

2910
02:16:37,000 --> 02:16:41,059
more intelligent guess of how
things should be composed when

2911
02:16:41,059 --> 02:16:42,809
layoutting.

2912
02:16:42,809 --> 02:16:45,219
Because now we're talking
about translateZ.

2913
02:16:45,219 --> 02:16:47,520
That is, to me, a hack.

2914
02:16:47,520 --> 02:16:49,530
First of all, it is
not hardware &mdash;

2915
02:16:49,530 --> 02:16:51,969
[INAUDIBLE] hardware
restoration in IE.

2916
02:16:51,969 --> 02:16:54,549
And as a web developer, I
shouldn't know about layers.

2917
02:16:54,549 --> 02:16:56,280
That's an implementation
detail in

2918
02:16:56,280 --> 02:16:57,540
the rendering engine.

2919
02:16:57,540 --> 02:17:01,620
I just want to declare my intent
that this layer is

2920
02:17:01,620 --> 02:17:05,139
either higher or lower priority,
and then you guys

2921
02:17:05,139 --> 02:17:06,410
should figure out the rest.

2922
02:17:06,410 --> 02:17:08,690
Are we looking into
these things?

2923
02:17:08,690 --> 02:17:11,859
Is there any proposals
coming up?

2924
02:17:11,859 --> 02:17:13,109
MALE SPEAKER: [INAUDIBLE].

2925
02:17:13,109 --> 02:17:15,110

2926
02:17:15,110 --> 02:17:15,465
No?

2927
02:17:15,465 --> 02:17:16,715
Nobody [INAUDIBLE]?

2928
02:17:16,715 --> 02:17:20,969

2929
02:17:20,969 --> 02:17:22,670
PAUL LEWIS: First of all, the
browser should do everything

2930
02:17:22,670 --> 02:17:27,242
for me is one thing I would
want to pick up on.

2931
02:17:27,242 --> 02:17:28,830
I don't know how much
I agree with that.

2932
02:17:28,830 --> 02:17:32,320
I don't think I agree
with that.

2933
02:17:32,320 --> 02:17:34,160
The way I would normally phrase
this is if you write

2934
02:17:34,160 --> 02:17:37,820
spec compliant code, you should
expect spec compliant

2935
02:17:37,820 --> 02:17:39,700
responses from the browser.

2936
02:17:39,700 --> 02:17:41,370
But there is no promise
of performance.

2937
02:17:41,370 --> 02:17:42,600
Now, the promise comes
through the fact that

2938
02:17:42,600 --> 02:17:43,940
everybody wants fast code.

2939
02:17:43,940 --> 02:17:48,139
Browser vendors want to give
you fast implementations.

2940
02:17:48,139 --> 02:17:51,020
And so that's something you
should seek and you should ask

2941
02:17:51,020 --> 02:17:53,260
for and you should push
for, definitely.

2942
02:17:53,260 --> 02:17:57,090
But I think it's very difficult
to, hand-on-heart,

2943
02:17:57,090 --> 02:18:01,400
say any programmer should be
completely divorced from the

2944
02:18:01,400 --> 02:18:02,690
system they're programming on.

2945
02:18:02,690 --> 02:18:05,010
I can't quite bring myself
to say that.

2946
02:18:05,010 --> 02:18:09,400
I think it would be a nice
thing, but I don't think

2947
02:18:09,400 --> 02:18:11,170
that's realistic.

2948
02:18:11,170 --> 02:18:13,760
Is that something that we
are looking to improve?

2949
02:18:13,760 --> 02:18:14,280
Yeah, always.

2950
02:18:14,280 --> 02:18:15,530
I think there's always
a definite

2951
02:18:15,530 --> 02:18:18,320
balancing act of APIs.

2952
02:18:18,320 --> 02:18:20,830
If they're overly prescriptive
and you don't get enough

2953
02:18:20,830 --> 02:18:23,420
control, then you end up with
what I think is the App Cache

2954
02:18:23,420 --> 02:18:27,314
situation, where you can't
bridge that gap.

2955
02:18:27,314 --> 02:18:29,990

2956
02:18:29,990 --> 02:18:33,700
At least if it's too difficult
or it's a horrible API &mdash;

2957
02:18:33,700 --> 02:18:36,969
and I would argue that things
like WebGL are very, very

2958
02:18:36,969 --> 02:18:39,180
horrible from a developer's
point of view.

2959
02:18:39,180 --> 02:18:40,440
But at least you can
polyfill that.

2960
02:18:40,440 --> 02:18:43,360
You can at least add on
something like 3JS.

2961
02:18:43,360 --> 02:18:45,610
so I'd rather it's
that way around.

2962
02:18:45,610 --> 02:18:49,270
But it comes through developer
feedback, saying we don't

2963
02:18:49,270 --> 02:18:50,200
think this works.

2964
02:18:50,200 --> 02:18:51,600
We don't like this.

2965
02:18:51,600 --> 02:18:52,000
ANDRE BEHRENS: OK.

2966
02:18:52,000 --> 02:18:55,743
And I think that is really it.

2967
02:18:55,743 --> 02:19:05,440
[APPLAUSE]

2968
02:19:05,440 --> 02:19:05,980
ANDREW BETTS: Thanks
very much.

2969
02:19:05,980 --> 02:19:08,200
So we have a 15 minute
break now.

2970
02:19:08,200 --> 02:19:11,030
So go ahead and have some
snacks, go to the loo.

2971
02:19:11,030 --> 02:19:12,139
Back in 15 minutes.

2972
02:19:12,139 --> 02:19:13,389
[INTERPOSING VOICES]

2973
02:19:13,389 --> 02:19:19,944

2974
02:19:19,944 --> 02:19:20,895
ANDREW BETTS: Steve.

2975
02:19:20,895 --> 02:19:21,889
Right.

2976
02:19:21,889 --> 02:19:22,689
You're next.

2977
02:19:22,689 --> 02:19:23,159
STEVE THAIR: OK.

2978
02:19:23,159 --> 02:19:24,304
ANDREW BETTS: Then bring up &mdash;

2979
02:19:24,304 --> 02:32:50,698
[MUSIC PLAYING]

2980
02:32:50,698 --> 02:32:51,320
ANDREW BETTS: Hi everyone.

2981
02:32:51,320 --> 02:32:53,450
We're going to get started again
in a few minutes' time.

2982
02:32:53,450 --> 02:32:55,210
So make your way back
to your seats.

2983
02:32:55,210 --> 02:32:55,835
Thanks very much.

2984
02:32:55,835 --> 02:32:57,085
[INTERPOSING VOICES]

2985
02:32:57,085 --> 02:34:38,106

2986
02:34:38,106 --> 02:36:16,908
[MUSIC PLAYING]

2987
02:36:16,908 --> 02:36:18,110
ANDREW BETTS: OK everyone.

2988
02:36:18,110 --> 02:36:20,160
Can you take a seat, because
we're going to get started

2989
02:36:20,160 --> 02:36:21,950
with the next session now.

2990
02:36:21,950 --> 02:36:25,220
So please come back and
take your seats.

2991
02:36:25,220 --> 02:36:26,470
[INTERPOSING VOICES]

2992
02:36:26,470 --> 02:36:31,290

2993
02:36:31,290 --> 02:36:33,690
ANDREW BETTS: So are you
doing his slides?

2994
02:36:33,690 --> 02:36:35,175
STEVE THAIR: Yeah.

2995
02:36:35,175 --> 02:36:36,165
ANDREW BETTS: That works.

2996
02:36:36,165 --> 02:36:37,415
[INTERPOSING VOICES]

2997
02:36:37,415 --> 02:37:21,705

2998
02:37:21,705 --> 02:37:22,200
ANDREW BETTS: OK.

2999
02:37:22,200 --> 02:37:24,995
We'll make a start now.

3000
02:37:24,995 --> 02:37:27,450
Our next session is one that
I've been really looking

3001
02:37:27,450 --> 02:37:28,840
forward to.

3002
02:37:28,840 --> 02:37:29,760
Hey everyone.

3003
02:37:29,760 --> 02:37:31,040
STEVE THAIR: Grab a set!

3004
02:37:31,040 --> 02:37:32,710
ANDREW BETTS: Thank you Steve.

3005
02:37:32,710 --> 02:37:34,310
[STEVE WHISTLES]

3006
02:37:34,310 --> 02:37:35,580
ANDREW BETTS: This next session
is one I've been

3007
02:37:35,580 --> 02:37:36,840
really looking forward to.

3008
02:37:36,840 --> 02:37:41,910
Because most large content
publishers, including the FT,

3009
02:37:41,910 --> 02:37:44,210
have a lot of third-party
scripts that they

3010
02:37:44,210 --> 02:37:45,610
put on their websites.

3011
02:37:45,610 --> 02:37:49,690
And managing those scripts and
managing the performance, the

3012
02:37:49,690 --> 02:37:51,870
implications of having a lot of
third-party scripts can be

3013
02:37:51,870 --> 02:37:54,350
a really trying experience for
a lot of web developers.

3014
02:37:54,350 --> 02:37:56,030
And it's certainly a
challenge that we

3015
02:37:56,030 --> 02:37:56,840
struggle with every day.

3016
02:37:56,840 --> 02:38:03,430
So to moderate this panel, we
have my friend Steve Thair

3017
02:38:03,430 --> 02:38:05,830
who, I'm sure, will
introduce himself

3018
02:38:05,830 --> 02:38:07,620
and his panel admirably.

3019
02:38:07,620 --> 02:38:10,020
So I'll give it to Steve.

3020
02:38:10,020 --> 02:38:12,870
STEVE THAIR: Thanks, Andrew.

3021
02:38:12,870 --> 02:38:13,240
Thank you.

3022
02:38:13,240 --> 02:38:15,380
Thank you, Barb.

3023
02:38:15,380 --> 02:38:16,180
Hi.

3024
02:38:16,180 --> 02:38:17,390
My name's Steve Thair.

3025
02:38:17,390 --> 02:38:21,180
I run the London Web Performance
user group and I

3026
02:38:21,180 --> 02:38:23,070
run WebPerfDays in London.

3027
02:38:23,070 --> 02:38:26,880
So performance of third-party
scripts is a really big area

3028
02:38:26,880 --> 02:38:29,480
for us, and we debate
it endlessly.

3029
02:38:29,480 --> 02:38:33,200
I'll quickly introduce you
to the people on a panel.

3030
02:38:33,200 --> 02:38:37,210
On my right, I've got the &mdash;

3031
02:38:37,210 --> 02:38:39,510
Well, if we're going to do a
drug dealer analogy, these are

3032
02:38:39,510 --> 02:38:43,560
the guys who are actually
producing the stuff.

3033
02:38:43,560 --> 02:38:46,350
We've got Ben Vinegar
from Disqus.

3034
02:38:46,350 --> 02:38:47,510
Discussions and comments
you'll have

3035
02:38:47,510 --> 02:38:49,160
seen on many websites.

3036
02:38:49,160 --> 02:38:53,970
We've got Stoyan Stefanov from
Facebook, who is Like buttons

3037
02:38:53,970 --> 02:38:55,650
and those Facebook widgets
that you like

3038
02:38:55,650 --> 02:38:57,170
to put on your page.

3039
02:38:57,170 --> 02:39:01,010
And over here, we've got Guy
Podjarny from Akamai, who's

3040
02:39:01,010 --> 02:39:03,940
like the middle man, the
distribution network for the

3041
02:39:03,940 --> 02:39:06,190
stuff that they're dealing.

3042
02:39:06,190 --> 02:39:07,350
And then we've got &mdash;

3043
02:39:07,350 --> 02:39:08,580
well, I was going to say
addict, but that's

3044
02:39:08,580 --> 02:39:10,290
probably not right.

3045
02:39:10,290 --> 02:39:13,320
We've got Barbara Bermes from
the Canadian Broadcasting

3046
02:39:13,320 --> 02:39:14,170
Corporation.

3047
02:39:14,170 --> 02:39:17,740
She's the end user, this poor
person that's having all of

3048
02:39:17,740 --> 02:39:19,200
these scripts.

3049
02:39:19,200 --> 02:39:22,990
She has to deal with her
customers, the people on the

3050
02:39:22,990 --> 02:39:24,990
marketing team who never
met a third-party

3051
02:39:24,990 --> 02:39:27,190
script they didn't like.

3052
02:39:27,190 --> 02:39:28,530
And they just want to
stick a [INAUDIBLE]

3053
02:39:28,530 --> 02:39:30,930
on the page, and she's got to
deal with all of those issues.

3054
02:39:30,930 --> 02:39:34,340
So we're going to kick off
with a presentation from

3055
02:39:34,340 --> 02:39:36,990
Stoyan just to set
the scene on what

3056
02:39:36,990 --> 02:39:38,950
third-party stuff means.

3057
02:39:38,950 --> 02:39:42,340
Just remember, obviously we've
got the on slide stuff.

3058
02:39:42,340 --> 02:39:45,820
So try and use that as
much as you can.

3059
02:39:45,820 --> 02:39:49,050
Come in, give positive and
negative feedback.

3060
02:39:49,050 --> 02:39:52,570
And obviously, put your
hand up on slide

3061
02:39:52,570 --> 02:39:53,690
if you want to talk.

3062
02:39:53,690 --> 02:39:55,240
Thank you.

3063
02:39:55,240 --> 02:39:56,470
[INAUDIBLE].

3064
02:39:56,470 --> 02:39:58,680
STOYAN STEFANOV: Thank
you Steven.

3065
02:39:58,680 --> 02:39:59,090
All right.

3066
02:39:59,090 --> 02:40:06,500
So welcome to the third-party
party, where we party like

3067
02:40:06,500 --> 02:40:12,150
it's 1995, because in many ways,
it is 1995 when it comes

3068
02:40:12,150 --> 02:40:13,630
to third-party widgets.

3069
02:40:13,630 --> 02:40:16,750
So I'm hoping we can have a
nice discussion on how to

3070
02:40:16,750 --> 02:40:21,300
bring this party to today
and tomorrow.

3071
02:40:21,300 --> 02:40:22,550
Slide, please.

3072
02:40:22,550 --> 02:40:25,640

3073
02:40:25,640 --> 02:40:29,680
So Steven now did the same thing
that I was planning to.

3074
02:40:29,680 --> 02:40:33,840
So he stole my thunder, of
presenting the widget makers

3075
02:40:33,840 --> 02:40:35,550
versus the consumers.

3076
02:40:35,550 --> 02:40:37,890
I can only add that Steven
is also on the upside.

3077
02:40:37,890 --> 02:40:42,730
He's social on Barbara's side.

3078
02:40:42,730 --> 02:40:43,700
Protecting.

3079
02:40:43,700 --> 02:40:46,530
STEVE THAIR: Impartial
moderator.

3080
02:40:46,530 --> 02:40:49,370
STOYAN STEFANOV: Protecting the
publishers from all the

3081
02:40:49,370 --> 02:40:50,910
extravagance we put out there.

3082
02:40:50,910 --> 02:40:54,980

3083
02:40:54,980 --> 02:40:55,760
All right.

3084
02:40:55,760 --> 02:40:58,500
So just a quick overview.

3085
02:40:58,500 --> 02:41:01,540
Third-party content comes mostly
in the form of script

3086
02:41:01,540 --> 02:41:03,460
that you include on the page.

3087
02:41:03,460 --> 02:41:05,520
It may not do anything
visible.

3088
02:41:05,520 --> 02:41:08,490
It may be something like
Google Analytics.

3089
02:41:08,490 --> 02:41:12,560
Or you put an iFrame on
the page coming from a

3090
02:41:12,560 --> 02:41:13,620
third-party.

3091
02:41:13,620 --> 02:41:16,720
Or the state of the art used
to be that you do both.

3092
02:41:16,720 --> 02:41:21,280
You include a script that writes
an iFrame for you.

3093
02:41:21,280 --> 02:41:25,240
So that we focus, we want to
talk more about how we deal

3094
02:41:25,240 --> 02:41:27,060
with scripts than iFrames.

3095
02:41:27,060 --> 02:41:31,670

3096
02:41:31,670 --> 02:41:35,200
You're including JavaScript
on the page coming from

3097
02:41:35,200 --> 02:41:38,110
somewhere, you don't know, you
have no control over, coming

3098
02:41:38,110 --> 02:41:38,920
over the network.

3099
02:41:38,920 --> 02:41:42,650
So what could possibly
go wrong with that?

3100
02:41:42,650 --> 02:41:44,540
Well, obviously, there's
a security issue.

3101
02:41:44,540 --> 02:41:51,620
And Ben wanted to bring up a
recent attack on Outbrain,

3102
02:41:51,620 --> 02:41:55,770
which is a producer
of third-party

3103
02:41:55,770 --> 02:41:58,100
recommendation engine.

3104
02:41:58,100 --> 02:42:07,080
So it was attacked by Syrian
Army folks who were able to

3105
02:42:07,080 --> 02:42:08,570
mess with our JavaScript.

3106
02:42:08,570 --> 02:42:11,750
And in this way, affect
all the pages

3107
02:42:11,750 --> 02:42:13,550
that use their service.

3108
02:42:13,550 --> 02:42:17,370
So let's say, for example, they
could redirect all the

3109
02:42:17,370 --> 02:42:21,330
visitors to "Washington Post"
to some other page.

3110
02:42:21,330 --> 02:42:23,290
So I think if you're an
attacker, if you're a

3111
02:42:23,290 --> 02:42:26,580
malicious person, why would
you try to break into all

3112
02:42:26,580 --> 02:42:29,580
these websites, where you can do
your one-stop shopping and

3113
02:42:29,580 --> 02:42:31,780
break into a third-party widget
provider and have

3114
02:42:31,780 --> 02:42:34,110
control over so many websites.

3115
02:42:34,110 --> 02:42:36,560
So security is obviously
a big one.

3116
02:42:36,560 --> 02:42:43,190
And then you have the SPOF, or
single point of failure, where

3117
02:42:43,190 --> 02:42:46,690
if a page includes a script
synchronously, they add a

3118
02:42:46,690 --> 02:42:48,100
single point of failure.

3119
02:42:48,100 --> 02:42:51,620
And despite the fact that we
have now good tools from Pat

3120
02:42:51,620 --> 02:42:55,150
Meenan's SPOF-O-matic extension
for Chrome.

3121
02:42:55,150 --> 02:43:00,630
And also, you are able to find
SPOF using web page test.

3122
02:43:00,630 --> 02:43:04,220
But it seems like that still
tends to be an issue.

3123
02:43:04,220 --> 02:43:07,320
Which is pretty silly, because
if the third-party provider is

3124
02:43:07,320 --> 02:43:10,890
blocked in a country or an
enterprise, that means your

3125
02:43:10,890 --> 02:43:14,910
site is effectively blocked
as well, or black-holed.

3126
02:43:14,910 --> 02:43:17,800
And then there's all the
performance issues that

3127
02:43:17,800 --> 02:43:22,450
anything you add on the page
will add to the rendering time

3128
02:43:22,450 --> 02:43:24,160
and loading time and all that.

3129
02:43:24,160 --> 02:43:26,960

3130
02:43:26,960 --> 02:43:27,320
All right.

3131
02:43:27,320 --> 02:43:28,240
So what does the
state-of-the-art

3132
02:43:28,240 --> 02:43:30,210
of the script include?

3133
02:43:30,210 --> 02:43:33,440
So despite all the evangelism
for using asynchronous

3134
02:43:33,440 --> 02:43:36,230
scripts, people are still
using scripts tags.

3135
02:43:36,230 --> 02:43:41,050
And sometimes the widget
providers on the marketing

3136
02:43:41,050 --> 02:43:42,860
side will prefer that,
because it's easier.

3137
02:43:42,860 --> 02:43:45,610
You just have one script
tag instead of a

3138
02:43:45,610 --> 02:43:47,550
little bit of code.

3139
02:43:47,550 --> 02:43:49,910
So that's pretty bad.

3140
02:43:49,910 --> 02:43:53,460
There is currently some things
on the crazier side, like

3141
02:43:53,460 --> 02:43:58,750
using frame-in-frame, loading
JavaScript inside of a iFrame.

3142
02:43:58,750 --> 02:44:01,340
Or when you write an
iFrame, write it

3143
02:44:01,340 --> 02:44:02,880
inside of another iFrame.

3144
02:44:02,880 --> 02:44:06,320
So the first iFrame container
is blank, so it's not in the

3145
02:44:06,320 --> 02:44:08,750
way of the window
onload event.

3146
02:44:08,750 --> 02:44:11,900
So this is for people who still
care about the window

3147
02:44:11,900 --> 02:44:14,530
[INAUDIBLE] onload and
whenever it happens.

3148
02:44:14,530 --> 02:44:21,440
Not as easy or friendly to
copy-paste, but it exists.

3149
02:44:21,440 --> 02:44:23,290
Something else.

3150
02:44:23,290 --> 02:44:25,760
So the thing about third-party
JavaScript is they are

3151
02:44:25,760 --> 02:44:28,160
notoriously being very
short-lived.

3152
02:44:28,160 --> 02:44:31,480
10, 15 minutes, half an hour.

3153
02:44:31,480 --> 02:44:35,420
And the reason is so that the
third-party provider can push

3154
02:44:35,420 --> 02:44:40,190
fixes and security updates
very quickly.

3155
02:44:40,190 --> 02:44:42,250
But that's bad for performance,
because we cannot

3156
02:44:42,250 --> 02:44:46,475
use future expires header.

3157
02:44:46,475 --> 02:44:50,980
So there's this technique of,
again, using an iFrame and

3158
02:44:50,980 --> 02:44:53,280
reloading that iFrame
that causes

3159
02:44:53,280 --> 02:44:54,870
this group to be refreshed.

3160
02:44:54,870 --> 02:44:57,280
So we can have a third-party
JavaScript with a far future

3161
02:44:57,280 --> 02:44:59,290
expires header.

3162
02:44:59,290 --> 02:45:03,384
I don't know if anyone's
doing it currently.

3163
02:45:03,384 --> 02:45:04,360
MALE SPEAKER: [INAUDIBLE].

3164
02:45:04,360 --> 02:45:04,930
STOYAN STEFANOV: [INAUDIBLE].

3165
02:45:04,930 --> 02:45:07,330
All right.

3166
02:45:07,330 --> 02:45:11,250
And then there's stuff that's
coming out from the WebPerf

3167
02:45:11,250 --> 02:45:16,160
W3C group, which I was hoping
someone can enlighten us

3168
02:45:16,160 --> 02:45:20,335
what's going on there
with the progress.

3169
02:45:20,335 --> 02:45:21,660
Right.

3170
02:45:21,660 --> 02:45:22,910
Next.

3171
02:45:22,910 --> 02:45:24,960

3172
02:45:24,960 --> 02:45:25,140
Oh yeah.

3173
02:45:25,140 --> 02:45:29,470
There's this idea about
what I call C3PO, or

3174
02:45:29,470 --> 02:45:30,720
Common 3rd Party Object.

3175
02:45:30,720 --> 02:45:34,780

3176
02:45:34,780 --> 02:45:37,860
So this is something that I put
up some time ago, and then

3177
02:45:37,860 --> 02:45:40,450
Ben said that he's been thinking
about the same thing,

3178
02:45:40,450 --> 02:45:41,840
but we never really
got to talk.

3179
02:45:41,840 --> 02:45:44,570
So I think that's as
good a time as any.

3180
02:45:44,570 --> 02:45:48,520
So the views of those scripts
that are included from third

3181
02:45:48,520 --> 02:45:50,390
parties usually do
the same thing.

3182
02:45:50,390 --> 02:45:53,470
They hunt the page for
any hints where the

3183
02:45:53,470 --> 02:45:54,990
iFrame should go.

3184
02:45:54,990 --> 02:45:58,180
So they look at the DOM and then
write an iFrame, and then

3185
02:45:58,180 --> 02:46:00,470
resize the iFrame because
the content doesn't fit.

3186
02:46:00,470 --> 02:46:03,700
Let's say you have a Like button
in German, which is a

3187
02:46:03,700 --> 02:46:04,615
longer word.

3188
02:46:04,615 --> 02:46:07,460
So you have to resize the iFrame
not to take more space

3189
02:46:07,460 --> 02:46:08,790
than needed.

3190
02:46:08,790 --> 02:46:13,240
And a lot of widget providers
are doing the same thing.

3191
02:46:13,240 --> 02:46:18,630
So what if we can have one
script that is open source

3192
02:46:18,630 --> 02:46:24,500
that handles this for
most of the widgets?

3193
02:46:24,500 --> 02:46:27,680
So this means that the publisher
can include the

3194
02:46:27,680 --> 02:46:31,580
script and package it however
they want with their scripts,

3195
02:46:31,580 --> 02:46:35,220
and handle all the widgets.

3196
02:46:35,220 --> 02:46:40,340
Or we download five, six scrips
with 100, 200K instead

3197
02:46:40,340 --> 02:46:43,140
of having just 0 requests.

3198
02:46:43,140 --> 02:46:44,390
So that is the idea.

3199
02:46:44,390 --> 02:46:47,580

3200
02:46:47,580 --> 02:46:51,290
Meanwhile, what we have in the
near future coming up.

3201
02:46:51,290 --> 02:46:53,590
So we have now Web Components.

3202
02:46:53,590 --> 02:46:56,830
I don't know if anyone's
using Web Components.

3203
02:46:56,830 --> 02:46:58,500
If not, why not?

3204
02:46:58,500 --> 02:47:00,970
It seems like the widgets are
the best use case for Web

3205
02:47:00,970 --> 02:47:02,670
Components.

3206
02:47:02,670 --> 02:47:07,910
Then I'm thinking, is it any
easier on the publisher's side

3207
02:47:07,910 --> 02:47:10,930
to include a Web Component
instead of the current state,

3208
02:47:10,930 --> 02:47:15,700
where you include a dif class
something, end the script.

3209
02:47:15,700 --> 02:47:18,790
There's the iFrame Sandbox.

3210
02:47:18,790 --> 02:47:20,070
It's really cool.

3211
02:47:20,070 --> 02:47:23,370
Should we encourage people
to use it or not?

3212
02:47:23,370 --> 02:47:27,290
What would this allow in
a third-party widget?

3213
02:47:27,290 --> 02:47:30,400
So there was the idea
of seamless iFrame.

3214
02:47:30,400 --> 02:47:35,000
Seems like it's not
going away.

3215
02:47:35,000 --> 02:47:36,920
The same with the
iFrame scrdoc.

3216
02:47:36,920 --> 02:47:39,410
I don't know what's
the state of that.

3217
02:47:39,410 --> 02:47:40,580
Is it dying as well?

3218
02:47:40,580 --> 02:47:42,200
So we can talk about it.

3219
02:47:42,200 --> 02:47:45,160
STEVE THAIR: We just got
a negative vote.

3220
02:47:45,160 --> 02:47:47,080
[LAUGHTER]

3221
02:47:47,080 --> 02:47:48,330
MALE SPEAKER: [INAUDIBLE]

3222
02:47:48,330 --> 02:47:53,340

3223
02:47:53,340 --> 02:47:55,400
STOYAN STEFANOV: Content
security policy.

3224
02:47:55,400 --> 02:47:55,920
It exists.

3225
02:47:55,920 --> 02:47:57,300
It's out there.

3226
02:47:57,300 --> 02:47:58,720
What should we do about it?

3227
02:47:58,720 --> 02:48:02,170
Should we encourage people to
use it, providers as well as

3228
02:48:02,170 --> 02:48:03,640
publishers?

3229
02:48:03,640 --> 02:48:05,020
I'm curious to hear
your thoughts.

3230
02:48:05,020 --> 02:48:08,550

3231
02:48:08,550 --> 02:48:11,280
But meanwhile, what
happens now &mdash;

3232
02:48:11,280 --> 02:48:15,620
and Barbara can talk about
this from the publisher's

3233
02:48:15,620 --> 02:48:16,190
perspective.

3234
02:48:16,190 --> 02:48:19,460
So she said that sites are
now bombarded by scripts.

3235
02:48:19,460 --> 02:48:22,060
There's too much
stuff going on.

3236
02:48:22,060 --> 02:48:25,240
And she is also, like Steven
said, challenging anyone to

3237
02:48:25,240 --> 02:48:29,380
stand between the marketing
people and their widgets.

3238
02:48:29,380 --> 02:48:32,920
So how do you monitor
third-party widgets?

3239
02:48:32,920 --> 02:48:35,340
Do people set a budgets
and say, OK, you have

3240
02:48:35,340 --> 02:48:36,590
this amount of time.

3241
02:48:36,590 --> 02:48:39,480

3242
02:48:39,480 --> 02:48:43,460
How do we keep the third-parties
in track?

3243
02:48:43,460 --> 02:48:46,900
Also, how do we deal with some &mdash;
because not all the

3244
02:48:46,900 --> 02:48:49,070
third party code is
very well-written.

3245
02:48:49,070 --> 02:48:51,690
So how do people deal with the
scripts that have to do

3246
02:48:51,690 --> 02:48:52,940
document.write and so on.

3247
02:48:52,940 --> 02:48:55,610

3248
02:48:55,610 --> 02:49:01,390
Guy brought a good question
about according to the HTTP

3249
02:49:01,390 --> 02:49:03,300
archive, the number of
the main [INAUDIBLE]

3250
02:49:03,300 --> 02:49:07,200
website he's using isn't going
up, is increasing.

3251
02:49:07,200 --> 02:49:11,330
And it can be largely attributed
to third parties.

3252
02:49:11,330 --> 02:49:15,970
So what can we do to fix this?

3253
02:49:15,970 --> 02:49:17,620
And he has some ideas.

3254
02:49:17,620 --> 02:49:21,420
Some borderline crazy, like
coping cookies from one domain

3255
02:49:21,420 --> 02:49:22,270
to the other.

3256
02:49:22,270 --> 02:49:26,470
Some maybe more manageable,
like, what if we use the same

3257
02:49:26,470 --> 02:49:29,880
domain name for all the static
resources and script and

3258
02:49:29,880 --> 02:49:34,920
styles and sprites, and shared
between all the third parties.

3259
02:49:34,920 --> 02:49:38,570
So instead of loading something
from Facebook,

3260
02:49:38,570 --> 02:49:42,010
Akamai.net, whatever, why don't
we use something else,

3261
02:49:42,010 --> 02:49:43,740
like common domain name.

3262
02:49:43,740 --> 02:49:46,850
C3PO comes to mind.

3263
02:49:46,850 --> 02:49:48,100
STEVE THAIR: I think it would
be C3PO.Akamai.com.

3264
02:49:48,100 --> 02:49:51,370

3265
02:49:51,370 --> 02:49:51,810
STOYAN STEFANOV: Oh, mobile.

3266
02:49:51,810 --> 02:49:52,440
Right.

3267
02:49:52,440 --> 02:49:53,250
It's finally here.

3268
02:49:53,250 --> 02:49:55,110
Yay.

3269
02:49:55,110 --> 02:49:57,940
What does it mean for widgets?

3270
02:49:57,940 --> 02:50:00,260
Is it only just making
performance

3271
02:50:00,260 --> 02:50:01,960
issues even more visible?

3272
02:50:01,960 --> 02:50:03,380
Should we do something
about it?

3273
02:50:03,380 --> 02:50:08,720
Are people using that many
widgets on mobile websites?

3274
02:50:08,720 --> 02:50:09,970
Curious to know.

3275
02:50:09,970 --> 02:50:12,240

3276
02:50:12,240 --> 02:50:14,810
I think that's all I had.

3277
02:50:14,810 --> 02:50:16,320
Let's talk about
all this stuff.

3278
02:50:16,320 --> 02:50:22,350
[APPLAUSE]

3279
02:50:22,350 --> 02:50:23,010
STEVE THAIR: Thanks
very much, Stoyan.

3280
02:50:23,010 --> 02:50:24,970
I'm just going to do a quick
poll of the panel.

3281
02:50:24,970 --> 02:50:27,980
Guy, any quick comments from
Stoyan's opening talk?

3282
02:50:27,980 --> 02:50:29,450
GUY PODJARNY: Sure, maybe
I'll add a couple.

3283
02:50:29,450 --> 02:50:31,470
One is, in general,
third-party's a little bit

3284
02:50:31,470 --> 02:50:32,200
broader than that.

3285
02:50:32,200 --> 02:50:34,110
I think there's some bias
to think about &mdash;

3286
02:50:34,110 --> 02:50:35,010
every person has a bias.

3287
02:50:35,010 --> 02:50:37,440
But there's also tracking
beacons, which for some

3288
02:50:37,440 --> 02:50:39,960
websites are plentiful and often
come in, often, in the

3289
02:50:39,960 --> 02:50:41,480
form of an image.

3290
02:50:41,480 --> 02:50:43,170
And there are also, actually,
third-party components that

3291
02:50:43,170 --> 02:50:44,305
are more inline in your pages.

3292
02:50:44,305 --> 02:50:47,540
Also some shopping cart
virtualization components and

3293
02:50:47,540 --> 02:50:50,660
such that start to
tread the line.

3294
02:50:50,660 --> 02:50:53,020
Because while they're
third-party, they're not

3295
02:50:53,020 --> 02:50:56,640
extraneous to the core flow or
requirement of the product.

3296
02:50:56,640 --> 02:50:58,390
But there's still a concern in
all sorts of things, like

3297
02:50:58,390 --> 02:51:00,130
number of domains and
reliability concerns.

3298
02:51:00,130 --> 02:51:03,660
Security concern is still very
much valid for them.

3299
02:51:03,660 --> 02:51:04,300
So that's one point.

3300
02:51:04,300 --> 02:51:06,810
And then the second one is just
to highlight the aspect

3301
02:51:06,810 --> 02:51:07,990
of the number of domains.

3302
02:51:07,990 --> 02:51:09,950
There's basically the problems
with third parties that have

3303
02:51:09,950 --> 02:51:14,580
to do with best practices around
how to use them, how to

3304
02:51:14,580 --> 02:51:15,050
write them.

3305
02:51:15,050 --> 02:51:17,640
If you're an author of them, to
try and get them out of the

3306
02:51:17,640 --> 02:51:19,870
way as much as possible
while still keeping

3307
02:51:19,870 --> 02:51:22,150
them reasonably fast.

3308
02:51:22,150 --> 02:51:24,450
And there's also things that
are just trends, like the

3309
02:51:24,450 --> 02:51:27,880
number of domains or like the
existence of unoptimized

3310
02:51:27,880 --> 02:51:30,250
third-party scripts that use
document.write whether you

3311
02:51:30,250 --> 02:51:32,480
like it or not.

3312
02:51:32,480 --> 02:51:34,760
And those are just paths that,
to me, are more interesting

3313
02:51:34,760 --> 02:51:41,490
because as far as I know,
there's no good set to advance

3314
02:51:41,490 --> 02:51:42,780
us in the right direction.

3315
02:51:42,780 --> 02:51:43,410
[INAUDIBLE]

3316
02:51:43,410 --> 02:51:44,570
fix those.

3317
02:51:44,570 --> 02:51:45,860
STEVE THAIR: Barbara?

3318
02:51:45,860 --> 02:51:47,490
BARBARA BERMES: For me,
I'm basically in

3319
02:51:47,490 --> 02:51:48,210
the middle of both.

3320
02:51:48,210 --> 02:51:51,130
So I want to make sure that the
developers understand what

3321
02:51:51,130 --> 02:51:56,250
third-party scripts really do
to your page, and also the

3322
02:51:56,250 --> 02:52:00,030
business side, to tell them what
to look for when asking

3323
02:52:00,030 --> 02:52:02,350
third-party providers to
provide their code.

3324
02:52:02,350 --> 02:52:04,350
STEVE THAIR: So you're saying
it's not really possible to

3325
02:52:04,350 --> 02:52:06,560
tell the marketing department
they can't have that piece of

3326
02:52:06,560 --> 02:52:08,530
code because it has a
document.write in it, because

3327
02:52:08,530 --> 02:52:09,240
they just won't understand.

3328
02:52:09,240 --> 02:52:09,970
BARBARA BERMES: Exactly.

3329
02:52:09,970 --> 02:52:12,810
You've got to explain to them
what the impact actually is,

3330
02:52:12,810 --> 02:52:14,690
and they don't always
understand that.

3331
02:52:14,690 --> 02:52:15,470
STEVE THAIR: Good.

3332
02:52:15,470 --> 02:52:15,670
Cool.

3333
02:52:15,670 --> 02:52:21,010
So Ben, as a provider, what
would you say about Stoyan's

3334
02:52:21,010 --> 02:52:22,740
opening remarks?

3335
02:52:22,740 --> 02:52:23,990
BEN VINEGAR: They're really
good comments.

3336
02:52:23,990 --> 02:52:27,170

3337
02:52:27,170 --> 02:52:29,480
It's been set up that this whole
panel is sort of like,

3338
02:52:29,480 --> 02:52:32,130
if you're a website publisher
then third-party scripts are

3339
02:52:32,130 --> 02:52:34,800
mean and we're villians.

3340
02:52:34,800 --> 02:52:36,760
Also Stoyan.

3341
02:52:36,760 --> 02:52:39,540
But I want to flip
this around.

3342
02:52:39,540 --> 02:52:42,360
Maybe people aren't thinking
that as a third-party

3343
02:52:42,360 --> 02:52:45,910
developer that has a pretty
complex application that I'm

3344
02:52:45,910 --> 02:52:48,520
serving to publish your pages,
there are publishers that are

3345
02:52:48,520 --> 02:52:51,960
doing really bad things to me
and I would love to talk about

3346
02:52:51,960 --> 02:52:52,610
some of those.

3347
02:52:52,610 --> 02:52:53,090
And what can &mdash;

3348
02:52:53,090 --> 02:52:54,966
[LAUGHTER]

3349
02:52:54,966 --> 02:52:56,216
BEN VINEGAR: Yes!

3350
02:52:56,216 --> 02:52:58,250

3351
02:52:58,250 --> 02:52:59,600
And I don't even mean that &mdash;

3352
02:52:59,600 --> 02:53:00,340
partially as a joke.

3353
02:53:00,340 --> 02:53:06,910
But it can be subjects, like
people immediately attribute

3354
02:53:06,910 --> 02:53:08,550
performance issues to a
third-party script.

3355
02:53:08,550 --> 02:53:10,200
That's the first place
that they go.

3356
02:53:10,200 --> 02:53:12,850
Where I'm debugging publishers'
websites, and then

3357
02:53:12,850 --> 02:53:14,360
I attribute, basically,
the performance

3358
02:53:14,360 --> 02:53:16,320
problems back to them.

3359
02:53:16,320 --> 02:53:18,350
So I'm sort of in a
hard spot as well.

3360
02:53:18,350 --> 02:53:21,230
And I think that's possibly
worth discussing.

3361
02:53:21,230 --> 02:53:21,530
STEVE THAIR: Cool.

3362
02:53:21,530 --> 02:53:24,055
I think we've actually got a
couple questions about how we

3363
02:53:24,055 --> 02:53:26,810
can find and identify those
performance bottlenecks.

3364
02:53:26,810 --> 02:53:29,410
But first question we've got on
the floor is actually from

3365
02:53:29,410 --> 02:53:30,753
Yoav Weiss.

3366
02:53:30,753 --> 02:53:31,186
Yoav &mdash;

3367
02:53:31,186 --> 02:53:32,436
Oh, you're down there.

3368
02:53:32,436 --> 02:53:38,100

3369
02:53:38,100 --> 02:53:40,010
YOAV WEISS: Hi.

3370
02:53:40,010 --> 02:53:43,030
"What are the mechanisms for
enabling script loading based

3371
02:53:43,030 --> 02:53:46,220
on media queries, and is
there a valid proposal?

3372
02:53:46,220 --> 02:53:49,290
And how can we get
this pushed?"

3373
02:53:49,290 --> 02:53:52,730
STEVE THAIR: So this is the idea
of if I've got a script

3374
02:53:52,730 --> 02:53:55,050
that is just not relevant to
the device that I'm running

3375
02:53:55,050 --> 02:53:57,380
on, why am I downloading
it in the first place?

3376
02:53:57,380 --> 02:53:58,200
YOAV WEISS: Exactly.

3377
02:53:58,200 --> 02:54:00,720
It relates to the
mobile thing.

3378
02:54:00,720 --> 02:54:04,960
If I don't show a Like button
on mobile, why am I

3379
02:54:04,960 --> 02:54:07,950
downloading the script?

3380
02:54:07,950 --> 02:54:10,182
STEVE THAIR: Do you want to
start taking that one?

3381
02:54:10,182 --> 02:54:10,920
STOYAN STEFANOV: I don't know.

3382
02:54:10,920 --> 02:54:12,180
I'm not aware of any
development.

3383
02:54:12,180 --> 02:54:13,510
Are you?

3384
02:54:13,510 --> 02:54:17,430
Is there a proposal going on?

3385
02:54:17,430 --> 02:54:20,730
YOAV WEISS: I started playing
around with the idea.

3386
02:54:20,730 --> 02:54:25,200
It's kind of hard to define what
happens when the media

3387
02:54:25,200 --> 02:54:26,780
query changes.

3388
02:54:26,780 --> 02:54:29,550
That's where things
get complicated.

3389
02:54:29,550 --> 02:54:31,190
Do I want to run the
script or not?

3390
02:54:31,190 --> 02:54:35,350
But in general, do you guys
think it's a good idea?

3391
02:54:35,350 --> 02:54:40,160
Or is it something that
should be pursued?

3392
02:54:40,160 --> 02:54:43,820
STOYAN STEFANOV: It definitely
sounds interesting.

3393
02:54:43,820 --> 02:54:45,350
GUY PODJARNY: I'm kind
of fond of it.

3394
02:54:45,350 --> 02:54:47,070
So I think the notion of
conditional loading,

3395
02:54:47,070 --> 02:54:48,620
especially in responsive design

3396
02:54:48,620 --> 02:54:50,380
website, is a really issue.

3397
02:54:50,380 --> 02:54:52,150
And in responsive design,
we focus on images,

3398
02:54:52,150 --> 02:54:54,140
like we spoke earlier.

3399
02:54:54,140 --> 02:54:58,500
But maybe the next looming
problem, if not already here,

3400
02:54:58,500 --> 02:54:59,690
is the notion of scripts.

3401
02:54:59,690 --> 02:55:02,720
And I regularly see responsive
websites download, execute

3402
02:55:02,720 --> 02:55:05,550
scripts and then hide them
because the layout doesn't

3403
02:55:05,550 --> 02:55:06,330
quite make sense for them.

3404
02:55:06,330 --> 02:55:09,870
So institutionalizing or
standardizing conditional

3405
02:55:09,870 --> 02:55:11,090
loading makes perfect
sense to me.

3406
02:55:11,090 --> 02:55:16,470
And using media queries seems
like one way to do it.

3407
02:55:16,470 --> 02:55:18,050
Not sure if there's any active
conversation about it.

3408
02:55:18,050 --> 02:55:20,280
So I guess we're probably going
to need to figure out

3409
02:55:20,280 --> 02:55:21,800
all the different
options of it.

3410
02:55:21,800 --> 02:55:24,920
But I do think that's a good
path that we need to go down.

3411
02:55:24,920 --> 02:55:27,220
BARBARA BERMES: I think also the
idea is interesting, but

3412
02:55:27,220 --> 02:55:29,860
I'm also wondering what
are the use cases?

3413
02:55:29,860 --> 02:55:33,600
So you would not load, for
example, a Facebook button for

3414
02:55:33,600 --> 02:55:37,680
mobile versus desktop
or whatever?

3415
02:55:37,680 --> 02:55:41,140
YOAV WEISS: The use cases I
can think of are Facebook

3416
02:55:41,140 --> 02:55:44,040
button, or social buttons
in general.

3417
02:55:44,040 --> 02:55:47,160
Maps that may or may not be
displayed because you want to

3418
02:55:47,160 --> 02:55:51,240
go to the native map.

3419
02:55:51,240 --> 02:55:52,700
JQuery Mobile.

3420
02:55:52,700 --> 02:55:54,390
UI frameworks.

3421
02:55:54,390 --> 02:55:56,580
Where you want to load
jQuery Mobile here

3422
02:55:56,580 --> 02:55:59,480
and jQuery UI there.

3423
02:55:59,480 --> 02:56:01,860
These are the use cases
I have in mind.

3424
02:56:01,860 --> 02:56:04,060
GUY PODJARNY: Twitter streams,
I think, are a common one in

3425
02:56:04,060 --> 02:56:05,090
responsive design.

3426
02:56:05,090 --> 02:56:07,890
BARBARA BERMES: Or even we are
doing different ad serving for

3427
02:56:07,890 --> 02:56:10,310
desktop versus mobile
for example, yeah.

3428
02:56:10,310 --> 02:56:10,880
STEVE THAIR: We've
got a couple of

3429
02:56:10,880 --> 02:56:11,930
comments from the floor.

3430
02:56:11,930 --> 02:56:13,150
Kyle Simpson from Getify.

3431
02:56:13,150 --> 02:56:16,780
Did you have something
to say on this topic?

3432
02:56:16,780 --> 02:56:18,440
KYLE SIMPSON: I didn't actually
intend to click that.

3433
02:56:18,440 --> 02:56:20,770
But I'll just say something
as I do have a question.

3434
02:56:20,770 --> 02:56:21,690
[LAUGHTER]

3435
02:56:21,690 --> 02:56:22,480
KYLE SIMPSON: Since they
gave me the mic.

3436
02:56:22,480 --> 02:56:23,340
STEVE THAIR: OK.

3437
02:56:23,340 --> 02:56:23,810
BARBARA BERMES: It's
your time.

3438
02:56:23,810 --> 02:56:25,270
KYLE SIMPSON: But on
that topic though.

3439
02:56:25,270 --> 02:56:29,000
So there is definitely a
strong push to create

3440
02:56:29,000 --> 02:56:31,790
declarative solutions, like
markup-only stuff.

3441
02:56:31,790 --> 02:56:33,870
I need to be able to
express all of my

3442
02:56:33,870 --> 02:56:34,930
intent through markup.

3443
02:56:34,930 --> 02:56:38,290
But I do just want to point out
that there's a vast array

3444
02:56:38,290 --> 02:56:40,830
of complex situations that you
make these decisions on.

3445
02:56:40,830 --> 02:56:43,610
For instance, I've got a simple
version of a calendar

3446
02:56:43,610 --> 02:56:46,180
widget and a complex version
of a calendar widget, and I

3447
02:56:46,180 --> 02:56:48,660
make decisions based upon
bandwidth and screen size and

3448
02:56:48,660 --> 02:56:49,830
all those other things.

3449
02:56:49,830 --> 02:56:53,410
So I think it's troublesome
to say, this is a

3450
02:56:53,410 --> 02:56:57,760
one-size-fits-all solution to
try to encode into my markup

3451
02:56:57,760 --> 02:57:00,100
when a script should
be loaded.

3452
02:57:00,100 --> 02:57:02,260
I'm a little biased, but I feel
that's the job of script

3453
02:57:02,260 --> 02:57:03,700
loaders rather than markup.

3454
02:57:03,700 --> 02:57:06,230

3455
02:57:06,230 --> 02:57:09,460
GUY PODJARNY: I think that's
a valid statement.

3456
02:57:09,460 --> 02:57:12,180
But there's also the statement
to say that, especially in

3457
02:57:12,180 --> 02:57:14,970
responsive design world, there
are a lot of decisions that

3458
02:57:14,970 --> 02:57:16,770
are made based on things that
could have been determined

3459
02:57:16,770 --> 02:57:18,640
through screen properties.

3460
02:57:18,640 --> 02:57:19,920
So maybe it's not 100%.

3461
02:57:19,920 --> 02:57:23,580
And you don't take away the
capability or the value of

3462
02:57:23,580 --> 02:57:26,240
loading things through
a more elaborate

3463
02:57:26,240 --> 02:57:29,630
script-based loading condition.

3464
02:57:29,630 --> 02:57:32,150
But if it's a common enough use
case and you can make it

3465
02:57:32,150 --> 02:57:34,920
faster and easier, then I still
think it's a worthy

3466
02:57:34,920 --> 02:57:37,140
proposition.

3467
02:57:37,140 --> 02:57:40,030
STEVE THAIR: We've got David
Stickman from Akamai wants to

3468
02:57:40,030 --> 02:57:41,350
make a comment.

3469
02:57:41,350 --> 02:57:44,100
Feel free to disagree with
Guy from Akamai.

3470
02:57:44,100 --> 02:57:45,545
[LAUGHTER]

3471
02:57:45,545 --> 02:57:46,795
GUY PODJARNY: At
least briefly.

3472
02:57:46,795 --> 02:57:49,402

3473
02:57:49,402 --> 02:57:49,890
DAVID STICKMAN: Hi.

3474
02:57:49,890 --> 02:57:53,210
One of the most common use cases
we see is actually tons

3475
02:57:53,210 --> 02:57:54,060
of new domain.

3476
02:57:54,060 --> 02:57:56,380
And people tend to do domain
shedding thinking that it's

3477
02:57:56,380 --> 02:57:58,940
going to improve the performance
of the website.

3478
02:57:58,940 --> 02:58:00,140
But obviously, we're
third-party.

3479
02:58:00,140 --> 02:58:02,430
We have 40, 50 different
domains that are

3480
02:58:02,430 --> 02:58:03,710
called by the browser.

3481
02:58:03,710 --> 02:58:06,850
Is there any way we can give
a hint of what kind of DNS

3482
02:58:06,850 --> 02:58:09,700
resolution should be done for
third-party content before

3483
02:58:09,700 --> 02:58:11,760
actually loading the
third-party itself?

3484
02:58:11,760 --> 02:58:14,030
Because there is a lot of
bottleneck with just DNS

3485
02:58:14,030 --> 02:58:15,280
resolution itself.

3486
02:58:15,280 --> 02:58:19,300

3487
02:58:19,300 --> 02:58:20,450
STEVE THAIR: Anyone?

3488
02:58:20,450 --> 02:58:21,850
GUY PODJARNY: I can take
that because I know &mdash;

3489
02:58:21,850 --> 02:58:22,430
STEVE THAIR: Yeah.

3490
02:58:22,430 --> 02:58:24,530
GUY PODJARNY: So I think the
number of domains, as pointed

3491
02:58:24,530 --> 02:58:25,600
out before &mdash;

3492
02:58:25,600 --> 02:58:27,580
this has not been coordinated,
just to make sure &mdash;

3493
02:58:27,580 --> 02:58:30,450

3494
02:58:30,450 --> 02:58:31,100
is a real problem.

3495
02:58:31,100 --> 02:58:32,090
It comes into play in DNS.

3496
02:58:32,090 --> 02:58:34,430
It comes into play with the fact
that SPDY and HTTP2 and

3497
02:58:34,430 --> 02:58:37,280
all sorts of pending solutions
don't touch on it.

3498
02:58:37,280 --> 02:58:39,660
They don't try to optimize
across domains.

3499
02:58:39,660 --> 02:58:42,330
So I think it's a real
problem today.

3500
02:58:42,330 --> 02:58:45,710
There is no deprioritization,
as far as I know, of

3501
02:58:45,710 --> 02:58:46,510
third-party content.

3502
02:58:46,510 --> 02:58:49,340
You can mark things beyond the
async or the processing

3503
02:58:49,340 --> 02:58:50,620
aspects in the browser.

3504
02:58:50,620 --> 02:58:55,090
You can mark something
as slower or faster.

3505
02:58:55,090 --> 02:58:57,500
So I think they contend
for resources today.

3506
02:58:57,500 --> 02:58:58,970
A part of it is about
how do we optimize

3507
02:58:58,970 --> 02:58:59,840
the number of domains?

3508
02:58:59,840 --> 02:59:04,270
And today, the only tools you
have for deprioritizing them

3509
02:59:04,270 --> 02:59:06,480
is things like async and such.

3510
02:59:06,480 --> 02:59:07,580
STEVE THAIR: OK.

3511
02:59:07,580 --> 02:59:09,190
We're going to come on
to a later question.

3512
02:59:09,190 --> 02:59:10,730
We're going to talk more
about dependencies

3513
02:59:10,730 --> 02:59:11,540
and execution time.

3514
02:59:11,540 --> 02:59:15,160
But just to stick with the
original intent of this

3515
02:59:15,160 --> 02:59:18,870
question was, in the earlier
session, we talked a lot about

3516
02:59:18,870 --> 02:59:21,470
how you were going to do media
queries to decide what image

3517
02:59:21,470 --> 02:59:23,950
you want to download?

3518
02:59:23,950 --> 02:59:27,500
Do we need a similar mechanism
for scripts or not?

3519
02:59:27,500 --> 02:59:29,700
If you were to put it to the
audience on a vote, you'd say,

3520
02:59:29,700 --> 02:59:32,470
yes, we need this mechanism, or
we don't need a mechanism

3521
02:59:32,470 --> 02:59:34,590
for this and we can
just move on.

3522
02:59:34,590 --> 02:59:36,240
Is this problem, you think?

3523
02:59:36,240 --> 02:59:38,240
I'm sending way too
many third-party

3524
02:59:38,240 --> 02:59:40,720
JavaScripts to my &mdash;

3525
02:59:40,720 --> 02:59:43,810
So we've got two votes, three
votes, four votes, five votes.

3526
02:59:43,810 --> 02:59:45,760
So people do think this
is a problem.

3527
02:59:45,760 --> 02:59:47,960
And that's not just Yoav hitting
the button five times.

3528
02:59:47,960 --> 02:59:48,930
[LAUGHTER]

3529
02:59:48,930 --> 02:59:50,385
YOAV WEISS: I have
several accounts.

3530
02:59:50,385 --> 02:59:51,840
[LAUGHTER]

3531
02:59:51,840 --> 02:59:53,780
BARBARA BERMES: And friends.

3532
02:59:53,780 --> 02:59:56,100
BEN VINEGAR: I would just say
that we experience that people

3533
02:59:56,100 --> 02:59:59,970
are conditionally loading our
application, usually doing

3534
02:59:59,970 --> 03:00:02,900
templates or JavaScript
or whatever, already.

3535
03:00:02,900 --> 03:00:06,400
So if there can just be really
nice, declarative way of doing

3536
03:00:06,400 --> 03:00:09,550
that as opposed to setting up
JavaScript code, I don't see

3537
03:00:09,550 --> 03:00:10,420
the problem with that.

3538
03:00:10,420 --> 03:00:12,620
People are doing it already,
is what I'm trying to say.

3539
03:00:12,620 --> 03:00:14,780
BARBARA BERMES: Whenever the
developer wants to do, if it's

3540
03:00:14,780 --> 03:00:15,540
easier for them.

3541
03:00:15,540 --> 03:00:19,440
And if media queries enhance
the performance as well in

3542
03:00:19,440 --> 03:00:22,220
loading things.

3543
03:00:22,220 --> 03:00:24,760
If you make it easy for them
to use stuff as a publisher

3544
03:00:24,760 --> 03:00:26,916
again, then it's cool.

3545
03:00:26,916 --> 03:00:28,600
GUY PODJARNY: I will say, it's
not just third-party, though.

3546
03:00:28,600 --> 03:00:30,550
So conditional loading of
JavaScript on a responsive

3547
03:00:30,550 --> 03:00:32,020
website is broader.

3548
03:00:32,020 --> 03:00:34,354
Third parties are a specific
case of it.

3549
03:00:34,354 --> 03:00:37,180
STEVE THAIR: OK/ So let's go
onto the second question.

3550
03:00:37,180 --> 03:00:40,820
We've got Tom Bushak.

3551
03:00:40,820 --> 03:00:41,310
Bushak?

3552
03:00:41,310 --> 03:00:42,560
OK.

3553
03:00:42,560 --> 03:00:49,380

3554
03:00:49,380 --> 03:00:51,690
TOM: So this one came in
anonymously as well.

3555
03:00:51,690 --> 03:00:55,000
The WhatWG has proposed a
solution for managing script

3556
03:00:55,000 --> 03:00:57,370
dependencies and
execution time.

3557
03:00:57,370 --> 03:00:59,200
Will this solve the
performance and

3558
03:00:59,200 --> 03:01:00,160
blocking use cases?

3559
03:01:00,160 --> 03:01:03,190
And Kyle, I believe, actually
is part of that proposal.

3560
03:01:03,190 --> 03:01:06,860
So maybe hell have some
helpful input as well.

3561
03:01:06,860 --> 03:01:08,700
STEVE THAIR: This is, as I
understand, it's related.

3562
03:01:08,700 --> 03:01:11,410
There are a lot of hacky ways
people download scripts as

3563
03:01:11,410 --> 03:01:15,620
comments and then add them
dynamically to the page when

3564
03:01:15,620 --> 03:01:16,020
they need them.

3565
03:01:16,020 --> 03:01:18,050
There's a lot of hacks out there
that people are doing to

3566
03:01:18,050 --> 03:01:22,940
get around the async blocking
nature of the scripts.

3567
03:01:22,940 --> 03:01:25,650
So what's happening with
the working groups?

3568
03:01:25,650 --> 03:01:27,538
And what's the best
solution for this?

3569
03:01:27,538 --> 03:01:30,960

3570
03:01:30,960 --> 03:01:32,540
BEN VINEGAR: I am not familiar
with this topic.

3571
03:01:32,540 --> 03:01:35,140
[LAUGHTER]

3572
03:01:35,140 --> 03:01:36,950
GUY PODJARNY: Well, I &mdash;

3573
03:01:36,950 --> 03:01:37,360
STEVE THAIR: Go ahead.

3574
03:01:37,360 --> 03:01:38,590
STOYAN STEFANOV: Anyone
from the audience who

3575
03:01:38,590 --> 03:01:39,550
wants to take it?

3576
03:01:39,550 --> 03:01:40,370
Kyle or &mdash;

3577
03:01:40,370 --> 03:01:41,820
GUY PODJARNY: I can even
starting, and then maybe we'll

3578
03:01:41,820 --> 03:01:45,300
switch to Kyle.

3579
03:01:45,300 --> 03:01:46,350
So I think there's a
few things there.

3580
03:01:46,350 --> 03:01:50,460
There's one in cold resource
priorities that has to do with

3581
03:01:50,460 --> 03:01:51,680
enabling the Lazy
Load and Defer

3582
03:01:51,680 --> 03:01:53,210
attributes on more objects.

3583
03:01:53,210 --> 03:01:55,840
Those are actually probably
further along on scripts than

3584
03:01:55,840 --> 03:01:58,245
they are on some other
components.

3585
03:01:58,245 --> 03:02:01,770
But there is some
promise there.

3586
03:02:01,770 --> 03:02:04,030
I think there's still
a lot of debates.

3587
03:02:04,030 --> 03:02:08,490
And I heard some comments in a
previous conversation today on

3588
03:02:08,490 --> 03:02:09,420
possible paths.

3589
03:02:09,420 --> 03:02:11,500
But I think there's still a hole
around how do you manage

3590
03:02:11,500 --> 03:02:13,590
groups of dependencies?

3591
03:02:13,590 --> 03:02:14,910
So that you want to say,
this script need to

3592
03:02:14,910 --> 03:02:15,800
run after the other.

3593
03:02:15,800 --> 03:02:19,330
But both of them combined
should be asynchronous.

3594
03:02:19,330 --> 03:02:22,410
There's things around
association of onload,

3595
03:02:22,410 --> 03:02:24,030
triggering with the
onload event.

3596
03:02:24,030 --> 03:02:26,970

3597
03:02:26,970 --> 03:02:27,750
And an async script.

3598
03:02:27,750 --> 03:02:28,540
It has an asynch script to deal

3599
03:02:28,540 --> 03:02:29,970
with still delay download.

3600
03:02:29,970 --> 03:02:34,090
So I think on the loading
process, there

3601
03:02:34,090 --> 03:02:35,330
are some good actions.

3602
03:02:35,330 --> 03:02:37,650
On the grouping and
such, I would

3603
03:02:37,650 --> 03:02:38,730
find them very promising.

3604
03:02:38,730 --> 03:02:39,980
But I don't know if they're
very far along.

3605
03:02:39,980 --> 03:02:42,790

3606
03:02:42,790 --> 03:02:44,390
KYLE SIMPSON: So since my
name was brought up,

3607
03:02:44,390 --> 03:02:46,490
I will speak up.

3608
03:02:46,490 --> 03:02:50,180
Two or three years ago, there
was some proposals.

3609
03:02:50,180 --> 03:02:54,400
Nicholas Zakas and I joined
together and made some

3610
03:02:54,400 --> 03:02:59,350
proposals on WhatWG about what
we call script preloading.

3611
03:02:59,350 --> 03:03:01,800
So the idea of loading
a script, but it not

3612
03:03:01,800 --> 03:03:04,550
automatically executing the
way normal scripts do.

3613
03:03:04,550 --> 03:03:06,760
And then being able to
programmatically control when

3614
03:03:06,760 --> 03:03:08,830
that script might load.

3615
03:03:08,830 --> 03:03:12,360
And that has gone through a
whole bunch of starts and

3616
03:03:12,360 --> 03:03:14,880
stops and restarts over
the last three years.

3617
03:03:14,880 --> 03:03:17,750
Most recently, about a month
ago, it started back up.

3618
03:03:17,750 --> 03:03:19,910
It turns out there's several
different things.

3619
03:03:19,910 --> 03:03:23,410
And maybe Jake Archibald
can also chime in.

3620
03:03:23,410 --> 03:03:26,800
So there's some stuff with
navigation controller, and

3621
03:03:26,800 --> 03:03:29,440
then there's discussions about
other use cases that that

3622
03:03:29,440 --> 03:03:31,030
might not handle.

3623
03:03:31,030 --> 03:03:34,260
I don't think I would classify
us as far along in terms of

3624
03:03:34,260 --> 03:03:36,910
implementation, but there has
been an enormous amount of

3625
03:03:36,910 --> 03:03:37,770
discussion about it.

3626
03:03:37,770 --> 03:03:41,430
And developers do you want, I
think, more control over it.

3627
03:03:41,430 --> 03:03:44,680
There's a one side, which is I
want control in the markup.

3628
03:03:44,680 --> 03:03:46,830
Again, back to this
declarative versus

3629
03:03:46,830 --> 03:03:48,240
programmatic control.

3630
03:03:48,240 --> 03:03:51,190
And I think that's really
one of the big

3631
03:03:51,190 --> 03:03:54,160
sticking points so far.

3632
03:03:54,160 --> 03:03:55,542
STEVE THAIR: OK.

3633
03:03:55,542 --> 03:03:58,420
Jake, did you want to
say anything, since

3634
03:03:58,420 --> 03:03:59,670
you got called out?

3635
03:03:59,670 --> 03:04:05,710

3636
03:04:05,710 --> 03:04:06,130
JAKE ARCHIBALD: Yeah.

3637
03:04:06,130 --> 03:04:07,930
I think the worst thing we've
got with script loading at the

3638
03:04:07,930 --> 03:04:11,650
moment is if you want to load
a series of scripts without

3639
03:04:11,650 --> 03:04:16,620
blocking, rendering, or blocking
any other computing,

3640
03:04:16,620 --> 03:04:20,740
but maintain the order of
execution, we don't have that

3641
03:04:20,740 --> 03:04:22,450
unless you use JavaScript.

3642
03:04:22,450 --> 03:04:24,520
And we don't want to use
JavaScript for script loading,

3643
03:04:24,520 --> 03:04:26,510
because then you lose
the preloader.

3644
03:04:26,510 --> 03:04:29,430
And the preloader, you could
boost, getting to DOM content

3645
03:04:29,430 --> 03:04:31,220
loaded by 20%.

3646
03:04:31,220 --> 03:04:36,210
So we want something in the
markup that can dictate which

3647
03:04:36,210 --> 03:04:39,290
order that the scripts
will be executed.

3648
03:04:39,290 --> 03:04:42,050
And then load them
asynchronously.

3649
03:04:42,050 --> 03:04:43,300
GUY PODJARNY: Just specifically
related to

3650
03:04:43,300 --> 03:04:45,690
third-party, I do think there
is another barrier, which is

3651
03:04:45,690 --> 03:04:46,590
document.write.

3652
03:04:46,590 --> 03:04:52,550
So when you're a publisher and
you're using a third party,

3653
03:04:52,550 --> 03:04:56,580
you need to be absolutely
confident 100% that that

3654
03:04:56,580 --> 03:04:59,250
script would never, ever use
document.write if you're

3655
03:04:59,250 --> 03:05:01,450
including them as an
asynchronous components.

3656
03:05:01,450 --> 03:05:03,990
Otherwise, that can lock
up your entire page.

3657
03:05:03,990 --> 03:05:06,860
And as far as I know, there is
no work going on right now,

3658
03:05:06,860 --> 03:05:08,650
but there definitely
should be, on doing

3659
03:05:08,650 --> 03:05:10,280
something like that.

3660
03:05:10,280 --> 03:05:14,170
Even something like just
ignoring the document.write,

3661
03:05:14,170 --> 03:05:18,420
in many cases, would be better
than blanking out the page and

3662
03:05:18,420 --> 03:05:21,580
writing only that piece, instead
of the entire page.

3663
03:05:21,580 --> 03:05:23,370
But ideally, there's something
a little bit more elaborate

3664
03:05:23,370 --> 03:05:26,050
that can, after the fact, write

3665
03:05:26,050 --> 03:05:27,300
content in those sections.

3666
03:05:27,300 --> 03:05:30,740

3667
03:05:30,740 --> 03:05:32,370
STEVE THAIR: OK.

3668
03:05:32,370 --> 03:05:34,090
Let's see.

3669
03:05:34,090 --> 03:05:39,610
Wilson Page from FT labs has got
his hand up to comment on

3670
03:05:39,610 --> 03:05:43,120
this topic, hopefully.

3671
03:05:43,120 --> 03:05:43,810
WILSON PAGE: Hello.

3672
03:05:43,810 --> 03:05:45,900
And a web app developer,
I like to have

3673
03:05:45,900 --> 03:05:47,470
control of my resources.

3674
03:05:47,470 --> 03:05:50,810
So would it be possible that
third parties, like discussed,

3675
03:05:50,810 --> 03:05:54,610
might let me bundle those
resources, their third-party

3676
03:05:54,610 --> 03:05:58,520
scripts, into my JS bundle
or other assets like CSS.

3677
03:05:58,520 --> 03:06:01,800

3678
03:06:01,800 --> 03:06:03,305
I can see why you wouldn't
want that,

3679
03:06:03,305 --> 03:06:04,130
because you want control.

3680
03:06:04,130 --> 03:06:05,850
[LAUGHTER]

3681
03:06:05,850 --> 03:06:07,730
WILSON PAGE: You want the
control to be able to update

3682
03:06:07,730 --> 03:06:08,740
when you want to update it.

3683
03:06:08,740 --> 03:06:13,330
But I also don't want 100 HTTP
requests going off on my page.

3684
03:06:13,330 --> 03:06:14,220
BEN VINEGAR: Yeah.

3685
03:06:14,220 --> 03:06:16,344
Oh, man. a lot of
eyes on me here.

3686
03:06:16,344 --> 03:06:19,146

3687
03:06:19,146 --> 03:06:22,940
On some level, I'm a
web developer too.

3688
03:06:22,940 --> 03:06:24,690
I hope so.

3689
03:06:24,690 --> 03:06:27,310
And I would like to do that.

3690
03:06:27,310 --> 03:06:27,950
So it would makes sense.

3691
03:06:27,950 --> 03:06:32,030
But you basically just hit be
the other end of it, which is

3692
03:06:32,030 --> 03:06:35,110
we're just changing things at
such a rapid pace that for

3693
03:06:35,110 --> 03:06:37,140
somebody to bundle it and
serve it from their own

3694
03:06:37,140 --> 03:06:39,980
servers or whatever,
we can't do it.

3695
03:06:39,980 --> 03:06:42,590
And this actually touches, a
little bit, on some of the

3696
03:06:42,590 --> 03:06:45,250
C3PO stuff.

3697
03:06:45,250 --> 03:06:47,510
The idea is that if we had a
common library that ran on

3698
03:06:47,510 --> 03:06:48,940
your host page.

3699
03:06:48,940 --> 03:06:50,270
And then you could bundlke
that part.

3700
03:06:50,270 --> 03:06:52,090
And then the stuff inside of
the frames could then do

3701
03:06:52,090 --> 03:06:52,700
whatever they wanted.

3702
03:06:52,700 --> 03:06:54,970
You at least got that
much out of it.

3703
03:06:54,970 --> 03:06:59,270
Even on that point, inevitably,
I might want to do

3704
03:06:59,270 --> 03:06:59,920
something different.

3705
03:06:59,920 --> 03:07:03,630
And now I have to go around to
thousands of websites and say,

3706
03:07:03,630 --> 03:07:06,650
please update this library in
order for you to have the next

3707
03:07:06,650 --> 03:07:07,940
version of Disqus.

3708
03:07:07,940 --> 03:07:10,870
And that is just such
a ridiculous pain

3709
03:07:10,870 --> 03:07:13,030
point, to go to &mdash;

3710
03:07:13,030 --> 03:07:14,700
the way that that scales is
that there's one of me and

3711
03:07:14,700 --> 03:07:15,450
there's thousands &mdash;

3712
03:07:15,450 --> 03:07:17,190
or think there's basically
millions of

3713
03:07:17,190 --> 03:07:17,895
websites with Disqus.

3714
03:07:17,895 --> 03:07:21,390
And to go and get all them to
upgrade all of their bundles

3715
03:07:21,390 --> 03:07:22,880
or whatever would be brutal.

3716
03:07:22,880 --> 03:07:23,840
So that's just &mdash;

3717
03:07:23,840 --> 03:07:24,220
STEVE THAIR: So no.

3718
03:07:24,220 --> 03:07:25,580
BEN VINEGAR: --why
we don't explore.

3719
03:07:25,580 --> 03:07:27,020
So, no.

3720
03:07:27,020 --> 03:07:29,690
BARBARA BERMES: As a publisher,
what we do, we have

3721
03:07:29,690 --> 03:07:33,160
all libraries like JQuery and
all that stuff, we know will

3722
03:07:33,160 --> 03:07:34,200
not change that often.

3723
03:07:34,200 --> 03:07:37,820
So we compile them or bundle
them up in one request.

3724
03:07:37,820 --> 03:07:39,970
But then of course, which
is the change that

3725
03:07:39,970 --> 03:07:41,130
could change it?

3726
03:07:41,130 --> 03:07:45,112
Any minute you've got to find
a solution for that.

3727
03:07:45,112 --> 03:07:46,000
STEVE THAIR: OK.

3728
03:07:46,000 --> 03:07:48,210
GUY PODJARNY: We do some
proxying of third-party

3729
03:07:48,210 --> 03:07:50,810
content sometimes, and there's
a different flavor of it.

3730
03:07:50,810 --> 03:07:53,400
So on the good side, if you
proxy third party content

3731
03:07:53,400 --> 03:07:58,340
through your servers, your CDN,
then you regain control

3732
03:07:58,340 --> 03:08:00,390
over some availability
test, over the

3733
03:08:00,390 --> 03:08:01,510
performance delivery of it.

3734
03:08:01,510 --> 03:08:05,590
They may not be delivering it as
high-quality, or we're not

3735
03:08:05,590 --> 03:08:08,950
willing to spend as much on
the delivering controls

3736
03:08:08,950 --> 03:08:09,950
as you might be.

3737
03:08:09,950 --> 03:08:12,110
Where that really runs
into an obstacle is

3738
03:08:12,110 --> 03:08:13,110
with things like tracking.

3739
03:08:13,110 --> 03:08:15,530
So on Facebook, you could
probably pull that off with a

3740
03:08:15,530 --> 03:08:19,080
Facebook SDK, which is
generic and cachable.

3741
03:08:19,080 --> 03:08:22,280
But you wouldn't be able to
do it with the iFrame that

3742
03:08:22,280 --> 03:08:24,610
figures out which of your
friends recommended this.

3743
03:08:24,610 --> 03:08:28,080
Because that requires some
special cookies.

3744
03:08:28,080 --> 03:08:30,620
And once you move it off to
a different domain, those

3745
03:08:30,620 --> 03:08:33,410
cookies no longer get sent.

3746
03:08:33,410 --> 03:08:36,380
So to me, if we are to do
something like a C3PO or some

3747
03:08:36,380 --> 03:08:37,870
equivalent of it, we
should tackle that.

3748
03:08:37,870 --> 03:08:42,560
Because our assessment &mdash; we've
done some mass testing on it &mdash;

3749
03:08:42,560 --> 03:08:45,740
was that that really
qualifies a lot.

3750
03:08:45,740 --> 03:08:47,430
In order to move something to
a different domain, you need

3751
03:08:47,430 --> 03:08:50,580
to be absolutely sure that
there would be no cookies

3752
03:08:50,580 --> 03:08:52,070
associated with that request.

3753
03:08:52,070 --> 03:08:54,200
Or, even if you're doing cookies
syncing, there would

3754
03:08:54,200 --> 03:08:56,660
be no cookies other
than a session ID

3755
03:08:56,660 --> 03:08:58,790
cookie on that domain.

3756
03:08:58,790 --> 03:09:00,560
And that's just a very
tough restriction.

3757
03:09:00,560 --> 03:09:03,880
So we need to standardize how
that is being handled, if we

3758
03:09:03,880 --> 03:09:06,480
wanted to go down
to that path.

3759
03:09:06,480 --> 03:09:09,920
STEVE THAIR: I think we'll
come back to that 3PO and

3760
03:09:09,920 --> 03:09:12,200
shared cookie things in
a later question.

3761
03:09:12,200 --> 03:09:15,120
But I think there's an
interesting question there for

3762
03:09:15,120 --> 03:09:16,040
the browser vendors.

3763
03:09:16,040 --> 03:09:18,640
Have we actually made this
problem for ourselves because

3764
03:09:18,640 --> 03:09:21,390
we can't share cookies and
domains for security reasons?

3765
03:09:21,390 --> 03:09:23,220
We've actually created
this problem.

3766
03:09:23,220 --> 03:09:25,770
And there needs to be some
way to address it.

3767
03:09:25,770 --> 03:09:28,780
Because effectively, there's
an ecosystem of people that

3768
03:09:28,780 --> 03:09:30,360
want to share this data.

3769
03:09:30,360 --> 03:09:32,760
There is no effective mechanism,
that I'm aware of

3770
03:09:32,760 --> 03:09:35,030
anyway, that can do that.

3771
03:09:35,030 --> 03:09:39,490
Next question we've
got is from Wes.

3772
03:09:39,490 --> 03:09:40,360
Oh, Calvin?

3773
03:09:40,360 --> 03:09:40,900
Calvin?

3774
03:09:40,900 --> 03:09:41,720
Sorry, Calvin.

3775
03:09:41,720 --> 03:09:43,840
CALVIN SPEALMAN: The problem
with document write was

3776
03:09:43,840 --> 03:09:44,640
mentioned earlier.

3777
03:09:44,640 --> 03:09:48,250
And the need to make sure your
async loaded scripts don't

3778
03:09:48,250 --> 03:09:49,840
have document.write tags.

3779
03:09:49,840 --> 03:09:52,480
I work with an environment
where I have hundreds of

3780
03:09:52,480 --> 03:09:54,650
unknown vendors, including
third-party

3781
03:09:54,650 --> 03:09:55,710
scripts, at any time.

3782
03:09:55,710 --> 03:09:58,200
And I have no way to ever vet
them all, because they come

3783
03:09:58,200 --> 03:10:00,410
from 150 different properties.

3784
03:10:00,410 --> 03:10:04,990
And we currently use a tool
called write capture to

3785
03:10:04,990 --> 03:10:08,530
override what document.write
does and force asynchronous

3786
03:10:08,530 --> 03:10:09,810
loading of everything.

3787
03:10:09,810 --> 03:10:10,710
And it's awful.

3788
03:10:10,710 --> 03:10:12,080
And when it breaks, it
gives me headaches

3789
03:10:12,080 --> 03:10:13,870
for months at a time.

3790
03:10:13,870 --> 03:10:17,100
We can never get rid of that.

3791
03:10:17,100 --> 03:10:18,880
My question is, can we
get rid of that?

3792
03:10:18,880 --> 03:10:21,660
Is there anything we can do so
that we can stop having to vet

3793
03:10:21,660 --> 03:10:23,670
these and know that they're
not going to do

3794
03:10:23,670 --> 03:10:24,050
document.write?

3795
03:10:24,050 --> 03:10:29,110
Because the surprise is awful
if it ever happens.

3796
03:10:29,110 --> 03:10:32,850
STEVE THAIR: So you want a
flag on the browser or

3797
03:10:32,850 --> 03:10:35,420
something to say, this is page
doesn't support document.write

3798
03:10:35,420 --> 03:10:36,470
or something.

3799
03:10:36,470 --> 03:10:38,060
CALVIN SPEALMAN: We add
APIs all the time.

3800
03:10:38,060 --> 03:10:39,395
Can we do the opposite
just once?

3801
03:10:39,395 --> 03:10:44,330
[LAUGHTER]

3802
03:10:44,330 --> 03:10:48,070
STEVE THAIR: So like that
Kill IE6 campaign.

3803
03:10:48,070 --> 03:10:50,750
You're just going to start a
website, Kill Document.write.

3804
03:10:50,750 --> 03:10:53,950
CALVIN SPEALMAN: I would be
very happy with that.

3805
03:10:53,950 --> 03:10:56,189
STEVE THAIR: Who here would
vote for that one?

3806
03:10:56,189 --> 03:10:58,161
BEN VINEGAR: Wait, what
am I voting on?

3807
03:10:58,161 --> 03:10:59,270
STEVE THAIR: Kill
document.write.

3808
03:10:59,270 --> 03:11:00,060
Just get rid of it.

3809
03:11:00,060 --> 03:11:00,760
BEN VINEGAR: Sure.

3810
03:11:00,760 --> 03:11:03,760
We could start a trade
association too, in which we

3811
03:11:03,760 --> 03:11:04,650
vet scripts.

3812
03:11:04,650 --> 03:11:06,170
I don't know.

3813
03:11:06,170 --> 03:11:07,130
I'm not being serious.

3814
03:11:07,130 --> 03:11:08,030
This is a terrible joke.

3815
03:11:08,030 --> 03:11:09,720
[LAUGHTER]

3816
03:11:09,720 --> 03:11:11,860
GUY PODJARNY: So we do the
same thing, of the write

3817
03:11:11,860 --> 03:11:15,500
capture as part of the
optimizations we do in Akamai.

3818
03:11:15,500 --> 03:11:18,550
And I share your pain.

3819
03:11:18,550 --> 03:11:22,680
And I'd like to believe that
browser vendors should be able

3820
03:11:22,680 --> 03:11:23,240
to tackle that.

3821
03:11:23,240 --> 03:11:24,680
I don't know if any browser
vendor in the crowd

3822
03:11:24,680 --> 03:11:26,820
wants to chime in.

3823
03:11:26,820 --> 03:11:31,540
By doing some 90% accurate
version of the document.write,

3824
03:11:31,540 --> 03:11:33,960
just write that out in spot
where that scrips would have

3825
03:11:33,960 --> 03:11:35,970
been after the fact.

3826
03:11:35,970 --> 03:11:37,910
Because oftentimes, just killing
document.write or

3827
03:11:37,910 --> 03:11:40,580
trying to mark it
up in JavaScript

3828
03:11:40,580 --> 03:11:41,680
is the best we have.

3829
03:11:41,680 --> 03:11:43,130
So we use that where needed.

3830
03:11:43,130 --> 03:11:46,480
But it's extremely
far from ideal.

3831
03:11:46,480 --> 03:11:48,210
STEVE THAIR: We've got to move
on to the next question.

3832
03:11:48,210 --> 03:11:51,040
So the next question is
actually from Wes.

3833
03:11:51,040 --> 03:11:56,420

3834
03:11:56,420 --> 03:11:58,480
WESLEY HALES: So Facebook has
recently taken steps to

3835
03:11:58,480 --> 03:12:01,520
optimize the scripts for its
embeddable Like button, which

3836
03:12:01,520 --> 03:12:05,810
I think you guys can speak to.

3837
03:12:05,810 --> 03:12:07,570
But how do we measure
the impact of

3838
03:12:07,570 --> 03:12:08,600
embedding these scripts?

3839
03:12:08,600 --> 03:12:11,700
And then a second part to this
question is, is the Web

3840
03:12:11,700 --> 03:12:18,100
Intents specification our only
hope to conquer app linking

3841
03:12:18,100 --> 03:12:20,470
and embedding these scripts?

3842
03:12:20,470 --> 03:12:27,130
Is Web Intents our hope for
not having these types of

3843
03:12:27,130 --> 03:12:30,790
Share buttons and scripts that
are included with those?

3844
03:12:30,790 --> 03:12:32,120
STEVE THAIR: Well, I might
throw this question to

3845
03:12:32,120 --> 03:12:34,480
Barbara, actually,
as a consumer.

3846
03:12:34,480 --> 03:12:38,300
Do you do performance testing?

3847
03:12:38,300 --> 03:12:39,950
Somebody comes to you and says,
I want to add this new

3848
03:12:39,950 --> 03:12:41,710
third-party script.

3849
03:12:41,710 --> 03:12:45,210
What you do to measure
the impact of that?

3850
03:12:45,210 --> 03:12:46,270
BARBARA BERMES: I'm big
on performance.

3851
03:12:46,270 --> 03:12:51,650
And obviously, I have issues
when 50% of our CBC desktop

3852
03:12:51,650 --> 03:12:55,310
site is serving third-party
scripts and the rest we are

3853
03:12:55,310 --> 03:12:58,370
serving to the customers
is just all content.

3854
03:12:58,370 --> 03:13:00,680
So I do try to do that.

3855
03:13:00,680 --> 03:13:04,210
It is very difficult for us to
make sure that all the content

3856
03:13:04,210 --> 03:13:09,560
areas at CBC know about it
and how to include it.

3857
03:13:09,560 --> 03:13:12,960
So in terms of performance,
I do performance tests.

3858
03:13:12,960 --> 03:13:15,742
Especially the AB, what happens
before putting the

3859
03:13:15,742 --> 03:13:17,020
script in versus after.

3860
03:13:17,020 --> 03:13:20,770
And we've seen some really bad
incidents where ads or scripts

3861
03:13:20,770 --> 03:13:22,970
like that slow down our site.

3862
03:13:22,970 --> 03:13:27,250
So to track those kind of
things and give them to

3863
03:13:27,250 --> 03:13:31,550
business and say, see, this
is what could happen.

3864
03:13:31,550 --> 03:13:34,820
STEVE THAIR: What about from
your side, Stoyan?

3865
03:13:34,820 --> 03:13:37,640
What do you do to make sure
yours is not so slow?

3866
03:13:37,640 --> 03:13:39,700
STOYAN STEFANOV: When optimizing
the Like button,

3867
03:13:39,700 --> 03:13:42,550
then the only thing you can do
is write block post and say,

3868
03:13:42,550 --> 03:13:45,200
oh, see how the waterfall
is so nice now.

3869
03:13:45,200 --> 03:13:45,720
BARBARA BERMES: But it was.

3870
03:13:45,720 --> 03:13:46,605
It is.

3871
03:13:46,605 --> 03:13:47,855
That was good.

3872
03:13:47,855 --> 03:13:50,250

3873
03:13:50,250 --> 03:13:52,230
STOYAN STEFANOV: I don't think
we're doing anything to prove,

3874
03:13:52,230 --> 03:13:57,750
OK, I know how much it reduces
the average website and so on.

3875
03:13:57,750 --> 03:14:00,920
Just trying to do the best
thing and then let other

3876
03:14:00,920 --> 03:14:04,525
people measure and see how it
affects their websites.

3877
03:14:04,525 --> 03:14:07,890

3878
03:14:07,890 --> 03:14:08,690
STEVE THAIR: That's good.

3879
03:14:08,690 --> 03:14:12,120
Ben, you said earlier that you
do a lot of debugging of the

3880
03:14:12,120 --> 03:14:14,740
customers' websites because they
always blame you for the

3881
03:14:14,740 --> 03:14:15,460
performance issues.

3882
03:14:15,460 --> 03:14:17,110
So are there tools?

3883
03:14:17,110 --> 03:14:18,210
Are there Techniques
Are there tips?

3884
03:14:18,210 --> 03:14:21,570
Is there a methodology that you
follow to prove that it's

3885
03:14:21,570 --> 03:14:26,430
the sucky customer website and
not your awesome script?

3886
03:14:26,430 --> 03:14:27,780
BEN VINEGAR: That is exactly
how I phrase it.

3887
03:14:27,780 --> 03:14:29,580
[LAUGHTER]

3888
03:14:29,580 --> 03:14:30,830
BEN VINEGAR: Goes over
really well.

3889
03:14:30,830 --> 03:14:33,560

3890
03:14:33,560 --> 03:14:35,970
There's a ton of techniques that
are pretty well-published

3891
03:14:35,970 --> 03:14:40,341
out there that I'm
probably using.

3892
03:14:40,341 --> 03:14:44,070
I don't even know I was
saying "we" there.

3893
03:14:44,070 --> 03:14:47,830
In my mind, a lot of these seem
like very tried and true

3894
03:14:47,830 --> 03:14:48,620
performance things.

3895
03:14:48,620 --> 03:14:51,560
Like not binding
to, debouncing,

3896
03:14:51,560 --> 03:14:53,390
throttling, scroll handlers.

3897
03:14:53,390 --> 03:14:58,420
Or something we do is we
render in chunks now.

3898
03:14:58,420 --> 03:15:02,130
So we'll render five comments,
release to the browser.

3899
03:15:02,130 --> 03:15:04,270
Render five comments, release
to the browser.

3900
03:15:04,270 --> 03:15:11,660
We're very cognizant of just
never tying up the UI thread.

3901
03:15:11,660 --> 03:15:14,280
I don't think that's something
that I can &mdash;

3902
03:15:14,280 --> 03:15:16,640
An individual widget developer
or third-party application

3903
03:15:16,640 --> 03:15:18,910
developer, they all
have to do that.

3904
03:15:18,910 --> 03:15:22,080
And I think the big issue is
that they don't, or it's just

3905
03:15:22,080 --> 03:15:25,560
all over the place as
to whether they do.

3906
03:15:25,560 --> 03:15:26,700
I might be rambline here.

3907
03:15:26,700 --> 03:15:28,300
You can bring me back.

3908
03:15:28,300 --> 03:15:30,750
STEVE THAIR: The question &mdash;

3909
03:15:30,750 --> 03:15:34,090
If we take an example of where
you said that you've proved

3910
03:15:34,090 --> 03:15:39,250
that it wasn't your script that
was blocking the site.

3911
03:15:39,250 --> 03:15:41,960
Was it something that the
customer was doing that was

3912
03:15:41,960 --> 03:15:44,610
impacting your script
in a negative way?

3913
03:15:44,610 --> 03:15:49,460
And how did you prove that?

3914
03:15:49,460 --> 03:15:50,470
BEN VINEGAR: Actually, the last
time I was debugging a

3915
03:15:50,470 --> 03:15:54,660
site, I think I brought this on
myself, in the sense that I

3916
03:15:54,660 --> 03:15:57,220
was observing that Disqus
was slow when scrolling

3917
03:15:57,220 --> 03:15:59,990
through it on a blog.

3918
03:15:59,990 --> 03:16:01,600
And actually, I think today
that's actually a lot of CSS

3919
03:16:01,600 --> 03:16:02,000
performance.

3920
03:16:02,000 --> 03:16:04,060
Which is another topic
that I will address.

3921
03:16:04,060 --> 03:16:06,670
But so I was debugging our
scroll handlers, and figuring

3922
03:16:06,670 --> 03:16:12,010
out that in this case, the
parent website was not

3923
03:16:12,010 --> 03:16:13,420
throttling a scroll handler.

3924
03:16:13,420 --> 03:16:16,040
And they were activating it
as you went over Disqus.

3925
03:16:16,040 --> 03:16:18,520
So you would scroll down, and
it would actually chug a

3926
03:16:18,520 --> 03:16:19,640
little bit.

3927
03:16:19,640 --> 03:16:22,770
I don't remember the
purpose of it.

3928
03:16:22,770 --> 03:16:25,960
That's just a random anecdote
of something.

3929
03:16:25,960 --> 03:16:29,160
BARBARA BERMES: Might be nice to
automate that somewhere on

3930
03:16:29,160 --> 03:16:32,190
your end, that you can say, OK,
Publisher A is not using

3931
03:16:32,190 --> 03:16:32,810
it properly.

3932
03:16:32,810 --> 03:16:38,080
Or don't blame us if
the site is slow.

3933
03:16:38,080 --> 03:16:39,640
We've got Matt May from Adobe.

3934
03:16:39,640 --> 03:16:42,850
Do you have a comment on how
you measure the impact of

3935
03:16:42,850 --> 03:16:44,100
these scripts?

3936
03:16:44,100 --> 03:16:47,623

3937
03:16:47,623 --> 03:16:50,020
MATT MAY: Actually, my
question's a different thing.

3938
03:16:50,020 --> 03:16:51,760
STEVE THAIR: Oh, well we'll
hold that question, then.

3939
03:16:51,760 --> 03:16:54,870
We'll try and stick
with the topic.

3940
03:16:54,870 --> 03:16:57,440
GUY PODJARNY: I've got one
comment maybe to throw in,

3941
03:16:57,440 --> 03:17:03,260
which is that resource timing is
hopefully going to help us

3942
03:17:03,260 --> 03:17:06,700
identify in real users where
to lay the blame.

3943
03:17:06,700 --> 03:17:09,030
There are some security aspects
to resource timing.

3944
03:17:09,030 --> 03:17:11,980
But from my perspective, when
somebody comes Akamai and

3945
03:17:11,980 --> 03:17:16,130
says, you're not making my site
faster, sometimes the

3946
03:17:16,130 --> 03:17:18,290
purpose is to show that it's
actually the third party

3947
03:17:18,290 --> 03:17:21,240
that's on your page
that's the cause.

3948
03:17:21,240 --> 03:17:24,120

3949
03:17:24,120 --> 03:17:28,600
At least we put a lot of hope
in that front to give us

3950
03:17:28,600 --> 03:17:33,080
clarity about who's truly to
blame for the problem, and

3951
03:17:33,080 --> 03:17:35,060
therefore where should
the solution lie?

3952
03:17:35,060 --> 03:17:35,550
STEVE THAIR: Sergei?

3953
03:17:35,550 --> 03:17:37,224
Did you want to make
a comment?

3954
03:17:37,224 --> 03:17:40,472

3955
03:17:40,472 --> 03:17:43,070
SERGEI: I've actually been
working for a while with

3956
03:17:43,070 --> 03:17:47,960
vendors that work with us on
enforcing the contract between

3957
03:17:47,960 --> 03:17:49,920
the groups.

3958
03:17:49,920 --> 03:17:54,450
And one of the lines was, never
use document.write.

3959
03:17:54,450 --> 03:18:00,210
And the question is, can we
create or promote this

3960
03:18:00,210 --> 03:18:04,510
contract between widget
providers, of different kinds

3961
03:18:04,510 --> 03:18:06,870
surely, and publishers.

3962
03:18:06,870 --> 03:18:11,430
And kind of help emerging
providers, which have to deal

3963
03:18:11,430 --> 03:18:13,460
with a lot, to follow that.

3964
03:18:13,460 --> 03:18:18,480
At the same time, probably
protect widget providers'

3965
03:18:18,480 --> 03:18:20,830
needs as well.

3966
03:18:20,830 --> 03:18:22,240
BARBARA BERMES: I
would love that.

3967
03:18:22,240 --> 03:18:23,490
We talked about that.

3968
03:18:23,490 --> 03:18:24,530
Some sort of a policy.

3969
03:18:24,530 --> 03:18:28,640
And I would love to create a
policy that we could give to

3970
03:18:28,640 --> 03:18:31,390
the widget creators and say,
you follow those steps, we

3971
03:18:31,390 --> 03:18:32,990
would consider you using.

3972
03:18:32,990 --> 03:18:37,260
And I think it is important
to make that point.

3973
03:18:37,260 --> 03:18:38,830
GUY PODJARNY: We may be able to
copy some of the security

3974
03:18:38,830 --> 03:18:39,570
policies we're doing.

3975
03:18:39,570 --> 03:18:41,540
We're talking about sandboxing
from that prospective.

3976
03:18:41,540 --> 03:18:43,570
Saying, well, I'm only giving
you a constrained access to

3977
03:18:43,570 --> 03:18:44,730
certain APIs.

3978
03:18:44,730 --> 03:18:46,610
You're not allowed to
use document.write.

3979
03:18:46,610 --> 03:18:48,340
It's just going to break.

3980
03:18:48,340 --> 03:18:50,792
STOYAN STEFANOV: Well, there's
this organization called &mdash;

3981
03:18:50,792 --> 03:18:52,550
I forgot what the name was.

3982
03:18:52,550 --> 03:18:55,140
Interactive Advertising Bureau,
something like this.

3983
03:18:55,140 --> 03:18:56,370
STEVE THAIR: The IAB.

3984
03:18:56,370 --> 03:18:56,800
STOYAN STEFANOV: IAB.

3985
03:18:56,800 --> 03:19:00,560
They've released a document
saying, related to ads, saying

3986
03:19:00,560 --> 03:19:02,720
these are the best practices
for ads.

3987
03:19:02,720 --> 03:19:03,330
That kind of stuff.

3988
03:19:03,330 --> 03:19:05,230
So do we need something
similar for widgets?

3989
03:19:05,230 --> 03:19:06,100
GUY PODJARNY: Or just
enforcement

3990
03:19:06,100 --> 03:19:09,060
of it in the browser.

3991
03:19:09,060 --> 03:19:11,700
STOYAN STEFANOV: But I don't
think there is any, OK this is

3992
03:19:11,700 --> 03:19:14,440
the checklist that you have to
follow, otherwise you're not

3993
03:19:14,440 --> 03:19:18,050
given an A.

3994
03:19:18,050 --> 03:19:18,320
STEVE THAIR: OK.

3995
03:19:18,320 --> 03:19:21,750
So we'll switch on to
the next topic.

3996
03:19:21,750 --> 03:19:22,440
Markus?

3997
03:19:22,440 --> 03:19:23,690
Marquis?

3998
03:19:23,690 --> 03:19:26,570

3999
03:19:26,570 --> 03:19:27,820
Stand up.

4000
03:19:27,820 --> 03:19:36,980

4001
03:19:36,980 --> 03:19:39,900
AUDIENCE: So this is an
anonymous question.

4002
03:19:39,900 --> 03:19:42,090
"The growing use of third-party
services means web

4003
03:19:42,090 --> 03:19:44,950
pages today consume content
from over 16 domains on

4004
03:19:44,950 --> 03:19:48,310
average, creating performance
and reliability problems.

4005
03:19:48,310 --> 03:19:52,870
SPDY and HTTP2 work per
domain and don't help.

4006
03:19:52,870 --> 03:19:55,540
Can we share connections or
delivery across third

4007
03:19:55,540 --> 03:19:58,140
parties?"

4008
03:19:58,140 --> 03:20:00,520
STEVE THAIR: So I guess
this is the point to

4009
03:20:00,520 --> 03:20:03,200
discuss, the 3PO idea.

4010
03:20:03,200 --> 03:20:09,340
And particularly when
the [INAUDIBLE]

4011
03:20:09,340 --> 03:20:11,480
a lot with this is like
affiliate tracking, and you're

4012
03:20:11,480 --> 03:20:14,620
trying to attribute
the affiliate

4013
03:20:14,620 --> 03:20:16,290
referral fee to somebody.

4014
03:20:16,290 --> 03:20:18,710
And so all of these affiliates
are coming from different

4015
03:20:18,710 --> 03:20:21,780
domains and different affiliate
tracking networks.

4016
03:20:21,780 --> 03:20:24,610
And I've got to have that
script on my page.

4017
03:20:24,610 --> 03:20:27,620
It's part of the business
model of the customer.

4018
03:20:27,620 --> 03:20:30,960
But if all of these things were
put into one centralized

4019
03:20:30,960 --> 03:20:33,640
domain, or there was an
effective mechanism for

4020
03:20:33,640 --> 03:20:37,000
sharing synchronizing the
cookies across the domains,

4021
03:20:37,000 --> 03:20:38,880
that would help me a lot.

4022
03:20:38,880 --> 03:20:41,400
Is that something
that we can do?

4023
03:20:41,400 --> 03:20:45,900
Or do you think that's never
going to happen?

4024
03:20:45,900 --> 03:20:48,560
STOYAN STEFANOV: I really
like the idea.

4025
03:20:48,560 --> 03:20:50,120
There's many things that
we can optimize.

4026
03:20:50,120 --> 03:20:53,390
First is the script that writes
whatever the widget is

4027
03:20:53,390 --> 03:20:55,120
doing, the iFrame, and so on.

4028
03:20:55,120 --> 03:21:00,140
So having this as packaged
together with the publisher's

4029
03:21:00,140 --> 03:21:01,460
script sounds great.

4030
03:21:01,460 --> 03:21:04,310
We have to make sure that it's
absolutely future-proof.

4031
03:21:04,310 --> 03:21:08,140
Because people might not upgrade
it once they get it

4032
03:21:08,140 --> 03:21:10,520
off of GitHub.

4033
03:21:10,520 --> 03:21:14,900
And then the other thing about a
common domain is right after

4034
03:21:14,900 --> 03:21:18,600
you have already written the
iFrame or the static resources

4035
03:21:18,600 --> 03:21:22,252
on that iFrame, could they be
sharing the same domain?

4036
03:21:22,252 --> 03:21:24,820
That'd be cool.

4037
03:21:24,820 --> 03:21:27,280
So you still have to make a
request to the third-party

4038
03:21:27,280 --> 03:21:30,220
provider to get the HTML,
any loggings, and

4039
03:21:30,220 --> 03:21:30,890
that kind of stuff.

4040
03:21:30,890 --> 03:21:33,900
But when it comes to static
resources, why not?

4041
03:21:33,900 --> 03:21:37,590

4042
03:21:37,590 --> 03:21:41,760
BEN VINEGAR: So with idea, maybe
we have a 3PJS CDN.com,

4043
03:21:41,760 --> 03:21:46,000
and we have
3PJS/Facebook/Disqus.

4044
03:21:46,000 --> 03:21:48,040
And that's where we put our
static stuff, and then we

4045
03:21:48,040 --> 03:21:49,910
benefit from having
a single domain?

4046
03:21:49,910 --> 03:21:52,370
Is that basically the idea?

4047
03:21:52,370 --> 03:21:54,610
Try and help me understand
here.

4048
03:21:54,610 --> 03:21:56,000
GUY PODJARNY: I think there's
two aspects of it.

4049
03:21:56,000 --> 03:21:58,290
There's the standardizing of how
something gets included on

4050
03:21:58,290 --> 03:22:01,100
the page, which would help
alleviate some of the concern

4051
03:22:01,100 --> 03:22:02,790
with [INAUDIBLE]

4052
03:22:02,790 --> 03:22:05,190
third parties, or third parties
that don't put as much

4053
03:22:05,190 --> 03:22:06,400
effort into it.

4054
03:22:06,400 --> 03:22:10,322
And then there's the delivery
aspect, which was around.

4055
03:22:10,322 --> 03:22:11,615
Yeah, having some shared &mdash;

4056
03:22:11,615 --> 03:22:15,440

4057
03:22:15,440 --> 03:22:17,750
The ideal would be maybe
a single domain.

4058
03:22:17,750 --> 03:22:19,820
There are all sorts of security
aspects to putting

4059
03:22:19,820 --> 03:22:21,910
content from multiple providers
on the same domain.

4060
03:22:21,910 --> 03:22:23,100
So that might not
be an option.

4061
03:22:23,100 --> 03:22:24,470
So maybe at the very least,
that there's shared

4062
03:22:24,470 --> 03:22:31,700
connections for those components
to deliver them,

4063
03:22:31,700 --> 03:22:33,380
where possible, through
the same entity.

4064
03:22:33,380 --> 03:22:35,940

4065
03:22:35,940 --> 03:22:38,120
STEVE THAIR: So much this has
to be done client-side,

4066
03:22:38,120 --> 03:22:42,110
because it inherently wants to
read a cookie to find what

4067
03:22:42,110 --> 03:22:44,710
other website that you went to
so I can do my affiliate

4068
03:22:44,710 --> 03:22:47,350
tracking and things like that.

4069
03:22:47,350 --> 03:22:50,460
If we had some kind of shared
mechanism, could we move a lot

4070
03:22:50,460 --> 03:22:51,400
of this service-side?

4071
03:22:51,400 --> 03:22:53,920
Are there any effective
service-side solutions?

4072
03:22:53,920 --> 03:22:57,200
So I can just take all the
scripts off my page.

4073
03:22:57,200 --> 03:22:58,260
Is that feasible?

4074
03:22:58,260 --> 03:23:00,570
What would we need to be able
to move some of this stuff

4075
03:23:00,570 --> 03:23:02,690
service-side?

4076
03:23:02,690 --> 03:23:08,430
GUY PODJARNY: Well, for the
server to be able to pull in

4077
03:23:08,430 --> 03:23:12,620
content from multiple domains,
for starters, for many of

4078
03:23:12,620 --> 03:23:15,060
these third-party services,
you would need some cookie

4079
03:23:15,060 --> 03:23:15,950
syncing capability.

4080
03:23:15,950 --> 03:23:17,400
Because they track
different IDs.

4081
03:23:17,400 --> 03:23:19,320
The cookie syncing is a
solved problem in ads,

4082
03:23:19,320 --> 03:23:21,430
so that can be done.

4083
03:23:21,430 --> 03:23:24,570
But then the second problem
is non-ID cookies.

4084
03:23:24,570 --> 03:23:26,070
And that's not at all
a solved problem.

4085
03:23:26,070 --> 03:23:28,500
So we would need, basically,
a commitment from anybody

4086
03:23:28,500 --> 03:23:32,210
participating in this, from the
Facebooks and Disqus of

4087
03:23:32,210 --> 03:23:36,220
the world, to say, I will keep
everything server-side.

4088
03:23:36,220 --> 03:23:37,450
Maybe even provide
some supporting

4089
03:23:37,450 --> 03:23:39,310
mechanisms for that.

4090
03:23:39,310 --> 03:23:42,030
And work fully on
a session ID.

4091
03:23:42,030 --> 03:23:43,890
And then, of course, then the
politics kick in about who

4092
03:23:43,890 --> 03:23:44,580
owns that ID.

4093
03:23:44,580 --> 03:23:49,120
But we'll leave that
part for later.

4094
03:23:49,120 --> 03:23:51,690
And on top of all of those, you
would need the browser to

4095
03:23:51,690 --> 03:23:53,600
share connections if you didn't
literally land on the

4096
03:23:53,600 --> 03:23:54,860
same domain.

4097
03:23:54,860 --> 03:23:57,190
So you'd need to somehow
have the browsers play

4098
03:23:57,190 --> 03:23:59,050
ball on that front.

4099
03:23:59,050 --> 03:24:00,630
BARBARA BERMES: And of course
for the publisher, it would be

4100
03:24:00,630 --> 03:24:02,940
great to just include something,
or run a script

4101
03:24:02,940 --> 03:24:05,260
somewhere, and include all
the things that you need.

4102
03:24:05,260 --> 03:24:08,420
So that would help, for sure.

4103
03:24:08,420 --> 03:24:10,810
GUY PODJARNY: I would say there
is a lower bar around

4104
03:24:10,810 --> 03:24:11,820
sharing, at least.

4105
03:24:11,820 --> 03:24:12,990
Delivering them from a standard

4106
03:24:12,990 --> 03:24:14,270
component for providers.

4107
03:24:14,270 --> 03:24:19,250
So if providers had an easy way
to know which resources of

4108
03:24:19,250 --> 03:24:21,590
their third parties are things
that they could pull in to

4109
03:24:21,590 --> 03:24:24,000
their content, then
I think that would

4110
03:24:24,000 --> 03:24:24,940
be a big step forward.

4111
03:24:24,940 --> 03:24:27,120
We had to do conversations with
Facebook, with Google,

4112
03:24:27,120 --> 03:24:29,670
with various others to learn
that, I believe the Google

4113
03:24:29,670 --> 03:24:32,210
Analytics JavaScript library,
the Facebook SDK, those

4114
03:24:32,210 --> 03:24:33,170
components are static.

4115
03:24:33,170 --> 03:24:36,070
But you basically don't know
those without a very explicit

4116
03:24:36,070 --> 03:24:41,695
statement from the third-party
vendors.

4117
03:24:41,695 --> 03:24:45,780

4118
03:24:45,780 --> 03:24:47,020
STEVE THAIR: No questions?

4119
03:24:47,020 --> 03:24:47,660
No comments?

4120
03:24:47,660 --> 03:24:50,835
OK, we'll move straight
onto the next one.

4121
03:24:50,835 --> 03:24:52,085
Andre Behrens?

4122
03:24:52,085 --> 03:24:56,340

4123
03:24:56,340 --> 03:24:56,510
ANDRE BEHRENS: Hi.

4124
03:24:56,510 --> 03:24:58,600
And this is an anonymous
question.

4125
03:24:58,600 --> 03:25:01,000
"If a blocking script is loaded
from a domain that goes

4126
03:25:01,000 --> 03:25:03,940
down, this will cause my
page to fail to load.

4127
03:25:03,940 --> 03:25:05,840
How can we test and/or
address the single

4128
03:25:05,840 --> 03:25:09,260
point of failure issue?

4129
03:25:09,260 --> 03:25:11,850
I guess I'll go to Barbara.

4130
03:25:11,850 --> 03:25:12,920
Single points of failure?

4131
03:25:12,920 --> 03:25:13,520
BARBARA BERMES: Yeah.

4132
03:25:13,520 --> 03:25:14,560
STEVE THAIR: Is this
a real problem that

4133
03:25:14,560 --> 03:25:15,590
affects your website?

4134
03:25:15,590 --> 03:25:16,410
BARBARA BERMES: Yeah.

4135
03:25:16,410 --> 03:25:17,590
I would say so.

4136
03:25:17,590 --> 03:25:20,250
And I see, sometimes, even
script being not properly

4137
03:25:20,250 --> 03:25:23,240
included on the CBC domain.

4138
03:25:23,240 --> 03:25:27,990
Literally, ad hoc, you could
use Pat's SPOF-O-matic to

4139
03:25:27,990 --> 03:25:29,470
check how your site is behaving

4140
03:25:29,470 --> 03:25:30,560
with third-party scripts.

4141
03:25:30,560 --> 03:25:33,330
I also like SPOFCheck.

4142
03:25:33,330 --> 03:25:36,480
I think the eBay team did that,
so you can pull it into

4143
03:25:36,480 --> 03:25:37,940
your continuous integration.

4144
03:25:37,940 --> 03:25:42,290
So when somebody develops
something, we could right away

4145
03:25:42,290 --> 03:25:43,110
figure out that they're

4146
03:25:43,110 --> 03:25:44,980
including scripts not properly.

4147
03:25:44,980 --> 03:25:47,370
And then avoid that
potential failure.

4148
03:25:47,370 --> 03:25:49,610
And we've had happening
as well.

4149
03:25:49,610 --> 03:25:51,920
Even, I think, last
week with ads.

4150
03:25:51,920 --> 03:25:55,970
Where something was not properly
included, and we got

4151
03:25:55,970 --> 03:25:57,290
some bad hits for that.

4152
03:25:57,290 --> 03:26:00,490

4153
03:26:00,490 --> 03:26:02,990
STOYAN STEFANOV: So you were
able to check during the build

4154
03:26:02,990 --> 03:26:05,910
process that somebody somewhere
included a block &mdash;

4155
03:26:05,910 --> 03:26:06,600
BARBARA BERMES: Yeah, exactly.

4156
03:26:06,600 --> 03:26:08,570
So it literally checks
for script.

4157
03:26:08,570 --> 03:26:10,640
And if you just put
it wherever it is,

4158
03:26:10,640 --> 03:26:12,200
it's really cool tool.

4159
03:26:12,200 --> 03:26:14,530
There's even, I think, a
Grunt plugin as well

4160
03:26:14,530 --> 03:26:16,270
that you can use.

4161
03:26:16,270 --> 03:26:17,980
I would love to have those
kinds of things more

4162
03:26:17,980 --> 03:26:19,790
integrated in our deployment.

4163
03:26:19,790 --> 03:26:22,130
So that basically, as
a developer, you

4164
03:26:22,130 --> 03:26:23,170
can almost be dumb.

4165
03:26:23,170 --> 03:26:25,450
You just don't have
to think about it.

4166
03:26:25,450 --> 03:26:29,496
And we catch that, and we're
not able to deploy stuff.

4167
03:26:29,496 --> 03:26:32,450
GUY PODJARNY: It's important
to clarify that the SPOF is

4168
03:26:32,450 --> 03:26:35,530
the extreme scenario, this
website is down.

4169
03:26:35,530 --> 03:26:37,090
And maybe a slightly
more rare one.

4170
03:26:37,090 --> 03:26:38,760
But a mini-version of
it happens every

4171
03:26:38,760 --> 03:26:39,840
time the page is loaded.

4172
03:26:39,840 --> 03:26:42,360
Any one of these blockers is
also some sort of delay, some

4173
03:26:42,360 --> 03:26:43,830
sort of resource contention
for each

4174
03:26:43,830 --> 03:26:45,300
one of those resources.

4175
03:26:45,300 --> 03:26:48,270
So sometimes, the conversation
comes into, nah, Facebook's

4176
03:26:48,270 --> 03:26:49,410
not going to go down.

4177
03:26:49,410 --> 03:26:52,780
Which is a different
conversation.

4178
03:26:52,780 --> 03:26:55,590
But there is always a little bit
of a penalty, even for the

4179
03:26:55,590 --> 03:26:57,540
most cutting-edge
third parties.

4180
03:26:57,540 --> 03:26:59,871
So getting them out of
the line of fire is

4181
03:26:59,871 --> 03:27:01,970
always a good idea.

4182
03:27:01,970 --> 03:27:04,970
STOYAN STEFANOV: What I was
saying is, it may not be down,

4183
03:27:04,970 --> 03:27:07,400
but it may be blocked
in the company.

4184
03:27:07,400 --> 03:27:10,000
You don't want people on
Facebook during working

4185
03:27:10,000 --> 03:27:10,990
hours and so on.

4186
03:27:10,990 --> 03:27:15,890
So you effectively destroy the
website, because Facebook is

4187
03:27:15,890 --> 03:27:17,870
blocked for some reason.

4188
03:27:17,870 --> 03:27:19,255
STEVE THAIR: Kyle Kinneman,
you had a &mdash;

4189
03:27:19,255 --> 03:27:19,910
KYLE: It's been answered.

4190
03:27:19,910 --> 03:27:20,470
STEVE THAIR: It's
been answered?

4191
03:27:20,470 --> 03:27:21,520
OK.

4192
03:27:21,520 --> 03:27:22,290
Cool.

4193
03:27:22,290 --> 03:27:24,740
BEN VINEGAR: I was just going
to add really quickly that,

4194
03:27:24,740 --> 03:27:27,350
other than the case where
somebody just puts in a

4195
03:27:27,350 --> 03:27:28,130
blocking script tag.

4196
03:27:28,130 --> 03:27:29,850
There's that problem.

4197
03:27:29,850 --> 03:27:32,380
I do think that third-party
applications and third-party

4198
03:27:32,380 --> 03:27:35,830
scripts, we absolutely have
to be good citizens.

4199
03:27:35,830 --> 03:27:38,810
And we have to work in
situations where stuff is down

4200
03:27:38,810 --> 03:27:40,120
or wherever.

4201
03:27:40,120 --> 03:27:42,850
I know that a big push that
we're making in our company is

4202
03:27:42,850 --> 03:27:45,920
that if Disqus goes down, we
at least want you to see

4203
03:27:45,920 --> 03:27:50,025
static comments that
are not dynamic.

4204
03:27:50,025 --> 03:27:52,610
The server's not to listen to,
because maybe it's blowing up.

4205
03:27:52,610 --> 03:27:53,920
But at least you can
read comments.

4206
03:27:53,920 --> 03:27:56,580
And for all intents and
purposes, that's just static.

4207
03:27:56,580 --> 03:28:00,720
It's from a CDN, and
things look OK.

4208
03:28:00,720 --> 03:28:04,800
But this is just stuff
that we have to do.

4209
03:28:04,800 --> 03:28:08,390
And I don't know if there's just
a hammer that everybody

4210
03:28:08,390 --> 03:28:09,370
can just use for that.

4211
03:28:09,370 --> 03:28:11,140
STOYAN STEFANOV: If everybody
did that, we would be

4212
03:28:11,140 --> 03:28:12,230
definitely better off.

4213
03:28:12,230 --> 03:28:12,400
BARBARA BERMES: Yeah.

4214
03:28:12,400 --> 03:28:14,850
And of course I appreciate
those things

4215
03:28:14,850 --> 03:28:17,500
that providers do.

4216
03:28:17,500 --> 03:28:22,900
One of the other challenges we
have is will editors finding

4217
03:28:22,900 --> 03:28:24,660
news be able to include
widgets?

4218
03:28:24,660 --> 03:28:28,180
And they literally take them
from a website, not thinking

4219
03:28:28,180 --> 03:28:30,140
how to properly include it.

4220
03:28:30,140 --> 03:28:33,220
Those are the challenges for
us, also, to sandbox that.

4221
03:28:33,220 --> 03:28:36,000

4222
03:28:36,000 --> 03:28:37,560
STOYAN STEFANOV: Something
that [INAUDIBLE]

4223
03:28:37,560 --> 03:28:42,350
from your comment, I'd really
love to ask people to write

4224
03:28:42,350 --> 03:28:45,510
block posts and do research
and put us to shame.

4225
03:28:45,510 --> 03:28:48,660

4226
03:28:48,660 --> 03:28:50,450
Just to keep the third-party
providers in check.

4227
03:28:50,450 --> 03:28:53,280
And say, oh, this is horrible.

4228
03:28:53,280 --> 03:28:56,440
So if you see if you see some
third-party provider that

4229
03:28:56,440 --> 03:28:58,980
doesn't provide asynchronous
[INAUDIBLE],

4230
03:28:58,980 --> 03:29:01,250
make noise about it.

4231
03:29:01,250 --> 03:29:01,930
STEVE THAIR: I think
it's probably an

4232
03:29:01,930 --> 03:29:02,650
important thing to mention.

4233
03:29:02,650 --> 03:29:04,130
Is that not you're
not necessarily

4234
03:29:04,130 --> 03:29:05,820
always criticizing them.

4235
03:29:05,820 --> 03:29:08,080
What you're actually doing is
giving them the opportunity to

4236
03:29:08,080 --> 03:29:10,020
go to their boss and say, look,
all these people are

4237
03:29:10,020 --> 03:29:10,980
complaining about it.

4238
03:29:10,980 --> 03:29:14,000
And that's a really effective
mechanism for them to get the

4239
03:29:14,000 --> 03:29:15,890
resources they need.

4240
03:29:15,890 --> 03:29:17,370
A lot of these guys
are providers.

4241
03:29:17,370 --> 03:29:19,370
They want to fix the problem,
but they've got competing

4242
03:29:19,370 --> 03:29:20,120
business priorities.

4243
03:29:20,120 --> 03:29:22,220
If you're out there making a
lot of noise about it, it

4244
03:29:22,220 --> 03:29:23,810
suddenly becomes a business
priority.

4245
03:29:23,810 --> 03:29:26,040
And you really help
them to address.

4246
03:29:26,040 --> 03:29:28,220
We've only got about
four minutes left.

4247
03:29:28,220 --> 03:29:29,810
I'm actually going to skip
one question, which

4248
03:29:29,810 --> 03:29:31,230
we'll come back to.

4249
03:29:31,230 --> 03:29:32,560
Because I really want
to get question

4250
03:29:32,560 --> 03:29:35,200
number seven answered.

4251
03:29:35,200 --> 03:29:37,290
Which, from Rahul Choudhary?

4252
03:29:37,290 --> 03:29:38,540
Cho-dari?

4253
03:29:38,540 --> 03:29:46,210

4254
03:29:46,210 --> 03:29:49,100
RAHUL CHOUDHARY: So this is
another anonymous question.

4255
03:29:49,100 --> 03:29:51,510
"What could the browser vendors
provide to eliminate

4256
03:29:51,510 --> 03:29:53,790
third-party scripts and the
problems associated with

4257
03:29:53,790 --> 03:29:57,351
them?" I don't really agree
with this question.

4258
03:29:57,351 --> 03:30:02,750
[LAUGHTER]

4259
03:30:02,750 --> 03:30:04,360
STEVE THAIR: We've got people
from the Chrome team.

4260
03:30:04,360 --> 03:30:05,610
We've got people from Mozilla.

4261
03:30:05,610 --> 03:30:07,220
We've got people &mdash;

4262
03:30:07,220 --> 03:30:09,340
I'd be very interested
to hear from those.

4263
03:30:09,340 --> 03:30:12,900
But if you could have one thing
from a browser vendor

4264
03:30:12,900 --> 03:30:17,235
guy to help address this
problem, what would it be?

4265
03:30:17,235 --> 03:30:19,320
GUY PODJARNY: My number one
would probably be the script

4266
03:30:19,320 --> 03:30:19,960
dependencies.

4267
03:30:19,960 --> 03:30:22,630
Document.write a close second.

4268
03:30:22,630 --> 03:30:25,220
The ability to group async.

4269
03:30:25,220 --> 03:30:25,590
STEVE THAIR: Barbara?

4270
03:30:25,590 --> 03:30:26,445
BARBARA BERMES: Actually, same.

4271
03:30:26,445 --> 03:30:26,910
Same.

4272
03:30:26,910 --> 03:30:28,160
The document.write issue.

4273
03:30:28,160 --> 03:30:31,418

4274
03:30:31,418 --> 03:30:32,320
STOYAN STEFANOV: I like
the browsers.

4275
03:30:32,320 --> 03:30:34,790
They're my favorite.

4276
03:30:34,790 --> 03:30:36,150
BEN VINEGAR: I could
probably go off on

4277
03:30:36,150 --> 03:30:38,210
this for a long time.

4278
03:30:38,210 --> 03:30:39,200
STEVE THAIR: Please do.

4279
03:30:39,200 --> 03:30:40,980
BEN VINEGAR: So starting on
setup, basically the way that

4280
03:30:40,980 --> 03:30:43,660
most complex widgets work today
is there's a script runs

4281
03:30:43,660 --> 03:30:45,420
on the host page, and it usually
opens up an iFrame

4282
03:30:45,420 --> 03:30:46,810
that communicate with
each other.

4283
03:30:46,810 --> 03:30:50,900
And in a perfect world, I would
love if Disqus was just

4284
03:30:50,900 --> 03:30:53,920
an iFrame, and there was
that separation.

4285
03:30:53,920 --> 03:30:54,960
Everyone could feel confident
about it.

4286
03:30:54,960 --> 03:30:56,080
And that would be
the contract.

4287
03:30:56,080 --> 03:30:56,985
You know it's in the iFrame.

4288
03:30:56,985 --> 03:30:58,960
You know it's not going
to escape the iFrame.

4289
03:30:58,960 --> 03:31:03,610
But the problem is that the
tools for making that happen

4290
03:31:03,610 --> 03:31:06,100
are just nonexistent.

4291
03:31:06,100 --> 03:31:07,170
There are tons of &mdash;

4292
03:31:07,170 --> 03:31:08,000
I won't say tons.

4293
03:31:08,000 --> 03:31:10,850
But there are things that are
being developed right now for

4294
03:31:10,850 --> 03:31:12,860
further isolating iFrames.

4295
03:31:12,860 --> 03:31:14,900
There is the Sandbox
attribute.

4296
03:31:14,900 --> 03:31:18,230
Let's really break
down this iFrame.

4297
03:31:18,230 --> 03:31:20,150
There's no tools that are being
developed from the other

4298
03:31:20,150 --> 03:31:23,720
perspective, which are, let me
get access to some of stuff

4299
03:31:23,720 --> 03:31:25,300
that's happening on
the parent page.

4300
03:31:25,300 --> 03:31:27,660
Let me know that somebody's
scrolling the page.

4301
03:31:27,660 --> 03:31:30,420
Let me know that somebody's
clicking so that I can close a

4302
03:31:30,420 --> 03:31:33,030
menu that I have happened
to open in my iFrame.

4303
03:31:33,030 --> 03:31:34,340
There is none of those
tools right now.

4304
03:31:34,340 --> 03:31:37,845
And because of that, or even
very simply, I cannot resize

4305
03:31:37,845 --> 03:31:40,020
the iFrame today.

4306
03:31:40,020 --> 03:31:41,730
Because there are none of those
tools, we have to have

4307
03:31:41,730 --> 03:31:44,210
this dual system where
have we have to put

4308
03:31:44,210 --> 03:31:45,040
JavaScript on your page.

4309
03:31:45,040 --> 03:31:46,510
And that's unfortunate.

4310
03:31:46,510 --> 03:31:50,880
It would be terrific if we
started looking at things from

4311
03:31:50,880 --> 03:31:52,890
the other side, and then maybe
things could get better, I

4312
03:31:52,890 --> 03:31:56,146
think a lot better, just by
providing those tools.

4313
03:31:56,146 --> 03:31:57,460
STOYAN STEFANOV: Would
the Web Components be

4314
03:31:57,460 --> 03:31:58,710
an answer to that?

4315
03:31:58,710 --> 03:32:03,270

4316
03:32:03,270 --> 03:32:05,520
BEN VINEGAR: I've only
looked a little bit.

4317
03:32:05,520 --> 03:32:08,320
Perhaps this morning, to
research a little bit more

4318
03:32:08,320 --> 03:32:09,780
about Web Components
so I didn't look

4319
03:32:09,780 --> 03:32:12,070
like a complete fool.

4320
03:32:12,070 --> 03:32:14,070
But from what I've seen, is that
they're successful by the

4321
03:32:14,070 --> 03:32:15,440
parent page, right?

4322
03:32:15,440 --> 03:32:18,620
Even if they're kind
of hidden?

4323
03:32:18,620 --> 03:32:20,140
Is there a Web Components
person?

4324
03:32:20,140 --> 03:32:20,690
You create &mdash;

4325
03:32:20,690 --> 03:32:21,980
STOYAN STEFANOV:
Anyone who's &mdash;

4326
03:32:21,980 --> 03:32:24,150
STEVE THAIR: The delegate put
their hand up thing is not.

4327
03:32:24,150 --> 03:32:26,070
So if anybody's an expert
on Web Components.

4328
03:32:26,070 --> 03:32:28,200
Anyone?

4329
03:32:28,200 --> 03:32:29,660
BEN VINEGAR: I have somebody
over there.

4330
03:32:29,660 --> 03:32:31,340
STEVE THAIR: Alex!

4331
03:32:31,340 --> 03:32:32,290
Alex to the rescue.

4332
03:32:32,290 --> 03:32:33,235
ALEX RUSSELL: Hi.

4333
03:32:33,235 --> 03:32:34,850
Alex Russell from Google.

4334
03:32:34,850 --> 03:32:38,010
So the way Web Components
work are it's a

4335
03:32:38,010 --> 03:32:39,230
bunch of related specs.

4336
03:32:39,230 --> 03:32:41,770
We designed it that way for a
reason that I won't go into.

4337
03:32:41,770 --> 03:32:45,460
But you can have something
called a shadow DOM, which

4338
03:32:45,460 --> 03:32:51,750
hides away the implementation
of your UI from the normal

4339
03:32:51,750 --> 03:32:53,910
iteration order through
the document.

4340
03:32:53,910 --> 03:32:57,230
And you're entirely correct that
that doesn't solve the

4341
03:32:57,230 --> 03:32:57,780
problem for you.

4342
03:32:57,780 --> 03:32:59,770
Because you can still reach
into the shadow DOM.

4343
03:32:59,770 --> 03:33:02,670
It was explicitly designed not
to be a security boundary.

4344
03:33:02,670 --> 03:33:08,240
Today the answer is, put an
iFrame in your shadow DOM and

4345
03:33:08,240 --> 03:33:08,970
use it that way.

4346
03:33:08,970 --> 03:33:10,070
So it doesn't get you
out of any of the

4347
03:33:10,070 --> 03:33:11,590
sizing issues, I'm afraid.

4348
03:33:11,590 --> 03:33:13,930
BEN VINEGAR: So I think a lot of
this new stuff [INAUDIBLE]

4349
03:33:13,930 --> 03:33:17,970
thing is still being developed
from this perspective of,

4350
03:33:17,970 --> 03:33:22,060
almost like if I was Google, and
I had widgets that I want

4351
03:33:22,060 --> 03:33:24,180
on all my other services and I
trust those services, I feel

4352
03:33:24,180 --> 03:33:25,470
like a lot of is being
designed from that

4353
03:33:25,470 --> 03:33:26,280
perspective.

4354
03:33:26,280 --> 03:33:29,970
Somebody can shut me
up if they want.

4355
03:33:29,970 --> 03:33:32,780
Because the security things
aren't addressed.

4356
03:33:32,780 --> 03:33:34,660
There was the seamless spec that
came out, but it still

4357
03:33:34,660 --> 03:33:37,780
let styles come in.

4358
03:33:37,780 --> 03:33:38,950
For that kind of publisher,
they may be

4359
03:33:38,950 --> 03:33:39,560
interested in that.

4360
03:33:39,560 --> 03:33:41,100
But I'm not interested
in that.

4361
03:33:41,100 --> 03:33:43,066
Anyways.

4362
03:33:43,066 --> 03:33:45,160
I've got that sheet that
says, shut up.

4363
03:33:45,160 --> 03:33:47,280
STEVE THAIR: Time to go.

4364
03:33:47,280 --> 03:33:47,600
All right.

4365
03:33:47,600 --> 03:33:49,840
So basically, we've got
one minute left.

4366
03:33:49,840 --> 03:33:50,720
We're going to wrap up.

4367
03:33:50,720 --> 03:33:52,910
I think immediately
after this, we're

4368
03:33:52,910 --> 03:33:54,430
staying here for lunch.

4369
03:33:54,430 --> 03:33:55,240
Is that right.

4370
03:33:55,240 --> 03:33:55,565
ANDREW BETTS: [INAUDIBLE]

4371
03:33:55,565 --> 03:33:55,890
Yup.

4372
03:33:55,890 --> 03:33:56,520
STEVE THAIR: Yeah.

4373
03:33:56,520 --> 03:33:59,570
Well, thank you very much to
the people on the party &mdash;

4374
03:33:59,570 --> 03:34:00,550
People on the party?

4375
03:34:00,550 --> 03:34:01,295
P &mdash; p &mdash;

4376
03:34:01,295 --> 03:34:02,750
[APPLAUSE]

4377
03:34:02,750 --> 03:34:04,205
STEVE THAIR: People
on the panel!

4378
03:34:04,205 --> 03:34:06,145
Peter Piper picked a peck
of pickled peppers!

4379
03:34:06,145 --> 03:34:07,600
[APPLAUSE]

4380
03:34:07,600 --> 03:34:09,070
STEVE THAIR: I'll hand
it back to Andrew.

4381
03:34:09,070 --> 03:34:09,420
ANDREW BETTS: Thanks Steve.

4382
03:34:09,420 --> 03:34:09,770
STEVE THAIR: Thank you.

4383
03:34:09,770 --> 03:34:11,120
ANDREW BETTS: So we're going
to do lunch now.

4384
03:34:11,120 --> 03:34:12,870
I just have a couple of
announcements before lunch.

4385
03:34:12,870 --> 03:34:15,120
First of all, everyone's
obviously discovered that you

4386
03:34:15,120 --> 03:34:17,050
can change the name on your
Google accounts to put

4387
03:34:17,050 --> 03:34:18,100
messages on the screen.

4388
03:34:18,100 --> 03:34:18,775
That's very clever.

4389
03:34:18,775 --> 03:34:19,340
Well done.

4390
03:34:19,340 --> 03:34:22,410
[LAUGHTER]

4391
03:34:22,410 --> 03:34:23,800
ANDREW BETTS: Also, someone
sent us a pull request.

4392
03:34:23,800 --> 03:34:26,680
So thanks very much for that.

4393
03:34:26,680 --> 03:34:29,860
And if you do have trouble
connecting, it seems to be

4394
03:34:29,860 --> 03:34:30,640
working really well now.

4395
03:34:30,640 --> 03:34:33,040
But Wesley, who's sitting
right here, is really

4396
03:34:33,040 --> 03:34:35,660
interested to get your feedback
and but reports if

4397
03:34:35,660 --> 03:34:36,990
you've got a device that
it doesn't work on.

4398
03:34:36,990 --> 03:34:40,340
So go and chat him over lunch.

4399
03:34:40,340 --> 03:34:42,450
We've got some smokers who
were interested in going

4400
03:34:42,450 --> 03:34:44,660
outside to smoke.

4401
03:34:44,660 --> 03:34:46,750
Unfortunately, it is kind
of inconvenient.

4402
03:34:46,750 --> 03:34:49,090
We have to escort you through
the building.

4403
03:34:49,090 --> 03:34:51,320
But there will be people
around to do that.

4404
03:34:51,320 --> 03:34:55,080
So just grab hold of some of the
helpers who will take you

4405
03:34:55,080 --> 03:34:58,290
to where you can do that.

4406
03:34:58,290 --> 03:35:01,840
Remember to use the feedback
form to give us feedback

4407
03:35:01,840 --> 03:35:03,260
before the end of the day.

4408
03:35:03,260 --> 03:35:04,850
And lunch is right there.

4409
03:35:04,850 --> 03:35:06,100
So go help yourselves.

4410
03:35:06,100 --> 03:35:10,054

4411
03:35:10,054 --> 03:36:40,922
[MUSIC PLAYING]

