1
00:00:00,000 --> 00:00:01,684

2
00:00:01,684 --> 00:00:02,530
RAY CROMWELL: Hi.

3
00:00:02,530 --> 00:00:06,380
My name is Ray Cromwell, and
this is Daniel Kurka, and we

4
00:00:06,380 --> 00:00:09,650
are engineers at Google who work
on ZWT, and this is GMT

5
00:00:09,650 --> 00:00:11,820
Roadmap for the Future.

6
00:00:11,820 --> 00:00:15,202
Now, if you were here last year
at Google I/O, there was

7
00:00:15,202 --> 00:00:18,840
a session called "The History
and Future of GWT" where we

8
00:00:18,840 --> 00:00:23,140
talked about creating this new
GWT steering committee that

9
00:00:23,140 --> 00:00:25,680
was going to be in combination
with Google, as well some of

10
00:00:25,680 --> 00:00:28,370
the top heavy hitters in
the GWT community--

11
00:00:28,370 --> 00:00:32,009
people like Sencha, people like
Vaddin, like Red Hat--

12
00:00:32,009 --> 00:00:36,360
to help define the roadmap for
GWT in the future in a way

13
00:00:36,360 --> 00:00:39,020
that takes the community's needs
into account and not

14
00:00:39,020 --> 00:00:42,600
just Google's internal needs,
which has been driving GWT

15
00:00:42,600 --> 00:00:44,870
over the last couple of years.

16
00:00:44,870 --> 00:00:49,390
And so what I'd like to do is
talk about what's happened

17
00:00:49,390 --> 00:00:51,980
since last year when
we announced that.

18
00:00:51,980 --> 00:00:54,500
So the steering committee has
met several times, and we've

19
00:00:54,500 --> 00:00:58,400
had a lot of discussions, and
we've implemented some changes

20
00:00:58,400 --> 00:00:59,990
to the project based on
those discussions.

21
00:00:59,990 --> 00:01:03,230
So the first thing is we have
moved the GWT source code to a

22
00:01:03,230 --> 00:01:06,550
Git repository now hosted
on gwt.googlesource.com.

23
00:01:06,550 --> 00:01:12,540
Secondly, we've migrated to a
totally new code review system

24
00:01:12,540 --> 00:01:14,980
called Gerrit, which is much
nicer than the old system we

25
00:01:14,980 --> 00:01:18,360
used, and it's much more of a
pleasure to use in my opinion.

26
00:01:18,360 --> 00:01:22,230
Third, if you like the GitHub
interface or you really like

27
00:01:22,230 --> 00:01:24,750
working on code on GitHub,
we actually mirror

28
00:01:24,750 --> 00:01:25,900
GWT to GitHub now.

29
00:01:25,900 --> 00:01:28,240
So you can go to
GitHub.com/gwtproject and

30
00:01:28,240 --> 00:01:30,960
track the project there.

31
00:01:30,960 --> 00:01:33,980
Fourth, Red Hat has graciously
allowed to donate some

32
00:01:33,980 --> 00:01:38,950
resources from their OpenShift
cloud to basically do

33
00:01:38,950 --> 00:01:40,760
continuous integration
builds of GWT.

34
00:01:40,760 --> 00:01:43,590
So every time there's a commit,
we'll do a build, run

35
00:01:43,590 --> 00:01:44,790
tests, and we'll push
out nightly

36
00:01:44,790 --> 00:01:47,160
snapshots very, very soon.

37
00:01:47,160 --> 00:01:51,510
Finally, there's a totally new
home for the GWT project,

38
00:01:51,510 --> 00:01:55,420
which Daniel's going to talk
about a little bit later.

39
00:01:55,420 --> 00:01:57,250
So there's been some steering
committee updates as well.

40
00:01:57,250 --> 00:01:59,250
So I announced last year
the members of

41
00:01:59,250 --> 00:02:00,366
the steering committee.

42
00:02:00,366 --> 00:02:02,880
I'm not going to go over the
complete list, but we've added

43
00:02:02,880 --> 00:02:06,410
JetBrains, makers of IntelliJ
IDEA, which in my opinion is

44
00:02:06,410 --> 00:02:07,900
the most awesome IDE there is.

45
00:02:07,900 --> 00:02:11,430
They also make the new Android
IDE for Google.

46
00:02:11,430 --> 00:02:13,070
So they are now a member of
the steering committee, so

47
00:02:13,070 --> 00:02:16,220
hopefully that means really good
things in terms of GWT

48
00:02:16,220 --> 00:02:18,800
support within IntelliJ IDEA,
which already actually is

49
00:02:18,800 --> 00:02:20,620
pretty good.

50
00:02:20,620 --> 00:02:23,890
The steering committee also met
and approved a roadmap,

51
00:02:23,890 --> 00:02:27,580
which I'm going to talk about
today for GWT 2.6 and beyond.

52
00:02:27,580 --> 00:02:29,700
And third, there's been a
start of what we call

53
00:02:29,700 --> 00:02:30,700
decentralization.

54
00:02:30,700 --> 00:02:33,940
What this means basically is
some of the pieces of this

55
00:02:33,940 --> 00:02:37,930
roadmap which external people
have proposed now have

56
00:02:37,930 --> 00:02:40,020
external leaders.

57
00:02:40,020 --> 00:02:41,750
These are people who are going
to take responsibility for

58
00:02:41,750 --> 00:02:44,100
those pieces and are going
to drive them.

59
00:02:44,100 --> 00:02:47,870
For example, Vaadin is going to
drive IE 10, Windows Phone,

60
00:02:47,870 --> 00:02:49,670
Microsoft Surface support.

61
00:02:49,670 --> 00:02:53,240
Thomas Broyer is fully
mavenizing GWT into modules,

62
00:02:53,240 --> 00:02:58,140
and he's taking over
RequestFactory support.

63
00:02:58,140 --> 00:03:00,020
We also released a new
version of GWT since

64
00:03:00,020 --> 00:03:02,010
last year, GWT 2.5.1.

65
00:03:02,010 --> 00:03:04,090
Mostly bug fixes.

66
00:03:04,090 --> 00:03:05,610
There were a couple
of improvements.

67
00:03:05,610 --> 00:03:09,820
One, for example, is the Direct
Install Linker now

68
00:03:09,820 --> 00:03:12,320
supports content security
policy, so you can build GWT

69
00:03:12,320 --> 00:03:16,060
apps that install as Chrome
apps and extensions.

70
00:03:16,060 --> 00:03:17,960
There's a couple of other things
that we've improved,

71
00:03:17,960 --> 00:03:23,770
but you can see the full
set of changes online.

72
00:03:23,770 --> 00:03:24,840
Let's talk about the future.

73
00:03:24,840 --> 00:03:26,130
I think that's what
most people in

74
00:03:26,130 --> 00:03:26,930
the room are curious.

75
00:03:26,930 --> 00:03:27,870
They're worried about GWT.

76
00:03:27,870 --> 00:03:30,920
They're wondering, is
it getting stale?

77
00:03:30,920 --> 00:03:34,680
How is it going to evolve
in the future?

78
00:03:34,680 --> 00:03:36,610
So the steering committee
met several times.

79
00:03:36,610 --> 00:03:39,490
Just recently, we had our own
summit two days before I/O

80
00:03:39,490 --> 00:03:41,100
where we got together
over two days,

81
00:03:41,100 --> 00:03:42,850
huddled down in a bunker.

82
00:03:42,850 --> 00:03:45,760
We discussed what we're going
to do going forward.

83
00:03:45,760 --> 00:03:48,330
First, we defined the set of
core principles and areas of

84
00:03:48,330 --> 00:03:51,840
focus that we believe that GWT
should address going forward

85
00:03:51,840 --> 00:03:54,710
into the future, and we've
agreed to them by consensus.

86
00:03:54,710 --> 00:03:57,010
Those are openness and
simplicity, speed,

87
00:03:57,010 --> 00:03:59,460
interoperability, mobility,
reliability, and

88
00:03:59,460 --> 00:04:00,780
embeddability.

89
00:04:00,780 --> 00:04:02,870
First, let's talk about openness
and simplicity.

90
00:04:02,870 --> 00:04:04,420
What does that mean?

91
00:04:04,420 --> 00:04:06,485
I talked about this at I/O last
year, but basically, when

92
00:04:06,485 --> 00:04:09,580
we complete the move to open
source, it'll make it easier

93
00:04:09,580 --> 00:04:12,150
for everyone to join in and
contribute going forward.

94
00:04:12,150 --> 00:04:14,380
GWT steering committee members
are now allowed as direct

95
00:04:14,380 --> 00:04:14,890
committers.

96
00:04:14,890 --> 00:04:17,269
This is the first time
in several years.

97
00:04:17,269 --> 00:04:20,240
That means someone can actually
make a patch and just

98
00:04:20,240 --> 00:04:23,640
commit directly to the
source trunk of GWT.

99
00:04:23,640 --> 00:04:25,860
We have a public continuous
integration server.

100
00:04:25,860 --> 00:04:27,350
So very soon, this
will be pushed

101
00:04:27,350 --> 00:04:28,370
out in nightly snapshots.

102
00:04:28,370 --> 00:04:30,350
So if you don't want to wait
for GWT 2.6, you can just

103
00:04:30,350 --> 00:04:32,605
depend on that in your Maven
dependency file and just pick

104
00:04:32,605 --> 00:04:35,320
it up nightly.

105
00:04:35,320 --> 00:04:37,700
Speaking of that, we're going
to fully mavenize GWT.

106
00:04:37,700 --> 00:04:41,180
So you don't just have to pick
up the whole GWT.user SDK.

107
00:04:41,180 --> 00:04:44,660
Maybe you only want to use GWT
Core, GWT [? ITNN ?], and some

108
00:04:44,660 --> 00:04:46,560
GWT widgets, but you don't want
RequestFactory, Factory,

109
00:04:46,560 --> 00:04:48,560
or you don't want GWT RPC.

110
00:04:48,560 --> 00:04:51,490
So by breaking GWT up into
smaller pieces, you can

111
00:04:51,490 --> 00:04:54,290
actually speed up your compiles
and also prune your

112
00:04:54,290 --> 00:04:55,200
dependency tree.

113
00:04:55,200 --> 00:04:57,980
I think that's going to be more
exciting going forward

114
00:04:57,980 --> 00:05:01,670
because it should enable
iterating faster.

115
00:05:01,670 --> 00:05:02,960
And we're going to have regular
public steering

116
00:05:02,960 --> 00:05:06,220
committee meetings, and some
of those actually will

117
00:05:06,220 --> 00:05:08,050
probably be done with Hangouts
on Air so you will actually be

118
00:05:08,050 --> 00:05:10,750
able to join and watch the
debate as it happens.

119
00:05:10,750 --> 00:05:12,360
Simplicity.

120
00:05:12,360 --> 00:05:14,670
The GWT SDK is basically
monolithic, and that means

121
00:05:14,670 --> 00:05:17,330
that there's a lot of
interdependencies that makes

122
00:05:17,330 --> 00:05:20,060
it hard to modularize it,
and so we're working on

123
00:05:20,060 --> 00:05:22,610
disentangling those
interdependencies and breaking

124
00:05:22,610 --> 00:05:26,280
them up into smaller pieces,
making everything simpler.

125
00:05:26,280 --> 00:05:28,620
We're going to try to reduce
the need for GWT.XML files.

126
00:05:28,620 --> 00:05:31,740
So if you're not really using
deferred bindings, and you're

127
00:05:31,740 --> 00:05:35,370
just using it for declaring
inherit clauses, maybe we can

128
00:05:35,370 --> 00:05:36,800
have something that's simpler.

129
00:05:36,800 --> 00:05:38,600
And we're going to delete a lot
of deprecated code that's

130
00:05:38,600 --> 00:05:42,210
sitting in there, that's been
there since GWT 1.1, 1.2,

131
00:05:42,210 --> 00:05:45,120
stuff like Safari 2 and
3 browser support.

132
00:05:45,120 --> 00:05:48,030
Anybody still care
about Safari 2?

133
00:05:48,030 --> 00:05:49,840
There's a lot of stuff in there
that's cruft that we

134
00:05:49,840 --> 00:05:52,450
need basically, to move forward,
we need to go back

135
00:05:52,450 --> 00:05:54,360
and remove some stuff that's
holding us down, that's

136
00:05:54,360 --> 00:05:56,390
technical debt.

137
00:05:56,390 --> 00:05:56,970
Speed.

138
00:05:56,970 --> 00:05:59,000
So GWT has always been
about speed.

139
00:05:59,000 --> 00:06:02,490
We've always cared a lot about
download speed, latency, code

140
00:06:02,490 --> 00:06:05,190
size, execution speed.

141
00:06:05,190 --> 00:06:09,230
But we haven't really talked
a lot about compile speed.

142
00:06:09,230 --> 00:06:11,120
I know a lot of people have
complained in the past about

143
00:06:11,120 --> 00:06:13,000
the compiler in terms
of its speed.

144
00:06:13,000 --> 00:06:16,250
So minimally, we're looking at
doubling the speed of the

145
00:06:16,250 --> 00:06:18,950
compiler and also improving the
speed of Super Dev Mode

146
00:06:18,950 --> 00:06:21,160
Refresh so it becomes a lot
more viable as a real

147
00:06:21,160 --> 00:06:24,780
replacement for Dev Mode if
you should so choose.

148
00:06:24,780 --> 00:06:26,910
And we're going to continue
to improve on code size,

149
00:06:26,910 --> 00:06:29,260
especially as we talk about
mobile, including improving

150
00:06:29,260 --> 00:06:33,170
the CodeSplitter to make it a
lot simpler to use, not so

151
00:06:33,170 --> 00:06:35,330
much of a black art to find
the right places to insert

152
00:06:35,330 --> 00:06:37,720
your split points.

153
00:06:37,720 --> 00:06:42,480
GWT was created actually even
before V8, and so those were

154
00:06:42,480 --> 00:06:43,740
the Dark Ages of browsers.

155
00:06:43,740 --> 00:06:47,460
And so we've heard some talk
about the fact that JITs in

156
00:06:47,460 --> 00:06:50,240
browsers with JavaScript have
evolved so much that the

157
00:06:50,240 --> 00:06:52,540
compiler might be outputting
code that's suboptimal for

158
00:06:52,540 --> 00:06:53,790
some of the very newest
browsers.

159
00:06:53,790 --> 00:06:57,130
So we need to actually look at
that, figure out what we need

160
00:06:57,130 --> 00:06:59,770
to change to actually fully
leverage the newest browsers,

161
00:06:59,770 --> 00:07:01,550
especially on mobile.

162
00:07:01,550 --> 00:07:04,690
And just to complete the
performance and speed story,

163
00:07:04,690 --> 00:07:06,740
we need some better tools for
profiling and spotting

164
00:07:06,740 --> 00:07:09,500
performance problems
in GWT apps.

165
00:07:09,500 --> 00:07:11,540
Interoperability.

166
00:07:11,540 --> 00:07:13,840
GWT has always had an
interoperability story, which

167
00:07:13,840 --> 00:07:15,610
is the JavaScript native
interface.

168
00:07:15,610 --> 00:07:18,050
I'm sure everybody who has been
using GWT for awhile has

169
00:07:18,050 --> 00:07:20,230
probably written one or
two over the years.

170
00:07:20,230 --> 00:07:22,980
But if you want to wrap a
JavaScript library that has a

171
00:07:22,980 --> 00:07:24,510
few hundred methods,
you end up writing

172
00:07:24,510 --> 00:07:26,310
a lot of JSNI methods.

173
00:07:26,310 --> 00:07:30,940
It's just a lot of boilerplate
just to consume an API.

174
00:07:30,940 --> 00:07:32,750
And we want to make that
a lot more automatic.

175
00:07:32,750 --> 00:07:34,760
We think you should just be able
to drop a library in, and

176
00:07:34,760 --> 00:07:37,710
there should be some tool to
just automatically generate

177
00:07:37,710 --> 00:07:41,450
overlay types by just looking
at the JavaScript itself.

178
00:07:41,450 --> 00:07:43,620
That's going to entail improving
integration and

179
00:07:43,620 --> 00:07:46,920
support with the Closure
Compiler, which does a good

180
00:07:46,920 --> 00:07:51,510
job at type inferencing, as
well as accomplishing the

181
00:07:51,510 --> 00:07:54,250
first two items will allow
us to support hybrid apps

182
00:07:54,250 --> 00:07:54,660
efficiently.

183
00:07:54,660 --> 00:07:57,450
That means maybe you've got 80%
GWT code and you've got

184
00:07:57,450 --> 00:07:59,470
some web designers who want to
sprinkle in a little bit of

185
00:07:59,470 --> 00:08:00,710
JavaScript.

186
00:08:00,710 --> 00:08:03,520
It should be easy to do cross
calls between the two without

187
00:08:03,520 --> 00:08:04,050
a lot of effort.

188
00:08:04,050 --> 00:08:07,100
Likewise, maybe someone's got
a JavaScript app that's 80%

189
00:08:07,100 --> 00:08:09,400
JavaScript, but there's some
Java library out there they

190
00:08:09,400 --> 00:08:10,520
want to consume.

191
00:08:10,520 --> 00:08:12,415
And so the JavaScript programmer
should be able to

192
00:08:12,415 --> 00:08:14,540
just make a call directly to
Java code, and it should be

193
00:08:14,540 --> 00:08:16,960
really easy and painless
to do that.

194
00:08:16,960 --> 00:08:19,450
But I think the thing that
people are going to be most

195
00:08:19,450 --> 00:08:23,110
excited about is a commitment to
full Java 7 and 8 support.

196
00:08:23,110 --> 00:08:25,190
So we haven't really announced
it yet, but there's actually a

197
00:08:25,190 --> 00:08:28,630
patch about to land in GWT very,
very soon that fully

198
00:08:28,630 --> 00:08:29,820
enables Java 7.

199
00:08:29,820 --> 00:08:32,740
That means all the newest Java
7 language features will

200
00:08:32,740 --> 00:08:35,330
basically be available in GWT
including try-with-resources,

201
00:08:35,330 --> 00:08:39,450
multi-catch, diamond operator,
you name it.

202
00:08:39,450 --> 00:08:41,530
And so it's been a long time
since we upgraded the language

203
00:08:41,530 --> 00:08:44,240
support, and now we're finally
starting to do that.

204
00:08:44,240 --> 00:08:46,900
But the real thing that I think
people are waiting for

205
00:08:46,900 --> 00:08:48,370
is lambdas in Java 8.

206
00:08:48,370 --> 00:08:52,870
And so the minute that Oracle
launches Java 8 and there's a

207
00:08:52,870 --> 00:08:56,470
JDT library that's released that
supports parsing Java 8

208
00:08:56,470 --> 00:09:00,120
source code, we're going to jump
right on integrating that

209
00:09:00,120 --> 00:09:05,010
into GWT so you can start using
closures or lambdas for

210
00:09:05,010 --> 00:09:07,490
all of those event erasing
[INAUDIBLE] based APIs.

211
00:09:07,490 --> 00:09:10,350

212
00:09:10,350 --> 00:09:11,950
Reliability.

213
00:09:11,950 --> 00:09:13,840
If you've been looking at the
Issue Tracker over the years,

214
00:09:13,840 --> 00:09:16,020
you might have noticed it's kind
of stale, doesn't seem to

215
00:09:16,020 --> 00:09:16,930
get much traction.

216
00:09:16,930 --> 00:09:20,170
You file bugs, no one pays
attention to them.

217
00:09:20,170 --> 00:09:23,390
I talked about this last year
at I/O, but we really

218
00:09:23,390 --> 00:09:24,470
apologize for that.

219
00:09:24,470 --> 00:09:26,890
Some of it's basically that we
have our own internal issue

220
00:09:26,890 --> 00:09:29,810
tracker, and as more and more
GWT Apps were created inside

221
00:09:29,810 --> 00:09:33,370
Google from really important
teams like AdWords or at the

222
00:09:33,370 --> 00:09:35,740
other GWT presentation
earlier, Wallet.

223
00:09:35,740 --> 00:09:38,890
They file bugs on us too, and
we tend to fix the ones that

224
00:09:38,890 --> 00:09:40,780
are first from the internal
Google apps, and then we look

225
00:09:40,780 --> 00:09:41,800
at the external repo.

226
00:09:41,800 --> 00:09:44,490
And it turns out external
repo got really stale.

227
00:09:44,490 --> 00:09:46,940
So the steering committee
members are basically going

228
00:09:46,940 --> 00:09:51,360
through bug by bug in the
external repository and

229
00:09:51,360 --> 00:09:53,270
closing issues that
are really stale--

230
00:09:53,270 --> 00:09:56,890
for example, Safari 2
or 3, or IE 6 bugs.

231
00:09:56,890 --> 00:09:59,890
And bugs that have a lot of
votes, we're actually going to

232
00:09:59,890 --> 00:10:03,270
start looking at fixing
them and closing them.

233
00:10:03,270 --> 00:10:05,560
We're also going to try to
improve GWT unit testing to

234
00:10:05,560 --> 00:10:06,760
make it a lot less painful.

235
00:10:06,760 --> 00:10:09,540
A lot of people don't bother
writing GWT test cases just

236
00:10:09,540 --> 00:10:13,300
because invoking them is really
slow, and they tend to

237
00:10:13,300 --> 00:10:18,260
be flaky sometimes, especially
in browsers like IE 6 and 7.

238
00:10:18,260 --> 00:10:20,430
So we're looking at improving
that experience and making

239
00:10:20,430 --> 00:10:24,100
round tripping unit tests with
GWT and Super Dev Mode to be a

240
00:10:24,100 --> 00:10:26,230
much more pleasurable experience
in the future.

241
00:10:26,230 --> 00:10:29,650
But really, just to confess
over the years in terms of

242
00:10:29,650 --> 00:10:33,240
what breaks the GWT build and
what breaks GWT apps, 99% of

243
00:10:33,240 --> 00:10:35,410
the time, it's IE 6 and 7.

244
00:10:35,410 --> 00:10:38,840
Someone commits a change to GWT,
Unit Test Suite runs, the

245
00:10:38,840 --> 00:10:40,920
breakage is always
in some IE 6 or 7

246
00:10:40,920 --> 00:10:41,790
class out there somewhere.

247
00:10:41,790 --> 00:10:44,860
So a big part of this
is for GWT 3.0--

248
00:10:44,860 --> 00:10:47,250
not next release but the
release after that--

249
00:10:47,250 --> 00:10:51,150
we're going to remove IE 6 and 7
support finally and bury it.

250
00:10:51,150 --> 00:10:52,220
It's like a vampire.

251
00:10:52,220 --> 00:10:54,256
It seems like you can't kill
it, but we're going to try.

252
00:10:54,256 --> 00:10:57,100
[APPLAUSE]

253
00:10:57,100 --> 00:10:59,560
RAY CROMWELL: And this will
remove a huge technical debt.

254
00:10:59,560 --> 00:11:01,700
For example, when Daniel talks
about mobile later, it's

255
00:11:01,700 --> 00:11:06,840
really hard to design an
efficient mobile widget API if

256
00:11:06,840 --> 00:11:09,620
you have to support IE
6 Layout Engine.

257
00:11:09,620 --> 00:11:14,000

258
00:11:14,000 --> 00:11:14,660
Embeddability.

259
00:11:14,660 --> 00:11:18,940
So some people actually build
tools like Red Hat, Vaadin,

260
00:11:18,940 --> 00:11:21,180
Sencha, and they tend
to actually need to

261
00:11:21,180 --> 00:11:22,260
use pieces of GWT.

262
00:11:22,260 --> 00:11:24,130
Maybe you don't want to use the
whole GWT compiler, but

263
00:11:24,130 --> 00:11:26,040
you want to basically use the
part that can make parse some

264
00:11:26,040 --> 00:11:30,720
Java and hand you back an AST
of the source, and maybe you

265
00:11:30,720 --> 00:11:35,160
want to filter over the source
and do some transformations.

266
00:11:35,160 --> 00:11:36,930
Maybe you want to do static
analysis tools,

267
00:11:36,930 --> 00:11:39,610
look for bad code.

268
00:11:39,610 --> 00:11:41,790
And so we're going to start
trying to break it up a little

269
00:11:41,790 --> 00:11:44,040
bit and add more public APIs
so you can just pull out a

270
00:11:44,040 --> 00:11:46,460
piece of GWT and reuse
it or embed it in

271
00:11:46,460 --> 00:11:47,710
another tool chain.

272
00:11:47,710 --> 00:11:50,480

273
00:11:50,480 --> 00:11:55,180
So now we come to mobile, which
I think is the most

274
00:11:55,180 --> 00:11:56,950
important part of this
presentation.

275
00:11:56,950 --> 00:11:59,720
Maybe it's the most exciting
thing yet.

276
00:11:59,720 --> 00:12:03,610
So as you may have heard over
the years, mobile has been

277
00:12:03,610 --> 00:12:05,270
becoming increasingly
important.

278
00:12:05,270 --> 00:12:06,990
It really is the most
important thing now.

279
00:12:06,990 --> 00:12:10,700
For some key metrics on some
applications, mobile usage has

280
00:12:10,700 --> 00:12:12,560
surpassed desktop usage.

281
00:12:12,560 --> 00:12:17,140
But GWT created in the era of
desktop apps back in 2006, and

282
00:12:17,140 --> 00:12:20,050
so there wasn't a lot of thought
back then given to

283
00:12:20,050 --> 00:12:22,570
actually designing
it to efficiently

284
00:12:22,570 --> 00:12:27,060
support mobile apps.

285
00:12:27,060 --> 00:12:28,730
It turns out, actually, it is
pretty good for building

286
00:12:28,730 --> 00:12:31,270
mobile apps, which it has some
core fundamentals that enable

287
00:12:31,270 --> 00:12:32,790
that, and Daniel's going to
talk about that later.

288
00:12:32,790 --> 00:12:36,120
But some of the key things we
decided for the roadmap on the

289
00:12:36,120 --> 00:12:38,050
steering committee is to support
modern mobile web

290
00:12:38,050 --> 00:12:42,700
browsers directly, to create
a set and support a set of

291
00:12:42,700 --> 00:12:45,720
mobile optimized widgets so you
don't have to worry about

292
00:12:45,720 --> 00:12:51,110
jankiness, to integrate with
application life cycle and on

293
00:12:51,110 --> 00:12:53,710
and offline detection on mobile
devices, and to support

294
00:12:53,710 --> 00:12:54,810
package app deployment.

295
00:12:54,810 --> 00:12:57,510
So if you want to put a GWT app
in an App Store, it should

296
00:12:57,510 --> 00:13:01,170
be really easy to do so.

297
00:13:01,170 --> 00:13:03,570
And with that, I'd like to turn
it over to Daniel Kurka,

298
00:13:03,570 --> 00:13:06,270
author of the excellent and
fabulous MGWT Library if

299
00:13:06,270 --> 00:13:09,110
you've never seen it, and newly
minted Google employee

300
00:13:09,110 --> 00:13:10,820
and member of the GWT team.

301
00:13:10,820 --> 00:13:15,250
[APPLAUSE]

302
00:13:15,250 --> 00:13:15,850
DANIEL KURKA: Hello, everyone.

303
00:13:15,850 --> 00:13:18,970
I want to talk about GWT and
mobile, and as it turns out,

304
00:13:18,970 --> 00:13:21,120
performance on mobile is really
important because in

305
00:13:21,120 --> 00:13:24,730
performance, we do have slow
CPUs, we do have slow network

306
00:13:24,730 --> 00:13:26,290
connections, and we're
running on battery.

307
00:13:26,290 --> 00:13:29,450
So even if we were getting
faster CPUs, we can't really

308
00:13:29,450 --> 00:13:31,150
use them because we're
just going to

309
00:13:31,150 --> 00:13:33,270
drain the user's battery.

310
00:13:33,270 --> 00:13:35,790
And GWT, as it turns out, is
in a quite unique position

311
00:13:35,790 --> 00:13:38,880
when it comes to performance
because the GWT compiler just

312
00:13:38,880 --> 00:13:42,270
doesn't know about just your
JavaScript, it knows about all

313
00:13:42,270 --> 00:13:43,920
your resources and
can optimize on

314
00:13:43,920 --> 00:13:46,870
all of them at once.

315
00:13:46,870 --> 00:13:49,850
If you want to get the basic
things on web performance,

316
00:13:49,850 --> 00:13:51,980
there's a really good talk from
Ilya Grigorik, one of our

317
00:13:51,980 --> 00:13:53,070
colleagues at Google.

318
00:13:53,070 --> 00:13:53,860
It's three hours long.

319
00:13:53,860 --> 00:13:56,520
It covers all the basics there,
so I encourage you to

320
00:13:56,520 --> 00:13:57,230
check that out.

321
00:13:57,230 --> 00:13:59,520
There's a link on the slides.

322
00:13:59,520 --> 00:14:01,110
To me, there are different
kinds of performances.

323
00:14:01,110 --> 00:14:04,280
There's startup performance,
there's runtime, and of

324
00:14:04,280 --> 00:14:06,190
course, there's resource
usage.

325
00:14:06,190 --> 00:14:10,030
So let's drill into
all of these.

326
00:14:10,030 --> 00:14:12,820
Startup on mobile, start upon
any browser drills down to you

327
00:14:12,820 --> 00:14:16,590
have to download your resources,
you have to parse

328
00:14:16,590 --> 00:14:18,900
them, and you have
to execute them.

329
00:14:18,900 --> 00:14:20,260
[MUSIC PLAYING]

330
00:14:20,260 --> 00:14:21,510
DANIEL KURKA: What's
happening?

331
00:14:21,510 --> 00:14:23,672

332
00:14:23,672 --> 00:14:25,060
RAY CROMWELL: We're like
the Academy Awards.

333
00:14:25,060 --> 00:14:27,700

334
00:14:27,700 --> 00:14:29,180
DANIEL KURKA: Where was I?

335
00:14:29,180 --> 00:14:31,240
Well, startup performance on
mobile drills down to you have

336
00:14:31,240 --> 00:14:33,990
to download your resources, you
have to parse them, and

337
00:14:33,990 --> 00:14:37,680
you have to execute them.

338
00:14:37,680 --> 00:14:40,810
The GWT compiler is really good
at helping you with those

339
00:14:40,810 --> 00:14:41,970
kinds of things.

340
00:14:41,970 --> 00:14:43,920
So let's take a look into
different things the GWT

341
00:14:43,920 --> 00:14:45,830
compiler is really good at.

342
00:14:45,830 --> 00:14:50,010
So if you're transferring text
resources such as HTML, CSS,

343
00:14:50,010 --> 00:14:53,190
or JavaScript, you should be
transferring them as gzipped.

344
00:14:53,190 --> 00:14:55,460
This is basically like
a free lunch.

345
00:14:55,460 --> 00:14:57,070
And with GWT, that's
very easy.

346
00:14:57,070 --> 00:14:59,120
You're just going to zip up
those compiler outputs

347
00:14:59,120 --> 00:15:01,960
upfront, put them in your WAR
Directory, deploy a small

348
00:15:01,960 --> 00:15:04,530
servlet filter over that, and
if the client supports gzip,

349
00:15:04,530 --> 00:15:06,940
you're going to use the
gzipped version.

350
00:15:06,940 --> 00:15:11,350
So you're not going to even pack
the service CPU for that.

351
00:15:11,350 --> 00:15:13,930
Another thing that's pretty
important in web performance

352
00:15:13,930 --> 00:15:16,950
is not to have blocking script
tags because as soon as a

353
00:15:16,950 --> 00:15:20,510
parser hits a blocking script
tag, the browser has to go

354
00:15:20,510 --> 00:15:24,810
fetch that script, parse
it, and execute it.

355
00:15:24,810 --> 00:15:26,960
And after that, it can just
continue browsing.

356
00:15:26,960 --> 00:15:29,590
So imagine doing that on a
really slow network connection

357
00:15:29,590 --> 00:15:32,210
with lots of different
script tags.

358
00:15:32,210 --> 00:15:34,530
But with GWT, you're just going
to have one script tag,

359
00:15:34,530 --> 00:15:37,740
and the GWT compiler actually
controls the [? boot step ?]

360
00:15:37,740 --> 00:15:41,360
process and is really
good at doing this.

361
00:15:41,360 --> 00:15:43,000
The other thing you need to
get right for mobile, you

362
00:15:43,000 --> 00:15:45,420
don't want to re-download
resources you've once

363
00:15:45,420 --> 00:15:46,950
downloaded before.

364
00:15:46,950 --> 00:15:50,640
So you need to set your HTTP
headers right for caching.

365
00:15:50,640 --> 00:15:52,760
And with GWT, again, that's
very straightforward.

366
00:15:52,760 --> 00:15:54,790
You don't need to think about
individual resources and how

367
00:15:54,790 --> 00:15:55,500
to cache them.

368
00:15:55,500 --> 00:15:57,560
You basically get two
kinds of resources.

369
00:15:57,560 --> 00:16:01,380
You do have a nocache.js file,
which you won't cache for

370
00:16:01,380 --> 00:16:06,630
long, and you do have a cache.js
or cache.html file,

371
00:16:06,630 --> 00:16:08,130
which you can cache forever.

372
00:16:08,130 --> 00:16:10,750

373
00:16:10,750 --> 00:16:13,160
On mobile, the user's going to
have a flaky connection, so

374
00:16:13,160 --> 00:16:14,850
sometimes, they're going
to be offline.

375
00:16:14,850 --> 00:16:17,620
So you need to be looking to
actually using app cache for

376
00:16:17,620 --> 00:16:20,050
solving that so this application
still works even

377
00:16:20,050 --> 00:16:22,720
if a user doesn't have
connectivity.

378
00:16:22,720 --> 00:16:25,090
People are actually writing
articles on how hard it is to

379
00:16:25,090 --> 00:16:27,280
use App Cache and to deploy
that properly.

380
00:16:27,280 --> 00:16:29,970
But again, with GWT, because the
compiler knows all about

381
00:16:29,970 --> 00:16:33,320
your resources, it can just help
you write that manifest

382
00:16:33,320 --> 00:16:33,870
file for you.

383
00:16:33,870 --> 00:16:36,330
Just going to use a custom
linker and get that manifest

384
00:16:36,330 --> 00:16:42,340
file ready, so there's just one
line in your GWT XML file.

385
00:16:42,340 --> 00:16:44,550
Then again, the GWT compiler
is really good

386
00:16:44,550 --> 00:16:46,010
at minifying resources.

387
00:16:46,010 --> 00:16:49,230
We all know it's really good at
JavaScript, but what's not

388
00:16:49,230 --> 00:16:51,300
so well known, it's
really good at CSS

389
00:16:51,300 --> 00:16:52,880
and images as well.

390
00:16:52,880 --> 00:16:56,190
So if you have a big library
like MGWT with lots of

391
00:16:56,190 --> 00:16:59,130
different widgets, but you're
only using 20% of those

392
00:16:59,130 --> 00:17:03,350
widgets, the compiler removes
all the other JavaScript but

393
00:17:03,350 --> 00:17:05,119
the CSS as well.

394
00:17:05,119 --> 00:17:07,030
This also applies to images.

395
00:17:07,030 --> 00:17:09,420
Let's say you have a button with
a small image on there.

396
00:17:09,420 --> 00:17:12,079
It also removes that image if
you're not using the button,

397
00:17:12,079 --> 00:17:13,740
so that's pretty important
as well.

398
00:17:13,740 --> 00:17:16,430
And the GWT compiler has been
doing that since 2007,

399
00:17:16,430 --> 00:17:17,950
basically, inlining
and spriting.

400
00:17:17,950 --> 00:17:20,579

401
00:17:20,579 --> 00:17:23,400
This actually solves the amount
of HTTP requests you

402
00:17:23,400 --> 00:17:24,450
have to do back to the server.

403
00:17:24,450 --> 00:17:26,240
If you're spriting images,
you're just going to do one

404
00:17:26,240 --> 00:17:27,050
HTTP request.

405
00:17:27,050 --> 00:17:30,530
If you're inlining them, you
don't do any HTTP requests

406
00:17:30,530 --> 00:17:32,880
whatsoever.

407
00:17:32,880 --> 00:17:34,690
Many of you are probably
writing really big GWT

408
00:17:34,690 --> 00:17:35,990
applications.

409
00:17:35,990 --> 00:17:38,340
And for mobile, this is kind of
a problem because you don't

410
00:17:38,340 --> 00:17:40,910
want to ship a megabyte of
JavaScript to a mobile device

411
00:17:40,910 --> 00:17:42,780
and wait for the slow network
connection to actually

412
00:17:42,780 --> 00:17:44,210
download that.

413
00:17:44,210 --> 00:17:46,990
So within GWT, we do have a
notion of actually shipping a

414
00:17:46,990 --> 00:17:50,100
small part of the application
first while the rest is

415
00:17:50,100 --> 00:17:51,700
downloading in the background.

416
00:17:51,700 --> 00:17:53,730
We call that code splitting.

417
00:17:53,730 --> 00:17:56,880
And with GWT, that's very easy
and straightforward to use.

418
00:17:56,880 --> 00:18:01,060
You just do a GWT.runAsync
call, and the compiler

419
00:18:01,060 --> 00:18:02,770
actually takes care
of splitting up

420
00:18:02,770 --> 00:18:04,020
that output for you.

421
00:18:04,020 --> 00:18:06,490

422
00:18:06,490 --> 00:18:08,390
The other thing you want to be
doing is you want batch your

423
00:18:08,390 --> 00:18:09,290
data calls.

424
00:18:09,290 --> 00:18:11,020
So if your application boots
up, there are going to be

425
00:18:11,020 --> 00:18:13,000
several presenters on the
screen, and they're all going

426
00:18:13,000 --> 00:18:13,590
to need data.

427
00:18:13,590 --> 00:18:15,730
If they are all going to do an
HTTP request back to the

428
00:18:15,730 --> 00:18:18,900
server, you're not going to have
enough TCP connections

429
00:18:18,900 --> 00:18:20,320
back to the server.

430
00:18:20,320 --> 00:18:21,900
So what you actually want to be
doing, you want to be using

431
00:18:21,900 --> 00:18:25,700
a command pattern and batching
those requests into lists of

432
00:18:25,700 --> 00:18:30,980
commands, sending them off to
the server, and getting a list

433
00:18:30,980 --> 00:18:32,830
of responses back and
dispatching them back to your

434
00:18:32,830 --> 00:18:33,780
presenters.

435
00:18:33,780 --> 00:18:35,785
And again, with
Schedule.scheduleFinally in

436
00:18:35,785 --> 00:18:39,840
GWT, this is very
easy to achieve.

437
00:18:39,840 --> 00:18:42,290
So this is about downloading.

438
00:18:42,290 --> 00:18:44,340
Once you've downloaded
everything, you still need to

439
00:18:44,340 --> 00:18:47,930
parse everything, and you
need to execute it.

440
00:18:47,930 --> 00:18:50,570
And please keep in mind, parsing
JavaScript actually

441
00:18:50,570 --> 00:18:54,490
blocks the UI, so you don't want
to be parsing megabytes

442
00:18:54,490 --> 00:18:56,820
of JavaScript upfront.

443
00:18:56,820 --> 00:18:59,710
And all the resources you're
going to need, they have to be

444
00:18:59,710 --> 00:19:01,170
downloaded and parsed
before you can

445
00:19:01,170 --> 00:19:03,272
actually do initial painting.

446
00:19:03,272 --> 00:19:05,330
This is quite important
as well.

447
00:19:05,330 --> 00:19:09,480
So your HTML is going to be
parsed into the DOM, your CSS

448
00:19:09,480 --> 00:19:12,470
is going to be parsed into the
CSS tree, and now the browser

449
00:19:12,470 --> 00:19:15,050
actually has to match those two
trees into one, which is

450
00:19:15,050 --> 00:19:16,490
called the render tree.

451
00:19:16,490 --> 00:19:19,340
The next step, it has to lay out
that render tree and then

452
00:19:19,340 --> 00:19:21,300
paint the render tree
to the screen.

453
00:19:21,300 --> 00:19:23,830
And here's some common
performance pitfalls.

454
00:19:23,830 --> 00:19:26,970
So if you've got to fill a
huge, humongous DOM, that

455
00:19:26,970 --> 00:19:29,900
matching process becomes
incredibly slow, so you need

456
00:19:29,900 --> 00:19:32,570
to be careful about how many
DOM elements you're using.

457
00:19:32,570 --> 00:19:34,800
But luckily with the GWT
compiler, we can actually

458
00:19:34,800 --> 00:19:37,300
build mobile optimized widgets
which just take

459
00:19:37,300 --> 00:19:41,480
care of that for you.

460
00:19:41,480 --> 00:19:43,620
The other thing you want to
have, you want to have good

461
00:19:43,620 --> 00:19:44,900
selected performance matching.

462
00:19:44,900 --> 00:19:48,710
So if the browser is matching
those two trees into one, you

463
00:19:48,710 --> 00:19:51,330
want to be careful about how
deeply your CSS selectors are

464
00:19:51,330 --> 00:19:53,920
actually nested.

465
00:19:53,920 --> 00:19:56,850
But as it turns out, CssResource
is really good at

466
00:19:56,850 --> 00:19:59,490
keeping those selectors unique,
so you don't need to

467
00:19:59,490 --> 00:20:02,310
use deeply nested selectors if
you're using CssResource.

468
00:20:02,310 --> 00:20:06,700

469
00:20:06,700 --> 00:20:09,700
So we've downloaded the
application, it's running, but

470
00:20:09,700 --> 00:20:13,250
people still think that HTML5
applications have to feel

471
00:20:13,250 --> 00:20:15,610
somewhat sluggish on a phone.

472
00:20:15,610 --> 00:20:17,400
They have to be somewhat
slower than native

473
00:20:17,400 --> 00:20:18,910
applications can be.

474
00:20:18,910 --> 00:20:21,880
But if you pay attention on how
the browser works, and if

475
00:20:21,880 --> 00:20:24,840
you do your work thoroughly,
you can be as fast or even

476
00:20:24,840 --> 00:20:28,060
faster as native applications
can be.

477
00:20:28,060 --> 00:20:30,480
And there are two main points I
actually want to point out.

478
00:20:30,480 --> 00:20:33,880
I call them native layout
and native animations.

479
00:20:33,880 --> 00:20:36,520
So what do I mean by
native layout?

480
00:20:36,520 --> 00:20:41,570
Well, you should be never
doing your layout in

481
00:20:41,570 --> 00:20:42,300
JavaScript.

482
00:20:42,300 --> 00:20:45,910
You should be doing all your
layout in native code.

483
00:20:45,910 --> 00:20:47,750
That's a very strange statement
to make as a web

484
00:20:47,750 --> 00:20:51,060
developer because frankly, we
are never writing native code.

485
00:20:51,060 --> 00:20:54,810
Well, in a way we are because
if you do all your layout in

486
00:20:54,810 --> 00:20:59,170
CSS, the layout is actually
executed by the layout engine,

487
00:20:59,170 --> 00:21:01,640
and this means it's actually
executed by native code, so

488
00:21:01,640 --> 00:21:03,740
this is really fast.

489
00:21:03,740 --> 00:21:06,710
And on mobile phones, you've
got those really advanced

490
00:21:06,710 --> 00:21:09,490
browsers so you can actually
do that using the

491
00:21:09,490 --> 00:21:11,520
flexible box model.

492
00:21:11,520 --> 00:21:14,070
If you don't know about the
flexible box model, there's a

493
00:21:14,070 --> 00:21:15,410
really good talk from
last year's

494
00:21:15,410 --> 00:21:17,470
I/O from Eric Bidelmann.

495
00:21:17,470 --> 00:21:19,130
You might want to
check that out.

496
00:21:19,130 --> 00:21:21,170
And again, that's a really good
case of what we can do

497
00:21:21,170 --> 00:21:24,790
with GWT for mobile
optimized widgets.

498
00:21:24,790 --> 00:21:28,090
The other thing you want to
do right is animations.

499
00:21:28,090 --> 00:21:29,770
Animations should be
feeling on a phone

500
00:21:29,770 --> 00:21:31,870
really slick and fast.

501
00:21:31,870 --> 00:21:35,510
So some JavaScript libraries
do animations like this.

502
00:21:35,510 --> 00:21:38,560
Let's say they want to move
a Div from here to there.

503
00:21:38,560 --> 00:21:40,440
And what they're doing is
they're firing off a timer

504
00:21:40,440 --> 00:21:43,140
which fires every 60
milliseconds to get that 60

505
00:21:43,140 --> 00:21:45,520
FPS rate, and then they're
updating the

506
00:21:45,520 --> 00:21:47,580
position top and left.

507
00:21:47,580 --> 00:21:49,400
What's happening here is they're
basically telling the

508
00:21:49,400 --> 00:21:51,120
browser, move it one
pixel, move it one

509
00:21:51,120 --> 00:21:52,850
pixel, move it one pixel.

510
00:21:52,850 --> 00:21:55,270
So what the browser does
underneath, it updates the DOM

511
00:21:55,270 --> 00:21:56,850
that updates the render tree.

512
00:21:56,850 --> 00:21:58,353
The render tree needs
to be layouted and

513
00:21:58,353 --> 00:22:00,660
drawn to the screen.

514
00:22:00,660 --> 00:22:03,070
So what if you actually
tell the browser what

515
00:22:03,070 --> 00:22:03,870
you want to be doing?

516
00:22:03,870 --> 00:22:06,780
I want to move that Div from
here to there in 300

517
00:22:06,780 --> 00:22:10,020
milliseconds with a certain
timing curve.

518
00:22:10,020 --> 00:22:11,900
Then the browser can actually
find a decent way

519
00:22:11,900 --> 00:22:13,490
of executing that.

520
00:22:13,490 --> 00:22:15,940
And as it turns out, what
happens then this if you do a

521
00:22:15,940 --> 00:22:18,890
whole animation in CSS, the
browser actually draws a

522
00:22:18,890 --> 00:22:21,720
picture of the region you want
to move, uploads that to the

523
00:22:21,720 --> 00:22:25,520
GPU, and moves that on the GPU
so you're not using any CPU

524
00:22:25,520 --> 00:22:26,760
whatsoever.

525
00:22:26,760 --> 00:22:29,210
And this is really, really fast
and doesn't consume any

526
00:22:29,210 --> 00:22:31,610
real battery whatsoever.

527
00:22:31,610 --> 00:22:33,120
And again, this is something
we can pack

528
00:22:33,120 --> 00:22:34,370
into the GWT compiler.

529
00:22:34,370 --> 00:22:36,950

530
00:22:36,950 --> 00:22:40,900
So GWT has been designed from
the ground up to be really,

531
00:22:40,900 --> 00:22:41,660
really performant.

532
00:22:41,660 --> 00:22:44,620
The GWT team always cared deeply
about performance.

533
00:22:44,620 --> 00:22:47,600
They went to great lengths to
actually optimize the compiler

534
00:22:47,600 --> 00:22:50,310
to be as performant as possible
because in Google

535
00:22:50,310 --> 00:22:53,530
production, we care deeply
about performance.

536
00:22:53,530 --> 00:22:56,210
And as it turns out, mobile
exactly needs that

537
00:22:56,210 --> 00:22:58,100
performance.

538
00:22:58,100 --> 00:23:01,480
So using GWT for writing mobile
applications is an

539
00:23:01,480 --> 00:23:04,320
actual no-brainer.

540
00:23:04,320 --> 00:23:09,460
But with GWT on mobile, we
can actually do more.

541
00:23:09,460 --> 00:23:12,930
You can take today your well
written GWT application and

542
00:23:12,930 --> 00:23:17,780
run that on any modern phone
or tablet using PhoneGap.

543
00:23:17,780 --> 00:23:20,440
And if you stick to good
practices with your CSS, you

544
00:23:20,440 --> 00:23:26,030
can actually achieve a native
look and feel just fine.

545
00:23:26,030 --> 00:23:29,150
But as a web application,
we can actually do more.

546
00:23:29,150 --> 00:23:32,320
We can use all the same cool
APIs that the native

547
00:23:32,320 --> 00:23:34,220
developers are using,
but we can use

548
00:23:34,220 --> 00:23:37,080
them through web standards.

549
00:23:37,080 --> 00:23:41,930
So this means that you can
actually use the same code for

550
00:23:41,930 --> 00:23:46,830
your phone, your tablet, and
your desktop application.

551
00:23:46,830 --> 00:23:50,810
In MVP terms, this means you can
have the same presenter,

552
00:23:50,810 --> 00:23:54,550
you can have the same models,
the same RPC, the same almost

553
00:23:54,550 --> 00:23:56,750
everything--

554
00:23:56,750 --> 00:23:59,350
despite having different views
because you want to have

555
00:23:59,350 --> 00:24:02,740
different views on a phone
up to the desktop--

556
00:24:02,740 --> 00:24:04,200
you're going to have different
navigation

557
00:24:04,200 --> 00:24:06,250
between those views.

558
00:24:06,250 --> 00:24:09,110
So if you want to do that today,
you can do that using

559
00:24:09,110 --> 00:24:11,940
MGWT, and we've got lots of
mobile optimized widgets in

560
00:24:11,940 --> 00:24:15,220
there which we're going
to start to improve in

561
00:24:15,220 --> 00:24:17,640
GWT proper with 3.0.

562
00:24:17,640 --> 00:24:23,108
And you can use PhoneGap
by using GWT PhoneGap.

563
00:24:23,108 --> 00:24:25,770
And actually, I want to show you
some of that stuff running

564
00:24:25,770 --> 00:24:27,020
on different devices.

565
00:24:27,020 --> 00:24:32,370

566
00:24:32,370 --> 00:24:36,390
So this is a GWT application
running on an iPhone.

567
00:24:36,390 --> 00:24:38,650
So notice what happens
if I hit Reload.

568
00:24:38,650 --> 00:24:40,740
This is how long it actually
takes to start up such an

569
00:24:40,740 --> 00:24:41,410
application.

570
00:24:41,410 --> 00:24:43,440
This is not a small
application, so

571
00:24:43,440 --> 00:24:44,690
this is quite big.

572
00:24:44,690 --> 00:24:46,830

573
00:24:46,830 --> 00:24:50,290
You can see the difference
in layouting in such an

574
00:24:50,290 --> 00:24:50,900
application.

575
00:24:50,900 --> 00:24:55,340
If I actually go ahead and turn
the phone, you can see--

576
00:24:55,340 --> 00:24:56,590
just a second.

577
00:24:56,590 --> 00:25:01,140

578
00:25:01,140 --> 00:25:02,180
Sorry about that.

579
00:25:02,180 --> 00:25:05,170
Let's actually go first
to full screen.

580
00:25:05,170 --> 00:25:07,120
So this is the same application
just pushed to the

581
00:25:07,120 --> 00:25:09,810
home screen.

582
00:25:09,810 --> 00:25:12,680
So you can do different
animations in here,

583
00:25:12,680 --> 00:25:13,240
like we just said.

584
00:25:13,240 --> 00:25:15,350
Those animations are actually
done with CSS.

585
00:25:15,350 --> 00:25:17,760
This is why they behave
slick and fast.

586
00:25:17,760 --> 00:25:20,920
So you do all kinds of animation
that you like to do,

587
00:25:20,920 --> 00:25:24,280
slide it in between.

588
00:25:24,280 --> 00:25:26,370
But you can actually put some
time into it and build

589
00:25:26,370 --> 00:25:28,050
different mobile widgets
as well.

590
00:25:28,050 --> 00:25:30,280
So you can build something like
a carousel where you have

591
00:25:30,280 --> 00:25:35,270
different scrolling widgets
which scroll fine like this,

592
00:25:35,270 --> 00:25:39,000
and they can even be scrolled
individually.

593
00:25:39,000 --> 00:25:41,700
You can even build lists with
headers that push themselves

594
00:25:41,700 --> 00:25:45,050
out at the top, which
behave really fast.

595
00:25:45,050 --> 00:25:47,280
You can see that if I turn my
finger here, how fast that is

596
00:25:47,280 --> 00:25:48,530
actually working.

597
00:25:48,530 --> 00:25:56,500

598
00:25:56,500 --> 00:26:02,170
But since we are GWT, we can use
the compiler to actually

599
00:26:02,170 --> 00:26:04,470
swap out the CSS for
different devices.

600
00:26:04,470 --> 00:26:07,020
You can take the same
application that I've just

601
00:26:07,020 --> 00:26:10,600
shown you, launch that on an
Android phone, and it looks

602
00:26:10,600 --> 00:26:13,310
like an Android application
because we can just introduce

603
00:26:13,310 --> 00:26:16,190
a compiler permutation here
and write different CSS.

604
00:26:16,190 --> 00:26:20,220
So none of the CSS that's there
to power the style looks

605
00:26:20,220 --> 00:26:22,440
of that application
is inside that

606
00:26:22,440 --> 00:26:25,040
application, and vice versa.

607
00:26:25,040 --> 00:26:28,450
That really makes a huge
difference in size.

608
00:26:28,450 --> 00:26:31,790
So on Android, you're going to
have the same widgets that do

609
00:26:31,790 --> 00:26:34,000
the same stuff just fine.

610
00:26:34,000 --> 00:26:38,710
But this gets even cooler when
you get to the third platform

611
00:26:38,710 --> 00:26:41,410
and take an Android application
with different

612
00:26:41,410 --> 00:26:44,070
styling that works
fine on an iPad.

613
00:26:44,070 --> 00:26:45,720
So you're going to have the same
widgets, you're going to

614
00:26:45,720 --> 00:26:47,850
lay out the application a little
bit different, you're

615
00:26:47,850 --> 00:26:51,050
going to have different MVPs
running, of course.

616
00:26:51,050 --> 00:26:56,030
But it just behaves fine like
you would expect it to be.

617
00:26:56,030 --> 00:27:03,900
We can even continue doing that
just like that, and pull

618
00:27:03,900 --> 00:27:07,630
on an Android tablet
just fine.

619
00:27:07,630 --> 00:27:13,060
So you can do things like put
Refresh widgets really easy

620
00:27:13,060 --> 00:27:15,690
and really slick.

621
00:27:15,690 --> 00:27:17,770
But this is all just Web UI.

622
00:27:17,770 --> 00:27:20,300
What if we actually wanted
to go and access native

623
00:27:20,300 --> 00:27:21,980
functionality on a device?

624
00:27:21,980 --> 00:27:25,280
Well, we can do that
using PhoneGap.

625
00:27:25,280 --> 00:27:27,340
This is a GWT application
running

626
00:27:27,340 --> 00:27:29,430
inside a PhoneGap container.

627
00:27:29,430 --> 00:27:32,510
So as a web application, I can't
read the accelerometer.

628
00:27:32,510 --> 00:27:37,050
So if I want to do that, I
actually need that PhoneGap

629
00:27:37,050 --> 00:27:37,800
container to run.

630
00:27:37,800 --> 00:27:40,270
But as soon as I hit Start, I'm
asking PhoneGap to give me

631
00:27:40,270 --> 00:27:42,630
the values of the
accelerometer.

632
00:27:42,630 --> 00:27:45,620
You can see as I turn my phone,
the values are just

633
00:27:45,620 --> 00:27:47,940
changing with it.

634
00:27:47,940 --> 00:27:51,750
I can even get one
step further and

635
00:27:51,750 --> 00:27:53,120
actually use the camera.

636
00:27:53,120 --> 00:27:55,860
So this is still the GWT
application running here, but

637
00:27:55,860 --> 00:27:58,530
as soon as I hit that button
down here, we're actually

638
00:27:58,530 --> 00:28:01,100
changing to a native view which
invokes the camera.

639
00:28:01,100 --> 00:28:03,220
I can take a picture and put
that picture back into the

640
00:28:03,220 --> 00:28:04,720
JavaScript application.

641
00:28:04,720 --> 00:28:06,540
So let me do that.

642
00:28:06,540 --> 00:28:08,670
I'll pick up the phone.

643
00:28:08,670 --> 00:28:10,860
So I should probably
do it like this.

644
00:28:10,860 --> 00:28:12,500
Everyone smile.

645
00:28:12,500 --> 00:28:14,410
Take that picture.

646
00:28:14,410 --> 00:28:15,190
So here's the picture.

647
00:28:15,190 --> 00:28:19,050
This is still inside
a native view.

648
00:28:19,050 --> 00:28:21,510
And we can just hit Use-- that's
a German phone, so

649
00:28:21,510 --> 00:28:21,600
[GERMAN]

650
00:28:21,600 --> 00:28:22,910
is "Use" in German--

651
00:28:22,910 --> 00:28:25,020
and actually dispatch that
picture back into

652
00:28:25,020 --> 00:28:26,620
JavaScript and there.

653
00:28:26,620 --> 00:28:29,430
Oh, it's not a nice one,
but there it is.

654
00:28:29,430 --> 00:28:31,290
So this is how we can
actually do device

655
00:28:31,290 --> 00:28:33,270
integration on a phone.

656
00:28:33,270 --> 00:28:36,120
But since this is a GWT
application, we can actually

657
00:28:36,120 --> 00:28:37,750
tell it to run offline
just fine.

658
00:28:37,750 --> 00:28:39,150
Remember I said we can
just produce the

659
00:28:39,150 --> 00:28:40,160
manifest file for you.

660
00:28:40,160 --> 00:28:42,900
So I just put the phone in
flight mode so it doesn't have

661
00:28:42,900 --> 00:28:45,000
any real connection
whatsoever.

662
00:28:45,000 --> 00:28:48,630
So I can now take that GWT
application just fine, hit

663
00:28:48,630 --> 00:28:50,230
Reload, and it still works.

664
00:28:50,230 --> 00:29:00,640

665
00:29:00,640 --> 00:29:05,570
I actually want to talk quickly
about gwtproject.org.

666
00:29:05,570 --> 00:29:07,090
So this has been mobile.

667
00:29:07,090 --> 00:29:09,710
There's one other thing which
we wanted to address.

668
00:29:09,710 --> 00:29:13,260
Since GWT is now a community
owned project, we wanted to

669
00:29:13,260 --> 00:29:16,340
have a home for all the
GWT-related stuff out there.

670
00:29:16,340 --> 00:29:19,490
So this used to be
developers.google.com, which

671
00:29:19,490 --> 00:29:21,620
was a problem because only
Google employees could do

672
00:29:21,620 --> 00:29:23,820
anything to it.

673
00:29:23,820 --> 00:29:25,070
So we thought about this.

674
00:29:25,070 --> 00:29:28,820
Since we are an open source
project, we wanted to be the

675
00:29:28,820 --> 00:29:32,230
website and the documentation
open source as well so anyone

676
00:29:32,230 --> 00:29:35,040
can actually contribute to the
website just fine or the

677
00:29:35,040 --> 00:29:36,840
documentation.

678
00:29:36,840 --> 00:29:39,300
And so we figured Markdown these
days is quite popular,

679
00:29:39,300 --> 00:29:41,310
and we thought maybe we
can build a whole

680
00:29:41,310 --> 00:29:45,130
page based on Markdown.

681
00:29:45,130 --> 00:29:47,960
And because we don't want to put
Markdown on a web server,

682
00:29:47,960 --> 00:29:51,870
we want to do out of HTML,
CSS, and JavaScript.

683
00:29:51,870 --> 00:29:54,570
So we figured we're just going
to write a maven plugin to

684
00:29:54,570 --> 00:29:58,550
actually convert that Markdown
to a nice looking home page.

685
00:29:58,550 --> 00:30:01,260
So today, you can contribute
to the website and the

686
00:30:01,260 --> 00:30:04,670
documentation using the same
review process, the same

687
00:30:04,670 --> 00:30:08,800
guidelines, that we use for
GWT proper source code.

688
00:30:08,800 --> 00:30:11,280
So if you want to do something
cool to the home page, if you

689
00:30:11,280 --> 00:30:14,280
just want to fix a bug inside
the documentation, you can

690
00:30:14,280 --> 00:30:15,090
just do that.

691
00:30:15,090 --> 00:30:16,940
If you want to do something
cool, write an article or

692
00:30:16,940 --> 00:30:20,200
anything else, just talk to us
and we'll figure it out.

693
00:30:20,200 --> 00:30:23,360
So if you want to do that,
what do you do?

694
00:30:23,360 --> 00:30:26,360
Well, you go ahead and clone
the Git repository.

695
00:30:26,360 --> 00:30:28,650
Then you take a look at the
Markdown and fix the docs or

696
00:30:28,650 --> 00:30:31,350
write something yourself.

697
00:30:31,350 --> 00:30:33,290
If you want to take a look at
how it actually looks, you can

698
00:30:33,290 --> 00:30:37,770
just do a local MVN Clean
Install, and you can take a

699
00:30:37,770 --> 00:30:40,300
look at target/generated-site,
and the whole site will be

700
00:30:40,300 --> 00:30:42,700
generated in that
folder for you.

701
00:30:42,700 --> 00:30:44,720
And if you think what you've
been doing is great and other

702
00:30:44,720 --> 00:30:46,290
people could benefit from this,
you're just going to do

703
00:30:46,290 --> 00:30:48,785
a Commit and push that commit
off to us for review.

704
00:30:48,785 --> 00:30:53,110

705
00:30:53,110 --> 00:30:56,370
And if you get a positive
review, we automatically push

706
00:30:56,370 --> 00:30:57,720
that to the new home page.

707
00:30:57,720 --> 00:31:00,140
It's going to be live
on the page.

708
00:31:00,140 --> 00:31:03,340
If you want to know more about
this, take a look at

709
00:31:03,340 --> 00:31:07,900
gwtproject.org/makinggwtbetter,
and this is

710
00:31:07,900 --> 00:31:10,100
how it actually looks.

711
00:31:10,100 --> 00:31:11,150
RAY CROMWELL: By the way,
the website is now

712
00:31:11,150 --> 00:31:13,790
actually a GWT app.

713
00:31:13,790 --> 00:31:15,680
DANIEL KURKA: Ray is right.

714
00:31:15,680 --> 00:31:17,040
The website is actually
a GWT application.

715
00:31:17,040 --> 00:31:18,290
RAY CROMWELL: It actually
uses GWT now.

716
00:31:18,290 --> 00:31:21,060

717
00:31:21,060 --> 00:31:23,150
So the big question you might
have is when is all

718
00:31:23,150 --> 00:31:24,750
this going to happen?

719
00:31:24,750 --> 00:31:26,770
Steering committee got
together trying

720
00:31:26,770 --> 00:31:27,810
to decide on a schedule.

721
00:31:27,810 --> 00:31:30,430
We're going to adopt a tick-tock
model like Intel.

722
00:31:30,430 --> 00:31:32,930
Every six months, we're going
to have minor revision.

723
00:31:32,930 --> 00:31:34,310
Every year, major revision.

724
00:31:34,310 --> 00:31:38,790
So quarter four 2013 this year,
look for GWT 2.6, which

725
00:31:38,790 --> 00:31:41,520
would be a minor update.

726
00:31:41,520 --> 00:31:44,380
The dot, dot, dot, there could
be some other minor releases

727
00:31:44,380 --> 00:31:45,190
in between.

728
00:31:45,190 --> 00:31:48,150
Then for I/O 2014, another six
months later, look for GWT

729
00:31:48,150 --> 00:31:52,240
3.0, which should have all the
goodies that we've discussed

730
00:31:52,240 --> 00:31:53,890
here today.

731
00:31:53,890 --> 00:31:57,600
So before I go to questions, I
want to shout out some thanks.

732
00:31:57,600 --> 00:31:59,510
First of all, I'd like to thank
the steering committee

733
00:31:59,510 --> 00:32:02,500
for meeting for many, many hours
over the past year to

734
00:32:02,500 --> 00:32:03,910
hash all this out.

735
00:32:03,910 --> 00:32:04,740
Thanks to Red Hat.

736
00:32:04,740 --> 00:32:06,000
Mike Brock is over there.

737
00:32:06,000 --> 00:32:07,820
He's a steering committee
member.

738
00:32:07,820 --> 00:32:11,200
Thanks, Mike, for providing the
build bot and OpenShift

739
00:32:11,200 --> 00:32:14,650
resources on the Red Hat cloud
for hosting all this stuff.

740
00:32:14,650 --> 00:32:18,370
Thanks to Vaadin and
Julienne Dramaix--

741
00:32:18,370 --> 00:32:19,920
I hope that's how you
pronounce it-- of

742
00:32:19,920 --> 00:32:21,200
the GWTQuery project.

743
00:32:21,200 --> 00:32:22,790
GWTQuery is actually being
used in the new

744
00:32:22,790 --> 00:32:26,105
gwtproject.org, and he worked
with Daniel as well as Vaadin

745
00:32:26,105 --> 00:32:28,780
to actually make the site
look a lot better

746
00:32:28,780 --> 00:32:31,410
and freshen it up.

747
00:32:31,410 --> 00:32:34,840
I also would like to extend
a special thanks to Thomas

748
00:32:34,840 --> 00:32:37,255
Broyer if no one knows who he
is or has been following the

749
00:32:37,255 --> 00:32:38,670
GWT Contributors News Group.

750
00:32:38,670 --> 00:32:40,670
He's been our largest GWT
contributor over the last

751
00:32:40,670 --> 00:32:41,770
couple of years.

752
00:32:41,770 --> 00:32:43,020
He's fixed hundreds of bugs.

753
00:32:43,020 --> 00:32:45,940
He's probably actually
fixed more bugs than

754
00:32:45,940 --> 00:32:47,460
the GWT team combined.

755
00:32:47,460 --> 00:32:50,370
And so I really wanted him to
be at I/O this year but he

756
00:32:50,370 --> 00:32:53,040
couldn't make it, so hopefully
he's watching.

757
00:32:53,040 --> 00:32:55,610
And so I'd just like to extend
a special thanks towards

758
00:32:55,610 --> 00:32:57,690
Thomas for all his hard
work over the years.

759
00:32:57,690 --> 00:32:59,094
DANIEL KURKA: Yeah.

760
00:32:59,094 --> 00:33:04,250
[APPLAUSE]

761
00:33:04,250 --> 00:33:06,440
RAY CROMWELL: So in summary,
what's the future of GWT?

762
00:33:06,440 --> 00:33:09,600
I think it's pretty bright, but
to summarize it up, faster

763
00:33:09,600 --> 00:33:12,930
development in an open setting
for the modern and mobile web

764
00:33:12,930 --> 00:33:16,070
with fewer surprises, more
compatibility with Java, and

765
00:33:16,070 --> 00:33:20,680
easier interoperability with the
rest of the non-GWT world.

766
00:33:20,680 --> 00:33:21,340
Thanks very much.

767
00:33:21,340 --> 00:33:23,380
And with that, I'll take the
remaining questions.

768
00:33:23,380 --> 00:33:26,548
We have about six and
a half minutes.

769
00:33:26,548 --> 00:33:27,020
DANIEL KURKA: Thank you.

770
00:33:27,020 --> 00:33:37,800
[APPLAUSE]

771
00:33:37,800 --> 00:33:42,520
AUDIENCE: So you mentioned
improved interactions between

772
00:33:42,520 --> 00:33:44,100
Java and JavaScript.

773
00:33:44,100 --> 00:33:47,970
Can you a little bit
expand on that?

774
00:33:47,970 --> 00:33:54,320
I'm particularly interested in
basically building a reusable

775
00:33:54,320 --> 00:33:58,790
library using GWT but that
can be used uniquely from

776
00:33:58,790 --> 00:34:00,460
JavaScript without having--

777
00:34:00,460 --> 00:34:01,190
RAY CROMWELL: Yeah.

778
00:34:01,190 --> 00:34:04,230
So I am the original author of
the GWT Exporter Project,

779
00:34:04,230 --> 00:34:06,530
which basically, you put
annotations on methods like At

780
00:34:06,530 --> 00:34:10,330
Export and it exports
a public API.

781
00:34:10,330 --> 00:34:12,280
The code's kind of bloated,
and it doesn't actually

782
00:34:12,280 --> 00:34:15,600
generate a code that's easy for
JavaScript programmers to

783
00:34:15,600 --> 00:34:17,040
eyeball and actually
figure out how they

784
00:34:17,040 --> 00:34:18,310
should be calling it.

785
00:34:18,310 --> 00:34:20,670
We're starting to actually use
GWT Exporter a lot within

786
00:34:20,670 --> 00:34:22,800
Google itself, and I'm putting
in a lot of time and resources

787
00:34:22,800 --> 00:34:27,040
to rewriting it essentially to
make it much more idiomatic in

788
00:34:27,040 --> 00:34:29,610
terms of the output looking
really like a handwritten

789
00:34:29,610 --> 00:34:33,400
JavaScript library and having
less bloat and overhead.

790
00:34:33,400 --> 00:34:35,880
But there'll be more information
on the GWT

791
00:34:35,880 --> 00:34:37,370
steering mailing list
and in the roadmap.

792
00:34:37,370 --> 00:34:39,760
We're going to actually release
the detailed roadmap

793
00:34:39,760 --> 00:34:40,610
very, very soon.

794
00:34:40,610 --> 00:34:41,879
It's a G Drive Document.

795
00:34:41,879 --> 00:34:44,460
You'll be able to look at it.

796
00:34:44,460 --> 00:34:45,590
Next?

797
00:34:45,590 --> 00:34:45,870
AUDIENCE: Hi.

798
00:34:45,870 --> 00:34:47,920
My name is Sebastian.

799
00:34:47,920 --> 00:34:51,520
In my company, I actually use
GWT in enterprise solutions,

800
00:34:51,520 --> 00:34:54,100
and it's always been
a bit of a scary

801
00:34:54,100 --> 00:34:56,820
moment, especially recently.

802
00:34:56,820 --> 00:35:00,850
We don't have really
support for GWT.

803
00:35:00,850 --> 00:35:04,300
As you mentioned yourself,
Google was prioritizing the

804
00:35:04,300 --> 00:35:09,260
internal box instead
of the public box.

805
00:35:09,260 --> 00:35:12,700
Is there any kind of--

806
00:35:12,700 --> 00:35:13,790
RAY CROMWELL: External
support?

807
00:35:13,790 --> 00:35:16,390
AUDIENCE: External support
that can be purchased.

808
00:35:16,390 --> 00:35:18,750
RAY CROMWELL: If you talk to
Mike Brock right over there on

809
00:35:18,750 --> 00:35:22,560
the far right, I know Red Hat
actually does some support, as

810
00:35:22,560 --> 00:35:23,570
well as Vaadin.

811
00:35:23,570 --> 00:35:26,980
If you visit vaadin.com, they
provide official support for

812
00:35:26,980 --> 00:35:28,390
GWT externally.

813
00:35:28,390 --> 00:35:30,365
And so if you actually have a
super high priority thing that

814
00:35:30,365 --> 00:35:33,210
you need fixed, they actually
will do it.

815
00:35:33,210 --> 00:35:35,580
And behind you in
line is Navigo.

816
00:35:35,580 --> 00:35:39,490
They might actually be able to
help you out if you have some

817
00:35:39,490 --> 00:35:41,040
issues, too.

818
00:35:41,040 --> 00:35:43,970
But we are going to pay
attention, community wide,

819
00:35:43,970 --> 00:35:46,450
more attention to the
issue tracker.

820
00:35:46,450 --> 00:35:49,320
And since we can accept bug
fixes much easier, instead of

821
00:35:49,320 --> 00:35:51,425
people putting a patch into the
issue tracker and it sits

822
00:35:51,425 --> 00:35:53,170
there for two years and
no one looks at it.

823
00:35:53,170 --> 00:35:55,130
Now actually, it will go
immediately into the code

824
00:35:55,130 --> 00:35:58,250
review system, everyone gets
emailed, someone looks at it,

825
00:35:58,250 --> 00:35:59,750
they actually just click
a button that says

826
00:35:59,750 --> 00:36:01,030
it looks OK to me.

827
00:36:01,030 --> 00:36:03,195
Then you get an OK, you
click a button, and

828
00:36:03,195 --> 00:36:04,030
you commit it yourself.

829
00:36:04,030 --> 00:36:05,640
And poof, it's fixed
and it's in.

830
00:36:05,640 --> 00:36:07,480
DANIEL KURKA: If you paid
attention to the issue tracker

831
00:36:07,480 --> 00:36:09,565
in the last month, we actually
brought the amount of issues

832
00:36:09,565 --> 00:36:10,300
down quite a bit.

833
00:36:10,300 --> 00:36:11,140
RAY CROMWELL: We closed
about half the

834
00:36:11,140 --> 00:36:12,990
issues in Issue Tracker.

835
00:36:12,990 --> 00:36:16,470
AUDIENCE: Just to add on my
question, do we have a clear

836
00:36:16,470 --> 00:36:19,210
picture on the commitment
of Google in GWT?

837
00:36:19,210 --> 00:36:24,000
We know currently, some Google
employees are committing to

838
00:36:24,000 --> 00:36:28,380
GWT, but do you have more
commitment from Google?

839
00:36:28,380 --> 00:36:29,000
RAY CROMWELL: Google
is continuing

840
00:36:29,000 --> 00:36:30,340
to develop new apps.

841
00:36:30,340 --> 00:36:34,160
There are actually internal apps
as we speak, not old ones

842
00:36:34,160 --> 00:36:36,180
but new ones actually
are being created

843
00:36:36,180 --> 00:36:37,810
every day using GWT.

844
00:36:37,810 --> 00:36:44,450
So it's not being deprecated
or dropped.

845
00:36:44,450 --> 00:36:47,280
We're not dropping support for
it, if that's your question.

846
00:36:47,280 --> 00:36:51,690
Let me go to the next person
before we run out of time.

847
00:36:51,690 --> 00:36:53,220
You can talk to me afterwards.

848
00:36:53,220 --> 00:36:54,820
AUDIENCE: I've been following
GWT for awhile.

849
00:36:54,820 --> 00:36:56,990
I just wondered how does the
future of GWT fit in with the

850
00:36:56,990 --> 00:36:58,830
future of Dart?

851
00:36:58,830 --> 00:37:00,260
RAY CROMWELL: That's a question
that's been asked

852
00:37:00,260 --> 00:37:01,960
many, many times.

853
00:37:01,960 --> 00:37:04,220
I think it's orthogonal.

854
00:37:04,220 --> 00:37:06,620
In other words, Dart is not
replacing GWT or vice versa.

855
00:37:06,620 --> 00:37:07,630
Google is a large company.

856
00:37:07,630 --> 00:37:08,760
We have many, many languages.

857
00:37:08,760 --> 00:37:10,960
Some teams choose Dart, some
teams choose GWT, some choose

858
00:37:10,960 --> 00:37:12,360
Closure Compiler.

859
00:37:12,360 --> 00:37:14,210
Some people write stuff
in JQuery, actually,

860
00:37:14,210 --> 00:37:15,320
internally at Google.

861
00:37:15,320 --> 00:37:16,660
YouTube is based on Python.

862
00:37:16,660 --> 00:37:20,270
Some teams build their apps in
Go on the back end, some Java.

863
00:37:20,270 --> 00:37:21,590
There's no mandate from above.

864
00:37:21,590 --> 00:37:23,610
Larry doesn't say everyone has
to write everything in a

865
00:37:23,610 --> 00:37:24,400
certain language.

866
00:37:24,400 --> 00:37:28,240
Basically, people choose based
on what they're interested in.

867
00:37:28,240 --> 00:37:29,980
AUDIENCE: So do you think
is GWT ever going to

868
00:37:29,980 --> 00:37:32,810
compile into Dart?

869
00:37:32,810 --> 00:37:34,710
RAY CROMWELL: I don't know.

870
00:37:34,710 --> 00:37:41,050
Talk to me afterwards,
and we can speculate.

871
00:37:41,050 --> 00:37:41,220
AUDIENCE: Hi.

872
00:37:41,220 --> 00:37:43,600
I'm Dennis.

873
00:37:43,600 --> 00:37:46,130
Two questions, real
quick ones.

874
00:37:46,130 --> 00:37:47,940
You mentioned the slides
at the beginning.

875
00:37:47,940 --> 00:37:51,635
Are those available, because I
know this one isn't filmed.

876
00:37:51,635 --> 00:37:53,860
You didn't video this one.

877
00:37:53,860 --> 00:37:54,835
DANIEL KURKA: It's
actually filmed.

878
00:37:54,835 --> 00:37:56,280
AUDIENCE: Oh, it is?

879
00:37:56,280 --> 00:37:57,960
RAY CROMWELL: It will be
available on YouTube.

880
00:37:57,960 --> 00:38:00,070
We also will make the
slides available.

881
00:38:00,070 --> 00:38:04,180
The Google website, the new
gwtproject.org, will have a

882
00:38:04,180 --> 00:38:06,232
public G Drive folder associated
with it, and there

883
00:38:06,232 --> 00:38:07,660
will be lots of documents we'll
be dropping in there,

884
00:38:07,660 --> 00:38:10,420
presentations, plus the steering
committee meeting

885
00:38:10,420 --> 00:38:13,010
minutes, plus the roadmap,
the detailed roadmap.

886
00:38:13,010 --> 00:38:13,340
AUDIENCE: OK.

887
00:38:13,340 --> 00:38:16,570
Second question, is there
someone, like you guys or

888
00:38:16,570 --> 00:38:20,160
someone available to talk
about GWT offline?

889
00:38:20,160 --> 00:38:22,590
Because I had some bugs in
some of my GWT that I was

890
00:38:22,590 --> 00:38:26,200
hoping to just talk to you
about here at Google I/O?

891
00:38:26,200 --> 00:38:29,890
But I noticed there's no
sandboxes out there for GWT.

892
00:38:29,890 --> 00:38:30,670
DANIEL KURKA: We can
talk afterwards.

893
00:38:30,670 --> 00:38:32,790
RAY CROMWELL: You can talk to
him afterwards, right after.

894
00:38:32,790 --> 00:38:33,150
AUDIENCE: Great.

895
00:38:33,150 --> 00:38:34,730
Thanks.

896
00:38:34,730 --> 00:38:36,520
RAY CROMWELL: Go ahead.

897
00:38:36,520 --> 00:38:36,840
AUDIENCE: Hi.

898
00:38:36,840 --> 00:38:40,300
Can you say anything about the
future of GWT Designer or

899
00:38:40,300 --> 00:38:43,190
potentially other tools for
developing GWT applications?

900
00:38:43,190 --> 00:38:45,330
RAY CROMWELL: I actually don't
know anything about that

901
00:38:45,330 --> 00:38:47,600
because that's actually run
by a different team.

902
00:38:47,600 --> 00:38:51,980
That's run by Rajeev Dayal,
who is in New York, and I

903
00:38:51,980 --> 00:38:53,900
think he deals with the team.

904
00:38:53,900 --> 00:38:58,000
John, are they in partly Russia,
the team behind the

905
00:38:58,000 --> 00:38:59,291
[? GPE ?] plugin?

906
00:38:59,291 --> 00:39:03,640
MALE SPEAKER: Last I knew,
it [? wasn't. ?]

907
00:39:03,640 --> 00:39:05,550
RAY CROMWELL: They have a
different reporting structure

908
00:39:05,550 --> 00:39:06,680
within Google, so they
actually don't

909
00:39:06,680 --> 00:39:08,220
report to the GWT team.

910
00:39:08,220 --> 00:39:10,210
It's almost like a
separate product.

911
00:39:10,210 --> 00:39:13,720
So I would actually
have to ask them.

912
00:39:13,720 --> 00:39:16,940
But maybe send a message to
Contributors News Group, and I

913
00:39:16,940 --> 00:39:19,100
can get Rajeev to respond to
you, who runs the stuff.

914
00:39:19,100 --> 00:39:22,780

915
00:39:22,780 --> 00:39:27,700
AUDIENCE: Really quick following
question if there is

916
00:39:27,700 --> 00:39:33,040
plans to integrate Java and
JavaScript more, and is there

917
00:39:33,040 --> 00:39:37,010
any plan to put annotations on
the produced JavaScript so

918
00:39:37,010 --> 00:39:40,740
that closure might be able
to better process

919
00:39:40,740 --> 00:39:42,270
some things or optimize?

920
00:39:42,270 --> 00:39:42,486
RAY CROMWELL: Yes.

921
00:39:42,486 --> 00:39:43,880
We actually already have
something like that

922
00:39:43,880 --> 00:39:45,370
internally, and that's more
what I mean about

923
00:39:45,370 --> 00:39:47,080
interoperability.

924
00:39:47,080 --> 00:39:50,050
The idea basically is that
GWT can now output JSDoc

925
00:39:50,050 --> 00:39:54,430
annotations, closurized code
with @constructor and @type

926
00:39:54,430 --> 00:39:55,470
annotations.

927
00:39:55,470 --> 00:39:57,750
So when you actually consume it
from Closure Code, you'll

928
00:39:57,750 --> 00:40:00,260
get type checking, static
type checking enclosure.

929
00:40:00,260 --> 00:40:02,080
IntelliJ IDEA will actually
allow you

930
00:40:02,080 --> 00:40:03,450
step through the code.

931
00:40:03,450 --> 00:40:05,550
The reverse is also true.

932
00:40:05,550 --> 00:40:08,220
Eventually, you'll be able to
point GWT to closurized code,

933
00:40:08,220 --> 00:40:10,630
and it will understand the
closure annotations, and you

934
00:40:10,630 --> 00:40:12,210
won't have to actually write
a JSNI method to

935
00:40:12,210 --> 00:40:13,370
call closure code.

936
00:40:13,370 --> 00:40:16,410
It will synthesize on the fly
an actual overlay type based

937
00:40:16,410 --> 00:40:18,370
on the type information that's
present in the JSDoc.

938
00:40:18,370 --> 00:40:21,350
And that's what I meant about
better interoperability

939
00:40:21,350 --> 00:40:23,550
between the two languages.

940
00:40:23,550 --> 00:40:25,030
I've got 38 seconds left.

941
00:40:25,030 --> 00:40:26,847
Anybody got one more question?

942
00:40:26,847 --> 00:40:27,781
DANIEL KURKA: No time.

943
00:40:27,781 --> 00:40:29,100
This is actually counting up.

944
00:40:29,100 --> 00:40:30,210
RAY CROMWELL: Oh, sorry.

945
00:40:30,210 --> 00:40:30,910
I'm actually over.

946
00:40:30,910 --> 00:40:32,680
I went negative.

947
00:40:32,680 --> 00:40:35,370
But if you have any other
questions for me, you can see

948
00:40:35,370 --> 00:40:36,090
me outside the room.

949
00:40:36,090 --> 00:40:38,290
You can talk to me or Daniel.

950
00:40:38,290 --> 00:40:40,740
Thank you very much for
coming and see you

951
00:40:40,740 --> 00:40:41,990
guys maybe next year.

952
00:40:41,990 --> 00:40:44,108

