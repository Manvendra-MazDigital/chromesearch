1
00:00:00,000 --> 00:00:02,700

2
00:00:02,700 --> 00:00:04,310
TV RAMAN: Welcome, everyone.

3
00:00:04,310 --> 00:00:07,350
Thank you for coming to this
talk on Android accessibility

4
00:00:07,350 --> 00:00:10,520
and the second day of I/O. Hope
you had a great party

5
00:00:10,520 --> 00:00:12,880
last night and are ready
for a whole sequence

6
00:00:12,880 --> 00:00:14,590
of talks this morning.

7
00:00:14,590 --> 00:00:15,960
My name is TV Raman.

8
00:00:15,960 --> 00:00:18,380
I've been working on Android and
Chrome accessibility for

9
00:00:18,380 --> 00:00:19,410
the last few years.

10
00:00:19,410 --> 00:00:23,140
And with me I have Casey
Burkhardt and Alan Viverette

11
00:00:23,140 --> 00:00:26,230
who also work on Android
accessibility.

12
00:00:26,230 --> 00:00:32,009
A quick intro to what we're
going to be talking about.

13
00:00:32,009 --> 00:00:34,320
So this is about Android
accessibility, and we've

14
00:00:34,320 --> 00:00:39,760
billed this as an advanced
developer talk.

15
00:00:39,760 --> 00:00:42,420
Android accessibility
is a core part

16
00:00:42,420 --> 00:00:44,100
of the Android framework.

17
00:00:44,100 --> 00:00:48,040
And the way you should think of
what that core capability,

18
00:00:48,040 --> 00:00:52,700
the framework, does is think of
it as mechanisms that are

19
00:00:52,700 --> 00:00:57,450
built into the platform, so that
you as a developer can

20
00:00:57,450 --> 00:01:00,560
reach the largest
number of users.

21
00:01:00,560 --> 00:01:02,510
You heard some fairly
amazing numbers

22
00:01:02,510 --> 00:01:04,519
in the keynote yesterday.

23
00:01:04,519 --> 00:01:05,770
I can never remember
the numbers.

24
00:01:05,770 --> 00:01:08,040
I think it was about
900 million Android

25
00:01:08,040 --> 00:01:09,390
devices out there now.

26
00:01:09,390 --> 00:01:12,360
By the time we are done during
this talk, it's probably 902

27
00:01:12,360 --> 00:01:15,900
million at the rate at
which things grow

28
00:01:15,900 --> 00:01:20,210
What is Android as a platform
giving you the developer?

29
00:01:20,210 --> 00:01:23,080
It's giving you the developer
the ability to write these

30
00:01:23,080 --> 00:01:27,450
wonderfully innovative apps that
can run on a very large

31
00:01:27,450 --> 00:01:30,140
variety of devices.

32
00:01:30,140 --> 00:01:32,660
So you don't have to worry about
different screen sizes,

33
00:01:32,660 --> 00:01:35,880
5 inches versus 4 1/2 inches
versus 5 1/2 inches.

34
00:01:35,880 --> 00:01:37,700
You don't have to worry about
does this phone have a

35
00:01:37,700 --> 00:01:40,580
keyboard or not, all
of those things.

36
00:01:40,580 --> 00:01:43,930
Think of the other half of the
equation, the people who use

37
00:01:43,930 --> 00:01:46,700
your applications.

38
00:01:46,700 --> 00:01:49,210
Today, most of you are probably
targeting your

39
00:01:49,210 --> 00:01:53,030
applications at users who have
perfect vision, who have

40
00:01:53,030 --> 00:01:55,750
perfect hand-eye coordination,
who can use the

41
00:01:55,750 --> 00:01:57,660
touch screen well.

42
00:01:57,660 --> 00:02:01,390
In a sense, you are not having
to focus as much

43
00:02:01,390 --> 00:02:03,540
on the user's abilities.

44
00:02:03,540 --> 00:02:06,160
What we, from the accessibility
side of Android,

45
00:02:06,160 --> 00:02:10,590
do is to make sure that you can
continue to focus on your

46
00:02:10,590 --> 00:02:12,900
app, on the core part
of your part.

47
00:02:12,900 --> 00:02:18,080
And the Android platform just
does the heavy lifting for you

48
00:02:18,080 --> 00:02:21,580
in terms of making sure that
your app just works for all

49
00:02:21,580 --> 00:02:22,690
your users.

50
00:02:22,690 --> 00:02:24,710
But life's never that
simple, right?

51
00:02:24,710 --> 00:02:28,130
If you had to code your app all
the way from the beginning

52
00:02:28,130 --> 00:02:30,990
to worry about the blind user,
the low-vision user, the deaf

53
00:02:30,990 --> 00:02:32,980
user, the motion-impaired
user, you would

54
00:02:32,980 --> 00:02:34,012
have a very hard time.

55
00:02:34,012 --> 00:02:37,370
Our goal is to make that
really, really easy.

56
00:02:37,370 --> 00:02:42,420
And for core platform APIs,
everything we talk about today

57
00:02:42,420 --> 00:02:45,200
will be in the context of low
vision and blindness.

58
00:02:45,200 --> 00:02:47,680
But the way it does architected,
when you address

59
00:02:47,680 --> 00:02:50,680
these use cases, you actually
will be covering a lot more

60
00:02:50,680 --> 00:02:54,010
use cases, all the way from
one button controls for

61
00:02:54,010 --> 00:02:57,270
somebody who's severely
motion-impaired to the blind

62
00:02:57,270 --> 00:02:59,020
user who cannot see at all.

63
00:02:59,020 --> 00:03:02,470
We've done previous talks about
the core accessibility

64
00:03:02,470 --> 00:03:03,280
layer in Android.

65
00:03:03,280 --> 00:03:07,600
And I highly recommend our talk
from last year which gave

66
00:03:07,600 --> 00:03:10,340
a very detailed overview of
the features in Jellybean.

67
00:03:10,340 --> 00:03:13,910
This year, what we will do is
Casey will first take you

68
00:03:13,910 --> 00:03:18,180
quickly through some of the
accessibility basics as a

69
00:03:18,180 --> 00:03:19,300
quick revision.

70
00:03:19,300 --> 00:03:22,960
And then Alan will go through
in detail about the next

71
00:03:22,960 --> 00:03:25,330
level, which is what if
you're designing an

72
00:03:25,330 --> 00:03:26,940
entirely a custom UI.

73
00:03:26,940 --> 00:03:29,770
As I said the Android platform
with its built-in

74
00:03:29,770 --> 00:03:32,590
accessibility, with its built-in
view layer, has

75
00:03:32,590 --> 00:03:34,660
accessibility support
for all the widgets.

76
00:03:34,660 --> 00:03:37,680
But what if you've decided to
create a completely new

77
00:03:37,680 --> 00:03:39,550
experience?

78
00:03:39,550 --> 00:03:42,020
How do you easily make
that then accessible.

79
00:03:42,020 --> 00:03:45,250
So that will be the second
half of this talk.

80
00:03:45,250 --> 00:03:46,640
We will have office hours.

81
00:03:46,640 --> 00:03:49,230
We will give you details on the
office hours again towards

82
00:03:49,230 --> 00:03:50,040
the end of the talk.

83
00:03:50,040 --> 00:03:53,180
We also have a sandbox
downstairs where you can see

84
00:03:53,180 --> 00:03:55,630
accessibility technologies both
from us at Google as well

85
00:03:55,630 --> 00:03:57,170
as from our partners.

86
00:03:57,170 --> 00:03:59,390
So enjoy the talk.

87
00:03:59,390 --> 00:04:01,360
I look forward to your
questions at the end.

88
00:04:01,360 --> 00:04:02,610
And take it away, Casey.

89
00:04:02,610 --> 00:04:05,960

90
00:04:05,960 --> 00:04:07,180
CASEY BURKHARDT: Thanks Raman.

91
00:04:07,180 --> 00:04:08,040
Hi, everyone.

92
00:04:08,040 --> 00:04:08,815
I'm Casey Burkhardt.

93
00:04:08,815 --> 00:04:10,780
I'm a software engineer
on the Accessibility

94
00:04:10,780 --> 00:04:12,540
Engineering Team at Google.

95
00:04:12,540 --> 00:04:14,810
And as Raman mentioned, I'm
going to go through some of

96
00:04:14,810 --> 00:04:18,390
the accessibility basics
on Android.

97
00:04:18,390 --> 00:04:20,640
So accessibility is
exposed through

98
00:04:20,640 --> 00:04:22,420
accessibility services.

99
00:04:22,420 --> 00:04:25,110
The framework provides
information about user

100
00:04:25,110 --> 00:04:29,290
interaction to these services
through objects called

101
00:04:29,290 --> 00:04:31,040
accessibility events.

102
00:04:31,040 --> 00:04:34,010
These are presented as
accessibility services which

103
00:04:34,010 --> 00:04:36,430
had a privilege level that's a
bit higher than other services

104
00:04:36,430 --> 00:04:39,330
to receive information about
this user interaction.

105
00:04:39,330 --> 00:04:42,850
So we get information about
notification, movement of

106
00:04:42,850 --> 00:04:45,840
focus, how the user interacts
with apps.

107
00:04:45,840 --> 00:04:48,820
And the accessibility service
is responsible for providing

108
00:04:48,820 --> 00:04:51,080
feedback for that.

109
00:04:51,080 --> 00:04:53,840
We ship two accessibility
services right now.

110
00:04:53,840 --> 00:04:56,080
The first is TalkBack, which
is a screen reader that's

111
00:04:56,080 --> 00:04:59,270
optimized for the
touch screen.

112
00:04:59,270 --> 00:05:02,500
What we do is we allow for
different types of navigation

113
00:05:02,500 --> 00:05:05,030
throughout your application
and throughout Android.

114
00:05:05,030 --> 00:05:07,900
We allow random access through
a feature called

115
00:05:07,900 --> 00:05:11,390
ExploreByTouch, which allows a
users to use a single finger

116
00:05:11,390 --> 00:05:13,560
to interrogate the screen
and explore what

117
00:05:13,560 --> 00:05:14,850
they're currently touching.

118
00:05:14,850 --> 00:05:16,950
The accessibility service gets
information about that

119
00:05:16,950 --> 00:05:19,730
interaction and provides
feedback to the user.

120
00:05:19,730 --> 00:05:23,890
We also provide access to this
onscreen content linearly.

121
00:05:23,890 --> 00:05:28,220
So if a user is unfamiliar with
an interface, they can

122
00:05:28,220 --> 00:05:30,780
navigate it item by item
to see everything

123
00:05:30,780 --> 00:05:33,070
that's on the screen.

124
00:05:33,070 --> 00:05:35,360
TalkBack provides all this
feedback through

125
00:05:35,360 --> 00:05:37,890
text-to-speech as well as
vibration feedback and

126
00:05:37,890 --> 00:05:39,250
auditory icons.

127
00:05:39,250 --> 00:05:42,050
But we also ship another
service, BrailleBack, which

128
00:05:42,050 --> 00:05:44,220
works in a similar way but
provides feedback on a

129
00:05:44,220 --> 00:05:46,370
refreshable Braille display.

130
00:05:46,370 --> 00:05:49,400
So this is a device that
connects to the Android phone

131
00:05:49,400 --> 00:05:53,430
or tablet through Bluetooth and
actually changes its state

132
00:05:53,430 --> 00:05:55,860
of little actuator pins,
so the user can read

133
00:05:55,860 --> 00:05:57,325
Braille on the fly.

134
00:05:57,325 --> 00:06:00,535
The user can also click on
individual cells which result

135
00:06:00,535 --> 00:06:03,380
in click actions being sent to
the view that represents the

136
00:06:03,380 --> 00:06:06,405
text from that cell and can also
pan through the entire

137
00:06:06,405 --> 00:06:08,060
onscreen content to
see everything

138
00:06:08,060 --> 00:06:09,570
that's on the screen.

139
00:06:09,570 --> 00:06:11,900
Most of these Braille devices
also include a built-in

140
00:06:11,900 --> 00:06:14,670
keyboard, so the user
can even enter text.

141
00:06:14,670 --> 00:06:16,890
All of these things combine to
allow the user to drive the

142
00:06:16,890 --> 00:06:19,830
phone or tablet from inside
their pocket just with this

143
00:06:19,830 --> 00:06:21,080
Braille display.

144
00:06:21,080 --> 00:06:23,900

145
00:06:23,900 --> 00:06:26,660
A key tenet of accessibility in
Jellybean and above is the

146
00:06:26,660 --> 00:06:28,780
idea of accessibility focus.

147
00:06:28,780 --> 00:06:31,780
It works just like system input
focus, but it's assigned

148
00:06:31,780 --> 00:06:35,100
by an accessibility focused to
any view in the interface.

149
00:06:35,100 --> 00:06:38,960
So as a user interacts with the
device, the service gets

150
00:06:38,960 --> 00:06:43,705
events about the interaction and
can decide to assign focus

151
00:06:43,705 --> 00:06:45,790
to anywhere in the
user interface.

152
00:06:45,790 --> 00:06:48,000
Focus is indicated by this
yellow highlight you see

153
00:06:48,000 --> 00:06:49,650
around the clock widget here.

154
00:06:49,650 --> 00:06:52,860
And when something receives
focus, the service is intended

155
00:06:52,860 --> 00:06:56,100
to speak or provide some sort
of feedback to the user.

156
00:06:56,100 --> 00:07:01,240
Focus is also the point of
interaction for any events or

157
00:07:01,240 --> 00:07:03,360
actions that occur from
that point forward.

158
00:07:03,360 --> 00:07:06,270
So for example, if I double tap
while this widget receives

159
00:07:06,270 --> 00:07:08,810
focus, the clock widget will
receive a click event.

160
00:07:08,810 --> 00:07:11,850
If I double tap and hold my
finger down, the [INAUDIBLE]

161
00:07:11,850 --> 00:07:15,870
will receive a long click
event, and so forth.

162
00:07:15,870 --> 00:07:17,910
So it's up to the accessibility
service about

163
00:07:17,910 --> 00:07:20,640
how to assign this focus.

164
00:07:20,640 --> 00:07:24,420
In TalkBack, we use a heuristic
based on whether a

165
00:07:24,420 --> 00:07:27,460
view is actionable or not to
determine focusability.

166
00:07:27,460 --> 00:07:30,660
So what we do is we take a look
at the view hierarchy.

167
00:07:30,660 --> 00:07:34,670
We see that a view is either
clickable or focusable, and we

168
00:07:34,670 --> 00:07:36,540
mark that view as a candidate
to receive

169
00:07:36,540 --> 00:07:38,210
accessibility focus.

170
00:07:38,210 --> 00:07:40,130
When we traverse the hierarchy,
we take these

171
00:07:40,130 --> 00:07:43,120
candidates and we assign focus
to them in the order that the

172
00:07:43,120 --> 00:07:46,820
user intends through
their interaction.

173
00:07:46,820 --> 00:07:50,080
And failing to find actionable
content, we fall back to

174
00:07:50,080 --> 00:07:51,110
actual text content.

175
00:07:51,110 --> 00:07:53,950
So if you don't have focusable
or clickable content in your

176
00:07:53,950 --> 00:07:56,710
application, but you still have
text or labeled images,

177
00:07:56,710 --> 00:07:57,960
we'll focus those as well.

178
00:07:57,960 --> 00:08:00,620

179
00:08:00,620 --> 00:08:01,990
So here's an example of that.

180
00:08:01,990 --> 00:08:06,320
What we have here is the folder
widget from the home

181
00:08:06,320 --> 00:08:09,380
screen that comes default in
most stock Android devices.

182
00:08:09,380 --> 00:08:12,220
And what we're interested here
in is a folder icon.

183
00:08:12,220 --> 00:08:15,260
You see the folder icon object,
outlined in yellow in

184
00:08:15,260 --> 00:08:17,980
this hierarchy viewer tree,
is the current node with

185
00:08:17,980 --> 00:08:19,540
accessibility focus.

186
00:08:19,540 --> 00:08:21,960
When TalkBack traverses the
hierarchy, we see that this

187
00:08:21,960 --> 00:08:24,370
view is clickable.

188
00:08:24,370 --> 00:08:26,700
So we say oh, this is an actual
piece of content.

189
00:08:26,700 --> 00:08:28,590
We should give it accessibility
focus.

190
00:08:28,590 --> 00:08:31,120
When the user navigates to this
point in the hierarchy,

191
00:08:31,120 --> 00:08:34,539
we select this view, search
down and traverse its

192
00:08:34,539 --> 00:08:38,250
children, and populate speech
with the content of its

193
00:08:38,250 --> 00:08:39,049
children nodes.

194
00:08:39,049 --> 00:08:42,140
So for this example, the image
view is labeled with the

195
00:08:42,140 --> 00:08:43,049
content description--

196
00:08:43,049 --> 00:08:43,870
folder--

197
00:08:43,870 --> 00:08:45,690
and the bubble text view
has the text--

198
00:08:45,690 --> 00:08:46,240
Google.

199
00:08:46,240 --> 00:08:48,390
So TalkBack will speak
Folder, Google.

200
00:08:48,390 --> 00:08:50,960

201
00:08:50,960 --> 00:08:54,590
So now let's switch over to a
demo, and we'll quickly show

202
00:08:54,590 --> 00:08:56,880
how TalkBack will work with your
application, how users

203
00:08:56,880 --> 00:08:59,930
will use ExploreByTouch and
linear navigation to move

204
00:08:59,930 --> 00:09:01,580
through your user interface.

205
00:09:01,580 --> 00:09:04,550
And then we'll do a quick demo
of Braille and introduce our

206
00:09:04,550 --> 00:09:05,870
new virtual Braille display.

207
00:09:05,870 --> 00:09:10,400

208
00:09:10,400 --> 00:09:13,090
So here we have an Android
device running the latest

209
00:09:13,090 --> 00:09:14,830
version of Jellybean.

210
00:09:14,830 --> 00:09:17,370
All accessibility on the
platform can be enabled

211
00:09:17,370 --> 00:09:19,430
through a common location.

212
00:09:19,430 --> 00:09:22,530
It lives in Settings,
Accessibility.

213
00:09:22,530 --> 00:09:24,590
And you can see it lists all
the services that are

214
00:09:24,590 --> 00:09:25,440
currently installed.

215
00:09:25,440 --> 00:09:27,370
Here we have TalkBack
and BrailleBack.

216
00:09:27,370 --> 00:09:32,160
To enable a service, just tap it
and flip its switch to on.

217
00:09:32,160 --> 00:09:34,170
You'll receive a warning that
it's a privileged service.

218
00:09:34,170 --> 00:09:37,470
It can do things like retrieve
interaction events and get

219
00:09:37,470 --> 00:09:38,340
onscreen content.

220
00:09:38,340 --> 00:09:42,240
You accept the warning, and the
service is now running.

221
00:09:42,240 --> 00:09:44,310
As I navigate through the user
interface with a single

222
00:09:44,310 --> 00:09:47,570
finger, I can actually get
feedback for the content that

223
00:09:47,570 --> 00:09:49,160
I'm currently touching.

224
00:09:49,160 --> 00:09:52,200
ANDROID: When TalkBack is on,
your device provides spoken

225
00:09:52,200 --> 00:09:54,680
feedback to help blind
and low-vision users.

226
00:09:54,680 --> 00:09:58,160
For example, it describes
what you touch--

227
00:09:58,160 --> 00:10:00,050
CASEY BURKHARDT: So I covered
the proximity sensor to

228
00:10:00,050 --> 00:10:01,170
Silence Speech.

229
00:10:01,170 --> 00:10:02,960
I can continue to navigate
around the interface--

230
00:10:02,960 --> 00:10:04,855
ANDROID: When TalkBack
is on, on switch--

231
00:10:04,855 --> 00:10:08,810

232
00:10:08,810 --> 00:10:10,100
3.5 [? g-note ?].

233
00:10:10,100 --> 00:10:10,720
CASEY BURKHARDT: Let's
now stop TalkBack.

234
00:10:10,720 --> 00:10:11,200
ANDROID: OK.

235
00:10:11,200 --> 00:10:12,020
Cancel but--

236
00:10:12,020 --> 00:10:13,400
Settings.

237
00:10:13,400 --> 00:10:15,060
CASEY BURKHARDT: To activate
something in the interface--

238
00:10:15,060 --> 00:10:15,730
ANDROID: When TalkBack is on--

239
00:10:15,730 --> 00:10:16,325
CASEY BURKHARDT: I
give it focus--

240
00:10:16,325 --> 00:10:16,610
ANDROID: Settings.

241
00:10:16,610 --> 00:10:18,950
CASEY BURKHARDT: And
I double tap.

242
00:10:18,950 --> 00:10:20,750
ANDROID: TalkBack Settings.

243
00:10:20,750 --> 00:10:22,160
CASEY BURKHARDT: That sends a
click event to that button,

244
00:10:22,160 --> 00:10:25,550
and fires the Click Listener,
and opens TalkBack Settings.

245
00:10:25,550 --> 00:10:28,310
If I'm unfamiliar with this
interface, I can actually

246
00:10:28,310 --> 00:10:29,570
navigate it item by item.

247
00:10:29,570 --> 00:10:30,440
And here's how I do that.

248
00:10:30,440 --> 00:10:33,400
I just do that with a series
of Swype gestures.

249
00:10:33,400 --> 00:10:35,120
ANDROID: TalkBack Settings.

250
00:10:35,120 --> 00:10:36,090
Speech.

251
00:10:36,090 --> 00:10:37,160
Speech Volume.

252
00:10:37,160 --> 00:10:38,770
Match media volume.

253
00:10:38,770 --> 00:10:39,280
CASEY BURKHARDT: And so forth.

254
00:10:39,280 --> 00:10:42,230
I can move back by Swyping
the opposite direction.

255
00:10:42,230 --> 00:10:44,920
ANDROID: Speech.

256
00:10:44,920 --> 00:10:46,910
CASEY BURKHARDT: We also provide
quick access to common

257
00:10:46,910 --> 00:10:50,380
system functions, like pulling
down the notification shade.

258
00:10:50,380 --> 00:10:51,820
ANDROID: Notification shade.

259
00:10:51,820 --> 00:10:53,760
CASEY BURKHARDT:
Or going back.

260
00:10:53,760 --> 00:10:56,380
ANDROID: TalkBack settings.

261
00:10:56,380 --> 00:10:59,350
CASEY BURKHARDT: We also have a
great tool called the Global

262
00:10:59,350 --> 00:11:02,470
Context Menu, which allows a
user to quickly access common

263
00:11:02,470 --> 00:11:04,120
tasks within TalkBack.

264
00:11:04,120 --> 00:11:06,740
For example, it's very important
sometimes to be able

265
00:11:06,740 --> 00:11:08,630
to read all the content
on the screen at once.

266
00:11:08,630 --> 00:11:12,260

267
00:11:12,260 --> 00:11:14,800
ANDROID: Touch the screen and
explore in a circle to find an

268
00:11:14,800 --> 00:11:17,570
item, then lift to select.

269
00:11:17,570 --> 00:11:18,780
Read from top.

270
00:11:18,780 --> 00:11:20,360
TalkBack settings.

271
00:11:20,360 --> 00:11:21,000
Speech.

272
00:11:21,000 --> 00:11:22,080
Speech volume.

273
00:11:22,080 --> 00:11:23,650
Match media volume.

274
00:11:23,650 --> 00:11:24,820
Use pitch changes.

275
00:11:24,820 --> 00:11:26,810
Speak keyboard feedback and--

276
00:11:26,810 --> 00:11:27,170
speech.

277
00:11:27,170 --> 00:11:27,790
CASEY BURKHARDT: And
I'll touch the

278
00:11:27,790 --> 00:11:28,340
screen to silence it.

279
00:11:28,340 --> 00:11:29,210
ANDROID: Speech volume.

280
00:11:29,210 --> 00:11:31,730
Match media--

281
00:11:31,730 --> 00:11:33,620
CASEY BURKHARDT: So you can see
that accessibility moved

282
00:11:33,620 --> 00:11:34,460
on its own.

283
00:11:34,460 --> 00:11:36,630
It would read through the entire
user interface and

284
00:11:36,630 --> 00:11:38,210
describe to the user
what's there.

285
00:11:38,210 --> 00:11:41,440
This is a great tool for
developers too, because it

286
00:11:41,440 --> 00:11:44,290
allows them to open up an
activity, enable reading from

287
00:11:44,290 --> 00:11:48,810
top, look at each item as it
receives accessibility focus,

288
00:11:48,810 --> 00:11:50,670
and ensure that the spoken
description is

289
00:11:50,670 --> 00:11:52,050
accurate for that item.

290
00:11:52,050 --> 00:11:54,990
If something's unlabeled,
mislabeled, or doesn't receive

291
00:11:54,990 --> 00:11:57,570
accessibility focus, it's really
easy to tell which

292
00:11:57,570 --> 00:12:01,550
widget you need to look into
to improve the experience.

293
00:12:01,550 --> 00:12:04,455
So in addition to TalkBack,
we have BrailleBack.

294
00:12:04,455 --> 00:12:05,030
Let's enable that.

295
00:12:05,030 --> 00:12:10,700
ANDROID: Back, Settings, Back,
Accessibility, Show--

296
00:12:10,700 --> 00:12:13,020
BrailleBack off.

297
00:12:13,020 --> 00:12:14,780
Settings.

298
00:12:14,780 --> 00:12:16,400
Off switch.

299
00:12:16,400 --> 00:12:18,190
Alert use BrailleBack.

300
00:12:18,190 --> 00:12:19,260
OK button.

301
00:12:19,260 --> 00:12:20,280
Settings.

302
00:12:20,280 --> 00:12:21,940
CASEY BURKHARDT: So now
BrailleBack is running.

303
00:12:21,940 --> 00:12:25,330
And I've actually enabled in
BrailleBack Settings, which

304
00:12:25,330 --> 00:12:27,450
you can get by clicking the
Settings button there, a

305
00:12:27,450 --> 00:12:29,300
virtual Braille display.

306
00:12:29,300 --> 00:12:31,720
So because we don't have a
refreshable Braille display

307
00:12:31,720 --> 00:12:33,960
connected through Bluetooth
right now, it's incredibly

308
00:12:33,960 --> 00:12:36,780
useful to be able to see what's
on a virtual display

309
00:12:36,780 --> 00:12:38,390
especially for developers.

310
00:12:38,390 --> 00:12:40,600
So what we see here is an
overlay on the bottom of the

311
00:12:40,600 --> 00:12:43,480
screen that actually shows what
would appear on a Braille

312
00:12:43,480 --> 00:12:46,810
display with its human readable
translation below in

313
00:12:46,810 --> 00:12:48,230
actual ASCII text.

314
00:12:48,230 --> 00:12:51,580
So this gives you an idea of,
if you navigate through your

315
00:12:51,580 --> 00:12:53,930
interface, what your users
will see on the Braille

316
00:12:53,930 --> 00:12:57,000
display when they're using
your application.

317
00:12:57,000 --> 00:12:58,910
ANDROID: Navigate up.

318
00:12:58,910 --> 00:13:00,390
On switch.

319
00:13:00,390 --> 00:13:02,900
CASEY BURKHARDT: So you can see
that the display updates.

320
00:13:02,900 --> 00:13:05,632
ANDROID: When BrailleBack
is on--

321
00:13:05,632 --> 00:13:06,520
CASEY BURKHARDT: OK.

322
00:13:06,520 --> 00:13:09,008
ANDROID: Alert.

323
00:13:09,008 --> 00:13:09,920
CASEY BURKHARDT: Great.

324
00:13:09,920 --> 00:13:11,730
Another great feature of
TalkBack is you can turn it

325
00:13:11,730 --> 00:13:13,115
off really quickly.

326
00:13:13,115 --> 00:13:15,620
You go back to the Global
Context Menu and just go to a

327
00:13:15,620 --> 00:13:16,090
Pause Feedback.

328
00:13:16,090 --> 00:13:17,660
ANDROID: Pause Feedback.

329
00:13:17,660 --> 00:13:20,605
CASEY BURKHARDT: And it's off.

330
00:13:20,605 --> 00:13:21,855
OK.

331
00:13:21,855 --> 00:13:28,320

332
00:13:28,320 --> 00:13:30,980
So let's talk briefly about what
you as developers need to

333
00:13:30,980 --> 00:13:33,270
do to make your applications
successful.

334
00:13:33,270 --> 00:13:35,420
All of this content is
in our previous years

335
00:13:35,420 --> 00:13:36,780
talk in greater detail.

336
00:13:36,780 --> 00:13:39,080
So I encourage you, if you're
interested, go back and look

337
00:13:39,080 --> 00:13:42,155
at those talks from 2011 and
2012 regarding Android

338
00:13:42,155 --> 00:13:43,120
accessibility.

339
00:13:43,120 --> 00:13:46,280
You'll get this content
in more depth.

340
00:13:46,280 --> 00:13:49,650
The first thing to know about
accessibility within native

341
00:13:49,650 --> 00:13:52,550
applications is that the widgets
that ship with the

342
00:13:52,550 --> 00:13:54,690
platform, as part of
the SDK, are all

343
00:13:54,690 --> 00:13:56,320
accessible to begin with.

344
00:13:56,320 --> 00:13:58,130
A lot of time is gone into
instrumenting these for

345
00:13:58,130 --> 00:14:00,720
accessibility, and we provide a
really great experience for

346
00:14:00,720 --> 00:14:02,060
all the built-in widgets.

347
00:14:02,060 --> 00:14:04,690
So whenever possible, use
built-in widgets within your

348
00:14:04,690 --> 00:14:05,960
application.

349
00:14:05,960 --> 00:14:08,850
If you do need to create a
custom widget, some class of

350
00:14:08,850 --> 00:14:11,390
view that is as deep in the
class hierarchy as possible,

351
00:14:11,390 --> 00:14:14,390
so you get the benefit of having
the accessibility bits

352
00:14:14,390 --> 00:14:16,650
in that widget.

353
00:14:16,650 --> 00:14:21,100
So there are some widgets that
need a little extra care.

354
00:14:21,100 --> 00:14:24,430
And these are widgets that are
essentially nontext-based, in

355
00:14:24,430 --> 00:14:26,750
particular, Image View
and Image button.

356
00:14:26,750 --> 00:14:29,110
Because there's no textual
content to speaker put on a

357
00:14:29,110 --> 00:14:31,660
Braille display for a user, it's
important that you as the

358
00:14:31,660 --> 00:14:33,220
developer provide one.

359
00:14:33,220 --> 00:14:35,650
This is done through the
android:setContentDescription

360
00:14:35,650 --> 00:14:37,880
attribute in your layout.

361
00:14:37,880 --> 00:14:40,100
And you'll want to make sure
you provide a translatable

362
00:14:40,100 --> 00:14:42,340
stream for that.

363
00:14:42,340 --> 00:14:44,580
If you have a view that's
entirely decorative and

364
00:14:44,580 --> 00:14:47,050
probably isn't important for
accessibility, you can set a

365
00:14:47,050 --> 00:14:48,450
content description null.

366
00:14:48,450 --> 00:14:49,600
This will do two things.

367
00:14:49,600 --> 00:14:51,160
It will fix all your
lint errors.

368
00:14:51,160 --> 00:14:54,040
You'll see your link warnings
because of lack of content

369
00:14:54,040 --> 00:14:55,000
descriptions.

370
00:14:55,000 --> 00:14:57,765
And it will also indicate to
accessibility services that

371
00:14:57,765 --> 00:14:59,920
their concept probably
isn't worth receiving

372
00:14:59,920 --> 00:15:01,820
accessibility focus.

373
00:15:01,820 --> 00:15:04,020
If you have content that
updates throughout the

374
00:15:04,020 --> 00:15:05,920
lifecycle of your
application--

375
00:15:05,920 --> 00:15:09,090
for example, a play/pause button
that changes state--

376
00:15:09,090 --> 00:15:11,520
you can use the
View.SetContentDescription

377
00:15:11,520 --> 00:15:14,200
method to dynamically
update the view

378
00:15:14,200 --> 00:15:16,550
when its meaning changes.

379
00:15:16,550 --> 00:15:21,180
And finally, if you've got one
view that is intended to label

380
00:15:21,180 --> 00:15:24,460
another and has an appropriate
description, you can use the

381
00:15:24,460 --> 00:15:27,890
Android label for attribute to
indicate to TalkBack or other

382
00:15:27,890 --> 00:15:30,450
accessibility services that
you're providing a label

383
00:15:30,450 --> 00:15:32,840
through another view.

384
00:15:32,840 --> 00:15:35,350
If you have a hybrid application
or use web content

385
00:15:35,350 --> 00:15:38,960
within your application,
be sure to use W3C web

386
00:15:38,960 --> 00:15:41,810
accessibility initiatives,
standards and guidelines to

387
00:15:41,810 --> 00:15:43,880
ensure that the web content
is accessible.

388
00:15:43,880 --> 00:15:48,460
We do provide access to web
content for accessibility

389
00:15:48,460 --> 00:15:52,690
services through an injected
version of ChromeVox.

390
00:15:52,690 --> 00:15:54,240
There was a talk on
that yesterday.

391
00:15:54,240 --> 00:15:57,620
And stop by our sandbox
to see a demo.

392
00:15:57,620 --> 00:16:00,120
And if you find yourself in a
situation where you do have to

393
00:16:00,120 --> 00:16:04,390
write an entirely custom widget
yourself, there are

394
00:16:04,390 --> 00:16:06,660
framework APIs that allow you
to do this, but it does

395
00:16:06,660 --> 00:16:08,760
require a good bit
of extra work.

396
00:16:08,760 --> 00:16:11,180
The good news, though,
is it can be done.

397
00:16:11,180 --> 00:16:14,230
And the better news is we've
created a helper class that

398
00:16:14,230 --> 00:16:16,240
helps you do that.

399
00:16:16,240 --> 00:16:19,420
For purposes of example,
we'll use a custom

400
00:16:19,420 --> 00:16:20,480
view that we've created.

401
00:16:20,480 --> 00:16:22,300
It's bar graph view.

402
00:16:22,300 --> 00:16:26,210
This view is constructed and
populated with a title that

403
00:16:26,210 --> 00:16:30,080
you see on top there and a set
of data and an interray where

404
00:16:30,080 --> 00:16:33,060
each value in that array
represents the value of a bar

405
00:16:33,060 --> 00:16:34,920
in the bar graph.

406
00:16:34,920 --> 00:16:39,110
So the user can click on
bars to highlight them.

407
00:16:39,110 --> 00:16:43,370
And we actually draw all of
the content from this view

408
00:16:43,370 --> 00:16:44,270
with on draw.

409
00:16:44,270 --> 00:16:46,480
There's no internal views
that are used.

410
00:16:46,480 --> 00:16:49,370
We actually render the text
to a canvas, so we're not

411
00:16:49,370 --> 00:16:52,990
actually using a Text View at
all within this application.

412
00:16:52,990 --> 00:16:55,710
We also really set it focusable,
or provide any sort

413
00:16:55,710 --> 00:16:58,590
of description initially.

414
00:16:58,590 --> 00:17:02,280
And for click events, we
actually don't use a standard

415
00:17:02,280 --> 00:17:04,859
click listener, we listen for
touch events and implement our

416
00:17:04,859 --> 00:17:06,109
own click listener.

417
00:17:06,109 --> 00:17:10,480
So this is basically a perfect
storm for accessibility.

418
00:17:10,480 --> 00:17:12,920
When you interrogate this view
with TalkBack and you move

419
00:17:12,920 --> 00:17:16,109
focus to it, it speaks
nothing.

420
00:17:16,109 --> 00:17:18,190
In fact, it doesn't even receive
focus, because there's

421
00:17:18,190 --> 00:17:21,109
no actual content to speak.

422
00:17:21,109 --> 00:17:26,329
This is an example of really
the worst case scenario for

423
00:17:26,329 --> 00:17:28,560
the accessible user, when they
try to use your application

424
00:17:28,560 --> 00:17:31,920
and there's a view that's
just entirely empty.

425
00:17:31,920 --> 00:17:33,890
Luckily, we have an answer--

426
00:17:33,890 --> 00:17:36,930
an easy way for you as
developers to make this widget

427
00:17:36,930 --> 00:17:37,560
accessible.

428
00:17:37,560 --> 00:17:40,400
So I'll hand it off to Alan
who's going to demonstrate our

429
00:17:40,400 --> 00:17:41,565
new helper class.

430
00:17:41,565 --> 00:17:42,970
ALAN VIVERETTE: Thanks, Casey.

431
00:17:42,970 --> 00:17:44,180
Hi, I'm Alan Viverette.

432
00:17:44,180 --> 00:17:46,630
I'm a software engineer on
the accessibility team.

433
00:17:46,630 --> 00:17:49,060
And I'll be showing you how you
can make your custom views

434
00:17:49,060 --> 00:17:51,010
totally accessible,
support all of the

435
00:17:51,010 --> 00:17:52,480
features in Jelly Bean.

436
00:17:52,480 --> 00:17:54,680
But first, who here has
written an Android

437
00:17:54,680 --> 00:17:56,450
application?

438
00:17:56,450 --> 00:17:57,060
Quite a few.

439
00:17:57,060 --> 00:17:57,820
Awesome.

440
00:17:57,820 --> 00:18:00,130
So who here's written custom
views for an Android

441
00:18:00,130 --> 00:18:01,630
application?

442
00:18:01,630 --> 00:18:03,350
Still quite a lot of people.

443
00:18:03,350 --> 00:18:05,650
So if you're just using standard
widgets, you're off

444
00:18:05,650 --> 00:18:06,720
to a really good start.

445
00:18:06,720 --> 00:18:08,940
If you're using custom views,
you have a little bit more

446
00:18:08,940 --> 00:18:09,790
work to do.

447
00:18:09,790 --> 00:18:12,060
But first, let's take a
step back and think

448
00:18:12,060 --> 00:18:13,680
about what's in a view?

449
00:18:13,680 --> 00:18:16,150
So we've got our sample
bar graph on screen.

450
00:18:16,150 --> 00:18:18,430
And visually, it's somewhere
on the screen.

451
00:18:18,430 --> 00:18:20,200
It's got some dimensions.

452
00:18:20,200 --> 00:18:22,640
It has some information that
it's conveying to the user,

453
00:18:22,640 --> 00:18:24,780
here through both graphics
and text.

454
00:18:24,780 --> 00:18:26,070
And it has an interaction
model.

455
00:18:26,070 --> 00:18:29,810
So I can click on these bars
to change what's displayed.

456
00:18:29,810 --> 00:18:33,260
But each of these bars has
its own dimensions and

457
00:18:33,260 --> 00:18:33,800
positioning.

458
00:18:33,800 --> 00:18:35,260
It has its own information
that it's

459
00:18:35,260 --> 00:18:36,290
conveying to the user.

460
00:18:36,290 --> 00:18:37,670
It has its own interaction.

461
00:18:37,670 --> 00:18:40,440
Each bar is individually
clickable.

462
00:18:40,440 --> 00:18:42,470
And because we're not extending
view group and using

463
00:18:42,470 --> 00:18:45,620
subviews, we actually have to
expose this to accessibility

464
00:18:45,620 --> 00:18:48,470
services some other way.

465
00:18:48,470 --> 00:18:51,280
So now let's move to
accessibility node info, which

466
00:18:51,280 --> 00:18:53,850
is how an accessibility service
sees the views in your

467
00:18:53,850 --> 00:18:55,110
application.

468
00:18:55,110 --> 00:18:57,300
Again, you have dimensions
and positioning.

469
00:18:57,300 --> 00:18:58,780
You have some sort of
information that you're

470
00:18:58,780 --> 00:19:00,250
conveying to the user.

471
00:19:00,250 --> 00:19:02,320
You have some sort of
interaction model-- clicking,

472
00:19:02,320 --> 00:19:04,360
long clicking, scrolling,
et cetera.

473
00:19:04,360 --> 00:19:07,500
And most importantly,
we have child nodes.

474
00:19:07,500 --> 00:19:10,660
So even if your view isn't a
view group and doesn't have

475
00:19:10,660 --> 00:19:14,440
subviews, You can still expose
extra accessibility node info

476
00:19:14,440 --> 00:19:17,080
as children of your
top level view.

477
00:19:17,080 --> 00:19:18,870
So that's what we're
going to do here.

478
00:19:18,870 --> 00:19:21,520
Each bar is going to have an
accessibility node info that

479
00:19:21,520 --> 00:19:25,840
exposes its information to
an accessibility service.

480
00:19:25,840 --> 00:19:28,250
How do we do that?

481
00:19:28,250 --> 00:19:30,810
There's an accessibility node
provider class built into the

482
00:19:30,810 --> 00:19:33,620
framework that allows you to
create new nodes and expose

483
00:19:33,620 --> 00:19:34,970
those to the framework.

484
00:19:34,970 --> 00:19:36,150
So here we've got--

485
00:19:36,150 --> 00:19:38,070
oh, it looks like the
sample code doesn't

486
00:19:38,070 --> 00:19:38,840
all fit on the screen.

487
00:19:38,840 --> 00:19:42,162
Let's shrink that down a bit.

488
00:19:42,162 --> 00:19:45,390
Oh, we're still able to fit
everything on the screen.

489
00:19:45,390 --> 00:19:47,780
It looks like there's a lot of
code that's required to use an

490
00:19:47,780 --> 00:19:49,440
accessibility node provider.

491
00:19:49,440 --> 00:19:51,740
And in fact, there are about
12 more slides of this that

492
00:19:51,740 --> 00:19:53,990
I'm not going to go through.

493
00:19:53,990 --> 00:19:57,170
Instead, we've made an
accessibility helper class

494
00:19:57,170 --> 00:19:58,920
called ExploreByTouch helper.

495
00:19:58,920 --> 00:20:01,320
This is going to simplify
creating and exposing a

496
00:20:01,320 --> 00:20:04,110
virtual view hierarchy,
with just five

497
00:20:04,110 --> 00:20:06,130
simple abstract methods.

498
00:20:06,130 --> 00:20:06,947
This still wraps
AccessibilityNod

499
00:20:06,947 --> 00:20:10,470
eProviderCompat, which means
there's a lot of code on the

500
00:20:10,470 --> 00:20:13,660
back end that you won't have
to look at, fortunately.

501
00:20:13,660 --> 00:20:16,150
This also means it's going to
work out of the box with

502
00:20:16,150 --> 00:20:19,360
screen readers, with Braille
displays, and with some

503
00:20:19,360 --> 00:20:22,280
interfaces that you may have
never even seen before, like

504
00:20:22,280 --> 00:20:24,580
some Sip-and-Puff
or SingleSwitch.

505
00:20:24,580 --> 00:20:26,310
Most importantly, this
is backwards

506
00:20:26,310 --> 00:20:27,890
compatible with API 4.

507
00:20:27,890 --> 00:20:30,250
So even if you're targeting
Doughnut, you can still have

508
00:20:30,250 --> 00:20:32,770
full Jellybean quality
accessibility in your

509
00:20:32,770 --> 00:20:34,780
application.

510
00:20:34,780 --> 00:20:38,790
So how do we start using the
ExploreByTouchHelper class?

511
00:20:38,790 --> 00:20:41,310
Well, first, we're going to need
to delegate handling of

512
00:20:41,310 --> 00:20:44,150
certain events, both
accessibility events and touch

513
00:20:44,150 --> 00:20:46,960
events for when touch
exploration is turned on.

514
00:20:46,960 --> 00:20:49,640
We're going to actually map the
touch events from touch

515
00:20:49,640 --> 00:20:52,680
exploration to logical items
within our view.

516
00:20:52,680 --> 00:20:54,520
In this case, they'll be bars.

517
00:20:54,520 --> 00:20:56,620
And we're going to need to
expose information about these

518
00:20:56,620 --> 00:20:58,640
bars to accessibility
services.

519
00:20:58,640 --> 00:21:01,050
So these are things like
positioning and size on

520
00:21:01,050 --> 00:21:04,380
screen, actions that are
supported and informational

521
00:21:04,380 --> 00:21:07,180
content, in the form of
a content description.

522
00:21:07,180 --> 00:21:09,090
We're also going to need to
provide support for user

523
00:21:09,090 --> 00:21:10,190
interaction.

524
00:21:10,190 --> 00:21:13,150
So a user can click on a bar,
and we need to have some way

525
00:21:13,150 --> 00:21:16,930
to interact with that, change
what's displayed on screen,

526
00:21:16,930 --> 00:21:19,400
and let the framework know
what's going on.

527
00:21:19,400 --> 00:21:20,890
And finally, we're going to
test our application.

528
00:21:20,890 --> 00:21:23,230
We're going to make sure that
the same information that's

529
00:21:23,230 --> 00:21:26,420
displayed visually is exposed to
accessibility services and

530
00:21:26,420 --> 00:21:28,300
can be spoken out loud
or displayed it

531
00:21:28,300 --> 00:21:31,370
on a Braille display.

532
00:21:31,370 --> 00:21:36,500
So first, let's move over to the
device and take a look at

533
00:21:36,500 --> 00:21:38,810
the application with
accessibility turned off.

534
00:21:38,810 --> 00:21:41,600

535
00:21:41,600 --> 00:21:44,680
We've got our pretty blue
graph on the screen.

536
00:21:44,680 --> 00:21:46,980
We can touch them and
they turn yellow.

537
00:21:46,980 --> 00:21:48,880
We can see that it says bar
graph inaccessible.

538
00:21:48,880 --> 00:21:51,420
And for each bar, we can see how
high it is compared to the

539
00:21:51,420 --> 00:21:53,070
other bars.

540
00:21:53,070 --> 00:21:55,526
Let's turn on accessibility.

541
00:21:55,526 --> 00:21:58,380
ANDROID: Bar Graph I/O 2013.

542
00:21:58,380 --> 00:22:00,030
ALAN VIVERETTE: And as Casey
mentioned, we're just going to

543
00:22:00,030 --> 00:22:03,270
Read From Top to read everything
on the screen.

544
00:22:03,270 --> 00:22:04,520
ANDROID: Bar graph I/--

545
00:22:04,520 --> 00:22:07,800

546
00:22:07,800 --> 00:22:09,420
Touch the Read From Top.

547
00:22:09,420 --> 00:22:13,120
Bar graph I/O 2013.

548
00:22:13,120 --> 00:22:14,440
ALAN VIVERETTE: And it's done.

549
00:22:14,440 --> 00:22:17,080
So obviously, we're missing
some content here.

550
00:22:17,080 --> 00:22:19,950
We'd probably like to read
Bar Graph Inaccessible.

551
00:22:19,950 --> 00:22:21,963
And we'd like to get some
information out of these bars

552
00:22:21,963 --> 00:22:23,870
that are shown on screen.

553
00:22:23,870 --> 00:22:26,060
So let's start implementing
some support for

554
00:22:26,060 --> 00:22:28,490
accessibility, using our
TouchHelper class.

555
00:22:28,490 --> 00:22:31,090

556
00:22:31,090 --> 00:22:33,550
The first thing we need to do,
as I mentioned, is delegate

557
00:22:33,550 --> 00:22:35,010
accessibility support.

558
00:22:35,010 --> 00:22:38,580
So we're first going to create a
new BarGraphTouchhelper that

559
00:22:38,580 --> 00:22:40,720
extends our ExploreByTouchHelper
class.

560
00:22:40,720 --> 00:22:42,590
We'll go into the implementation
details on that

561
00:22:42,590 --> 00:22:43,780
in just a moment.

562
00:22:43,780 --> 00:22:45,890
But the first thing we're
going to do is delegate

563
00:22:45,890 --> 00:22:48,280
responsibility for accessibility
to this class

564
00:22:48,280 --> 00:22:49,530
using ViewCompat.setAc
cessibilityDelegate.

565
00:22:49,530 --> 00:22:51,540

566
00:22:51,540 --> 00:22:54,170
We're also going to dispatch
hover events first to our

567
00:22:54,170 --> 00:22:56,810
TouchHelper class, because when
ExploreByTouch is turned

568
00:22:56,810 --> 00:22:59,740
on, touching the screen is
translated into hover events.

569
00:22:59,740 --> 00:23:01,840
We need to handle these hover
events specially to let the

570
00:23:01,840 --> 00:23:05,650
framework know if we're touching
a logical item.

571
00:23:05,650 --> 00:23:08,330
So we're delegating in
two places here.

572
00:23:08,330 --> 00:23:11,280
And once we've done that, we can
start thinking about the

573
00:23:11,280 --> 00:23:15,110
implementation for our class.

574
00:23:15,110 --> 00:23:17,500
One thing that we're going to
need to worry about is mapping

575
00:23:17,500 --> 00:23:19,580
our logical items to something
that the framework

576
00:23:19,580 --> 00:23:20,600
understands.

577
00:23:20,600 --> 00:23:23,720
In this case, the framework is
going to use a virtual view id

578
00:23:23,720 --> 00:23:25,930
to reference our
logical items.

579
00:23:25,930 --> 00:23:29,290
So every view in the framework,
every actual view,

580
00:23:29,290 --> 00:23:31,610
has a virtual view ID
that gets computed.

581
00:23:31,610 --> 00:23:34,540
We're going to provide our own
virtual view IDs so that when

582
00:23:34,540 --> 00:23:36,710
the framework says, could you
give me the first child and

583
00:23:36,710 --> 00:23:38,500
the second child, the third
child, we know what they're

584
00:23:38,500 --> 00:23:39,550
talking about.

585
00:23:39,550 --> 00:23:41,510
We have to make some guarantees
about these virtual

586
00:23:41,510 --> 00:23:45,140
view ids, namely, that they're
one-to-one, which means for

587
00:23:45,140 --> 00:23:48,550
every virtual view ID, there is
only one logical item that

588
00:23:48,550 --> 00:23:49,280
it refers to.

589
00:23:49,280 --> 00:23:53,210
And for every logical item, it
has only one virtual view ID.

590
00:23:53,210 --> 00:23:55,380
We're also going to make sure
that they're stable, which

591
00:23:55,380 --> 00:23:58,500
means that when we refer to
virtual view id 0, it's always

592
00:23:58,500 --> 00:24:01,570
going to refer to the
same logical item.

593
00:24:01,570 --> 00:24:03,690
We also have to make sure that
they're non-negative.

594
00:24:03,690 --> 00:24:06,000
there's certain negative virtual
view ids that are used

595
00:24:06,000 --> 00:24:07,690
internally by the framework.

596
00:24:07,690 --> 00:24:11,120
So we have half range, which
is a good amount of

597
00:24:11,120 --> 00:24:13,420
virtual view ids.

598
00:24:13,420 --> 00:24:16,470
For a bar graph view, we can
actually just reuse the data

599
00:24:16,470 --> 00:24:17,520
rate indices.

600
00:24:17,520 --> 00:24:20,620
So we passed in an interray when
we were creating it, and

601
00:24:20,620 --> 00:24:23,120
we're displaying these bars on
screen in the order that they

602
00:24:23,120 --> 00:24:24,350
are in in the interray.

603
00:24:24,350 --> 00:24:27,920
So our first bar, index 0,
is at the very far left.

604
00:24:27,920 --> 00:24:31,090
We can go ahead and assign
that virtual view id 0.

605
00:24:31,090 --> 00:24:33,840
We can maintain this mapping for
all of the array indices

606
00:24:33,840 --> 00:24:36,730
in their array, because it's
one-to-one, it's stable, and

607
00:24:36,730 --> 00:24:39,460
because it's an array index,
it has to be non-negative.

608
00:24:39,460 --> 00:24:42,370
So we'll just map directly,
virtual view id,

609
00:24:42,370 --> 00:24:44,970
index within the array.

610
00:24:44,970 --> 00:24:47,240
Now that we have a mapping, we
can start to expose some of

611
00:24:47,240 --> 00:24:50,020
the on screen content to
accessibility services.

612
00:24:50,020 --> 00:24:52,010
So the first thing we're
going to do is override

613
00:24:52,010 --> 00:24:53,250
getVirtualViewIdAt.

614
00:24:53,250 --> 00:24:55,570
This is the first of five
methods that we've be

615
00:24:55,570 --> 00:24:57,100
overriding in this class.

616
00:24:57,100 --> 00:24:59,750
We're going to take an xy
coordinate on the screen in

617
00:24:59,750 --> 00:25:03,560
view relative coordinates, so 0,
0 is the top left of my bar

618
00:25:03,560 --> 00:25:04,860
graph view.

619
00:25:04,860 --> 00:25:07,220
And we're going to reuse the
same method we used for hit

620
00:25:07,220 --> 00:25:09,370
detection in onTouchEvent.

621
00:25:09,370 --> 00:25:12,870
So you noticed during the demo
with accessibility turned off,

622
00:25:12,870 --> 00:25:15,100
I could touch a bar and
it would change color.

623
00:25:15,100 --> 00:25:17,670
That's because I'm overriding
onTouchEvent in my view.

624
00:25:17,670 --> 00:25:20,090
I'm taking the xy coordinate,
figuring out which bar the

625
00:25:20,090 --> 00:25:23,680
user is touching and changing
some of its properties.

626
00:25:23,680 --> 00:25:26,100
So we can just reuse this
method, return to the

627
00:25:26,100 --> 00:25:27,480
index in the array.

628
00:25:27,480 --> 00:25:29,760
Because I'm mapping directly
for indexed to virtual view

629
00:25:29,760 --> 00:25:33,360
id, I just check to see whether
I got a valid index.

630
00:25:33,360 --> 00:25:35,070
If I did, I return it.

631
00:25:35,070 --> 00:25:37,490
If I didn't, I return
the special constant

632
00:25:37,490 --> 00:25:40,300
ExploreByTouchHe
lper.INVALID_ID.

633
00:25:40,300 --> 00:25:42,950
And what this tells the
ExploreByTouchHelper class is

634
00:25:42,950 --> 00:25:45,460
that the user touched the
screen, but they didn't touch

635
00:25:45,460 --> 00:25:48,440
any of the logical items within
my view, which means

636
00:25:48,440 --> 00:25:51,370
most likely the touch will
fall to the view itself.

637
00:25:51,370 --> 00:25:53,350
If it's not handled by the view
itself, it might fall

638
00:25:53,350 --> 00:25:55,240
under that.

639
00:25:55,240 --> 00:25:58,170
We're also going to override
getVisibleVirtualViewIds,

640
00:25:58,170 --> 00:26:00,990
method two of five that we'll
be overriding, and this lets

641
00:26:00,990 --> 00:26:03,790
the framework know both the
items that are visible on

642
00:26:03,790 --> 00:26:06,130
screen through virtual
view IDs.

643
00:26:06,130 --> 00:26:08,860
And the order in which we'd like
them to be navigated by

644
00:26:08,860 --> 00:26:10,220
Swype navigation.

645
00:26:10,220 --> 00:26:15,040
So as long as I populate this 0
1 2 3 4, as the user swipes

646
00:26:15,040 --> 00:26:20,210
right, they'll hit bar 0, bar
1, bar 2, bar 3, in order.

647
00:26:20,210 --> 00:26:23,390
If I have something more
complicated, say I have two

648
00:26:23,390 --> 00:26:25,970
rows of bars and maybe I want
to do the first bar, the

649
00:26:25,970 --> 00:26:27,900
second bar, the third
bar, the fourth bar.

650
00:26:27,900 --> 00:26:30,300
As long as I pass those into
the array in the same order

651
00:26:30,300 --> 00:26:32,170
that I want them to be
navigated, that's what the

652
00:26:32,170 --> 00:26:34,200
user will see.

653
00:26:34,200 --> 00:26:38,220
So now we have those two down,
what else do we need to do?

654
00:26:38,220 --> 00:26:41,400
Well, once a user touches
something, TalkBack is going

655
00:26:41,400 --> 00:26:42,950
to speak, BrailleBack
is going to display

656
00:26:42,950 --> 00:26:43,980
something on the screen.

657
00:26:43,980 --> 00:26:48,270
We need to expose information
that we convey to the user.

658
00:26:48,270 --> 00:26:51,130
So the first thing we need to
think about is what type of

659
00:26:51,130 --> 00:26:52,800
information.

660
00:26:52,800 --> 00:26:54,940
When something is spoken out
loud, you have to think about

661
00:26:54,940 --> 00:26:57,480
the efficiency and the
importance of the items that

662
00:26:57,480 --> 00:26:58,650
you're trying to convey.

663
00:26:58,650 --> 00:27:00,900
So here each bar has
two properties--

664
00:27:00,900 --> 00:27:02,490
its indexes within the array--

665
00:27:02,490 --> 00:27:04,040
where it's displayed
on screen--

666
00:27:04,040 --> 00:27:05,710
and its value.

667
00:27:05,710 --> 00:27:08,660
And we want when a user touches
the screen at random

668
00:27:08,660 --> 00:27:10,580
them to know where they
are, what type of

669
00:27:10,580 --> 00:27:11,810
items they're touching.

670
00:27:11,810 --> 00:27:13,980
So we're going to
say bar first.

671
00:27:13,980 --> 00:27:16,660
Bar is really short, and so a
user, if they're moving around

672
00:27:16,660 --> 00:27:19,400
the screen very quickly, isn't
going to have to wait very

673
00:27:19,400 --> 00:27:21,290
long to know what they're
touching.

674
00:27:21,290 --> 00:27:22,990
And if they're trying to
distinguish between different

675
00:27:22,990 --> 00:27:26,430
bars on screen, they'll very
quickly hear the index.

676
00:27:26,430 --> 00:27:29,530
So we'll speak something
like bar 0, value 5.

677
00:27:29,530 --> 00:27:31,330
And because we have a
highlighted state, we're going

678
00:27:31,330 --> 00:27:33,750
to provide a separate content
description that says

679
00:27:33,750 --> 00:27:37,470
something like bar 0,
value 5 highlighted.

680
00:27:37,470 --> 00:27:39,500
We've just written a quick
helper method here that takes

681
00:27:39,500 --> 00:27:42,380
an index within the array,
gets the value, check the

682
00:27:42,380 --> 00:27:45,380
highlighted property, and
populates the right template,

683
00:27:45,380 --> 00:27:46,580
returns a string.

684
00:27:46,580 --> 00:27:48,950
We're going to use that string
to populate a content

685
00:27:48,950 --> 00:27:51,320
description for a accessibility
event.

686
00:27:51,320 --> 00:27:53,800
So this is the third method
that we're overriding,

687
00:27:53,800 --> 00:27:55,050
populateEventForVirtualViewId.

688
00:27:55,050 --> 00:27:57,360

689
00:27:57,360 --> 00:27:59,890
Accessibility events are used
by the framework to let the

690
00:27:59,890 --> 00:28:01,970
accessibility service know
what's going on your

691
00:28:01,970 --> 00:28:02,760
application.

692
00:28:02,760 --> 00:28:05,310
So for example, when you click
on a view, there's a view

693
00:28:05,310 --> 00:28:06,250
click to that.

694
00:28:06,250 --> 00:28:08,390
When you scroll, there's
a view scrolled event.

695
00:28:08,390 --> 00:28:10,200
We're going to populate these
with the right content

696
00:28:10,200 --> 00:28:14,660
description for the logical item
that's sending the event.

697
00:28:14,660 --> 00:28:16,990
We also need to expose a little
bit more information

698
00:28:16,990 --> 00:28:18,510
about nodes.

699
00:28:18,510 --> 00:28:20,900
We can expose the content
description as we did in the

700
00:28:20,900 --> 00:28:22,100
accessibility event.

701
00:28:22,100 --> 00:28:23,830
We're also going to
expose the user

702
00:28:23,830 --> 00:28:25,680
interactions that are supported.

703
00:28:25,680 --> 00:28:28,150
And here, you may remember, I
was able to tap on a bar to

704
00:28:28,150 --> 00:28:29,270
change its properties.

705
00:28:29,270 --> 00:28:31,150
So we're going to add
a click event.

706
00:28:31,150 --> 00:28:34,180
So that if the user double taps
on the screen, or if a

707
00:28:34,180 --> 00:28:37,460
user clicks on their Braille
display, it will have the same

708
00:28:37,460 --> 00:28:40,970
behavior as if I had tapped it
with accessibility turned off.

709
00:28:40,970 --> 00:28:44,360
We're also going to set the
bounds within the parent view

710
00:28:44,360 --> 00:28:46,270
using getBoundsForIndex.

711
00:28:46,270 --> 00:28:49,570
Now this is the same method that
we're using in onDraw to

712
00:28:49,570 --> 00:28:52,630
figure out where to draw the bar
onscreen when we fill it

713
00:28:52,630 --> 00:28:55,220
with that blue color and
occasionally we fill it with

714
00:28:55,220 --> 00:28:57,250
that yellow highlight.

715
00:28:57,250 --> 00:29:00,330
And this is going to ensure
consistency with our onDraw,

716
00:29:00,330 --> 00:29:03,980
so that exactly where you touch
on screen is exactly

717
00:29:03,980 --> 00:29:06,870
where our yellow focus highlight
will be placed and

718
00:29:06,870 --> 00:29:10,480
exactly where you'll get
feedback for a logical item.

719
00:29:10,480 --> 00:29:12,390
So you may notice,
we're reusing

720
00:29:12,390 --> 00:29:13,770
methods pretty heavily.

721
00:29:13,770 --> 00:29:17,290
And this is why it's so easy to
use ExploreByTouchHelper to

722
00:29:17,290 --> 00:29:20,160
implement accessibility
in your custom view.

723
00:29:20,160 --> 00:29:23,270
All right, so now that we've
exposed properties about our

724
00:29:23,270 --> 00:29:28,700
items, let's take another look
at our application and see how

725
00:29:28,700 --> 00:29:31,260
it looks with accessibility
turned on now.

726
00:29:31,260 --> 00:29:33,270
All right, so we'll switch
over to our bar graph

727
00:29:33,270 --> 00:29:39,000
interactive and, when I
do Read All From Top--

728
00:29:39,000 --> 00:29:39,780
ANDROID: Read from top.

729
00:29:39,780 --> 00:29:42,450
Bar graph 1/0 2013.

730
00:29:42,450 --> 00:29:44,780
Bar 0, value minus 5.

731
00:29:44,780 --> 00:29:46,930
Bar 1, value minus 4.

732
00:29:46,930 --> 00:29:49,110
Bar 2, value minus 2.

733
00:29:49,110 --> 00:29:50,930
Bar 3, value 0.

734
00:29:50,930 --> 00:29:52,660
Bar 4, value 2.

735
00:29:52,660 --> 00:29:54,440
Bar 5, value 4.

736
00:29:54,440 --> 00:29:56,710
Bar 6, value 5.

737
00:29:56,710 --> 00:29:57,140
ALAN VIVERETTE: All right.

738
00:29:57,140 --> 00:29:59,130
So we're reading out the
bar descriptions.

739
00:29:59,130 --> 00:29:59,730
That's great.

740
00:29:59,730 --> 00:30:01,500
We've got the yellow focus
highlight onscreen.

741
00:30:01,500 --> 00:30:02,430
That's awesome.

742
00:30:02,430 --> 00:30:05,100
Let's touch it and make sure
that it works correctly.

743
00:30:05,100 --> 00:30:08,450
ANDROID: Bar 5, bar
4, bar 3, bar 1.

744
00:30:08,450 --> 00:30:10,140
Value minus 4.

745
00:30:10,140 --> 00:30:10,470
ALAN VIVERETTE: Right?

746
00:30:10,470 --> 00:30:12,910
Everything seems pretty close.

747
00:30:12,910 --> 00:30:16,400
But we're missing one important
thing here.

748
00:30:16,400 --> 00:30:18,480
That's the title of
the bar graph.

749
00:30:18,480 --> 00:30:22,140
So we need some way to expose
this to the user.

750
00:30:22,140 --> 00:30:24,260
We're going to do this--

751
00:30:24,260 --> 00:30:28,460
oh, sorry, the next thing we're
going to do is Respond

752
00:30:28,460 --> 00:30:29,940
To Actions.

753
00:30:29,940 --> 00:30:33,140
So we're going to be
able to click on a

754
00:30:33,140 --> 00:30:34,920
view by double tapping.

755
00:30:34,920 --> 00:30:39,060
So when we added our
ACTION_CLICK in populate node,

756
00:30:39,060 --> 00:30:41,820
we need to also handle that
later by overriding the

757
00:30:41,820 --> 00:30:45,720
performActionForVirtualViewID
method.

758
00:30:45,720 --> 00:30:49,180
We're going to use the same
method we used in onTouchEvent

759
00:30:49,180 --> 00:30:51,110
to actually perform
the bar click.

760
00:30:51,110 --> 00:30:52,650
So we've got onBar clicked.

761
00:30:52,650 --> 00:30:55,110
This is going to invalidate the
view so that it's redrawn

762
00:30:55,110 --> 00:30:56,190
with the highlight.

763
00:30:56,190 --> 00:30:59,600
This is going to change the
internal highlight state, so

764
00:30:59,600 --> 00:31:02,760
that we can draw that bar
with a different color.

765
00:31:02,760 --> 00:31:05,090
And that's the only action
that we need to handle,

766
00:31:05,090 --> 00:31:06,510
because that's the only
action then we

767
00:31:06,510 --> 00:31:08,550
added in populate node.

768
00:31:08,550 --> 00:31:11,370
We also need to let the
framework know that the action

769
00:31:11,370 --> 00:31:13,010
happened successfully.

770
00:31:13,010 --> 00:31:16,340
So we're going to invalidate
the virtual view id because

771
00:31:16,340 --> 00:31:17,610
we're changing the
highlight state.

772
00:31:17,610 --> 00:31:21,120
We're changing a property
of the virtual view.

773
00:31:21,120 --> 00:31:23,240
And we're going to send an event
for that virtual view

774
00:31:23,240 --> 00:31:27,160
that lets the framework know it
performed a click action.

775
00:31:27,160 --> 00:31:30,010
So we send event for virtual
view ID, which is a method on

776
00:31:30,010 --> 00:31:32,650
our TouchHelper class, with
TYPE_VIEW_CLICKED.

777
00:31:32,650 --> 00:31:35,930
This will provide feedback in
the framework, a little haptic

778
00:31:35,930 --> 00:31:38,920
feedback and a little auditory
feedback, that lets it know

779
00:31:38,920 --> 00:31:43,030
and lets the user know that
something happened.

780
00:31:43,030 --> 00:31:47,080
So now we have support for user
interaction, do one last

781
00:31:47,080 --> 00:31:49,890
thing and go back
to the device.

782
00:31:49,890 --> 00:31:52,590

783
00:31:52,590 --> 00:31:54,140
So we already read through.

784
00:31:54,140 --> 00:31:56,000
We noticed that we're
missing one thing.

785
00:31:56,000 --> 00:31:57,520
Let's make sure that
touching--

786
00:31:57,520 --> 00:31:59,210
ANDROID: Bar 5, value 4.

787
00:31:59,210 --> 00:32:02,100
ALAN VIVERETTE: --and clicking
work correctly.

788
00:32:02,100 --> 00:32:04,720
So we're good there, and now
if we touch the bar again,

789
00:32:04,720 --> 00:32:06,980
ANDROID: Bar 5, value
4 highlighted.

790
00:32:06,980 --> 00:32:07,335
ALAN VIVERETTE: All right.

791
00:32:07,335 --> 00:32:08,590
And we hear highlighted.

792
00:32:08,590 --> 00:32:10,360
So we're good to go there.

793
00:32:10,360 --> 00:32:12,490
We have one thing missing
that I mentioned.

794
00:32:12,490 --> 00:32:16,010
When we touch the bar graph
itself, we should really be

795
00:32:16,010 --> 00:32:17,760
reading bar graph interactive.

796
00:32:17,760 --> 00:32:19,800
And we might want to provide
some additional information to

797
00:32:19,800 --> 00:32:24,320
the user just to give them an
idea of what's onscreen there.

798
00:32:24,320 --> 00:32:26,530
So we're going to polish
the user experience.

799
00:32:26,530 --> 00:32:28,830
We're going to add another
string that describes the bar

800
00:32:28,830 --> 00:32:30,080
graph view itself.

801
00:32:30,080 --> 00:32:33,920

802
00:32:33,920 --> 00:32:36,380
So we're going to populate the
string with the title of the

803
00:32:36,380 --> 00:32:39,510
bar graph, the type of widget
that it is, and the number of

804
00:32:39,510 --> 00:32:40,620
bars that are on the screen.

805
00:32:40,620 --> 00:32:42,560
The ordering here is
very important.

806
00:32:42,560 --> 00:32:45,440
So when I touch the bar graph,
what I really want to know is

807
00:32:45,440 --> 00:32:47,090
what is it that I'm touching?

808
00:32:47,090 --> 00:32:49,060
It's a bar graph with a title.

809
00:32:49,060 --> 00:32:52,010
If I have multiple bar graphs
onscreen, the most important

810
00:32:52,010 --> 00:32:53,830
thing to me is going to be
what's shown in that bar

811
00:32:53,830 --> 00:32:55,220
graph, what's the title.

812
00:32:55,220 --> 00:32:57,420
The second most important thing
is the type of widget.

813
00:32:57,420 --> 00:32:59,360
It's a bar graph, which lets
me know that it's going to

814
00:32:59,360 --> 00:33:02,190
contain a couple of subviews
and the type of information

815
00:33:02,190 --> 00:33:03,195
that will be seen.

816
00:33:03,195 --> 00:33:06,220
I'm also going to say how
many bars are shown.

817
00:33:06,220 --> 00:33:07,410
This is a little extra.

818
00:33:07,410 --> 00:33:09,690
And this just tells the user
how many things they can

819
00:33:09,690 --> 00:33:12,080
expect to touch when they're
moving their finger across the

820
00:33:12,080 --> 00:33:14,590
screen or Swyping
left and right.

821
00:33:14,590 --> 00:33:18,235
So we have a setTitle method
that we've implemented on our

822
00:33:18,235 --> 00:33:19,390
bar graph view.

823
00:33:19,390 --> 00:33:22,010
This sets the internal title
which is drawn onscreen.

824
00:33:22,010 --> 00:33:24,950
This invalidates the view,
which redraws the title.

825
00:33:24,950 --> 00:33:28,150
And we're going to set the
content description based on

826
00:33:28,150 --> 00:33:31,060
the bar count by populating
this template that we've

827
00:33:31,060 --> 00:33:34,200
created with the title
and bar count.

828
00:33:34,200 --> 00:33:38,830
So now we've tested and we've
ensured the same information

829
00:33:38,830 --> 00:33:41,590
that we can see visually
onscreen is communicated to an

830
00:33:41,590 --> 00:33:46,090
accessibility service, let's go
back to the application and

831
00:33:46,090 --> 00:33:47,660
do Read All From Top
to make sure that

832
00:33:47,660 --> 00:33:48,910
everything makes sense.

833
00:33:48,910 --> 00:33:51,540

834
00:33:51,540 --> 00:33:52,790
ANDROID: Bar graph I/--

835
00:33:52,790 --> 00:33:54,860

836
00:33:54,860 --> 00:33:55,910
Read From Top.

837
00:33:55,910 --> 00:33:58,510
Bar graph I/O 2013.

838
00:33:58,510 --> 00:33:59,880
Bar graph Accessible.

839
00:33:59,880 --> 00:34:01,400
Showing seven bars.

840
00:34:01,400 --> 00:34:04,100
Bar 0, value minus 5.

841
00:34:04,100 --> 00:34:05,010
ALAN VIVERETTE: And we
just saw this so I'm

842
00:34:05,010 --> 00:34:05,850
going to skip it.

843
00:34:05,850 --> 00:34:09,850
But as you can see, my bar graph
view, despite not being

844
00:34:09,850 --> 00:34:12,500
a view group, not having any
views inside of it, is now

845
00:34:12,500 --> 00:34:15,060
totally transparently
accessible

846
00:34:15,060 --> 00:34:16,670
using Jellybean APIs.

847
00:34:16,670 --> 00:34:18,760
And this runs on Doughnut.

848
00:34:18,760 --> 00:34:21,030
It won't have the same Jellybean
accessibility.

849
00:34:21,030 --> 00:34:23,630
But your application will
still compile and run

850
00:34:23,630 --> 00:34:25,860
perfectly fine.

851
00:34:25,860 --> 00:34:30,900
So just to summarize the
ExploreByTouchHelper class, it

852
00:34:30,900 --> 00:34:33,020
looked like it was going to be
really difficult to implement

853
00:34:33,020 --> 00:34:34,540
custom view accessibility.

854
00:34:34,540 --> 00:34:36,980
But it's actually really easy.

855
00:34:36,980 --> 00:34:39,210
It's five methods that
you override.

856
00:34:39,210 --> 00:34:41,670
And you're just reusing things
that you've already written

857
00:34:41,670 --> 00:34:44,679
for the visual aspect
of your application.

858
00:34:44,679 --> 00:34:48,570
So to conclude the talk, writing
accessible Android

859
00:34:48,570 --> 00:34:52,150
applications is actually very
easy, especially if you're

860
00:34:52,150 --> 00:34:54,750
using built-in Android widgets,
adding content

861
00:34:54,750 --> 00:34:56,690
descriptions where appropriate,
maybe you're

862
00:34:56,690 --> 00:34:59,370
associating labels
with controls.

863
00:34:59,370 --> 00:35:01,930
If you're using custom views,
you may want to use the

864
00:35:01,930 --> 00:35:04,460
ExploreByTouchHelper class
to simplify things--

865
00:35:04,460 --> 00:35:07,065
a very easy way to make your
application accessible.

866
00:35:07,065 --> 00:35:09,730
And if you're using web content,
just follow best

867
00:35:09,730 --> 00:35:12,600
practices for web
accessibility.

868
00:35:12,600 --> 00:35:15,160
Now if you do all of these
things, your application is

869
00:35:15,160 --> 00:35:17,430
going to be accessible
to more users.

870
00:35:17,430 --> 00:35:20,430
Every Android phone has
accessibility baked in.

871
00:35:20,430 --> 00:35:22,630
If you pull out your phone,
you go to Settings

872
00:35:22,630 --> 00:35:25,180
Accessibility, you can turn
on TalkBack yourself

873
00:35:25,180 --> 00:35:26,630
and you can try this.

874
00:35:26,630 --> 00:35:28,940
If you have a Braille display,
or if you don't have a Braille

875
00:35:28,940 --> 00:35:31,650
display, you can use the overlay
to check BrailleBack

876
00:35:31,650 --> 00:35:33,440
with your application.

877
00:35:33,440 --> 00:35:36,640
There are also various other
ways of interacting with the

878
00:35:36,640 --> 00:35:39,660
device, including Sip-and-Puff
interfaces and switch access.

879
00:35:39,660 --> 00:35:42,080
If it works with TalkBack, if
it works with BrailleBack,

880
00:35:42,080 --> 00:35:44,620
there's a very good chance that
it'll work perfectly with

881
00:35:44,620 --> 00:35:46,980
these alternate interfaces.

882
00:35:46,980 --> 00:35:49,610
So Android's built-in
accessibility support

883
00:35:49,610 --> 00:35:53,340
guarantees that if you have good
accessibility, you have a

884
00:35:53,340 --> 00:35:56,470
good application, and you have
good usability for everyone,

885
00:35:56,470 --> 00:35:58,730
you'll have a larger
user base.

886
00:35:58,730 --> 00:36:01,120
You'll have happier users.

887
00:36:01,120 --> 00:36:04,650
So I hope everybody learned
something here today.

888
00:36:04,650 --> 00:36:06,910
You can check out the source
code from the slides on

889
00:36:06,910 --> 00:36:08,920
eyes-free.googlecode.com.

890
00:36:08,920 --> 00:36:11,520
We've got demos in the sandbox
here on a second floor.

891
00:36:11,520 --> 00:36:13,290
And we've got office
hours immediately

892
00:36:13,290 --> 00:36:14,390
following the talk.

893
00:36:14,390 --> 00:36:16,040
We also have plenty of
time for questions.

894
00:36:16,040 --> 00:36:19,000
So please stand at the
microphones in the aisles if

895
00:36:19,000 --> 00:36:21,640
you have any questions, and
we will answer them.

896
00:36:21,640 --> 00:36:24,054
Thanks again.

897
00:36:24,054 --> 00:36:32,420
AUDIENCE: [APPLAUSE]

898
00:36:32,420 --> 00:36:33,670
ALAN VIVERETTE: Any questions?

899
00:36:33,670 --> 00:36:45,880

900
00:36:45,880 --> 00:36:47,370
AUDIENCE: My name
is Steve Jacobs.

901
00:36:47,370 --> 00:36:49,650
And I really don't
have a question.

902
00:36:49,650 --> 00:36:51,190
I'm not even a developer.

903
00:36:51,190 --> 00:36:55,130
But we have an Android
development company.

904
00:36:55,130 --> 00:36:58,560
And one thing that wasn't
mentioned during the session

905
00:36:58,560 --> 00:37:04,220
is the business driver behind
accessible design, above and

906
00:37:04,220 --> 00:37:07,570
beyond accommodating the access
needs of people with

907
00:37:07,570 --> 00:37:09,260
disabilities.

908
00:37:09,260 --> 00:37:13,030
And you could tell I'm an
accessibility advocate.

909
00:37:13,030 --> 00:37:16,730
But if you look at our global
market and you look at the top

910
00:37:16,730 --> 00:37:21,170
five highest potential markets,
they spell cyber--

911
00:37:21,170 --> 00:37:22,280
C-I-B-I-R--

912
00:37:22,280 --> 00:37:25,690
China, India, Brazil Indonesia
and Russia.

913
00:37:25,690 --> 00:37:28,410
If you look at the number of
people who never learned to

914
00:37:28,410 --> 00:37:31,060
read, this can help them.

915
00:37:31,060 --> 00:37:35,780
If you look at the number of
people who are aging, like me,

916
00:37:35,780 --> 00:37:37,690
you're talking half
a billion people.

917
00:37:37,690 --> 00:37:41,730
A billion and a half or more
people never learned to read.

918
00:37:41,730 --> 00:37:44,720
There are English language
learners.

919
00:37:44,720 --> 00:37:48,600
Being able to highlight text
as it's being read, using

920
00:37:48,600 --> 00:37:51,490
text-to-speech can help them.

921
00:37:51,490 --> 00:37:54,290
In addition to people with
print disabilities--

922
00:37:54,290 --> 00:37:57,380
and we're not just talking
about blindness and other

923
00:37:57,380 --> 00:37:59,110
vision impairments--

924
00:37:59,110 --> 00:38:02,110
but learning disabilities,
cognitive disabilities,

925
00:38:02,110 --> 00:38:07,620
mobility disabilities, and
learning disabilities, which

926
00:38:07,620 --> 00:38:11,970
represents about 25% of
students in class.

927
00:38:11,970 --> 00:38:17,230
50% of students taking math
have difficulty with math.

928
00:38:17,230 --> 00:38:22,020
Accompanying learning math with
text-to-speech, having

929
00:38:22,020 --> 00:38:25,650
images read out, having text
highlighted, having math

930
00:38:25,650 --> 00:38:29,160
formulas read to you actually
strengthens the learning

931
00:38:29,160 --> 00:38:30,480
experience.

932
00:38:30,480 --> 00:38:35,010
So accessibility is about far
more than just accommodating

933
00:38:35,010 --> 00:38:36,890
people with disabilities.

934
00:38:36,890 --> 00:38:40,580
And I wanted to make sure that
the message got out loud and

935
00:38:40,580 --> 00:38:42,850
clear during this session.

936
00:38:42,850 --> 00:38:46,610
So I hope you don't mind my
taking the mic to say that.

937
00:38:46,610 --> 00:38:48,290
Thanks.

938
00:38:48,290 --> 00:38:52,900
AUDIENCE: [APPLAUSE]

939
00:38:52,900 --> 00:38:54,700
TV RAMAN: Thank you for
saying that, Steve.

940
00:38:54,700 --> 00:38:58,030
And to echo what Steve said,
you heard the numbers

941
00:38:58,030 --> 00:39:00,500
yesterday, the number of
devices, you heard the number

942
00:39:00,500 --> 00:39:01,850
of app downloads.

943
00:39:01,850 --> 00:39:05,090
But more importantly, you heard
the number of people in

944
00:39:05,090 --> 00:39:08,320
the world who don't yet have
access to technology.

945
00:39:08,320 --> 00:39:13,160
And as Steve pointed out, as we
start touching that segment

946
00:39:13,160 --> 00:39:15,950
of the world's population that
isn't yet touched by

947
00:39:15,950 --> 00:39:19,300
technology, all of these things
that we're showing you

948
00:39:19,300 --> 00:39:22,370
and that we are showing
you in our sandbox are

949
00:39:22,370 --> 00:39:23,800
really, really relevant.

950
00:39:23,800 --> 00:39:27,410
And in terms of advancing
education, in terms of

951
00:39:27,410 --> 00:39:29,650
advancing access to technology,
in terms of

952
00:39:29,650 --> 00:39:32,700
bettering people's lives, the
impact you have is huge.

953
00:39:32,700 --> 00:39:36,260
And as Alan pointed out, it's
very, very easy to do.

954
00:39:36,260 --> 00:39:38,490
And that's what it is so
wonderful about the

955
00:39:38,490 --> 00:39:40,050
opportunity we all
have together.

956
00:39:40,050 --> 00:39:43,208

957
00:39:43,208 --> 00:39:44,160
ALAN VIVERETTE: Yes?

958
00:39:44,160 --> 00:39:47,740
AUDIENCE: So is this working?

959
00:39:47,740 --> 00:39:49,000
My name is Guarang.

960
00:39:49,000 --> 00:39:51,220
And I've got a question.

961
00:39:51,220 --> 00:39:53,960
Is it possible to switch on
the accessibility features

962
00:39:53,960 --> 00:39:56,890
without necessarily switching
on TalkBack?

963
00:39:56,890 --> 00:40:00,440
Or rather, is it possible to
programmatically switch on

964
00:40:00,440 --> 00:40:01,840
TalkBack within the app?

965
00:40:01,840 --> 00:40:04,350

966
00:40:04,350 --> 00:40:06,510
ALAN VIVERETTE: So let's see.

967
00:40:06,510 --> 00:40:09,040
It is possible to use the
accessibility features without

968
00:40:09,040 --> 00:40:14,100
TalkBack if you have an
accessibility service that is

969
00:40:14,100 --> 00:40:15,390
not TalkBack.

970
00:40:15,390 --> 00:40:17,520
For example, BrailleBack.

971
00:40:17,520 --> 00:40:21,940
It is not currently possible
turn off speech output, but

972
00:40:21,940 --> 00:40:23,980
you can always mute your phone
if you don't want it talking

973
00:40:23,980 --> 00:40:26,080
while you have TalkBack
turned on.

974
00:40:26,080 --> 00:40:31,060
As we showed during the talk,
you can pause TalkBack--

975
00:40:31,060 --> 00:40:33,930
actually let's switch back
to the device real quick.

976
00:40:33,930 --> 00:40:39,860
So you can pause TalkBack by
doing the down right and--

977
00:40:39,860 --> 00:40:41,015
ANDROID: Pause feedback.

978
00:40:41,015 --> 00:40:42,930
ALAN VIVERETTE: --pausing
feedback, at which point

979
00:40:42,930 --> 00:40:44,460
TalkBack is basically
turned off.

980
00:40:44,460 --> 00:40:46,100
And you can turn in back
on really quick.

981
00:40:46,100 --> 00:40:47,880
This is great if you're a
developer and you just need to

982
00:40:47,880 --> 00:40:50,670
do quick testing, switch back to
having accessibility off to

983
00:40:50,670 --> 00:40:53,240
figure out what's
wrong, go back.

984
00:40:53,240 --> 00:40:54,835
Does that answer
your question?

985
00:40:54,835 --> 00:40:58,640
AUDIENCE: Well, actually, what
I was asking is if I want

986
00:40:58,640 --> 00:41:01,630
TalkBack-like features, but I
don't want my users to switch

987
00:41:01,630 --> 00:41:02,790
on TalkBack all the time.

988
00:41:02,790 --> 00:41:03,720
ALAN VIVERETTE: I see.

989
00:41:03,720 --> 00:41:06,710
Yeah, that's a great candidate
for writing an accessibility

990
00:41:06,710 --> 00:41:09,720
service, if you want some of
the features, maybe the

991
00:41:09,720 --> 00:41:12,800
ability to read notifications
out loud as they're received.

992
00:41:12,800 --> 00:41:15,350
And we've seen a lot of great
applications that rely on the

993
00:41:15,350 --> 00:41:16,970
accessibility framework.

994
00:41:16,970 --> 00:41:19,250
I should mention TalkBack
is totally open source.

995
00:41:19,250 --> 00:41:21,280
So if you have any questions
about how something is

996
00:41:21,280 --> 00:41:23,520
implemented in an accessibility
service, you can

997
00:41:23,520 --> 00:41:26,790
check that out again at
eyes-free.googlecode.com.

998
00:41:26,790 --> 00:41:27,940
CASEY BURKHARDT: BrailleBack
as well.

999
00:41:27,940 --> 00:41:29,047
ALAN VIVERETTE: And BrailleBack
back as well is

1000
00:41:29,047 --> 00:41:30,180
open source.

1001
00:41:30,180 --> 00:41:33,880
TV RAMAN: So to quick round off
that question, those of

1002
00:41:33,880 --> 00:41:37,090
you who are familiar with the
accessibility stack probably

1003
00:41:37,090 --> 00:41:38,440
already realize this.

1004
00:41:38,440 --> 00:41:40,890
So Android accessibility
is layered.

1005
00:41:40,890 --> 00:41:44,410
The framework has accessibility
APIs.

1006
00:41:44,410 --> 00:41:47,390
It provides things like
accessibility actions, all of

1007
00:41:47,390 --> 00:41:49,440
which are covered in
previous talks.

1008
00:41:49,440 --> 00:41:52,780
And then you write an
accessibility service that

1009
00:41:52,780 --> 00:41:53,670
never adjusts these.

1010
00:41:53,670 --> 00:41:56,540
TalkBack is the one that
exercises pretty much every

1011
00:41:56,540 --> 00:41:59,340
corner of that API and
those services.

1012
00:41:59,340 --> 00:42:04,920
But there's nothing sacrosanct
about TalkBack as the only

1013
00:42:04,920 --> 00:42:05,880
accessibility service.

1014
00:42:05,880 --> 00:42:09,310
In fact, you actually have to
turn TalkBack on for it to be

1015
00:42:09,310 --> 00:42:11,040
active through the accessibility
setting.

1016
00:42:11,040 --> 00:42:14,330
So as Alan said, you can
write TalkBack Lite.

1017
00:42:14,330 --> 00:42:15,980
You can write TalkBack Deluxe.

1018
00:42:15,980 --> 00:42:20,310
You can write TalkBack Lite
Lite, whatever, and get the

1019
00:42:20,310 --> 00:42:21,570
experience you want.

1020
00:42:21,570 --> 00:42:23,650
And that's how the framework
is created.

1021
00:42:23,650 --> 00:42:27,000
So an accessibility service
has three aspects to it.

1022
00:42:27,000 --> 00:42:30,880
One is querying what's on the
display, what's in the view

1023
00:42:30,880 --> 00:42:35,010
hierarchy, and getting a full
handle on the user interface.

1024
00:42:35,010 --> 00:42:38,550
The other is providing feedback
to the user, using

1025
00:42:38,550 --> 00:42:40,560
whatever modality they
are using, be that

1026
00:42:40,560 --> 00:42:42,140
speech, be that Braille.

1027
00:42:42,140 --> 00:42:46,760
And the third is translating
user's intent, such as button

1028
00:42:46,760 --> 00:42:49,820
process or whatever into
actions that the system

1029
00:42:49,820 --> 00:42:52,630
executes, which is what say a
one button interface would

1030
00:42:52,630 --> 00:42:53,542
[? divert ?].

1031
00:42:53,542 --> 00:42:56,030
So for instance, if you're
building a one-button

1032
00:42:56,030 --> 00:42:59,250
interface for someone who can
see perfectly well, you

1033
00:42:59,250 --> 00:43:02,400
wouldn't actually leverage the
speech output capabilities or

1034
00:43:02,400 --> 00:43:03,590
the Braille output
capabilities.

1035
00:43:03,590 --> 00:43:05,110
You basically have
your one button

1036
00:43:05,110 --> 00:43:07,354
interface control the device.

1037
00:43:07,354 --> 00:43:08,830
AUDIENCE: Right, right.

1038
00:43:08,830 --> 00:43:10,122
Thank you, thank you so much.

1039
00:43:10,122 --> 00:43:13,040

1040
00:43:13,040 --> 00:43:14,630
TV RAMAN: And one additional
point.

1041
00:43:14,630 --> 00:43:16,940
Casey probably demoed
this during his--

1042
00:43:16,940 --> 00:43:18,390
but didn't say it
out explicitly.

1043
00:43:18,390 --> 00:43:22,150
Because of the separation on
Android, you can actually run

1044
00:43:22,150 --> 00:43:24,940
TalkBack and screen
magnification simultaneously.

1045
00:43:24,940 --> 00:43:28,280
So a low vision user who both
wants to see the screen

1046
00:43:28,280 --> 00:43:31,800
because he can see some and
wants speech output basically

1047
00:43:31,800 --> 00:43:35,630
doesn't have to make a choice
saying now I get speech or now

1048
00:43:35,630 --> 00:43:36,790
I get magnification.

1049
00:43:36,790 --> 00:43:39,120
And the reason why we are
able to do this kinds of

1050
00:43:39,120 --> 00:43:42,770
combinations is because of this
layered architecture.

1051
00:43:42,770 --> 00:43:44,870
CASEY BURKHARDT: If you'd like
to see a more in-depth demo

1052
00:43:44,870 --> 00:43:47,140
screen magnification, please
feel free to drop by the

1053
00:43:47,140 --> 00:43:50,100
accessibility sandbox.

1054
00:43:50,100 --> 00:43:51,290
ALAN VIVERETTE: Your
question please?

1055
00:43:51,290 --> 00:43:52,400
AUDIENCE: My name
is [? Tonson ?].

1056
00:43:52,400 --> 00:43:57,490
And I have a question can Google
Play help their brand

1057
00:43:57,490 --> 00:44:05,126
man to find apps that has good
accessibility easily?

1058
00:44:05,126 --> 00:44:07,010
TV RAMAN: That's a really
good request and we

1059
00:44:07,010 --> 00:44:07,840
will take that back.

1060
00:44:07,840 --> 00:44:10,650
We've heard that many
times in the past.

1061
00:44:10,650 --> 00:44:14,860
Today what we see users doing
is primarily wisdom of the

1062
00:44:14,860 --> 00:44:16,920
crowds, which has worked well.

1063
00:44:16,920 --> 00:44:20,010
But I agree with you that it
would be really nice to be

1064
00:44:20,010 --> 00:44:25,600
able to find apps based on the
user's needs, not just for the

1065
00:44:25,600 --> 00:44:28,970
blind user, for instance, an app
that works very well for a

1066
00:44:28,970 --> 00:44:31,570
low vision user may not
necessarily work that well for

1067
00:44:31,570 --> 00:44:32,670
a blind user.

1068
00:44:32,670 --> 00:44:37,540
And it would be nice for users
over time to be able to say

1069
00:44:37,540 --> 00:44:40,650
these are the types of things
I'm interested in terms of

1070
00:44:40,650 --> 00:44:43,230
user capabilities and find
apps that you like.

1071
00:44:43,230 --> 00:44:46,530
So that's definitely a request
we'll take back the Play team.

1072
00:44:46,530 --> 00:44:47,000
AUDIENCE: OK.

1073
00:44:47,000 --> 00:44:48,250
Thank you.

1074
00:44:48,250 --> 00:44:50,760

1075
00:44:50,760 --> 00:44:51,700
ALAN VIVERETTE: All right.

1076
00:44:51,700 --> 00:44:53,980
If that's all the questions,
we'll be at the accessibility

1077
00:44:53,980 --> 00:44:56,050
sandbox outside.

1078
00:44:56,050 --> 00:44:57,470
Again, thank you everyone
for coming.

1079
00:44:57,470 --> 00:44:58,580
TV RAMAN: Thank you for
coming, everyone.

1080
00:44:58,580 --> 00:44:59,180
CASEY BURKHARDT: Thanks.

1081
00:44:59,180 --> 00:45:02,640
AUDIENCE: [APPLAUSE]

