1
00:00:00,000 --> 00:00:02,810

2
00:00:02,810 --> 00:00:05,320
SAURABH GUPTA: Good afternoon,
and welcome to everyone in

3
00:00:05,320 --> 00:00:08,870
this room and watching on the
Livestream and YouTube.

4
00:00:08,870 --> 00:00:10,470
My name is Saurabh Gupta.

5
00:00:10,470 --> 00:00:12,435
I'm Product Manager of
Google Apps Script.

6
00:00:12,435 --> 00:00:13,710
JONATHAN RASCHER: I'm
Jonathan Rascher.

7
00:00:13,710 --> 00:00:15,850
I'm a software engineer
at Google Apps Script.

8
00:00:15,850 --> 00:00:19,410
SAURABH GUPTA: And today, we are
going to show you how you

9
00:00:19,410 --> 00:00:21,955
can extend Google Docs
with Apps Script.

10
00:00:21,955 --> 00:00:25,230

11
00:00:25,230 --> 00:00:28,790
So with a show of hands, how
many of you have heard of

12
00:00:28,790 --> 00:00:31,020
Google Docs or used
Google Docs?

13
00:00:31,020 --> 00:00:32,280
Almost all of you.

14
00:00:32,280 --> 00:00:33,510
I figured that much.

15
00:00:33,510 --> 00:00:35,650
But for those of you who haven't
or those of you who

16
00:00:35,650 --> 00:00:38,850
are watching on the Livestream,
Google Docs is a

17
00:00:38,850 --> 00:00:43,000
word processing app
in Google Drive.

18
00:00:43,000 --> 00:00:47,230
Using Google Docs, you can
create and share documents

19
00:00:47,230 --> 00:00:48,510
across devices &mdash;

20
00:00:48,510 --> 00:00:53,150
in your browser, on your iPhone
or Android phone.

21
00:00:53,150 --> 00:00:56,520
And yes, it works even when
you are not connected.

22
00:00:56,520 --> 00:00:58,260
It's really awesome.

23
00:00:58,260 --> 00:01:01,720
But you know what is
even more awesome?

24
00:01:01,720 --> 00:01:05,030
Starting this week,
you can use Apps

25
00:01:05,030 --> 00:01:07,160
Script in Google Docs.

26
00:01:07,160 --> 00:01:09,826
That's awesome.

27
00:01:09,826 --> 00:01:10,804
[APPLAUSE]

28
00:01:10,804 --> 00:01:13,740
Thank you.

29
00:01:13,740 --> 00:01:16,450
And for those of you who do not
know what Apps Script is,

30
00:01:16,450 --> 00:01:18,930
well, Apps Script is
the JavaScript

31
00:01:18,930 --> 00:01:19,920
engine in the cloud.

32
00:01:19,920 --> 00:01:23,540
And it lets you integrate and
automate and make the most out

33
00:01:23,540 --> 00:01:25,320
of Google Apps.

34
00:01:25,320 --> 00:01:29,170
So you might ask, well, that's
all great and good and yeah,

35
00:01:29,170 --> 00:01:31,700
you can use the Apps Script in
Google Docs, but what does

36
00:01:31,700 --> 00:01:32,980
that really mean?

37
00:01:32,980 --> 00:01:36,870
So just to elaborate on that,
let me share a simple story.

38
00:01:36,870 --> 00:01:38,830
And this happened a few months
ago, and Jonathan will

39
00:01:38,830 --> 00:01:39,870
remember this.

40
00:01:39,870 --> 00:01:43,450
Jonathan and I were hanging out
with our friend, Bob, in a

41
00:01:43,450 --> 00:01:45,360
bistro a few months ago.

42
00:01:45,360 --> 00:01:49,480
And Bob was talking about
awesome research that he's

43
00:01:49,480 --> 00:01:53,250
doing and this great research
paper that he's writing.

44
00:01:53,250 --> 00:01:56,990
And we were pretty excited
because we know Bob is a

45
00:01:56,990 --> 00:01:58,560
Google Docs user.

46
00:01:58,560 --> 00:02:01,460
So we were super excited
about that.

47
00:02:01,460 --> 00:02:03,930
And he was going on and
on about his research.

48
00:02:03,930 --> 00:02:05,900
But he had a slight problem.

49
00:02:05,900 --> 00:02:09,600
He said, well, he is referring
to a ton of sources &mdash;

50
00:02:09,600 --> 00:02:12,000
books, journals, articles,
you name it.

51
00:02:12,000 --> 00:02:15,240
And he's having a hard
time keeping up.

52
00:02:15,240 --> 00:02:20,690
And what's even more worrying
for him was that he wanted to

53
00:02:20,690 --> 00:02:23,970
make sure that he's citing all
these sources, he's giving

54
00:02:23,970 --> 00:02:25,810
credit where credit is due.

55
00:02:25,810 --> 00:02:27,950
So this was a genuine
problem for him.

56
00:02:27,950 --> 00:02:29,330
So you know what
happened next?

57
00:02:29,330 --> 00:02:33,390
Well, something that usually
happens when you put a user,

58
00:02:33,390 --> 00:02:35,670
an engineer, and a product
manager on the table.

59
00:02:35,670 --> 00:02:38,520
A napkin comes out, and people
start scribbling stuff.

60
00:02:38,520 --> 00:02:40,250
And that's what we
exactly did.

61
00:02:40,250 --> 00:02:43,020
And we drew something and said,
hey Bob, you need a

62
00:02:43,020 --> 00:02:46,220
bibliography management
app in Google Docs.

63
00:02:46,220 --> 00:02:49,550
And Bob said, yeah, I want to be
able to add sources to it &mdash;

64
00:02:49,550 --> 00:02:52,590
all of those sources
that you just saw.

65
00:02:52,590 --> 00:02:55,860
Not just that, I want to be able
to cite those sources in

66
00:02:55,860 --> 00:02:57,480
my research paper.

67
00:02:57,480 --> 00:03:01,670
And, at the end of it, I want to
have a well-formatted, good

68
00:03:01,670 --> 00:03:05,650
looking bibliography in
my research paper.

69
00:03:05,650 --> 00:03:07,620
So he said, yes, exactly.

70
00:03:07,620 --> 00:03:08,850
This a great use case.

71
00:03:08,850 --> 00:03:12,400
And right after the dinner,
Jonathan and I went back to

72
00:03:12,400 --> 00:03:14,860
the office and said, hey, we've
got to build our friend

73
00:03:14,860 --> 00:03:17,000
Bob this app.

74
00:03:17,000 --> 00:03:18,490
And that's what we
exactly did.

75
00:03:18,490 --> 00:03:20,320
And you know what we built?

76
00:03:20,320 --> 00:03:23,960
We built an app called Bibstro
using Google Apps Script.

77
00:03:23,960 --> 00:03:25,690
And then you will ask,
why Bibstro?

78
00:03:25,690 --> 00:03:26,560
Well, it's obvious.

79
00:03:26,560 --> 00:03:30,525
In the moment of sobriety, we
were sitting in a bistro, and

80
00:03:30,525 --> 00:03:31,070
we thought about

81
00:03:31,070 --> 00:03:33,160
bibliographies, so why not Bibstro?

82
00:03:33,160 --> 00:03:37,980
But the important thing here
is that this app is built

83
00:03:37,980 --> 00:03:39,560
using Google Apps Script.

84
00:03:39,560 --> 00:03:43,580
And what we are going to show
you here in the next two

85
00:03:43,580 --> 00:03:45,190
minutes is a demo of Bibstro.

86
00:03:45,190 --> 00:03:46,750
And the point of the demo
is that you can

87
00:03:46,750 --> 00:03:47,940
build your own app.

88
00:03:47,940 --> 00:03:50,090
And we hope to give you some
insights into how you can

89
00:03:50,090 --> 00:03:52,930
build your own app
in Google Docs.

90
00:03:52,930 --> 00:03:54,180
So let's get to the demo.

91
00:03:54,180 --> 00:03:57,390

92
00:03:57,390 --> 00:04:00,560
This is Google Docs, and this
is Bob's research paper.

93
00:04:00,560 --> 00:04:05,480
And as you can see, on the Menu
left of Help, is a menu

94
00:04:05,480 --> 00:04:07,430
item called Bibstro.

95
00:04:07,430 --> 00:04:09,760
So the first thing that
Bob needs to do is

96
00:04:09,760 --> 00:04:11,420
configure this app.

97
00:04:11,420 --> 00:04:18,200
And so he clicks on Bibstro,
and he clicks on Settings.

98
00:04:18,200 --> 00:04:19,519
And you can see there
is a submenu, and

99
00:04:19,519 --> 00:04:20,950
he clicks on Configure.

100
00:04:20,950 --> 00:04:24,740
And up comes a form, and he
chooses a citation format, and

101
00:04:24,740 --> 00:04:26,300
he configures the app.

102
00:04:26,300 --> 00:04:28,740
That's pretty straightforward.

103
00:04:28,740 --> 00:04:31,400
The next thing, if you remember
from the napkin that

104
00:04:31,400 --> 00:04:33,990
I was talking about, was he
needs to add sources &mdash;

105
00:04:33,990 --> 00:04:36,180
all of those list of papers
and journals and

106
00:04:36,180 --> 00:04:37,490
all of those articles.

107
00:04:37,490 --> 00:04:40,380
So he clicks on Bibstro, clicks
on Add Source, and up

108
00:04:40,380 --> 00:04:41,550
comes another form.

109
00:04:41,550 --> 00:04:44,000
And you can see how
well-formatted and good

110
00:04:44,000 --> 00:04:45,180
looking UI it is.

111
00:04:45,180 --> 00:04:50,490
And he starts adding all of
these sources in this app.

112
00:04:50,490 --> 00:04:55,820
And he collects a list of
sources, and a bibliography

113
00:04:55,820 --> 00:04:57,700
gets generated for it.

114
00:04:57,700 --> 00:05:00,020
So he adds a source, and the
next thing he does is he

115
00:05:00,020 --> 00:05:02,560
scrolls all the way to the
bottom of the document and

116
00:05:02,560 --> 00:05:05,310
sees that, hey, here's
this bibliography &mdash;

117
00:05:05,310 --> 00:05:09,210
well-formatted according to the
standard that he chose,

118
00:05:09,210 --> 00:05:10,950
and it's right there.

119
00:05:10,950 --> 00:05:12,000
So that's awesome.

120
00:05:12,000 --> 00:05:12,760
That's cool.

121
00:05:12,760 --> 00:05:14,540
So he gets a bibliography.

122
00:05:14,540 --> 00:05:16,460
He is able to add sources.

123
00:05:16,460 --> 00:05:20,470
The next thing he wants to do is
be able to cite the source.

124
00:05:20,470 --> 00:05:25,010
So he scrolls up in his
document, locates the cursor

125
00:05:25,010 --> 00:05:27,640
wherever he wants to cite the
source, then clicks on the

126
00:05:27,640 --> 00:05:33,380
menu item Bibstro and clicks
on Add Inline Citation.

127
00:05:33,380 --> 00:05:37,140
And now he can choose from any
of the source and cite that

128
00:05:37,140 --> 00:05:40,100
source right in the document.

129
00:05:40,100 --> 00:05:41,820
So this is awesome, and
you can see the

130
00:05:41,820 --> 00:05:43,550
source is now cited.

131
00:05:43,550 --> 00:05:46,510
So we met all of Bob's
requirements and built this

132
00:05:46,510 --> 00:05:47,860
app using Google Apps Script.

133
00:05:47,860 --> 00:05:50,980
But Bob is our friend, and we
wanted to throw in a little

134
00:05:50,980 --> 00:05:52,110
bit of extra.

135
00:05:52,110 --> 00:05:55,000
So the extra that we wanted to
throw in was, hey, what if Bob

136
00:05:55,000 --> 00:05:59,280
wants to see where a particular
source is

137
00:05:59,280 --> 00:06:01,560
cited in the doc?

138
00:06:01,560 --> 00:06:05,910
So we built a capability
called Manage Sources.

139
00:06:05,910 --> 00:06:09,050
So Bob clicks on, again, Bibstro
and says, OK, I want

140
00:06:09,050 --> 00:06:10,360
to manage a source.

141
00:06:10,360 --> 00:06:15,920
And up comes on the right side
a panel which shows a list of

142
00:06:15,920 --> 00:06:18,770
all of Bob's sources.

143
00:06:18,770 --> 00:06:21,310
And here, Bob can just say,
OK, I want to highlight a

144
00:06:21,310 --> 00:06:22,420
particular source.

145
00:06:22,420 --> 00:06:24,750
And you can see a source
is highlighted.

146
00:06:24,750 --> 00:06:28,450
And he can remove the source
if he wants and do all of

147
00:06:28,450 --> 00:06:29,980
these kinds of interesting
things.

148
00:06:29,980 --> 00:06:32,740
But the one last thing that is
pretty interesting is that he

149
00:06:32,740 --> 00:06:35,840
can scroll all the way to the
bottom of his bibliography and

150
00:06:35,840 --> 00:06:37,255
say he just plays
around with it.

151
00:06:37,255 --> 00:06:39,210
Say he corrupts it
or something.

152
00:06:39,210 --> 00:06:43,060
Then he can just click on
Refresh, and a bibliography

153
00:06:43,060 --> 00:06:44,570
gets refreshed.

154
00:06:44,570 --> 00:06:49,240
So that's a very simple demo of
a type of app you can build

155
00:06:49,240 --> 00:06:52,770
in Google Docs using
Apps Script.

156
00:06:52,770 --> 00:06:57,080
And we want to make sure that
yes, your app is also as

157
00:06:57,080 --> 00:07:00,770
awesome as this one using
Google Apps Script.

158
00:07:00,770 --> 00:07:01,760
So let's get started.

159
00:07:01,760 --> 00:07:03,310
How do you build an
app like that?

160
00:07:03,310 --> 00:07:05,630
Or rather, how did
we build Bibstro?

161
00:07:05,630 --> 00:07:11,350

162
00:07:11,350 --> 00:07:14,980
So there are four steps
in building Bibstro.

163
00:07:14,980 --> 00:07:18,470
The first step is that you
want to be able to create

164
00:07:18,470 --> 00:07:22,650
scripts using the Script
Editor in Google Docs.

165
00:07:22,650 --> 00:07:25,790
So this is Google Docs.

166
00:07:25,790 --> 00:07:28,220
You can see the Tools
menu is expanded.

167
00:07:28,220 --> 00:07:31,160
And in the Tools menu,
you will see

168
00:07:31,160 --> 00:07:33,680
two new menu options &mdash;

169
00:07:33,680 --> 00:07:37,310
the Script Editor and
the Script Manager.

170
00:07:37,310 --> 00:07:40,290
Using the Script Editor, you
can create container-bound

171
00:07:40,290 --> 00:07:41,730
scripts to Google Docs.

172
00:07:41,730 --> 00:07:44,190
And you can learn a lot about
container-bound scripts on our

173
00:07:44,190 --> 00:07:46,900
developer documentation.

174
00:07:46,900 --> 00:07:50,496
But the crux of it is that these
scripts live and die

175
00:07:50,496 --> 00:07:51,640
with the document.

176
00:07:51,640 --> 00:07:52,630
So this is the starting point.

177
00:07:52,630 --> 00:07:56,820
You want to be able to create
scripts in Document.

178
00:07:56,820 --> 00:07:57,640
What's next?

179
00:07:57,640 --> 00:08:00,410
The second thing is you want
to identify how you want to

180
00:08:00,410 --> 00:08:02,880
plug your app into the
UI of Google Docs.

181
00:08:02,880 --> 00:08:05,610

182
00:08:05,610 --> 00:08:08,100
So again, this is Google Docs.

183
00:08:08,100 --> 00:08:11,990
And anything that you want to
do with Google Docs always

184
00:08:11,990 --> 00:08:14,960
starts with this class
called DocumentApp.

185
00:08:14,960 --> 00:08:17,510
If there is one thing that I
want you to take away from

186
00:08:17,510 --> 00:08:22,090
this session, it's this &mdash; that
DocumentApp is your starting

187
00:08:22,090 --> 00:08:28,250
point in building apps
for Google Docs.

188
00:08:28,250 --> 00:08:30,080
So this is Google Docs.

189
00:08:30,080 --> 00:08:33,610
And what you see highlighted
is the menu, or the UI.

190
00:08:33,610 --> 00:08:34,669
And it's very simple.

191
00:08:34,669 --> 00:08:38,110
If you want to get a handle to
the UI of Google Docs, just

192
00:08:38,110 --> 00:08:40,260
call DocumentApp.getUi.

193
00:08:40,260 --> 00:08:41,320
It's that simple.

194
00:08:41,320 --> 00:08:43,350
And then I'm going to show you
some amazing things that you

195
00:08:43,350 --> 00:08:44,555
can do with the UI.

196
00:08:44,555 --> 00:08:49,030
So first up is inserting a menu,
and it's pretty simple.

197
00:08:49,030 --> 00:08:53,060
As you can see on the code
on the right, that

198
00:08:53,060 --> 00:08:57,140
DocumentApp.getUi.createMenu,
and you can create a top level

199
00:08:57,140 --> 00:08:59,320
menu, then add items to it.

200
00:08:59,320 --> 00:09:02,060
And you can even add
submenus and so on.

201
00:09:02,060 --> 00:09:05,360
But the idea is that
DocumentApp.getUi gives you a

202
00:09:05,360 --> 00:09:09,150
handle to the different UI
aspects of Google Docs.

203
00:09:09,150 --> 00:09:10,980
So adding a menu is great.

204
00:09:10,980 --> 00:09:13,080
What's next?

205
00:09:13,080 --> 00:09:15,980
Showing your app in a sidebar.

206
00:09:15,980 --> 00:09:19,870
Now, if your app shows up in
sidebar, that's great, because

207
00:09:19,870 --> 00:09:23,310
what users get with this is the
opportunity to use your

208
00:09:23,310 --> 00:09:26,620
app while they're working with
the document so it does not

209
00:09:26,620 --> 00:09:27,990
interrupt the flow
of the user.

210
00:09:27,990 --> 00:09:32,330
So this is a natural place where
your app shows and is

211
00:09:32,330 --> 00:09:33,900
very useful.

212
00:09:33,900 --> 00:09:35,880
And again, using
DocumentApp.getUi.showSidebar.

213
00:09:35,880 --> 00:09:40,530

214
00:09:40,530 --> 00:09:44,510
You can also surface your
app in a dialog.

215
00:09:44,510 --> 00:09:47,420
That interrupts the flow of the
user, but it's perfect for

216
00:09:47,420 --> 00:09:48,920
forms and other things.

217
00:09:48,920 --> 00:09:52,340
Again, using
DocumentApp.getUi.showDialog.

218
00:09:52,340 --> 00:09:56,620
It's quite similar to what
you saw yesterday

219
00:09:56,620 --> 00:09:59,170
in the Forms session.

220
00:09:59,170 --> 00:10:00,910
This was pretty similar where
it was FormsApp.getUi and

221
00:10:00,910 --> 00:10:02,720
showDialog and all of that.

222
00:10:02,720 --> 00:10:05,630
So there's a consistent theme
around it as to how you get to

223
00:10:05,630 --> 00:10:10,780
the UI of Docs.

224
00:10:10,780 --> 00:10:13,770
This example here is a little
bit involved, but it shows you

225
00:10:13,770 --> 00:10:16,980
how you can serve your
app in a dialog.

226
00:10:16,980 --> 00:10:22,790
So say for instance, if you had
a configdialog.html or an

227
00:10:22,790 --> 00:10:26,040
HTML file in your script project
and that's the app

228
00:10:26,040 --> 00:10:29,100
that you wanted to show in a
dialog, then you can very

229
00:10:29,100 --> 00:10:33,470
easily, using HTML service of
Apps Script, create an HTML

230
00:10:33,470 --> 00:10:35,850
output object and just
plug that in, in Show

231
00:10:35,850 --> 00:10:37,570
Dialog, and that's it.

232
00:10:37,570 --> 00:10:45,700
So you create an HTML output
object using HTML service, and

233
00:10:45,700 --> 00:10:48,110
just paste that in Show
Dialog, and your

234
00:10:48,110 --> 00:10:49,360
app as up and about.

235
00:10:49,360 --> 00:10:51,570

236
00:10:51,570 --> 00:10:54,990
So we talked about four steps,
and we talked just two steps.

237
00:10:54,990 --> 00:10:58,180
You can create scripts using
the Script Editor.

238
00:10:58,180 --> 00:11:03,260
You can extend the UI of Google
Docs, plug into the UI.

239
00:11:03,260 --> 00:11:06,450
The third thing you want to do
is you want to wire your app

240
00:11:06,450 --> 00:11:08,100
into the Google Docs UI.

241
00:11:08,100 --> 00:11:13,370
So the idea is your app should
fire up somehow.

242
00:11:13,370 --> 00:11:16,800
Or another way of asking this
is, what is the Main

243
00:11:16,800 --> 00:11:20,090
equivalent, Main function,
as you have in Java or C?

244
00:11:20,090 --> 00:11:21,610
What is the Main here?

245
00:11:21,610 --> 00:11:24,790
So let's look at how your
app gets loaded up.

246
00:11:24,790 --> 00:11:28,760
So when a user opens a document,
Apps Script looks in

247
00:11:28,760 --> 00:11:32,080
your code and looks for a
function called onOpen.

248
00:11:32,080 --> 00:11:35,020
So onOpen is sort of that
equivalent of Main.

249
00:11:35,020 --> 00:11:38,660
And once Apps Script finds
onOpen, it executes onOpen.

250
00:11:38,660 --> 00:11:43,260
So a typical use of onOpen
is to insert menus.

251
00:11:43,260 --> 00:11:46,160
Because you want to be able to
extend the UI once the user

252
00:11:46,160 --> 00:11:47,360
opens the document.

253
00:11:47,360 --> 00:11:52,960
And then, by clicking on menu
items, you want the user to

254
00:11:52,960 --> 00:11:54,190
start using the app.

255
00:11:54,190 --> 00:11:56,070
So this is a natural flow.

256
00:11:56,070 --> 00:12:00,640
A document is opened, onOpen is
called, onOpen inserts menu

257
00:12:00,640 --> 00:12:04,660
items, and then user can click
on menu item and the

258
00:12:04,660 --> 00:12:07,210
corresponding function
will be invoked.

259
00:12:07,210 --> 00:12:09,405
So that's simple,
straightforward.

260
00:12:09,405 --> 00:12:14,320

261
00:12:14,320 --> 00:12:15,580
So we covered three steps &mdash;

262
00:12:15,580 --> 00:12:18,510
create scripts using the Script
Editor, extending the

263
00:12:18,510 --> 00:12:22,000
UI of Google Docs, responding
to events.

264
00:12:22,000 --> 00:12:24,620
Jonathan now is going to cover
how you can work with the

265
00:12:24,620 --> 00:12:27,400
document and modify
the documents.

266
00:12:27,400 --> 00:12:28,140
Jonathan?

267
00:12:28,140 --> 00:12:28,410
JONATHAN RASCHER: Yes.

268
00:12:28,410 --> 00:12:29,870
Thank you, Saurabh.

269
00:12:29,870 --> 00:12:33,270
So Saurabh began the talk
with our friend Bob.

270
00:12:33,270 --> 00:12:36,140
And he was a Google Docs user,
like Saurabh and I, like, I

271
00:12:36,140 --> 00:12:38,460
think, almost all of
you, it seems like.

272
00:12:38,460 --> 00:12:40,140
And he had this problem
with Google Docs.

273
00:12:40,140 --> 00:12:44,110
He wanted an ability to manage
bibliographies in Docs.

274
00:12:44,110 --> 00:12:47,440
And so we built him an app for
that called Bibstro using this

275
00:12:47,440 --> 00:12:49,160
new Apps Script
[? configuration. ?]

276
00:12:49,160 --> 00:12:50,770
And so Saurabh just covered
the first three

277
00:12:50,770 --> 00:12:52,530
steps we used for this.

278
00:12:52,530 --> 00:12:54,090
So we created some scripts.

279
00:12:54,090 --> 00:12:57,630
We extended the Google Docs UI
with custom UI elements.

280
00:12:57,630 --> 00:13:00,330
And we can respond to events
from those UI elements for

281
00:13:00,330 --> 00:13:04,320
things like menu clicks or
button clicks, for example.

282
00:13:04,320 --> 00:13:05,900
So that brings us to
the fourth point.

283
00:13:05,900 --> 00:13:09,040
And this point is completely
specific to DocumentApp.

284
00:13:09,040 --> 00:13:11,420
If any of you saw, for example,
the talk some of our

285
00:13:11,420 --> 00:13:14,200
colleagues gave yesterday about
the integration with

286
00:13:14,200 --> 00:13:17,210
Google Apps Script and Google
Forms, you'll see that these

287
00:13:17,210 --> 00:13:20,630
first three steps are very
similar in Forms as in Docs or

288
00:13:20,630 --> 00:13:21,980
in Spreadsheets.

289
00:13:21,980 --> 00:13:26,110
But this fourth step is specific
to Google Docs.

290
00:13:26,110 --> 00:13:29,215
So what we need to learn is, how
is the document exposed to

291
00:13:29,215 --> 00:13:29,830
Apps Script?

292
00:13:29,830 --> 00:13:31,630
So when we want to do something
in Bibstro, like

293
00:13:31,630 --> 00:13:34,060
maintain this live updating
bibliography at the end of the

294
00:13:34,060 --> 00:13:37,160
document, how do we actually
insert, and read, write, and

295
00:13:37,160 --> 00:13:38,950
modify the text in
the document?

296
00:13:38,950 --> 00:13:40,840
And there's a couple of
different ways that we can

297
00:13:40,840 --> 00:13:43,800
work with the Google Docs
document from Apps Script,

298
00:13:43,800 --> 00:13:45,650
which I'm calling
document models.

299
00:13:45,650 --> 00:13:48,370
The first of those is as
a tree of elements.

300
00:13:48,370 --> 00:13:51,590
So if you've ever done work
with, say, HTML or XML, the

301
00:13:51,590 --> 00:13:54,780
Document Object Model or the
DOM, then this should be

302
00:13:54,780 --> 00:13:56,400
somewhat familiar to you.

303
00:13:56,400 --> 00:13:58,180
It's a tree-structured
document,

304
00:13:58,180 --> 00:13:59,990
much like a web page.

305
00:13:59,990 --> 00:14:02,900
Let's take a look at what
this looks like.

306
00:14:02,900 --> 00:14:05,100
So on the left, you can see
we have a document.

307
00:14:05,100 --> 00:14:06,270
This one's pretty simple.

308
00:14:06,270 --> 00:14:07,950
It's got a couple
of paragraphs.

309
00:14:07,950 --> 00:14:09,430
There's a bulleted list.

310
00:14:09,430 --> 00:14:11,530
There's a table and then at
the bottom of the page,

311
00:14:11,530 --> 00:14:14,060
there's a page footer.

312
00:14:14,060 --> 00:14:17,490
So this is all exposed to Apps
Script as Document, the

313
00:14:17,490 --> 00:14:18,990
Document class.

314
00:14:18,990 --> 00:14:20,910
And we get this in Apps
Script code by saying

315
00:14:20,910 --> 00:14:23,530
DocumentApp.getActiveDocument.

316
00:14:23,530 --> 00:14:24,980
And we'll see some
code samples for

317
00:14:24,980 --> 00:14:26,500
this in just a minute.

318
00:14:26,500 --> 00:14:29,630
So this is sort of the
equivalent of the root element

319
00:14:29,630 --> 00:14:32,320
of, say, a web page,
the HTML element.

320
00:14:32,320 --> 00:14:35,800
And like the HTML element in a
web page, it's subdivided up

321
00:14:35,800 --> 00:14:36,920
into sections.

322
00:14:36,920 --> 00:14:39,130
So we can see we have a body
section at the top that's

323
00:14:39,130 --> 00:14:40,150
highlighted.

324
00:14:40,150 --> 00:14:41,210
And then there's
a little break.

325
00:14:41,210 --> 00:14:43,670
And then down at the bottom,
we have a footer section.

326
00:14:43,670 --> 00:14:46,640
A page could also have, for
example, a header section.

327
00:14:46,640 --> 00:14:48,090
Or it could have a
footnote section

328
00:14:48,090 --> 00:14:49,470
for numbered footnotes.

329
00:14:49,470 --> 00:14:50,820
And these are all optional.

330
00:14:50,820 --> 00:14:55,890
But any page is going to have
a body, a document body.

331
00:14:55,890 --> 00:14:58,750
If we take a look now inside the
body, you can see that it

332
00:14:58,750 --> 00:14:59,950
contains elements &mdash;

333
00:14:59,950 --> 00:15:02,390
again, like in a web page &mdash; it
contains elements for things

334
00:15:02,390 --> 00:15:06,110
like paragraphs, list items,
tables, and so forth.

335
00:15:06,110 --> 00:15:07,240
These are kind of
the equivalent

336
00:15:07,240 --> 00:15:09,190
of block level elements.

337
00:15:09,190 --> 00:15:12,440
And they, in turn, are further
subdivided up into other

338
00:15:12,440 --> 00:15:14,780
elements, into inline
elements.

339
00:15:14,780 --> 00:15:17,980
For example, if we take a look
at this first paragraph here,

340
00:15:17,980 --> 00:15:20,640
this first paragraph just
has some text in it.

341
00:15:20,640 --> 00:15:22,710
But in the middle of that
run of text, the text is

342
00:15:22,710 --> 00:15:24,730
interrupted by an image.

343
00:15:24,730 --> 00:15:27,830
So how is this exposed
to Apps Script?

344
00:15:27,830 --> 00:15:30,810
If you take a look now, you can
see that this paragraph

345
00:15:30,810 --> 00:15:33,110
element has three
child elements.

346
00:15:33,110 --> 00:15:35,740
There's a text element, and
that represents the run of

347
00:15:35,740 --> 00:15:38,700
text up to but not including
the image.

348
00:15:38,700 --> 00:15:39,770
And then in the middle,
there's an

349
00:15:39,770 --> 00:15:41,200
inline image element.

350
00:15:41,200 --> 00:15:43,770
And that lets Apps Script access
properties of the image

351
00:15:43,770 --> 00:15:47,280
like the binary contents of the
image or the MIME types,

352
00:15:47,280 --> 00:15:49,450
so whether it's a PNG,
or a JPEG, or a GIF,

353
00:15:49,450 --> 00:15:50,970
or what have you.

354
00:15:50,970 --> 00:15:53,980
And then after that, there's
another text element.

355
00:15:53,980 --> 00:15:56,430
And this next text element just
contains all of the text

356
00:15:56,430 --> 00:15:59,390
in the paragraph from the inline
image up until the end

357
00:15:59,390 --> 00:16:00,790
of the paragraph.

358
00:16:00,790 --> 00:16:03,890
And again, if you've ever done
work with HTML, it should be

359
00:16:03,890 --> 00:16:06,320
very similar to what you've
done with web pages.

360
00:16:06,320 --> 00:16:08,220
Some of the element names are
little bit different, but the

361
00:16:08,220 --> 00:16:10,030
basic idea is the same.

362
00:16:10,030 --> 00:16:13,010
And in Apps Script, when we work
with the document that

363
00:16:13,010 --> 00:16:15,820
the user sees on screen, what
we're actually doing when we

364
00:16:15,820 --> 00:16:18,730
use this tree-based document
model is saying, OK, we're

365
00:16:18,730 --> 00:16:20,400
going to take a look at
the document tree.

366
00:16:20,400 --> 00:16:23,180
And we're going to take a look
just at specific elements or

367
00:16:23,180 --> 00:16:26,390
specific nodes in the document
tree and do things like insert

368
00:16:26,390 --> 00:16:28,690
elements or delete them,
change style

369
00:16:28,690 --> 00:16:30,860
properties, and so forth.

370
00:16:30,860 --> 00:16:32,480
This has all been kind of
an abstract overview.

371
00:16:32,480 --> 00:16:36,440
So now let's see a
concrete example.

372
00:16:36,440 --> 00:16:39,380
So recall from Bibstro, we had
this functionality where

373
00:16:39,380 --> 00:16:41,156
Bibstro maintained, again,
the bibliography at

374
00:16:41,156 --> 00:16:42,560
the end of the document.

375
00:16:42,560 --> 00:16:45,070
And you saw that the first thing
Saurabh did in his demo,

376
00:16:45,070 --> 00:16:48,170
he configured Bibstro to
pick a citation format.

377
00:16:48,170 --> 00:16:49,830
So he picked MLA format.

378
00:16:49,830 --> 00:16:52,400
But let's say you have a paper,
and you want to change

379
00:16:52,400 --> 00:16:53,860
it for another journal.

380
00:16:53,860 --> 00:16:55,250
For example, you want
to change it to a

381
00:16:55,250 --> 00:16:56,780
new citation format.

382
00:16:56,780 --> 00:16:57,910
So you go into Configure.

383
00:16:57,910 --> 00:17:01,660
You change from MLA format to
APA format, for example.

384
00:17:01,660 --> 00:17:02,970
So what we want Bibstro
to do &mdash;

385
00:17:02,970 --> 00:17:04,410
and what it, in fact, does &mdash;

386
00:17:04,410 --> 00:17:07,400
is at that point updates the
bibliography, replaces the

387
00:17:07,400 --> 00:17:11,130
existing sources, the existing
formatted references, with new

388
00:17:11,130 --> 00:17:14,740
references in the new citation
format that you selected.

389
00:17:14,740 --> 00:17:15,839
So now, let's take
a look at how we

390
00:17:15,839 --> 00:17:18,089
actually do that in Bibstro.

391
00:17:18,089 --> 00:17:21,680
Step one is we define the
bibliography in the document.

392
00:17:21,680 --> 00:17:24,510
We need to find the elements
in this document tree that

393
00:17:24,510 --> 00:17:27,099
represent the contents of the
bibliography that the user

394
00:17:27,099 --> 00:17:29,270
sees in their Document View.

395
00:17:29,270 --> 00:17:31,380
And you can see at the top,
I've put this little blue

396
00:17:31,380 --> 00:17:38,420
rectangle around this element
that says "Works Cited."

397
00:17:38,420 --> 00:17:40,660
That's what we're going to call
the Title Paragraph at

398
00:17:40,660 --> 00:17:42,390
the top of the bibliography.

399
00:17:42,390 --> 00:17:44,470
And it's part of the MLA
citation format.

400
00:17:44,470 --> 00:17:47,650
It's an indicator to somebody
reading an article or an essay

401
00:17:47,650 --> 00:17:50,950
or what have you that OK,
the paper is done now.

402
00:17:50,950 --> 00:17:53,160
This is where the bibliography
starts.

403
00:17:53,160 --> 00:17:55,330
But it can also be an indicator
to Apps Script

404
00:17:55,330 --> 00:17:57,150
programmatically of that
exact same thing.

405
00:17:57,150 --> 00:17:59,810
That this is where, in the
document tree, the

406
00:17:59,810 --> 00:18:01,060
bibliography begins.

407
00:18:01,060 --> 00:18:02,350
So step one &mdash;

408
00:18:02,350 --> 00:18:04,120
there's going to be three
steps total &mdash;

409
00:18:04,120 --> 00:18:08,480
step one here is to find
that paragraph.

410
00:18:08,480 --> 00:18:11,180
So here we have some code
to do just that.

411
00:18:11,180 --> 00:18:14,060
So we start out with
documentApp.getActiveDocument,

412
00:18:14,060 --> 00:18:16,930
and we say getBody to get that
body section &mdash; the main

413
00:18:16,930 --> 00:18:18,310
contents of the document
between

414
00:18:18,310 --> 00:18:20,350
any headers or footers.

415
00:18:20,350 --> 00:18:22,510
And then we just do this while
loop, and we'd use the

416
00:18:22,510 --> 00:18:25,250
findElement call on
the document body.

417
00:18:25,250 --> 00:18:27,310
So what the findElement call
does is it takes two

418
00:18:27,310 --> 00:18:28,120
parameters.

419
00:18:28,120 --> 00:18:30,490
It takes the type of element
we want to find.

420
00:18:30,490 --> 00:18:32,610
In this case, we say that's
just a paragraph.

421
00:18:32,610 --> 00:18:35,180
So what we're saying actually
here is, loop over all the

422
00:18:35,180 --> 00:18:37,550
paragraphs in the
document body.

423
00:18:37,550 --> 00:18:39,910
And then it also takes this
search result object.

424
00:18:39,910 --> 00:18:42,820
And at each iteration of the
loop, the search result object

425
00:18:42,820 --> 00:18:45,000
is going to be populated with
the elements that we're

426
00:18:45,000 --> 00:18:46,820
looking at right now.

427
00:18:46,820 --> 00:18:48,890
And so we take that element,
that paragraph that we're

428
00:18:48,890 --> 00:18:52,420
looking at, and we get its
text using Edit as Text.

429
00:18:52,420 --> 00:18:54,320
And we compare that to
this known string,

430
00:18:54,320 --> 00:18:56,060
which is Works Cited.

431
00:18:56,060 --> 00:18:57,860
And when we find this paragraph
whose text is equal

432
00:18:57,860 --> 00:19:01,000
to Works Cited, we know that
we've completed step one here.

433
00:19:01,000 --> 00:19:03,590
We found the title paragraph,
and hence, we found the rest

434
00:19:03,590 --> 00:19:07,590
of the bibliography in the
document, which brings us to

435
00:19:07,590 --> 00:19:09,060
this point.

436
00:19:09,060 --> 00:19:11,590
And so because the user wanted
to change their citation

437
00:19:11,590 --> 00:19:15,770
format, the easiest way to do
this is just completely wipe

438
00:19:15,770 --> 00:19:18,230
out the contents of the
bibliography and then just

439
00:19:18,230 --> 00:19:21,590
reinsert new bibliography entry
paragraphs using the new

440
00:19:21,590 --> 00:19:23,650
citation format.

441
00:19:23,650 --> 00:19:25,990
So let's take a look
at how we do this.

442
00:19:25,990 --> 00:19:27,840
We start out with the title
paragraph that we had

443
00:19:27,840 --> 00:19:28,980
previously.

444
00:19:28,980 --> 00:19:30,770
And now we do another
while loop.

445
00:19:30,770 --> 00:19:32,850
But this time, we're not
finding elements.

446
00:19:32,850 --> 00:19:35,080
We're looking at the next
sibling elements.

447
00:19:35,080 --> 00:19:37,450
Again, if you worked with the
document tree in HTML &mdash;

448
00:19:37,450 --> 00:19:39,110
with JQuery, for example &mdash;

449
00:19:39,110 --> 00:19:40,100
this should be somewhat
familiar.

450
00:19:40,100 --> 00:19:43,140
And if not, basically, a sibling
element is just the

451
00:19:43,140 --> 00:19:46,460
element in the document that
comes immediately after the

452
00:19:46,460 --> 00:19:48,420
bibliography title.

453
00:19:48,420 --> 00:19:51,970
So we do this, and now we want
to remove that paragraph, that

454
00:19:51,970 --> 00:19:55,550
first bibliography entry after
the title from the document.

455
00:19:55,550 --> 00:19:56,690
So how do we do this?

456
00:19:56,690 --> 00:19:58,270
It's a two step process.

457
00:19:58,270 --> 00:20:00,220
So we take the title paragraph,
we get the

458
00:20:00,220 --> 00:20:01,500
paragraph after it.

459
00:20:01,500 --> 00:20:02,840
And we take this bibliography
entry

460
00:20:02,840 --> 00:20:04,840
paragraph and we call Clear.

461
00:20:04,840 --> 00:20:06,960
What Clear does is it says,
take the contents of this

462
00:20:06,960 --> 00:20:10,110
paragraph, any text or any other
elements inside of it,

463
00:20:10,110 --> 00:20:12,210
and just wipe them out
of the document.

464
00:20:12,210 --> 00:20:15,640
So at this point, we have the
title paragraph followed by an

465
00:20:15,640 --> 00:20:17,410
empty paragraph where the
first bibliography

466
00:20:17,410 --> 00:20:19,280
entry used to be.

467
00:20:19,280 --> 00:20:20,840
But we don't even want
an empty paragraph.

468
00:20:20,840 --> 00:20:23,340
We don't want to have any
paragraph at all left.

469
00:20:23,340 --> 00:20:25,450
So what we do is
we call Merge.

470
00:20:25,450 --> 00:20:26,680
Merge is kind of an interesting

471
00:20:26,680 --> 00:20:28,150
operation, I think.

472
00:20:28,150 --> 00:20:31,380
It doesn't really map up cleanly
to the HTML document

473
00:20:31,380 --> 00:20:34,730
object model or to an XML
document operation.

474
00:20:34,730 --> 00:20:36,920
What Merge is going to do is
it's going to say, take this

475
00:20:36,920 --> 00:20:39,920
second paragraph, this
bibliography entry paragraph &mdash;

476
00:20:39,920 --> 00:20:41,790
now it's empty because
we just cleared it &mdash;

477
00:20:41,790 --> 00:20:43,680
and collapse this empty
paragraph into the

478
00:20:43,680 --> 00:20:45,060
paragraph before it.

479
00:20:45,060 --> 00:20:48,642
So now, after we call Merge, the
end result is we used to

480
00:20:48,642 --> 00:20:51,320
have two paragraphs, now
we just have one.

481
00:20:51,320 --> 00:20:53,790
And its contents is just the
contents of the title

482
00:20:53,790 --> 00:20:57,330
paragraph, because we cleared
the contents of the old

483
00:20:57,330 --> 00:21:00,530
bibliography entry before
we called Merge.

484
00:21:00,530 --> 00:21:02,890
And so then we just
do this in a loop.

485
00:21:02,890 --> 00:21:06,320
And each iteration of the loop
uses this two step process to

486
00:21:06,320 --> 00:21:09,430
remove one of the biography
entries from the document.

487
00:21:09,430 --> 00:21:11,740
And we do this until we've
removed all of those

488
00:21:11,740 --> 00:21:15,005
bibliography entries after the
title paragraph, which brings

489
00:21:15,005 --> 00:21:16,150
us to this point.

490
00:21:16,150 --> 00:21:18,370
So at this point, we have
the Works Cited

491
00:21:18,370 --> 00:21:20,040
paragraph at the top.

492
00:21:20,040 --> 00:21:21,520
And it's sitting there all by
its lonesome self, and it's

493
00:21:21,520 --> 00:21:24,120
kind of sad, because all of
its friends are gone.

494
00:21:24,120 --> 00:21:27,060
So now what we want to do is
insert some new paragraphs

495
00:21:27,060 --> 00:21:29,920
after it with the same
bibliography data from the

496
00:21:29,920 --> 00:21:33,270
data store, but with the
new citation formats.

497
00:21:33,270 --> 00:21:35,860
The text in the document will
be different even though it

498
00:21:35,860 --> 00:21:38,530
represents the same sources.

499
00:21:38,530 --> 00:21:40,060
And we do this as follows.

500
00:21:40,060 --> 00:21:42,280
This time, instead of removing
elements from the document, we

501
00:21:42,280 --> 00:21:45,550
want to insert elements into
the document tree.

502
00:21:45,550 --> 00:21:47,190
So we take the title
paragraph &mdash;

503
00:21:47,190 --> 00:21:49,680
once again, this is kind of our
anchor or our reference

504
00:21:49,680 --> 00:21:53,110
point that tells us where in
the document tree does the

505
00:21:53,110 --> 00:21:55,285
structured bibliography start?

506
00:21:55,285 --> 00:21:57,460
And we take that title paragraph
and we get its

507
00:21:57,460 --> 00:21:58,920
parent element.

508
00:21:58,920 --> 00:22:00,390
So in this case, that'll
most likely be the

509
00:22:00,390 --> 00:22:01,860
document's body element.

510
00:22:01,860 --> 00:22:03,780
But it makes the code a little
bit more general to speak of

511
00:22:03,780 --> 00:22:05,880
it just as a parent.

512
00:22:05,880 --> 00:22:08,660
And so we take this parent
element, and we use it to get

513
00:22:08,660 --> 00:22:11,510
the child index of the
title paragraph.

514
00:22:11,510 --> 00:22:13,705
That is to say, we use it to get
a number that represents

515
00:22:13,705 --> 00:22:17,900
OK, which element, how many
elements into the parent is

516
00:22:17,900 --> 00:22:19,660
this title paragraph?

517
00:22:19,660 --> 00:22:21,980
And then we load some source
data for the bibliography

518
00:22:21,980 --> 00:22:22,660
references.

519
00:22:22,660 --> 00:22:24,400
We load that from
a data store.

520
00:22:24,400 --> 00:22:26,710
And for each source, we have
some code somewhere to format

521
00:22:26,710 --> 00:22:29,060
that according to the
citation format that

522
00:22:29,060 --> 00:22:31,200
the user has selected.

523
00:22:31,200 --> 00:22:31,820
And so we do that.

524
00:22:31,820 --> 00:22:33,100
And we have this
formatted text.

525
00:22:33,100 --> 00:22:35,800
And now we need to actually
put it into the document.

526
00:22:35,800 --> 00:22:36,970
And this is really simple.

527
00:22:36,970 --> 00:22:39,270
We take the parent element that
we found a minute ago,

528
00:22:39,270 --> 00:22:41,270
and we just say, Insert
Paragraph.

529
00:22:41,270 --> 00:22:42,850
That takes two things.

530
00:22:42,850 --> 00:22:46,200
First of all, it takes a child
index or an insertion point.

531
00:22:46,200 --> 00:22:48,610
And to get this, we just use
the insertion point that we

532
00:22:48,610 --> 00:22:51,390
computed previously, by getting
the child index of the

533
00:22:51,390 --> 00:22:54,600
title paragraph and adding
one to that.

534
00:22:54,600 --> 00:22:57,440
And then this also takes a
string, which, in this case,

535
00:22:57,440 --> 00:23:00,780
is just the formatted contents
of this new paragraph of the

536
00:23:00,780 --> 00:23:02,290
bibliography entry.

537
00:23:02,290 --> 00:23:04,430
So we make this Insert
Paragraph call.

538
00:23:04,430 --> 00:23:06,990
And after we do that, we've
now inserted a new

539
00:23:06,990 --> 00:23:10,270
bibliography entry paragraph
after the title paragraph.

540
00:23:10,270 --> 00:23:12,880
And then we can do things like
set margins, set styles, or

541
00:23:12,880 --> 00:23:14,610
whatever we want to do
on this new paragraph

542
00:23:14,610 --> 00:23:16,500
that we've just inserted.

543
00:23:16,500 --> 00:23:17,410
And that's about it.

544
00:23:17,410 --> 00:23:20,580
We do this in a loop, over and
over again for each source.

545
00:23:20,580 --> 00:23:22,640
And at the end of this loop and
at the end of this three

546
00:23:22,640 --> 00:23:26,000
step process, we've now removed
the old bibliography

547
00:23:26,000 --> 00:23:28,990
entries from the document and
replaced them with new entries

548
00:23:28,990 --> 00:23:32,500
using the new, up-to-date
citation format.

549
00:23:32,500 --> 00:23:34,910
And so that's pretty much how
we use the document tree in

550
00:23:34,910 --> 00:23:36,610
Apps Script to work
with the document.

551
00:23:36,610 --> 00:23:37,445
And it's great.

552
00:23:37,445 --> 00:23:39,240
It's a little bit involved,
but it's really not that

553
00:23:39,240 --> 00:23:39,870
complicated.

554
00:23:39,870 --> 00:23:41,650
But it does involve a
good bit of code.

555
00:23:41,650 --> 00:23:45,240
You can see I had to split
this over three slides.

556
00:23:45,240 --> 00:23:47,680
So for cases where we don't
actually care about the

557
00:23:47,680 --> 00:23:50,360
elements of the document, about
the tree structure, it

558
00:23:50,360 --> 00:23:52,550
seems like it would be nice if
we had some way to work with

559
00:23:52,550 --> 00:23:56,240
the document just as rich text,
ignoring intricacies

560
00:23:56,240 --> 00:23:58,390
like different elements.

561
00:23:58,390 --> 00:24:01,220
It turns out that we also can
look at the document as this.

562
00:24:01,220 --> 00:24:05,310
The second document model is a
long string of formatted text,

563
00:24:05,310 --> 00:24:08,800
of rich text, ignoring anything
like non-text

564
00:24:08,800 --> 00:24:12,870
elements, like sections
and so forth.

565
00:24:12,870 --> 00:24:15,800
And you recall from Bibstro,
we had this functionality

566
00:24:15,800 --> 00:24:18,230
where we have this sidebar,
which I totally love.

567
00:24:18,230 --> 00:24:22,210
We have this sidebar, and the
user can pick a source in the

568
00:24:22,210 --> 00:24:23,355
bibliography in the sidebar.

569
00:24:23,355 --> 00:24:25,570
And they can click the
Highlight button.

570
00:24:25,570 --> 00:24:27,990
And then that source, all the
citations that reference that

571
00:24:27,990 --> 00:24:30,620
source, will be highlighted in
the document by setting their

572
00:24:30,620 --> 00:24:32,580
background to yellow.

573
00:24:32,580 --> 00:24:33,720
So how do we do this?

574
00:24:33,720 --> 00:24:36,590
Do we need to worry about
element trees and all of this

575
00:24:36,590 --> 00:24:37,655
for something like this
that's strictly

576
00:24:37,655 --> 00:24:39,130
a text-based approach?

577
00:24:39,130 --> 00:24:41,110
I saw somebody shake their head,
and I love that, because

578
00:24:41,110 --> 00:24:42,600
no, we don't.

579
00:24:42,600 --> 00:24:45,310
So we have
DocumentApp.getActiveDocument

580
00:24:45,310 --> 00:24:48,380
and getBody, and that's
the same as before.

581
00:24:48,380 --> 00:24:50,350
But now the technique we're
using here starts

582
00:24:50,350 --> 00:24:51,620
to diverge a bit.

583
00:24:51,620 --> 00:24:53,590
So now we say Edit as Text.

584
00:24:53,590 --> 00:24:55,590
You might recall we did this
a minute ago on a single

585
00:24:55,590 --> 00:24:59,010
paragraph to get just the
text of a paragraph.

586
00:24:59,010 --> 00:25:01,820
But we can also do this on the
entire document body, and this

587
00:25:01,820 --> 00:25:04,480
is going to give us back a text
element that contains

588
00:25:04,480 --> 00:25:07,240
just the textual contents of the
paragraph with things like

589
00:25:07,240 --> 00:25:10,390
inline images or inline drawings
just left out.

590
00:25:10,390 --> 00:25:11,940
So they're still left
in the document.

591
00:25:11,940 --> 00:25:14,440
They won't be removed from the
document that the user sees.

592
00:25:14,440 --> 00:25:16,940
But they're removed from the
model of the document, or the

593
00:25:16,940 --> 00:25:19,780
view of the document, that's
exposed to Apps Script.

594
00:25:19,780 --> 00:25:21,780
And then we can use normal
string operations in

595
00:25:21,780 --> 00:25:22,850
JavaScript.

596
00:25:22,850 --> 00:25:24,710
For example, here we have a
regular expression in the

597
00:25:24,710 --> 00:25:26,350
middle of the slide.

598
00:25:26,350 --> 00:25:28,760
And that matches parenthesized
substrings in the

599
00:25:28,760 --> 00:25:30,920
document, or citations.

600
00:25:30,920 --> 00:25:32,820
And you can tell it's a regular
expression because it

601
00:25:32,820 --> 00:25:34,450
is horrendously ugly
and it's just an

602
00:25:34,450 --> 00:25:35,980
abomination to look at.

603
00:25:35,980 --> 00:25:38,220
But that's just standard
JavaScript.

604
00:25:38,220 --> 00:25:39,960
And so we do a JavaScript
regular

605
00:25:39,960 --> 00:25:41,770
expression match in a loop.

606
00:25:41,770 --> 00:25:43,890
And we loop over all the
citations in the string

607
00:25:43,890 --> 00:25:45,790
contents of the document body.

608
00:25:45,790 --> 00:25:48,160
And for each of those citations,
what we do is we

609
00:25:48,160 --> 00:25:50,090
say, OK, we have some
logic to find out.

610
00:25:50,090 --> 00:25:51,180
Does it go with the source that

611
00:25:51,180 --> 00:25:52,410
we're trying to highlight?

612
00:25:52,410 --> 00:25:55,470
And if it does, we want to set
the background color for that

613
00:25:55,470 --> 00:25:58,000
substring in the document
body to yellow.

614
00:25:58,000 --> 00:26:00,130
So we use this body text element
that we got in the

615
00:26:00,130 --> 00:26:02,780
first step, and we say
body text element

616
00:26:02,780 --> 00:26:04,360
set background color.

617
00:26:04,360 --> 00:26:06,040
And that takes just
three things.

618
00:26:06,040 --> 00:26:08,920
It takes the first two
parameters as indices, so a

619
00:26:08,920 --> 00:26:11,270
start index and an end index.

620
00:26:11,270 --> 00:26:13,330
And we compute these just
using the normal regular

621
00:26:13,330 --> 00:26:16,860
expression indices we got from
the RegEx match, because these

622
00:26:16,860 --> 00:26:19,620
indices, they're just character
text indices.

623
00:26:19,620 --> 00:26:21,540
They ignore things like
element child

624
00:26:21,540 --> 00:26:23,640
positions and so forth.

625
00:26:23,640 --> 00:26:25,810
And then finally, we just
pass in a color.

626
00:26:25,810 --> 00:26:28,630
So that's the hexidecimal
color code for yellow.

627
00:26:28,630 --> 00:26:29,910
And that's about it.

628
00:26:29,910 --> 00:26:32,380
So this Edit as Text based
approach, you can see it's

629
00:26:32,380 --> 00:26:33,960
very different than
the document tree.

630
00:26:33,960 --> 00:26:35,730
It is not quite as powerful.

631
00:26:35,730 --> 00:26:38,450
The document tree can do
anything to the document,

632
00:26:38,450 --> 00:26:40,830
whereas this can only perform
text and formatting

633
00:26:40,830 --> 00:26:41,880
operations.

634
00:26:41,880 --> 00:26:44,510
But for text and formatting
operations like highlighting

635
00:26:44,510 --> 00:26:47,870
citations in an essay, in fact,
this lets you do the

636
00:26:47,870 --> 00:26:51,380
same thing as you can do with
the tree-based approach, but

637
00:26:51,380 --> 00:26:52,660
in much less code.

638
00:26:52,660 --> 00:26:55,670
And, in my opinion, in code
that's much easier to read,

639
00:26:55,670 --> 00:26:57,710
regular expressions
notwithstanding.

640
00:26:57,710 --> 00:26:59,440
So that's about it.

641
00:26:59,440 --> 00:27:01,290
We have these two models
of the document.

642
00:27:01,290 --> 00:27:04,650
We can work with it either as a
tree, like a web page, or as

643
00:27:04,650 --> 00:27:07,520
a long string of rich text with
formatting attributes

644
00:27:07,520 --> 00:27:10,470
applied to each character
in that string.

645
00:27:10,470 --> 00:27:12,810
There's one other model of
working with the document.

646
00:27:12,810 --> 00:27:15,100
This is not launched yet, but
it's going to be coming out in

647
00:27:15,100 --> 00:27:17,760
the next couple of weeks after
I/O. And you saw Saurabh

648
00:27:17,760 --> 00:27:20,330
actually hinted at
it in his demo.

649
00:27:20,330 --> 00:27:22,600
And that is, we're going to give
you an API to work with

650
00:27:22,600 --> 00:27:25,000
cursor and selection
in the document.

651
00:27:25,000 --> 00:27:27,240
So when the user positions their
cursor in some text or

652
00:27:27,240 --> 00:27:30,500
next to an image, or selects a
range of text or a table or

653
00:27:30,500 --> 00:27:32,930
whatever you might have, we're
going to give you the ability

654
00:27:32,930 --> 00:27:35,650
to determine where is the
cursor, or what is the

655
00:27:35,650 --> 00:27:39,260
selection, and to operate on
the cursor or selection by

656
00:27:39,260 --> 00:27:42,400
doing things like inserting
text at the cursor.

657
00:27:42,400 --> 00:27:45,350
So recall from the Bibstro demo
that Saurabh showed, we

658
00:27:45,350 --> 00:27:48,090
have this menu, and we let the
user put their cursor after a

659
00:27:48,090 --> 00:27:50,070
sentence or phrase they
want to cite.

660
00:27:50,070 --> 00:27:52,470
And the user says,
Insert Citation.

661
00:27:52,470 --> 00:27:55,270
And we show them a dialog,
and they pick a source.

662
00:27:55,270 --> 00:27:57,710
And then that source appears
in the document right after

663
00:27:57,710 --> 00:27:59,060
their cursor.

664
00:27:59,060 --> 00:28:00,570
So this is working today.

665
00:28:00,570 --> 00:28:03,410
We're finalizing the API for
launch to give you something

666
00:28:03,410 --> 00:28:05,970
that reduces complexity in
a bunch of edge cases.

667
00:28:05,970 --> 00:28:07,350
There are surprisingly
many edge

668
00:28:07,350 --> 00:28:08,700
cases in document selection.

669
00:28:08,700 --> 00:28:12,340
It's kind of amazing.

670
00:28:12,340 --> 00:28:12,880
So there you go.

671
00:28:12,880 --> 00:28:13,740
That's about it.

672
00:28:13,740 --> 00:28:16,480
We have these four steps that
we use to build this app

673
00:28:16,480 --> 00:28:18,255
called Bibstro, to build
a bibliography

674
00:28:18,255 --> 00:28:20,000
app in Google Docs.

675
00:28:20,000 --> 00:28:22,640
So we created some scripts using
the Script Editor, using

676
00:28:22,640 --> 00:28:24,290
the new Google Docs integration
that we just

677
00:28:24,290 --> 00:28:26,120
launched a couple days ago.

678
00:28:26,120 --> 00:28:28,990
And we extended the Google Docs
UI to add things like

679
00:28:28,990 --> 00:28:31,990
custom menus and dialogs, and
my personal favorite, custom

680
00:28:31,990 --> 00:28:34,540
sidebars, because who doesn't
love a sidebar?

681
00:28:34,540 --> 00:28:36,920
And then we also have the
ability to respond to events,

682
00:28:36,920 --> 00:28:37,730
just like in any other

683
00:28:37,730 --> 00:28:39,890
event-driven programming framework.

684
00:28:39,890 --> 00:28:42,880
And those events can do things,
they can do operations

685
00:28:42,880 --> 00:28:46,150
on the document on behalf of the
user, which is what makes

686
00:28:46,150 --> 00:28:48,140
this all work together and
lets us build apps that

687
00:28:48,140 --> 00:28:49,750
automate Google Docs &mdash;

688
00:28:49,750 --> 00:28:53,500
apps like Bibstro or apps like
whatever you all want to do

689
00:28:53,500 --> 00:28:56,940
any use case, document workflow,
whatever you want in

690
00:28:56,940 --> 00:28:58,070
Google Docs.

691
00:28:58,070 --> 00:28:59,340
I'm excited to see what
you all are going

692
00:28:59,340 --> 00:29:00,460
to build with this.

693
00:29:00,460 --> 00:29:02,320
I kind of hope you give it a
better name than Bibstro,

694
00:29:02,320 --> 00:29:04,510
because that's just bad.

695
00:29:04,510 --> 00:29:06,430
So we have this.

696
00:29:06,430 --> 00:29:07,680
That's about it for the talk.

697
00:29:07,680 --> 00:29:09,850
We have some links here
to our documentation.

698
00:29:09,850 --> 00:29:12,240
And also, I know I brushed over
the code samples kind of

699
00:29:12,240 --> 00:29:14,380
quickly to get in a couple
of examples.

700
00:29:14,380 --> 00:29:16,670
So we're going to be posting
all of the code for this

701
00:29:16,670 --> 00:29:20,530
Bibstro sample app online in a
couple of weeks after I/O. So

702
00:29:20,530 --> 00:29:22,910
keep your eye on, say, the
Google Apps Developer Blog and

703
00:29:22,910 --> 00:29:24,920
the Apps Script pages on
developers.google.com.

704
00:29:24,920 --> 00:29:28,190
So I think that's about it.

705
00:29:28,190 --> 00:29:29,530
Thank you all for watching.

706
00:29:29,530 --> 00:29:32,150
And, at this point, if you have
any questions, looks like

707
00:29:32,150 --> 00:29:33,920
there's a couple of mics in
the middle of the room.

708
00:29:33,920 --> 00:29:35,960
So come up and talk
into the mic.

709
00:29:35,960 --> 00:29:36,798
Thank you.

710
00:29:36,798 --> 00:29:46,360
[APPLAUSE]

711
00:29:46,360 --> 00:29:49,320
AUDIENCE: Hi Is this available
only for Docs, or available

712
00:29:49,320 --> 00:29:51,520
also for the Spreadsheets
and the [INAUDIBLE]?

713
00:29:51,520 --> 00:29:55,320

714
00:29:55,320 --> 00:29:57,220
SAURABH GUPTA: Today, you
can use scripts in

715
00:29:57,220 --> 00:29:58,580
Spreadsheets and cite.

716
00:29:58,580 --> 00:30:02,070
In yesterday's session, we
announced in Forms as well and

717
00:30:02,070 --> 00:30:04,460
now in Documents.

718
00:30:04,460 --> 00:30:06,020
Yes, please.

719
00:30:06,020 --> 00:30:07,690
AUDIENCE: The adding of the
menus is different on

720
00:30:07,690 --> 00:30:08,630
Spreadsheets, right?

721
00:30:08,630 --> 00:30:12,110
So in Spreadsheets,
you say, Add Menu.

722
00:30:12,110 --> 00:30:14,830
And so when are you going
to integrate the same

723
00:30:14,830 --> 00:30:20,580
functionality, the new UI
service to add the sidebars?

724
00:30:20,580 --> 00:30:24,730
What's the timeline for that
coming on Spreadsheets?

725
00:30:24,730 --> 00:30:25,910
SAURABH GUPTA: It will
happen pretty soon,

726
00:30:25,910 --> 00:30:27,730
and this will converge.

727
00:30:27,730 --> 00:30:33,370
As you saw in Forms and Docs,
we are creating a concept of

728
00:30:33,370 --> 00:30:34,845
DocumentApp.getUi.

729
00:30:34,845 --> 00:30:37,080
So if you can get handle to the
UI, you'll see something

730
00:30:37,080 --> 00:30:38,660
similar in Spreadsheets
as well.

731
00:30:38,660 --> 00:30:39,920
JONATHAN RASCHER: Right, and
this will include the full

732
00:30:39,920 --> 00:30:41,630
range of what we talked
about today.

733
00:30:41,630 --> 00:30:44,070
So things like, for example,
the sidebar that you can't

734
00:30:44,070 --> 00:30:45,780
show today in Spreadsheets.

735
00:30:45,780 --> 00:30:48,950
That sidebar that exists now in
DocumentApp and in FormApp

736
00:30:48,950 --> 00:30:50,360
will be coming to SpreadsheetApp
in the next

737
00:30:50,360 --> 00:30:51,630
couple of weeks.

738
00:30:51,630 --> 00:30:57,180
AUDIENCE: Just on the new
cursor-based location, would

739
00:30:57,180 --> 00:31:01,520
we get a right click menu?

740
00:31:01,520 --> 00:31:03,250
SAURABH GUPTA: We have not
planned for it, but let's talk

741
00:31:03,250 --> 00:31:04,980
about it at the Office Hours.

742
00:31:04,980 --> 00:31:06,080
AUDIENCE: OK, thanks.

743
00:31:06,080 --> 00:31:08,170
SAURABH GUPTA: Yes, please?

744
00:31:08,170 --> 00:31:09,140
AUDIENCE: I've got a question
about deployment.

745
00:31:09,140 --> 00:31:12,790
So is it something I can create
only inside my own

746
00:31:12,790 --> 00:31:15,910
document, or is it something I
can create once and deploy it

747
00:31:15,910 --> 00:31:17,812
to all the users in my domain?

748
00:31:17,812 --> 00:31:19,680
SAURABH GUPTA: So what you're
asking is really how you

749
00:31:19,680 --> 00:31:23,380
distribute a script that can
be inserted into all the

750
00:31:23,380 --> 00:31:25,210
documents across a number
of users and stuff.

751
00:31:25,210 --> 00:31:26,700
So we're working on that.

752
00:31:26,700 --> 00:31:30,090
And do watch the Google Apps
Developers Blog for

753
00:31:30,090 --> 00:31:31,180
more news on that.

754
00:31:31,180 --> 00:31:33,992
It's not there yet,
but coming soon.

755
00:31:33,992 --> 00:31:36,710
AUDIENCE: OK, thanks.

756
00:31:36,710 --> 00:31:38,020
SAURABH GUPTA: Yes, please.

757
00:31:38,020 --> 00:31:40,530
AUDIENCE: I wanted to ask about
if you've considered

758
00:31:40,530 --> 00:31:42,020
cross-document integration.

759
00:31:42,020 --> 00:31:44,000
So for example, if I have a
spreadsheet I want to use as a

760
00:31:44,000 --> 00:31:48,720
data source to fill a Doc with
the citations, for example, or

761
00:31:48,720 --> 00:31:53,030
if I want to hit an external
data source, such as I've got

762
00:31:53,030 --> 00:31:55,160
a Cloud SQL database running and
I want to be able to pull

763
00:31:55,160 --> 00:31:57,800
content from that into a report,
for example, and then

764
00:31:57,800 --> 00:31:59,680
drive that into a Doc.

765
00:31:59,680 --> 00:32:01,570
JONATHAN RASCHER: So that is
an excellent question.

766
00:32:01,570 --> 00:32:04,510
And I think the answer is, we
don't have anything pre-built

767
00:32:04,510 --> 00:32:06,360
to do this, but I think we give
you all the tools you'd

768
00:32:06,360 --> 00:32:07,640
need to do that.

769
00:32:07,640 --> 00:32:10,030
For example, we have
services called

770
00:32:10,030 --> 00:32:12,190
SpreadsheetApp and DriveApp.

771
00:32:12,190 --> 00:32:13,490
So what you could do &mdash;

772
00:32:13,490 --> 00:32:15,280
I can't think of any
reason not to &mdash;

773
00:32:15,280 --> 00:32:18,720
is you could have a sidebar in
Google Docs, or a dialog, that

774
00:32:18,720 --> 00:32:21,910
uses the DriveApp service to let
the user pick a file from

775
00:32:21,910 --> 00:32:24,630
their Google Drive, to pick a
spreadsheet, and then use the

776
00:32:24,630 --> 00:32:28,250
SpreadsheetApp to take that
spreadsheet, read it in data

777
00:32:28,250 --> 00:32:30,080
format, and populate it
into the document.

778
00:32:30,080 --> 00:32:33,070
So there's nothing prefabricated
to do this, but

779
00:32:33,070 --> 00:32:34,833
I believe we have all
the tools for

780
00:32:34,833 --> 00:32:36,083
you to do that today.

781
00:32:36,083 --> 00:32:38,950

782
00:32:38,950 --> 00:32:40,550
SAURABH GUPTA: Yes, please?

783
00:32:40,550 --> 00:32:42,180
One more question.

784
00:32:42,180 --> 00:32:44,610
AUDIENCE: Are you planning
on extending the document

785
00:32:44,610 --> 00:32:48,550
permissions to, for example,
keep allowance for editing

786
00:32:48,550 --> 00:32:53,630
document but not editing the
scripts inside of documents?

787
00:32:53,630 --> 00:32:54,040
SAURABH GUPTA: I'm sorry.

788
00:32:54,040 --> 00:32:55,520
I did not understand
your question.

789
00:32:55,520 --> 00:32:58,070
AUDIENCE: So when you give
somebody a permission

790
00:32:58,070 --> 00:33:01,080
currently to edit your document,
you automatically

791
00:33:01,080 --> 00:33:05,160
give them the permission to edit
scripts in the document.

792
00:33:05,160 --> 00:33:09,550
Are you planning on having a
separate permission to allow

793
00:33:09,550 --> 00:33:13,500
editing the document, but not
allowing editing the scripts?

794
00:33:13,500 --> 00:33:14,870
SAURABH GUPTA: That's an
interesting question, and we

795
00:33:14,870 --> 00:33:16,390
debated this a lot.

796
00:33:16,390 --> 00:33:18,940
When you create scripts,
they're

797
00:33:18,940 --> 00:33:19,870
a part of the document.

798
00:33:19,870 --> 00:33:23,340
They are inherent in the
sharing model from the

799
00:33:23,340 --> 00:33:24,130
document itself.

800
00:33:24,130 --> 00:33:26,890
So Edit privileges on the
document mean Edit privileges

801
00:33:26,890 --> 00:33:27,770
on the script.

802
00:33:27,770 --> 00:33:32,310
However, as a developer, what
you can do is you can use

803
00:33:32,310 --> 00:33:36,010
libraries and then sort of
abstract that out where you're

804
00:33:36,010 --> 00:33:39,030
using a library and not giving
editor permissions on the

805
00:33:39,030 --> 00:33:40,080
library, just a view.

806
00:33:40,080 --> 00:33:42,370
And so you can abstract
some of that out.

807
00:33:42,370 --> 00:33:45,280
But really, what might help
you is things that we are

808
00:33:45,280 --> 00:33:47,990
working on, which is the
distribution model, which is

809
00:33:47,990 --> 00:33:52,720
how do you take a script and
just let users install it in

810
00:33:52,720 --> 00:33:54,900
their documents and stuff.

811
00:33:54,900 --> 00:33:56,180
JONATHAN RASCHER: Yeah,
do you want to &mdash;

812
00:33:56,180 --> 00:33:58,260
AUDIENCE: Can I control the
existing menu of a Google Doc,

813
00:33:58,260 --> 00:33:59,900
like download or print?

814
00:33:59,900 --> 00:34:02,460
If I want to remove
that or disable

815
00:34:02,460 --> 00:34:05,930
that, is that possible?

816
00:34:05,930 --> 00:34:07,040
SAURABH GUPTA: Not today.

817
00:34:07,040 --> 00:34:09,300
You can insert a new
top level menu.

818
00:34:09,300 --> 00:34:12,639
You cannot tinker around with
the existing native menu

819
00:34:12,639 --> 00:34:13,705
options just yet.

820
00:34:13,705 --> 00:34:14,120
JONATHAN RASCHER: Right.

821
00:34:14,120 --> 00:34:16,719
And we've thought about things
like this, but there's some

822
00:34:16,719 --> 00:34:17,830
intricacies involved.

823
00:34:17,830 --> 00:34:20,739
For example, Google Docs can
change their menu structure as

824
00:34:20,739 --> 00:34:23,540
they add features or just as
they move menu items around.

825
00:34:23,540 --> 00:34:26,100
And you wouldn't want your
script to break, for example,

826
00:34:26,100 --> 00:34:28,429
if a Google Docs menu item
wasn't in the location you

827
00:34:28,429 --> 00:34:29,679
expected it to be at.

828
00:34:29,679 --> 00:34:32,440

829
00:34:32,440 --> 00:34:33,440
AUDIENCE: [INAUDIBLE]

830
00:34:33,440 --> 00:34:36,389
is for disabling downloads.

831
00:34:36,389 --> 00:34:39,010
Sometimes you want to share a
folder, and you want people to

832
00:34:39,010 --> 00:34:40,350
only read documents.

833
00:34:40,350 --> 00:34:43,120
And except for PDFs, where
really you can disable

834
00:34:43,120 --> 00:34:47,780
downloads, you can't do that
on most document types.

835
00:34:47,780 --> 00:34:50,400
SAURABH GUPTA: So if I rephrase
your question, you

836
00:34:50,400 --> 00:34:52,690
want more control over whether
a document can be

837
00:34:52,690 --> 00:34:53,480
downloaded or not?

838
00:34:53,480 --> 00:34:55,915
AUDIENCE: Yeah.

839
00:34:55,915 --> 00:34:57,380
AUDIENCE: [INAUDIBLE].

840
00:34:57,380 --> 00:34:58,030
SAURABH GUPTA: I'm sorry?

841
00:34:58,030 --> 00:35:00,770
AUDIENCE: [INAUDIBLE].

842
00:35:00,770 --> 00:35:02,190
SAURABH GUPTA: You cannot
play around with the

843
00:35:02,190 --> 00:35:03,810
existing menu options.

844
00:35:03,810 --> 00:35:06,530
What you can do is if you want
to build an interesting app,

845
00:35:06,530 --> 00:35:11,572
you can add new menu options,
and let users use all of that.

846
00:35:11,572 --> 00:35:13,496
AUDIENCE: [INAUDIBLE].

847
00:35:13,496 --> 00:35:16,184
SAURABH GUPTA: Can you please
come up to the mic?

848
00:35:16,184 --> 00:35:18,670
AUDIENCE: Is this in your
roadmap, controlling the

849
00:35:18,670 --> 00:35:20,560
existing menu items, because we
do a lot of requests from

850
00:35:20,560 --> 00:35:23,200
customers, I can share a
document with someone, but I

851
00:35:23,200 --> 00:35:26,010
don't want them to print
them or download them &mdash;

852
00:35:26,010 --> 00:35:28,890
just view it.

853
00:35:28,890 --> 00:35:29,210
SAURABH GUPTA: Yeah.

854
00:35:29,210 --> 00:35:31,070
I mean, you can share
documents with View

855
00:35:31,070 --> 00:35:33,620
privileges, and that's a limited
set of things that you

856
00:35:33,620 --> 00:35:35,080
can do on a document,
and that's about it.

857
00:35:35,080 --> 00:35:38,070

858
00:35:38,070 --> 00:35:40,480
Let's just check online if
there are more questions.

859
00:35:40,480 --> 00:35:42,630
Any questions?

860
00:35:42,630 --> 00:35:44,220
No questions.

861
00:35:44,220 --> 00:35:44,800
Thank you.

862
00:35:44,800 --> 00:35:45,850
JONATHAN RASCHER: Thank
you very much.

863
00:35:45,850 --> 00:35:52,722
[APPLAUSE]

