1
00:00:00,000 --> 00:00:00,708
MALE SPEAKER: OK.

2
00:00:00,708 --> 00:00:03,630
So say we solve off line.

3
00:00:03,630 --> 00:00:08,025
And we improve the layout and
paint, and all that stuff.

4
00:00:08,025 --> 00:00:09,400
That's great and
all, but there's

5
00:00:09,400 --> 00:00:11,070
another piece of
the puzzle missing.

6
00:00:11,070 --> 00:00:13,990
And that's raw computation.

7
00:00:13,990 --> 00:00:15,950
So you wanted to do
something like a physics

8
00:00:15,950 --> 00:00:19,420
engine or real-time
video analysis.

9
00:00:19,420 --> 00:00:21,100
Pick out things that
are in an image.

10
00:00:21,100 --> 00:00:25,140
Face recognition over a whole
audience full of people.

11
00:00:25,140 --> 00:00:27,630
Can we get the performance
of near-native code

12
00:00:27,630 --> 00:00:30,660
without throwing security
out of the window?

13
00:00:30,660 --> 00:00:33,100
Well, here to say yes, and
hopefully some other words,

14
00:00:33,100 --> 00:00:35,938
it's Molly Mackinlay and
David Sehr, everyone.

15
00:00:35,938 --> 00:00:39,770
[APPLAUSE]

16
00:00:39,770 --> 00:00:42,500
DAVID SEHR: So it is really
the last talk of the day,

17
00:00:42,500 --> 00:00:44,360
so I don't want to
keep you too long.

18
00:00:44,360 --> 00:00:45,210
But we're going to talk
to you about something

19
00:00:45,210 --> 00:00:47,310
we think is really great &mdash;
Portable Native Client.

20
00:00:47,310 --> 00:00:47,979
I'm David Sehr.

21
00:00:47,979 --> 00:00:49,520
I'm the TL of the
Native Client team.

22
00:00:49,520 --> 00:00:51,228
MOLLY MACKINLAY: And
I'm Molly Mackinlay.

23
00:00:51,228 --> 00:00:52,940
I'm the PM on the
Native Client team.

24
00:00:52,940 --> 00:00:55,590
And you are getting to your
drinks soon, I promise.

25
00:00:55,590 --> 00:00:57,220
But we really appreciate
your attention

26
00:00:57,220 --> 00:00:59,760
for this final talk of the day.

27
00:00:59,760 --> 00:01:02,660
So I want to start off about
where Linus started off,

28
00:01:02,660 --> 00:01:04,680
with the fact that we
have a new web today.

29
00:01:04,680 --> 00:01:08,260
Our expectations for what you
can do on the web are changing.

30
00:01:08,260 --> 00:01:11,220
This native app on a
phone, versus a native app

31
00:01:11,220 --> 00:01:14,030
on a computer, versus
a website that you're

32
00:01:14,030 --> 00:01:17,090
navigating to &mdash; these are
all starting to emerge.

33
00:01:17,090 --> 00:01:19,060
We aren't in the '90s anymore.

34
00:01:19,060 --> 00:01:23,064
Back in 1995, we had a
website that was mostly text.

35
00:01:23,064 --> 00:01:23,980
There were some links.

36
00:01:23,980 --> 00:01:25,700
You could click on some stuff.

37
00:01:25,700 --> 00:01:30,760
But mostly, it was
text, as you can see.

38
00:01:30,760 --> 00:01:33,660
We ended up having new
ways to link to things.

39
00:01:33,660 --> 00:01:37,430
We had Yahoo, Microsoft,
and even Google.

40
00:01:37,430 --> 00:01:40,790
It was pretty basic,
our interactions we had.

41
00:01:40,790 --> 00:01:44,770
Fast forward to today, and
we have much more rich ways

42
00:01:44,770 --> 00:01:46,700
of interacting with websites.

43
00:01:46,700 --> 00:01:51,510
Now we have interactive video
editing, data visualization,

44
00:01:51,510 --> 00:01:55,880
ways of showing what our
solar system looks like,

45
00:01:55,880 --> 00:01:57,500
and mapping applications.

46
00:01:57,500 --> 00:02:00,480
The web today is way more rich.

47
00:02:00,480 --> 00:02:03,790
One example, the Google+
Photos application.

48
00:02:03,790 --> 00:02:06,520
This is something you'd
expect much more on desktop,

49
00:02:06,520 --> 00:02:09,160
in Photoshop, than in a
web application you just

50
00:02:09,160 --> 00:02:10,520
navigate to.

51
00:02:10,520 --> 00:02:12,882
I'm going to start
off with a fast demo,

52
00:02:12,882 --> 00:02:14,590
just to keep you guys
from getting bored.

53
00:02:14,590 --> 00:02:18,290

54
00:02:18,290 --> 00:02:21,260
So here, hopefully, is my lion.

55
00:02:21,260 --> 00:02:25,740
Let's go into the Edit mode.

56
00:02:25,740 --> 00:02:26,860
Move this over here.

57
00:02:26,860 --> 00:02:29,370

58
00:02:29,370 --> 00:02:34,623
Maybe resize our window a
little bit, potentially.

59
00:02:34,623 --> 00:02:37,611

60
00:02:37,611 --> 00:02:38,110
Drag.

61
00:02:38,110 --> 00:02:40,470
[? Green slide. ?]

62
00:02:40,470 --> 00:02:43,880
That might work.

63
00:02:43,880 --> 00:02:44,566
Perfect.

64
00:02:44,566 --> 00:02:45,190
OK.

65
00:02:45,190 --> 00:02:45,740
Lion.

66
00:02:45,740 --> 00:02:46,710
Huzzah.

67
00:02:46,710 --> 00:02:49,000
We can do some cool stuff,
like tuning our image.

68
00:02:49,000 --> 00:02:51,770
You can go and play with
some sliders yourself.

69
00:02:51,770 --> 00:02:55,330
Or just go with what
they're suggesting.

70
00:02:55,330 --> 00:02:58,250
We could Pop or Moody.

71
00:02:58,250 --> 00:02:59,950
Kinda cool.

72
00:02:59,950 --> 00:03:01,740
I'm always a Pop person.

73
00:03:01,740 --> 00:03:04,290
Let's go saturation level up.

74
00:03:04,290 --> 00:03:06,055
And apply that for
a little while.

75
00:03:06,055 --> 00:03:07,845
We also have a lot of
really cool filters

76
00:03:07,845 --> 00:03:11,090
that you can apply,
just right there.

77
00:03:11,090 --> 00:03:14,380
Some of my favorites
are these retro looks.

78
00:03:14,380 --> 00:03:17,110
I'm not retro, I don't know
what that really means,

79
00:03:17,110 --> 00:03:18,890
but they look cool.

80
00:03:18,890 --> 00:03:21,445
So Voyager is a fun one.

81
00:03:21,445 --> 00:03:23,700
You can also just shuffle
through it randomly

82
00:03:23,700 --> 00:03:25,315
until you find one you like.

83
00:03:25,315 --> 00:03:27,160
Wow, that looks funky.

84
00:03:27,160 --> 00:03:29,014
OK, let's apply that.

85
00:03:29,014 --> 00:03:31,180
And then bam, you have a
completely different image.

86
00:03:31,180 --> 00:03:32,590
Like, I don't know Photoshop.

87
00:03:32,590 --> 00:03:35,240
I would not know how to
do that if you put me

88
00:03:35,240 --> 00:03:36,800
on a native
application, and I had

89
00:03:36,800 --> 00:03:38,900
to edit this pixel by pixel.

90
00:03:38,900 --> 00:03:41,300
But compare the
images we have now.

91
00:03:41,300 --> 00:03:43,960
I've created a completely
different, and different style

92
00:03:43,960 --> 00:03:45,470
image than I had before.

93
00:03:45,470 --> 00:03:46,850
It's a really rich experience.

94
00:03:46,850 --> 00:03:50,160
And I think you'll all
agree, 20 years ago

95
00:03:50,160 --> 00:03:51,900
you would not see
this on a website.

96
00:03:51,900 --> 00:03:56,060
Today we're
expecting a lot more.

97
00:03:56,060 --> 00:03:57,970
Continuing on, these
native features,

98
00:03:57,970 --> 00:04:00,430
they're coming to
our web applications.

99
00:04:00,430 --> 00:04:02,110
Back in the day,
AutoCAD &mdash; it really

100
00:04:02,110 --> 00:04:04,370
could only exist on a PC.

101
00:04:04,370 --> 00:04:08,680
Now there's a
Chrome app for that.

102
00:04:08,680 --> 00:04:12,290
We're not only asking for the
native capabilities in our web.

103
00:04:12,290 --> 00:04:15,730
We're having to ask developers
to develop for many platforms.

104
00:04:15,730 --> 00:04:20,870
They have a C++ application,
an Objective-C application,

105
00:04:20,870 --> 00:04:22,005
a JavaScript application.

106
00:04:22,005 --> 00:04:25,250
They're maintaining
many development stacks.

107
00:04:25,250 --> 00:04:26,810
Wouldn't it be great
if we could only

108
00:04:26,810 --> 00:04:28,910
maintain one stack
that could then

109
00:04:28,910 --> 00:04:30,950
be applied to these many
different platforms?

110
00:04:30,950 --> 00:04:35,270
Now that's an ideal I
would like to fight for.

111
00:04:35,270 --> 00:04:37,080
DAVID SEHR: OK, from
almost the beginning,

112
00:04:37,080 --> 00:04:39,580
people recognized, I think, the
potential of a web platform.

113
00:04:39,580 --> 00:04:43,370
But as Molly just described
just a second ago,

114
00:04:43,370 --> 00:04:45,892
the web didn't really have the
capability at the beginning

115
00:04:45,892 --> 00:04:48,100
to do some of these rich
interactions that we wanted.

116
00:04:48,100 --> 00:04:53,580
So way back in the mid
'90s, browser vendors

117
00:04:53,580 --> 00:04:57,120
added extension platforms,
or extension APIs.

118
00:04:57,120 --> 00:05:02,600
What in fact were things
like ActiveX and NPAPI.

119
00:05:02,600 --> 00:05:05,680
These were ways to get at the
underlying operating system

120
00:05:05,680 --> 00:05:08,280
features for things like
embedding a media controller,

121
00:05:08,280 --> 00:05:10,900
so you can listen to
your CDs, in those days.

122
00:05:10,900 --> 00:05:14,020
Or put up a local
database server.

123
00:05:14,020 --> 00:05:16,390
And these were
ways, as I say, that

124
00:05:16,390 --> 00:05:18,360
give you access to
some of the features

125
00:05:18,360 --> 00:05:20,850
that they thought were
cool in the native platform

126
00:05:20,850 --> 00:05:22,960
by drilling through
with these plugins

127
00:05:22,960 --> 00:05:26,010
to the underlying
native capabilities.

128
00:05:26,010 --> 00:05:28,860
Now, because these were
coding to the underlying

129
00:05:28,860 --> 00:05:31,050
native operating
system, they tended

130
00:05:31,050 --> 00:05:34,470
to be either platform specific,
in the case of ActiveX.

131
00:05:34,470 --> 00:05:36,955
Or things like NPAPI, where
you had to kind of know

132
00:05:36,955 --> 00:05:38,580
which platform you
were going to be on.

133
00:05:38,580 --> 00:05:40,871
So it was going to be compiled
for Windows or for Linux

134
00:05:40,871 --> 00:05:44,997
or for Mac, depending upon
which browser the user happened

135
00:05:44,997 --> 00:05:46,080
to be running at the time.

136
00:05:46,080 --> 00:05:48,540
Maybe a different set of
browser APIs, et cetera.

137
00:05:48,540 --> 00:05:50,150
So this is kind of a
complicated and cumbersome sort

138
00:05:50,150 --> 00:05:51,670
of way of programming
these things.

139
00:05:51,670 --> 00:05:55,940
And so you see at
about the same time,

140
00:05:55,940 --> 00:05:59,190
these plugins come up
that provide capabilities

141
00:05:59,190 --> 00:06:01,920
for getting at those underlying
operating system features,

142
00:06:01,920 --> 00:06:04,770
but through better
programming approaches.

143
00:06:04,770 --> 00:06:05,830
So you have Java.

144
00:06:05,830 --> 00:06:09,740
You have Flash and its
predecessors coming.

145
00:06:09,740 --> 00:06:12,370
And these are ways,
again, that gave you

146
00:06:12,370 --> 00:06:14,330
access to some of the
underlying features,

147
00:06:14,330 --> 00:06:19,580
such as canvases to draw on or
underlying database engines, et

148
00:06:19,580 --> 00:06:21,300
cetera.

149
00:06:21,300 --> 00:06:23,520
And much later, then
you have Silverlight,

150
00:06:23,520 --> 00:06:25,960
which is giving you the
capability to do this.

151
00:06:25,960 --> 00:06:28,720
And of course across a
broad spectrum of languages

152
00:06:28,720 --> 00:06:30,510
on the .NET framework.

153
00:06:30,510 --> 00:06:34,710
So this is sort of what
happened between the '90s

154
00:06:34,710 --> 00:06:37,665
and the mid-2000s were plugins.

155
00:06:37,665 --> 00:06:41,290
Now, plugins had a
number of issues,

156
00:06:41,290 --> 00:06:42,880
as I'm sure you're all aware.

157
00:06:42,880 --> 00:06:46,340
Plugins have this user
interaction where, gee, I

158
00:06:46,340 --> 00:06:48,000
go to a page, and it
says I need Flash.

159
00:06:48,000 --> 00:06:49,374
But I don't have
Flash installed,

160
00:06:49,374 --> 00:06:51,546
so I get this popup saying
I need to install Flash.

161
00:06:51,546 --> 00:06:53,170
Or I need Silverlight
for this content.

162
00:06:53,170 --> 00:06:54,935
Or I as a developer
need to know,

163
00:06:54,935 --> 00:06:56,310
am I going to get
to the people I

164
00:06:56,310 --> 00:06:59,180
want to get to if they don't
have the plugins installed?

165
00:06:59,180 --> 00:07:02,700
So it's kind of an unfortunate
interaction that way.

166
00:07:02,700 --> 00:07:05,689
And also, the plugins
tended to be &mdash; well,

167
00:07:05,689 --> 00:07:07,480
you had what was running
inside the plugin.

168
00:07:07,480 --> 00:07:08,800
And you had what was
running outside the plugin.

169
00:07:08,800 --> 00:07:11,008
And there was always this
sort of jarring interaction

170
00:07:11,008 --> 00:07:12,230
between them.

171
00:07:12,230 --> 00:07:14,740
Which made for
sort of clunky UI,

172
00:07:14,740 --> 00:07:18,310
if you didn't really work very
hard at isolating that, or not

173
00:07:18,310 --> 00:07:21,020
isolating that little box,
that had your Java applet

174
00:07:21,020 --> 00:07:24,230
running in it, from
the rest of the page.

175
00:07:24,230 --> 00:07:28,710
And sort of most concerning
of all, all of the plugin APIs

176
00:07:28,710 --> 00:07:33,160
provided you with direct, native
access to the operating system.

177
00:07:33,160 --> 00:07:35,810
And that made the
possibility that bugs

178
00:07:35,810 --> 00:07:38,690
became security issues.

179
00:07:38,690 --> 00:07:40,820
And not just became
security issues,

180
00:07:40,820 --> 00:07:42,570
became security issues
that were prevalent

181
00:07:42,570 --> 00:07:43,486
just about everywhere.

182
00:07:43,486 --> 00:07:47,080
And just about all the plugins
we see security issues that

183
00:07:47,080 --> 00:07:50,400
have become &mdash; and this is
2009, 2010 from Symantec &mdash;

184
00:07:50,400 --> 00:07:55,770
become serious issues
for security on the web.

185
00:07:55,770 --> 00:07:58,280
So fast forward now to 2008.

186
00:07:58,280 --> 00:08:01,671
2008, JavaScript
takes a new turn.

187
00:08:01,671 --> 00:08:03,670
Kernel ignites the
JavaScript performance spiral

188
00:08:03,670 --> 00:08:05,753
that we've all witnessed
over the last five years.

189
00:08:05,753 --> 00:08:08,070
And the web's not been static.

190
00:08:08,070 --> 00:08:10,652
The browser has been growing
this open web platform that

191
00:08:10,652 --> 00:08:12,860
has all these features we've
been hearing about today

192
00:08:12,860 --> 00:08:14,320
and we'll hear about tomorrow.

193
00:08:14,320 --> 00:08:16,450
And so it's a much
richer platform.

194
00:08:16,450 --> 00:08:18,770
So with JavaScript's
performance coming up

195
00:08:18,770 --> 00:08:21,560
and the platform getting
richer, a new approach

196
00:08:21,560 --> 00:08:24,010
to bringing native code to
the web comes to the fore.

197
00:08:24,010 --> 00:08:26,240
And that's exemplified
by Emscripten.

198
00:08:26,240 --> 00:08:29,770
Emscripten is you compile
from native to JavaScript

199
00:08:29,770 --> 00:08:31,830
and run it in the web platform.

200
00:08:31,830 --> 00:08:39,110
And Emscripten, we think, you
get the access to the features

201
00:08:39,110 --> 00:08:41,159
that you're after and
some of the performance &mdash;

202
00:08:41,159 --> 00:08:43,039
most of the
performance, perhaps.

203
00:08:43,039 --> 00:08:48,954
But there are some issues
still with Emscripten.

204
00:08:48,954 --> 00:08:50,370
The first one is,
if you're really

205
00:08:50,370 --> 00:08:53,340
developing a native application,
and it has memory management

206
00:08:53,340 --> 00:08:55,920
issues, for instance,
debugging a null pointer

207
00:08:55,920 --> 00:08:59,550
check in JavaScript is
not as easy as it sounds.

208
00:08:59,550 --> 00:09:03,030
Also, if you're trying to get
to all the native capabilities,

209
00:09:03,030 --> 00:09:06,670
for instance, threads,
it's not there yet.

210
00:09:06,670 --> 00:09:09,310
And furthermore, I said
most of the performance.

211
00:09:09,310 --> 00:09:15,180
Perhaps we get to 2x, within
2x of native performance.

212
00:09:15,180 --> 00:09:17,322
You would still like
to get to the remainder

213
00:09:17,322 --> 00:09:18,155
of that performance.

214
00:09:18,155 --> 00:09:21,485

215
00:09:21,485 --> 00:09:23,110
So that brings us
to, why are we trying

216
00:09:23,110 --> 00:09:24,640
to bring native code to the web?

217
00:09:24,640 --> 00:09:25,830
Why are we talking about
bringing native code

218
00:09:25,830 --> 00:09:26,490
to the web?

219
00:09:26,490 --> 00:09:29,430
As I said, we still think
there's better performance yet

220
00:09:29,430 --> 00:09:29,930
to be had.

221
00:09:29,930 --> 00:09:31,850
From features like
threading, as well as

222
00:09:31,850 --> 00:09:34,980
from that last 50%
or more, and also

223
00:09:34,980 --> 00:09:37,850
increasing the
developer options.

224
00:09:37,850 --> 00:09:40,706
So in this team, we started
the Native Client project.

225
00:09:40,706 --> 00:09:42,080
And the Native
Client Project was

226
00:09:42,080 --> 00:09:45,340
about bringing native
capabilities &mdash; threads,

227
00:09:45,340 --> 00:09:48,260
[? sending ?] instructions, et
cetera &mdash; from the beginning.

228
00:09:48,260 --> 00:09:49,230
Bringing performance.

229
00:09:49,230 --> 00:09:50,780
Trying to get as close
to native performance

230
00:09:50,780 --> 00:09:52,696
as we could get while
still securely executing

231
00:09:52,696 --> 00:09:54,870
your application
in the web browser.

232
00:09:54,870 --> 00:09:57,140
And a familiar developer
model, so you can use GDB.

233
00:09:57,140 --> 00:09:58,831
And if you're a
native developer,

234
00:09:58,831 --> 00:10:00,330
you can debug in
the way that you've

235
00:10:00,330 --> 00:10:01,663
become accustomed to developing.

236
00:10:01,663 --> 00:10:04,077

237
00:10:04,077 --> 00:10:05,660
MOLLY MACKINLAY: In
addition to trying

238
00:10:05,660 --> 00:10:09,340
to bring all of these native
capabilities in performance,

239
00:10:09,340 --> 00:10:11,610
we're also trying to do
something really simple.

240
00:10:11,610 --> 00:10:14,240
We're trying to open up
the web to all developers,

241
00:10:14,240 --> 00:10:16,930
not just developers who have
been graced with the ability

242
00:10:16,930 --> 00:10:18,560
to learn JavaScript.

243
00:10:18,560 --> 00:10:21,910
Many people start out
learning a C or C++ class.

244
00:10:21,910 --> 00:10:23,610
And they go and they
build applications

245
00:10:23,610 --> 00:10:25,665
that are useful and interesting.

246
00:10:25,665 --> 00:10:28,300
And everyone wants to have
access to those things,

247
00:10:28,300 --> 00:10:32,000
but they've been unable to
bring those to the web so far.

248
00:10:32,000 --> 00:10:33,960
And we want to give
them that opportunity.

249
00:10:33,960 --> 00:10:35,950
There are many different
coding languages

250
00:10:35,950 --> 00:10:37,390
that need to be brought.

251
00:10:37,390 --> 00:10:40,280
And we're looking
forward to doing that.

252
00:10:40,280 --> 00:10:43,560
An example of that is
the Bullet Physics demo

253
00:10:43,560 --> 00:10:45,730
that we released with
Portable Native Client.

254
00:10:45,730 --> 00:10:47,830
Let me navigate over here.

255
00:10:47,830 --> 00:10:52,970
Well, maybe navigate over here.

256
00:10:52,970 --> 00:10:54,370
Well, you can see
a sliver of it.

257
00:10:54,370 --> 00:10:55,078
That's something.

258
00:10:55,078 --> 00:10:57,760

259
00:10:57,760 --> 00:11:00,240
Let's expand this again.

260
00:11:00,240 --> 00:11:01,080
Cool.

261
00:11:01,080 --> 00:11:03,270
This is mostly a
JavaScript application.

262
00:11:03,270 --> 00:11:06,290
What it's done is taken a C
library, the Bullet Physics

263
00:11:06,290 --> 00:11:10,230
library, and just embed
that capability in itself.

264
00:11:10,230 --> 00:11:12,770
Now I can interact
with my Jenga thing.

265
00:11:12,770 --> 00:11:13,960
I'm really bad at Jenga.

266
00:11:13,960 --> 00:11:17,620
I've learned that
through this application.

267
00:11:17,620 --> 00:11:19,700
And I can, as a
JavaScript developer,

268
00:11:19,700 --> 00:11:22,360
take advantage of this C
library right here in my page.

269
00:11:22,360 --> 00:11:24,380
And play around
with some things.

270
00:11:24,380 --> 00:11:26,030
Knock over lots of bricks.

271
00:11:26,030 --> 00:11:28,260
So that's one example of
how we could take advantage

272
00:11:28,260 --> 00:11:30,830
of Portable Native Client
to bring native performance

273
00:11:30,830 --> 00:11:33,500
to the web and
native capabilities.

274
00:11:33,500 --> 00:11:36,770
Now let's say that I'm
actually a C and C++ developer,

275
00:11:36,770 --> 00:11:38,630
and that's what I'm
comfortable with.

276
00:11:38,630 --> 00:11:40,230
All right, fine.

277
00:11:40,230 --> 00:11:45,210
I can also &mdash; this is an example
of Lua, a Lua interpreter.

278
00:11:45,210 --> 00:11:47,270
This is written
almost entirely in C.

279
00:11:47,270 --> 00:11:51,100
And I can go and
take my native code

280
00:11:51,100 --> 00:11:53,310
and run it right
here, on the web.

281
00:11:53,310 --> 00:11:55,114
Here I have a &mdash;
well, actually, I

282
00:11:55,114 --> 00:11:56,655
don't know if this
is going to render

283
00:11:56,655 --> 00:11:59,990
very well in our
weirdly &mdash; oh, donuts.

284
00:11:59,990 --> 00:12:01,780
That's surprisingly &mdash;

285
00:12:01,780 --> 00:12:03,880
DAVID SEHR: And who
doesn't like donuts here?

286
00:12:03,880 --> 00:12:06,289
MOLLY MACKINLAY: So this
is mostly a C application.

287
00:12:06,289 --> 00:12:07,580
And I've brought it to the web.

288
00:12:07,580 --> 00:12:10,100
I've brought it to all of
the viewers and people that

289
00:12:10,100 --> 00:12:11,790
can experience it there.

290
00:12:11,790 --> 00:12:15,100
So either way, no matter
what language I develop in,

291
00:12:15,100 --> 00:12:17,410
I now have access to
the web, to bring that

292
00:12:17,410 --> 00:12:20,190
to all of the people who
want to interact with it.

293
00:12:20,190 --> 00:12:26,010

294
00:12:26,010 --> 00:12:26,890
DAVID SEHR: OK.

295
00:12:26,890 --> 00:12:27,650
So you've seen
some of the things

296
00:12:27,650 --> 00:12:28,700
that we're trying
to bring to the web.

297
00:12:28,700 --> 00:12:30,040
And you've seen a
demonstration, in fact,

298
00:12:30,040 --> 00:12:32,206
of some of these things
actually running in the web.

299
00:12:32,206 --> 00:12:33,840
So what is Portable
Native Client?

300
00:12:33,840 --> 00:12:36,390
Portable Native
Client is native code,

301
00:12:36,390 --> 00:12:40,212
security, platform independence.

302
00:12:40,212 --> 00:12:41,920
This is the web we're
talking about here.

303
00:12:41,920 --> 00:12:43,620
We want it to run on
all these platforms

304
00:12:43,620 --> 00:12:45,600
we talked about before.

305
00:12:45,600 --> 00:12:47,790
And performance, performance
as close to native

306
00:12:47,790 --> 00:12:52,599
as we can give
you, with security.

307
00:12:52,599 --> 00:12:54,390
MOLLY MACKINLAY: So
let's talk a little bit

308
00:12:54,390 --> 00:12:57,000
about how we give
you access to native.

309
00:12:57,000 --> 00:13:00,600
Now, this touches a little bit
on Joe's presentation earlier.

310
00:13:00,600 --> 00:13:02,860
But we're using the
Pepper API in order

311
00:13:02,860 --> 00:13:05,170
to give you access to
the native capabilities.

312
00:13:05,170 --> 00:13:10,130
This gives you secure access
to things like USB, OpenGL,

313
00:13:10,130 --> 00:13:15,100
mouse cursor lock, full screen,
and TCP and UDP messaging.

314
00:13:15,100 --> 00:13:16,790
This gives you really
all of the feature

315
00:13:16,790 --> 00:13:21,595
set of a native application,
but in a secure fashion.

316
00:13:21,595 --> 00:13:22,220
DAVID SEHR: OK.

317
00:13:22,220 --> 00:13:23,760
So security I talked
about just a moment ago.

318
00:13:23,760 --> 00:13:25,700
So you want to put
this wonderful piece

319
00:13:25,700 --> 00:13:27,400
that you've put into
your application.

320
00:13:27,400 --> 00:13:29,220
Now, this is a screenshot of
[? Air Mac, ?] which is not

321
00:13:29,220 --> 00:13:30,803
running on PNaCl,
for full disclosure.

322
00:13:30,803 --> 00:13:32,790
But this is the sort
of thing that people

323
00:13:32,790 --> 00:13:34,960
are doing with
Portable Native Client.

324
00:13:34,960 --> 00:13:37,930
So you want to put your piece
of native code in the web.

325
00:13:37,930 --> 00:13:40,410
Well, there are all
these browser APIs

326
00:13:40,410 --> 00:13:42,440
that the plugin APIs
gave you access to.

327
00:13:42,440 --> 00:13:44,700
There are also underlying
operating system APIs.

328
00:13:44,700 --> 00:13:47,450
And we said before
that unfiltered access

329
00:13:47,450 --> 00:13:49,630
to those things was what
gave rise to the security

330
00:13:49,630 --> 00:13:51,930
issues we've all come to
know and [? loathe. ?]

331
00:13:51,930 --> 00:13:54,187
What kind of security issues?

332
00:13:54,187 --> 00:13:56,770
Going and snagging your cookies,
doing something inappropriate

333
00:13:56,770 --> 00:13:57,360
with that.

334
00:13:57,360 --> 00:13:59,690
Going and sending your
credit card number

335
00:13:59,690 --> 00:14:02,992
cross-site to some
malicious site.

336
00:14:02,992 --> 00:14:04,700
Putting a keylogger
in that'll follow you

337
00:14:04,700 --> 00:14:07,570
for the rest of your session.

338
00:14:07,570 --> 00:14:09,970
Turning on your cam and
watching all sorts of things

339
00:14:09,970 --> 00:14:12,770
that you don't want
the web to know about.

340
00:14:12,770 --> 00:14:15,551
Or scraping your screen and
finding your bank account

341
00:14:15,551 --> 00:14:18,050
numbers, or other things that
might be up on another window.

342
00:14:18,050 --> 00:14:19,590
These are the kinds
of things that

343
00:14:19,590 --> 00:14:22,930
unfiltered API access can give
you that are really scary.

344
00:14:22,930 --> 00:14:25,640
So we're about providing
access to the features

345
00:14:25,640 --> 00:14:27,850
that Molly just
talked about, but not

346
00:14:27,850 --> 00:14:29,620
through unfiltered
access to these APIs.

347
00:14:29,620 --> 00:14:32,140

348
00:14:32,140 --> 00:14:35,160
So with regard to
platform independence,

349
00:14:35,160 --> 00:14:37,260
Native Client from
the start was x86.

350
00:14:37,260 --> 00:14:40,580
We added ARM a year or so ago.

351
00:14:40,580 --> 00:14:43,990
And in fact, as Joe said before,
four out of the top five Amazon

352
00:14:43,990 --> 00:14:46,690
laptops are ARM devices
running Chrome OS.

353
00:14:46,690 --> 00:14:50,640
This is something we have a
very central commitment to.

354
00:14:50,640 --> 00:14:55,180
And we also run on the
other desktop platforms

355
00:14:55,180 --> 00:14:58,980
that Chrome runs on &mdash; Windows,
Mac, Linux, Chrome OS.

356
00:14:58,980 --> 00:15:00,749

357
00:15:00,749 --> 00:15:02,540
MOLLY MACKINLAY: Now,
it's really important

358
00:15:02,540 --> 00:15:04,020
to be platform independent.

359
00:15:04,020 --> 00:15:05,930
But I think you'll
all agree that we

360
00:15:05,930 --> 00:15:07,615
want to run on every browser.

361
00:15:07,615 --> 00:15:10,960
And unfortunately right
now, PNaCl is Chrome only.

362
00:15:10,960 --> 00:15:14,259
But we want to have a
cross-browser story as well.

363
00:15:14,259 --> 00:15:15,800
Now, if you're
developing for native,

364
00:15:15,800 --> 00:15:18,040
this is kind of what your
application structure would

365
00:15:18,040 --> 00:15:18,540
look like.

366
00:15:18,540 --> 00:15:20,150
You have your C++ file.

367
00:15:20,150 --> 00:15:22,320
It targets the Pepper
API to get access

368
00:15:22,320 --> 00:15:24,920
to all of those native
capabilities, which then talks

369
00:15:24,920 --> 00:15:27,520
to the browser and gives
you the right link up.

370
00:15:27,520 --> 00:15:29,520
If you're making a
PNaCl application,

371
00:15:29,520 --> 00:15:32,780
you'd compile your C++ file
to a portable executable &mdash;

372
00:15:32,780 --> 00:15:35,560
what we call a pexe &mdash; and
that talks to the Pepper API,

373
00:15:35,560 --> 00:15:37,710
which is included in Chrome.

374
00:15:37,710 --> 00:15:40,480
Now, if you want to go and run
your application on another

375
00:15:40,480 --> 00:15:44,930
browser, you'd compile your
C++ file using Emscripten

376
00:15:44,930 --> 00:15:46,580
into a JavaScript file.

377
00:15:46,580 --> 00:15:48,830
Now that would start trying
to talk to the Pepper API,

378
00:15:48,830 --> 00:15:52,190
but that's not implemented
on another browser.

379
00:15:52,190 --> 00:15:54,750
We've created a solution
called pepper.js.

380
00:15:54,750 --> 00:15:58,750
This links up the calls in
your JavaScript application

381
00:15:58,750 --> 00:16:01,530
to the JavaScript APIs
in other browsers.

382
00:16:01,530 --> 00:16:05,520
Now your application can go
and run on multiple browsers.

383
00:16:05,520 --> 00:16:08,906
Example is one of
our demos, Voronoi.

384
00:16:08,906 --> 00:16:15,990
If I go over here, here I
have the Voronoi application.

385
00:16:15,990 --> 00:16:17,300
It has all of these dots.

386
00:16:17,300 --> 00:16:20,450
They're running around.

387
00:16:20,450 --> 00:16:22,615
I can refresh it.

388
00:16:22,615 --> 00:16:24,620
I'm running in
the PNaCl version,

389
00:16:24,620 --> 00:16:29,450
so that means that I can
hopefully scroll down here

390
00:16:29,450 --> 00:16:30,350
to the bottom.

391
00:16:30,350 --> 00:16:33,489

392
00:16:33,489 --> 00:16:35,530
Hypothetically, I could
scroll down to the bottom

393
00:16:35,530 --> 00:16:37,830
and show you that I could
bump up our thread count

394
00:16:37,830 --> 00:16:40,540
and make this run even faster.

395
00:16:40,540 --> 00:16:42,104
Maybe I can still do that.

396
00:16:42,104 --> 00:16:42,604
Cool.

397
00:16:42,604 --> 00:16:46,396

398
00:16:46,396 --> 00:16:48,332
Hypothetically.

399
00:16:48,332 --> 00:16:49,640
Fair enough.

400
00:16:49,640 --> 00:16:52,570
This always happens.

401
00:16:52,570 --> 00:16:55,540
Another option is that I could
be running that same demo,

402
00:16:55,540 --> 00:16:58,270
right here on my Nexus tablet.

403
00:16:58,270 --> 00:17:01,120
Which I could potentially
show you using the screen.

404
00:17:01,120 --> 00:17:03,520
Or I could just hold it
up, and you could all tell.

405
00:17:03,520 --> 00:17:04,869
Notice, it's running.

406
00:17:04,869 --> 00:17:06,209
It looks wonderful.

407
00:17:06,209 --> 00:17:08,250
And there's lots of points
and they're animating.

408
00:17:08,250 --> 00:17:10,490
And I would try
and do this, but I

409
00:17:10,490 --> 00:17:13,747
don't think it
would do anything.

410
00:17:13,747 --> 00:17:14,246
Fair enough.

411
00:17:14,246 --> 00:17:17,520

412
00:17:17,520 --> 00:17:20,040
DAVID SEHR: OK, so Molly
gave you the visual demos.

413
00:17:20,040 --> 00:17:22,950
So here's the boring
text version of this.

414
00:17:22,950 --> 00:17:25,640
Across a broad variety of
benchmarks that we've run,

415
00:17:25,640 --> 00:17:29,100
we've seen overheads
are actually,

416
00:17:29,100 --> 00:17:32,139
relative to native performance,
in the 80 to 90% range.

417
00:17:32,139 --> 00:17:33,680
So we're able to
give you performance

418
00:17:33,680 --> 00:17:36,055
which is very close to native,
while keeping the security

419
00:17:36,055 --> 00:17:38,834
benefits we talked about before.

420
00:17:38,834 --> 00:17:40,000
And we're not the only ones.

421
00:17:40,000 --> 00:17:42,810
People in the broad
benchmark Native Client

422
00:17:42,810 --> 00:17:45,580
as being the closest
sort of approach

423
00:17:45,580 --> 00:17:51,070
to native code performance, even
after the asm.js announcements.

424
00:17:51,070 --> 00:17:53,920
So that's what you get.

425
00:17:53,920 --> 00:17:55,830
What do you have to do
to get a Native Client

426
00:17:55,830 --> 00:17:57,413
application going,
and what's actually

427
00:17:57,413 --> 00:17:59,100
going on under the hood?

428
00:17:59,100 --> 00:18:01,550
So you have your cool
piece of source code.

429
00:18:01,550 --> 00:18:05,130
You use our tool
called pnacl.clang.

430
00:18:05,130 --> 00:18:08,740
So we've based this
off the LLVM toolchain.

431
00:18:08,740 --> 00:18:10,850
The pexe, or the
portable executable,

432
00:18:10,850 --> 00:18:13,580
is actually a modified
version of LLVM bitcode

433
00:18:13,580 --> 00:18:16,720
that has been made a little
better for long-term use

434
00:18:16,720 --> 00:18:17,430
on the web.

435
00:18:17,430 --> 00:18:18,510
Once you put something
up on the web,

436
00:18:18,510 --> 00:18:20,930
the expectation is that it's
going to work for a long time

437
00:18:20,930 --> 00:18:21,440
to come.

438
00:18:21,440 --> 00:18:25,850
So we made some simplifications
to make that more possible.

439
00:18:25,850 --> 00:18:27,510
So you compile
using our toolchain.

440
00:18:27,510 --> 00:18:29,710
And you add this &mdash; again,
we have a manifest file.

441
00:18:29,710 --> 00:18:31,280
The manifest file
gives you a way

442
00:18:31,280 --> 00:18:33,720
to specify where to find the
portable executable and also

443
00:18:33,720 --> 00:18:36,510
a way to specify some
metadata, some things

444
00:18:36,510 --> 00:18:40,750
about relative translation time
versus delivered performance

445
00:18:40,750 --> 00:18:43,240
trade offs, and such things.

446
00:18:43,240 --> 00:18:46,400
You put an embed
tag in, and boom.

447
00:18:46,400 --> 00:18:52,010
You have a page that's enabled
to run Portable Native Client.

448
00:18:52,010 --> 00:18:55,820
Now your user
comes and starts up

449
00:18:55,820 --> 00:18:57,830
the page that you just put up.

450
00:18:57,830 --> 00:19:00,290
And the browser,
Chrome, is going

451
00:19:00,290 --> 00:19:01,880
to see, well, there's
that embed tag.

452
00:19:01,880 --> 00:19:03,630
And it says that I'm
going to be referring

453
00:19:03,630 --> 00:19:04,610
to a portable executable.

454
00:19:04,610 --> 00:19:05,630
And of course, it's portable.

455
00:19:05,630 --> 00:19:07,790
It's not something I run
natively on the platform.

456
00:19:07,790 --> 00:19:09,680
So it's going to say,
I need a translation

457
00:19:09,680 --> 00:19:11,750
of that to run on my platform.

458
00:19:11,750 --> 00:19:13,474
So it'll ask for a translation.

459
00:19:13,474 --> 00:19:15,890
The translation then is done
by something called the PNaCl

460
00:19:15,890 --> 00:19:16,390
translator.

461
00:19:16,390 --> 00:19:18,530
Again, that's based on
part of the LLVM toolchain.

462
00:19:18,530 --> 00:19:21,440
In this case, it's one
of the LLVM backends.

463
00:19:21,440 --> 00:19:23,960
And the translator,
while streaming

464
00:19:23,960 --> 00:19:25,910
the portable executable
down, is translating

465
00:19:25,910 --> 00:19:29,060
the portable executable
into something,

466
00:19:29,060 --> 00:19:30,810
in this case, a native
ELF executable that

467
00:19:30,810 --> 00:19:33,150
actually runs on your platform.

468
00:19:33,150 --> 00:19:36,540
And running on
your platform &mdash; OK,

469
00:19:36,540 --> 00:19:40,880
I just told you all the security
that you want to prevent.

470
00:19:40,880 --> 00:19:44,020
So we use something called
software fault isolation.

471
00:19:44,020 --> 00:19:46,750
And software fault
isolation creates a region,

472
00:19:46,750 --> 00:19:51,390
that we call the sandbox,
that you can guarantee

473
00:19:51,390 --> 00:19:56,750
that the executable can
only execute instructions

474
00:19:56,750 --> 00:20:00,730
that we've looked at &mdash;
the browser's looked at.

475
00:20:00,730 --> 00:20:04,400
That the instructions are
ones that are acceptable.

476
00:20:04,400 --> 00:20:06,790
And that they don't only
refer to memory that's

477
00:20:06,790 --> 00:20:09,290
in the application's
address range.

478
00:20:09,290 --> 00:20:13,640
So with that, this little piece
of the Native Client technology

479
00:20:13,640 --> 00:20:15,760
called a validator
actually validates

480
00:20:15,760 --> 00:20:18,320
those sets of constraints.

481
00:20:18,320 --> 00:20:21,220
And with that, it can
determine whether it's

482
00:20:21,220 --> 00:20:26,140
possible for this application
to have access to these APIs

483
00:20:26,140 --> 00:20:28,880
that we said were
dangerous before.

484
00:20:28,880 --> 00:20:31,720
And if it can't
validate the executable,

485
00:20:31,720 --> 00:20:36,550
if it can't prove that it
doesn't do these bad things,

486
00:20:36,550 --> 00:20:39,120
then we just flat refuse
to start the executable.

487
00:20:39,120 --> 00:20:40,770
So.

488
00:20:40,770 --> 00:20:43,060
On the other hand,
if it can show

489
00:20:43,060 --> 00:20:49,170
that this set of changes to
the underlying instructions

490
00:20:49,170 --> 00:20:53,730
are followed, then
we don't allow,

491
00:20:53,730 --> 00:20:55,610
or we won't be able
to get native access,

492
00:20:55,610 --> 00:20:58,660
unfiltered access to those
APIs, and it can run safely.

493
00:20:58,660 --> 00:21:02,430

494
00:21:02,430 --> 00:21:07,130
So if it starts running, we
start it running at that point.

495
00:21:07,130 --> 00:21:08,680
And we start it running.

496
00:21:08,680 --> 00:21:10,670
All the while it's
running, if it

497
00:21:10,670 --> 00:21:12,640
wants to interact with
the outside system,

498
00:21:12,640 --> 00:21:14,510
it interacts through something
we call the Native Client

499
00:21:14,510 --> 00:21:15,009
Runtime.

500
00:21:15,009 --> 00:21:17,810
And the Native Client
Runtime will also

501
00:21:17,810 --> 00:21:19,310
enforce security
policies that we'll

502
00:21:19,310 --> 00:21:21,970
talk about in just a second.

503
00:21:21,970 --> 00:21:23,830
Now you might
remember, some of you,

504
00:21:23,830 --> 00:21:27,150
that in fact, whenever you
run a web page in Chrome,

505
00:21:27,150 --> 00:21:31,000
that page is actually
running in an outer sandbox.

506
00:21:31,000 --> 00:21:35,310
And so one more thing &mdash; the
Native Client sandbox is also

507
00:21:35,310 --> 00:21:36,890
running inside the
Chrome sandbox.

508
00:21:36,890 --> 00:21:39,530
So we have sandboxes
inside of sandboxes.

509
00:21:39,530 --> 00:21:43,630
For the "Inception"
challenge, that's &mdash; anyway.

510
00:21:43,630 --> 00:21:46,780
So we have sandboxes
inside of sandboxes.

511
00:21:46,780 --> 00:21:51,531
And with this, we've crafted
the cones of silence.

512
00:21:51,531 --> 00:21:52,030
Right?

513
00:21:52,030 --> 00:21:57,110
So now we have two processes
that can't talk to each other.

514
00:21:57,110 --> 00:21:59,900
And of course, that
hearkens back to PPAPI

515
00:21:59,900 --> 00:22:04,530
is the way that applications can
securely talk to the browser,

516
00:22:04,530 --> 00:22:06,260
and get access to
these native features

517
00:22:06,260 --> 00:22:10,113
that the application wants,
and retain the security

518
00:22:10,113 --> 00:22:11,487
that we need for
the native code.

519
00:22:11,487 --> 00:22:13,884

520
00:22:13,884 --> 00:22:15,300
MOLLY MACKINLAY:
So we've told you

521
00:22:15,300 --> 00:22:18,480
a little bit about why we
need native code in the web.

522
00:22:18,480 --> 00:22:21,580
We've shown the performance
benefits you can get.

523
00:22:21,580 --> 00:22:23,870
And we've told you a little
bit about how we do it,

524
00:22:23,870 --> 00:22:26,360
how this works under the hood.

525
00:22:26,360 --> 00:22:30,180
So where we going
with this next?

526
00:22:30,180 --> 00:22:33,170
We're trying to bring these
native capabilities to the web,

527
00:22:33,170 --> 00:22:36,700
because it enables a really rich
interaction, a really rich set

528
00:22:36,700 --> 00:22:39,750
of applications, that
we believe should exist.

529
00:22:39,750 --> 00:22:41,250
But we're not quite done.

530
00:22:41,250 --> 00:22:43,520
We want to keep improving
on our techniques,

531
00:22:43,520 --> 00:22:46,910
on how we get these
applications up and running.

532
00:22:46,910 --> 00:22:49,850
I'm going to give you a little
bit of an analogy in explaining

533
00:22:49,850 --> 00:22:53,220
our future directions on how
to make this even better.

534
00:22:53,220 --> 00:22:55,420
First off, we want to
speed up your lion.

535
00:22:55,420 --> 00:22:57,550
We want to increase
your translation time.

536
00:22:57,550 --> 00:22:59,630
A user navigates
to your page that's

537
00:22:59,630 --> 00:23:02,080
running a PNaCl executable.

538
00:23:02,080 --> 00:23:04,780
It should load as quick
as we can make it.

539
00:23:04,780 --> 00:23:07,100
We also want to make
you even more capable,

540
00:23:07,100 --> 00:23:08,490
give your lion some claws.

541
00:23:08,490 --> 00:23:12,080
We're going to give you
both C++ exception handling

542
00:23:12,080 --> 00:23:15,120
and vectorized
instructions in PNaCl.

543
00:23:15,120 --> 00:23:19,270
We're also going to decrease
the size of your PNaCl bitcode,

544
00:23:19,270 --> 00:23:20,560
so that your page can load.

545
00:23:20,560 --> 00:23:22,990
And it'll download over
those crappy connections

546
00:23:22,990 --> 00:23:26,450
we've been talking about all
day, as quickly as we can.

547
00:23:26,450 --> 00:23:28,500
Finally, we really want
to be responsive to you,

548
00:23:28,500 --> 00:23:31,070
our developer community,
and moving forward

549
00:23:31,070 --> 00:23:33,540
in figuring out what are the
things that you need in order

550
00:23:33,540 --> 00:23:36,030
to make this the next rich
platform, the next way

551
00:23:36,030 --> 00:23:38,677
to make really
amazing applications.

552
00:23:38,677 --> 00:23:40,010
Thank you so much for your time.

553
00:23:40,010 --> 00:23:42,549
Please visit gonacl.com
if you have any questions.

554
00:23:42,549 --> 00:23:44,090
I'm not going to
hold you any longer.

555
00:23:44,090 --> 00:23:45,710
Go five minutes early.

556
00:23:45,710 --> 00:23:46,496
Have some drinks.

557
00:23:46,496 --> 00:23:47,870
And please come
and chat with us.

558
00:23:47,870 --> 00:23:49,134
We'll be right up here.

559
00:23:49,134 --> 00:23:50,300
Thank you so much for today.

560
00:23:50,300 --> 00:23:51,445
It's been wonderful.

561
00:23:51,445 --> 00:23:52,010
And cheers.

562
00:23:52,010 --> 00:23:57,760
[APPLAUSE]

