1
00:00:00,000 --> 00:00:01,146

2
00:00:01,146 --> 00:00:01,700
ADAM EIJDENBERG: Thank
you, everyone,

3
00:00:01,700 --> 00:00:03,290
for coming this morning.

4
00:00:03,290 --> 00:00:06,260
Clearly the party last night
mustn't have been as good as

5
00:00:06,260 --> 00:00:08,060
the night before, because we
have a lot of people here very

6
00:00:08,060 --> 00:00:09,340
early in the morning
for an auth talk.

7
00:00:09,340 --> 00:00:10,940
So thank you for coming.

8
00:00:10,940 --> 00:00:12,490
My name is Adam Eijdenberg.

9
00:00:12,490 --> 00:00:14,550
I'm a product manager on our
Cloud Platform Team.

10
00:00:14,550 --> 00:00:16,280
This is my colleague Ben.

11
00:00:16,280 --> 00:00:17,170
BEN WILEY SITTLER:
I'm Ben Sittler.

12
00:00:17,170 --> 00:00:19,780
I'm an engineer on our
authorization and

13
00:00:19,780 --> 00:00:21,930
authentication team.

14
00:00:21,930 --> 00:00:24,690
ADAM EIJDENBERG: So before we
get started, maybe just a

15
00:00:24,690 --> 00:00:26,300
quick hands up around
the room.

16
00:00:26,300 --> 00:00:29,010
Who here gets really excited
about authentication?

17
00:00:29,010 --> 00:00:31,920

18
00:00:31,920 --> 00:00:34,500
Really?

19
00:00:34,500 --> 00:00:37,100
I was going to let you in on a
bit of a secret, which is that

20
00:00:37,100 --> 00:00:39,860
I don't actually get as excited
about authentication

21
00:00:39,860 --> 00:00:42,630
as I do about using the API
that I'm trying to access.

22
00:00:42,630 --> 00:00:46,190
And I think one of the things
I really want to do today is

23
00:00:46,190 --> 00:00:49,740
show you how easy it is to
be able to get past the

24
00:00:49,740 --> 00:00:52,620
authentication step when using
Cloud Platform and get to

25
00:00:52,620 --> 00:00:58,930
using one of the 60 or so APIs
that Google provides.

26
00:00:58,930 --> 00:01:03,120
So when I look at a Cloud
platform, I see we have a

27
00:01:03,120 --> 00:01:04,700
number of different areas.

28
00:01:04,700 --> 00:01:08,620
We have services and APIs that
we provide that make it easy

29
00:01:08,620 --> 00:01:11,080
for you to get on with
solving your problem.

30
00:01:11,080 --> 00:01:14,810
We have services like Cloud
Storage, which is an object

31
00:01:14,810 --> 00:01:15,880
[INAUDIBLE].

32
00:01:15,880 --> 00:01:17,990
We have Cloud SQL.

33
00:01:17,990 --> 00:01:19,540
We have Cloud NoSQL.

34
00:01:19,540 --> 00:01:22,320
Two different ways of storing
data and manipulating that

35
00:01:22,320 --> 00:01:24,140
from within your application.

36
00:01:24,140 --> 00:01:26,030
We have things like Big Query,
which is a great way of

37
00:01:26,030 --> 00:01:28,355
manipulating huge amounts of
data and running query and

38
00:01:28,355 --> 00:01:31,020
getting [? business ?]
intelligence out of that.

39
00:01:31,020 --> 00:01:33,606
But now I look, and I see a
second half of what we have.

40
00:01:33,606 --> 00:01:37,040
We have a number of containers
where you can write code.

41
00:01:37,040 --> 00:01:39,200
We have App Engine, which is
the platform as a service

42
00:01:39,200 --> 00:01:41,210
offering, and we have Compute
Engine, which is our

43
00:01:41,210 --> 00:01:43,210
infrastructure as a
service offering.

44
00:01:43,210 --> 00:01:45,590
App Engine lets you write code
and automatically take care of

45
00:01:45,590 --> 00:01:48,460
scaling that and building a
great web application for you.

46
00:01:48,460 --> 00:01:50,570
Compute Engine gives you virtual
machines, so you can

47
00:01:50,570 --> 00:01:53,810
write your own code and
do it your own way.

48
00:01:53,810 --> 00:01:56,420
But what we don't see on this
diagram-- and it is a very

49
00:01:56,420 --> 00:01:57,100
pretty diagram.

50
00:01:57,100 --> 00:01:58,160
It came from our marketing

51
00:01:58,160 --> 00:01:59,640
department, and they actually--

52
00:01:59,640 --> 00:02:01,220
I actually learned a
new word this week.

53
00:02:01,220 --> 00:02:04,710
They called it a marketecture
diagram, and that was a new

54
00:02:04,710 --> 00:02:05,500
one for me.

55
00:02:05,500 --> 00:02:08,259
But what we don't see on here
is, I think, the glue that

56
00:02:08,259 --> 00:02:10,620
holds this together, which
is authentication and

57
00:02:10,620 --> 00:02:15,635
authorization, which is how
you identify the code that

58
00:02:15,635 --> 00:02:17,960
you're running to the rest
of Google services.

59
00:02:17,960 --> 00:02:20,590
So whether you're running your
code within our platform on

60
00:02:20,590 --> 00:02:23,620
App Engine or Compute Engine,
or you're running your code

61
00:02:23,620 --> 00:02:26,020
under your desk, or whether
you're running it on premise

62
00:02:26,020 --> 00:02:29,690
or if you're running it on
another service provider.

63
00:02:29,690 --> 00:02:31,270
And so what we're going to
go through today is the

64
00:02:31,270 --> 00:02:32,250
authentication part.

65
00:02:32,250 --> 00:02:35,700
How to identify your code to
Google so that you can use our

66
00:02:35,700 --> 00:02:37,690
APIs and you can get on with
building the application that

67
00:02:37,690 --> 00:02:38,940
you're trying to [INAUDIBLE].

68
00:02:38,940 --> 00:02:41,410

69
00:02:41,410 --> 00:02:44,040
Now, we say auth a lot, and
auth can mean a lot of

70
00:02:44,040 --> 00:02:45,690
different things to
different people.

71
00:02:45,690 --> 00:02:47,480
I split into two areas--

72
00:02:47,480 --> 00:02:50,060
authentication and
authorization.

73
00:02:50,060 --> 00:02:53,610
So authentication, to me, is
knowing who you are, whether

74
00:02:53,610 --> 00:02:56,360
that's a person logging into
an application, or whether

75
00:02:56,360 --> 00:02:58,090
that's your application
making a call

76
00:02:58,090 --> 00:03:00,400
against one of our APIs.

77
00:03:00,400 --> 00:03:01,930
Today, we're going to go
through, we're going to show

78
00:03:01,930 --> 00:03:05,160
you how to write code to
authenticate against our APIs.

79
00:03:05,160 --> 00:03:07,800
We're going to show you easy
ways to do it using our client

80
00:03:07,800 --> 00:03:10,430
libraries, but we're also going
to show you how to do it

81
00:03:10,430 --> 00:03:11,240
from first principles.

82
00:03:11,240 --> 00:03:13,480
So if you're not using one of
our client libraries, and you

83
00:03:13,480 --> 00:03:15,500
actually really want to
understand what's going on

84
00:03:15,500 --> 00:03:16,640
behind the scenes, we're
going to show you

85
00:03:16,640 --> 00:03:18,570
how to do that, too.

86
00:03:18,570 --> 00:03:21,450
We're going to look at how to
do that from within the App

87
00:03:21,450 --> 00:03:22,760
Engine, within Compute Engine.

88
00:03:22,760 --> 00:03:25,400
We have some special tricks
there that make it very easy.

89
00:03:25,400 --> 00:03:27,450
And we're going to show you how
to do that from anywhere

90
00:03:27,450 --> 00:03:30,450
else, whether it's under your
desk on premise or on another

91
00:03:30,450 --> 00:03:32,300
hosting provider.

92
00:03:32,300 --> 00:03:34,280
The second part of auth that
we're going to talk about is

93
00:03:34,280 --> 00:03:35,620
authorization.

94
00:03:35,620 --> 00:03:37,160
And authorization--

95
00:03:37,160 --> 00:03:38,730
I always think of that
as the second step.

96
00:03:38,730 --> 00:03:40,550
Now we know who you are.

97
00:03:40,550 --> 00:03:42,020
Are you allowed to perform
the action that

98
00:03:42,020 --> 00:03:43,510
you're trying to do?

99
00:03:43,510 --> 00:03:45,360
So are you allowed to start
this virtual machine?

100
00:03:45,360 --> 00:03:46,610
Are you allowed to read
this particular

101
00:03:46,610 --> 00:03:48,880
file in Cloud Storage?

102
00:03:48,880 --> 00:03:50,470
We're going to spend some time
on that today, but we're not

103
00:03:50,470 --> 00:03:51,530
going to spend as much time.

104
00:03:51,530 --> 00:03:55,130
The authorization part is
primarily configuration.

105
00:03:55,130 --> 00:03:56,780
It's not as complicated.

106
00:03:56,780 --> 00:03:59,020
There aren't as many spots that
you can go wrong there.

107
00:03:59,020 --> 00:04:02,260
But what I want to show today
is how to set that up and go

108
00:04:02,260 --> 00:04:04,880
through some of the common
pitfalls I see when people are

109
00:04:04,880 --> 00:04:06,350
trying to do this and when
they're having difficulty

110
00:04:06,350 --> 00:04:07,600
accessing our APIs.

111
00:04:07,600 --> 00:04:10,380

112
00:04:10,380 --> 00:04:13,010
So I thought maybe first, let's
look at what goes into

113
00:04:13,010 --> 00:04:16,579
making an API call against
a Google hosted API.

114
00:04:16,579 --> 00:04:19,519
The good news is, we host all
of our APIs in the same spot

115
00:04:19,519 --> 00:04:22,610
at Google, which means that once
you figure out how to do

116
00:04:22,610 --> 00:04:24,760
this once-- once you master this
in one spot-- you can hit

117
00:04:24,760 --> 00:04:28,450
any of our other APIs
the same way.

118
00:04:28,450 --> 00:04:31,600
So let's look at, say,
the Big Query API.

119
00:04:31,600 --> 00:04:34,220
So those of you that don't know
what Big Query is, it's a

120
00:04:34,220 --> 00:04:38,440
way of uploading a huge amount
of data-- gigabytes, hundreds

121
00:04:38,440 --> 00:04:42,200
of gigabytes of data-- into
Google, and running big

122
00:04:42,200 --> 00:04:44,770
queries against those SQL-like
statements to get

123
00:04:44,770 --> 00:04:46,210
results very quickly.

124
00:04:46,210 --> 00:04:48,250
I'm not going to focus on what
Big Query does, but what I am

125
00:04:48,250 --> 00:04:51,130
going to focus on is how to
make an API call that.

126
00:04:51,130 --> 00:04:55,270
And with Big Query, one of the
primary entities that you

127
00:04:55,270 --> 00:04:57,440
operate on are data sets.

128
00:04:57,440 --> 00:04:59,875
You upload data sets into a
project that you own, and

129
00:04:59,875 --> 00:05:03,030
those are resources that
you then manipulate.

130
00:05:03,030 --> 00:05:05,620
So let's look at an API call to
list the data sets that I

131
00:05:05,620 --> 00:05:08,580
have associated with
the project.

132
00:05:08,580 --> 00:05:12,290
All of our API calls are HTTP,
or more accurately, HTTPS.

133
00:05:12,290 --> 00:05:15,762
And when we make that API call,
we either do a get or a

134
00:05:15,762 --> 00:05:17,970
post or another type of
HTTP verb, and we

135
00:05:17,970 --> 00:05:19,320
specify a number of things.

136
00:05:19,320 --> 00:05:22,240
We specify the API that
we want to hit-- in

137
00:05:22,240 --> 00:05:23,810
this case, Big Query.

138
00:05:23,810 --> 00:05:25,710
We support multiple
versions of APIs.

139
00:05:25,710 --> 00:05:27,680
So here, we're accessing
version 2 of

140
00:05:27,680 --> 00:05:30,270
the Big Query API.

141
00:05:30,270 --> 00:05:33,310
The rest of the path that we
have here will vary a little

142
00:05:33,310 --> 00:05:34,410
bit by service.

143
00:05:34,410 --> 00:05:38,710
But a fairly common pattern we
see within the Cloud Platform

144
00:05:38,710 --> 00:05:41,450
Services is we're manipulating
resources

145
00:05:41,450 --> 00:05:42,970
that belong to a project.

146
00:05:42,970 --> 00:05:45,230
So typically, you would see the
word project somewhere in

147
00:05:45,230 --> 00:05:47,810
that path. then you'll see an
identifier for that project

148
00:05:47,810 --> 00:05:49,100
and that path.

149
00:05:49,100 --> 00:05:53,350
In this case, I can see project
number 1, 2, 3, 4, and

150
00:05:53,350 --> 00:05:54,600
I would try to list
the data sets

151
00:05:54,600 --> 00:05:57,410
associated with this project.

152
00:05:57,410 --> 00:06:01,350
We go against a common host--
the googleapis.com server.

153
00:06:01,350 --> 00:06:02,630
And now, the interesting bit.

154
00:06:02,630 --> 00:06:06,040
We have this authorization
header, and that header is all

155
00:06:06,040 --> 00:06:07,410
we need to get right.

156
00:06:07,410 --> 00:06:09,940
That passes in what we call a
bearer token, and that's a

157
00:06:09,940 --> 00:06:14,230
token that will then allow us to
access that particular API.

158
00:06:14,230 --> 00:06:16,940
So the focus today in our
presentation is going to be

159
00:06:16,940 --> 00:06:19,510
how to acquire one of those
access tokens so that you can

160
00:06:19,510 --> 00:06:21,880
make that API call, because
the rest of the API call's

161
00:06:21,880 --> 00:06:22,480
fairly simple.

162
00:06:22,480 --> 00:06:23,860
It's basic HTTP.

163
00:06:23,860 --> 00:06:25,670
Again, we have client libraries
for it, but we're

164
00:06:25,670 --> 00:06:29,580
going to show you how to do it
from first principle as well.

165
00:06:29,580 --> 00:06:33,720
So let's look at what one of
those tokens is to us.

166
00:06:33,720 --> 00:06:36,680
We call it an access token
behind the scenes, and when I

167
00:06:36,680 --> 00:06:40,260
think about access tokens, to
me, this is very much like an

168
00:06:40,260 --> 00:06:41,990
HTTP session cookie.

169
00:06:41,990 --> 00:06:44,740
You go through some kind of
dance to set it, we return it

170
00:06:44,740 --> 00:06:47,255
back, and then you staple that
to each of your requests that

171
00:06:47,255 --> 00:06:48,680
you send to us.

172
00:06:48,680 --> 00:06:51,470
And when we get one of those
access tokens, we look up,

173
00:06:51,470 --> 00:06:54,950
essentially, three pieces
of information.

174
00:06:54,950 --> 00:06:57,770
We authenticate we know
what application is

175
00:06:57,770 --> 00:07:00,030
associated with this call.

176
00:07:00,030 --> 00:07:02,820
What that means is that when you
want to make an API call

177
00:07:02,820 --> 00:07:05,570
against Google, you first must
register the application that

178
00:07:05,570 --> 00:07:06,510
you're building.

179
00:07:06,510 --> 00:07:10,010
Now, application doesn't mean
an Android app or a web app.

180
00:07:10,010 --> 00:07:12,730
This could just be a process
running under your desk.

181
00:07:12,730 --> 00:07:15,280
But you register an application
as that

182
00:07:15,280 --> 00:07:17,490
application that is
making that call.

183
00:07:17,490 --> 00:07:20,100
We also refer to that fairly
synonymously as the client

184
00:07:20,100 --> 00:07:23,220
that is associated with
that request.

185
00:07:23,220 --> 00:07:25,400
The second bit of information
that we have associated with

186
00:07:25,400 --> 00:07:27,620
the token is a user.

187
00:07:27,620 --> 00:07:30,495
So when you're making a request,
you may be making it

188
00:07:30,495 --> 00:07:33,980
on behalf of a user, or the
application might be

189
00:07:33,980 --> 00:07:35,010
acting on its own.

190
00:07:35,010 --> 00:07:37,320
And I'll give you an
example of that.

191
00:07:37,320 --> 00:07:40,500
Let's say that we're accessing
Google Drive.

192
00:07:40,500 --> 00:07:44,830
Google Drive is a consumer
product, but we have APIs go

193
00:07:44,830 --> 00:07:46,500
through the same infrastructure
so that you can

194
00:07:46,500 --> 00:07:49,470
register an application, allow
the user to click through a

195
00:07:49,470 --> 00:07:53,090
consent screen, and then your
application can access their

196
00:07:53,090 --> 00:07:55,420
data and their drive.

197
00:07:55,420 --> 00:07:58,280
And so that's a case where you
have a client that is acting

198
00:07:58,280 --> 00:07:59,900
on behalf of a user.

199
00:07:59,900 --> 00:08:03,240
That's not the typical pattern
that we see in Cloud.

200
00:08:03,240 --> 00:08:05,830
In Cloud, typically you are
building applications.

201
00:08:05,830 --> 00:08:07,990
You're building that on top of
our platform, on top of our

202
00:08:07,990 --> 00:08:09,140
infrastructure.

203
00:08:09,140 --> 00:08:11,230
And you might have your own set
of users, you might not

204
00:08:11,230 --> 00:08:13,270
have any users, you might just
have an application that is

205
00:08:13,270 --> 00:08:15,350
doing analysis with Big Query.

206
00:08:15,350 --> 00:08:17,770
So in this particular case, for
a typical Cloud Platform

207
00:08:17,770 --> 00:08:20,230
API, your user is your
application.

208
00:08:20,230 --> 00:08:23,010
One and the same thing.

209
00:08:23,010 --> 00:08:25,430
The third bit of information
that we have associated with

210
00:08:25,430 --> 00:08:28,910
an access token is one
or more scopes.

211
00:08:28,910 --> 00:08:32,419
When you get an access token,
it's not an all powerful being

212
00:08:32,419 --> 00:08:35,360
that lets you do anything
against any API.

213
00:08:35,360 --> 00:08:39,570
When you get that access token,
you request that we

214
00:08:39,570 --> 00:08:41,120
downscope it to let
you perform a

215
00:08:41,120 --> 00:08:42,850
certain set of actions.

216
00:08:42,850 --> 00:08:45,030
So, for example, when we had
the user clicking through a

217
00:08:45,030 --> 00:08:48,460
consent screen to access Google
Drive, they're not

218
00:08:48,460 --> 00:08:51,375
authorizing your application
to access their Gmail.

219
00:08:51,375 --> 00:08:54,240
They're only authorizing your
application to access the

220
00:08:54,240 --> 00:08:55,920
Google Drive content.

221
00:08:55,920 --> 00:08:58,020
And in the same way, because we
use the same architecture

222
00:08:58,020 --> 00:09:00,990
within Cloud, when you get an
access token to talk to Big

223
00:09:00,990 --> 00:09:04,660
Query, if you accidentally leak
that token, you can't

224
00:09:04,660 --> 00:09:06,770
just magically use that to start
virtual machines in a

225
00:09:06,770 --> 00:09:09,810
project, unless you requested
virtual machine scope when you

226
00:09:09,810 --> 00:09:11,060
started at the same time.

227
00:09:11,060 --> 00:09:13,640

228
00:09:13,640 --> 00:09:16,130
So how do we get one
of these tokens?

229
00:09:16,130 --> 00:09:18,990
This can vary depending on whose
data is being accessed.

230
00:09:18,990 --> 00:09:22,760
Again, the first case where
we have user data--

231
00:09:22,760 --> 00:09:24,130
how do we get that?

232
00:09:24,130 --> 00:09:28,200
We register an application, we
write some magic code, we pop

233
00:09:28,200 --> 00:09:31,850
up a user consent screen, the
user consents to allow you to

234
00:09:31,850 --> 00:09:33,900
access the data on a certain
spot, and you get back an

235
00:09:33,900 --> 00:09:34,850
access token.

236
00:09:34,850 --> 00:09:37,720
I'm not going to talk through
that in any detail today.

237
00:09:37,720 --> 00:09:39,660
That's not going to be
the focus today.

238
00:09:39,660 --> 00:09:42,510
We have a heap of sessions on
Sign In with G+, which is

239
00:09:42,510 --> 00:09:45,980
built on top of this same behind
the scenes flow, and we

240
00:09:45,980 --> 00:09:47,660
have a lot of other resources
there that I could

241
00:09:47,660 --> 00:09:48,670
point you to later.

242
00:09:48,670 --> 00:09:51,850
What I'm going to focus on today
is how to help you build

243
00:09:51,850 --> 00:09:54,665
your application on top of Cloud
Platform, and how to get

244
00:09:54,665 --> 00:09:57,500
an access token for your
application, where there is no

245
00:09:57,500 --> 00:10:00,180
user present to agree
to a consent screen.

246
00:10:00,180 --> 00:10:02,640
You need a way of getting
credentials so that your

247
00:10:02,640 --> 00:10:05,630
application can then talk to
Google and access APIs to

248
00:10:05,630 --> 00:10:06,880
manipulate your data.

249
00:10:06,880 --> 00:10:09,910

250
00:10:09,910 --> 00:10:12,150
So there's two parts to this.

251
00:10:12,150 --> 00:10:14,450
The first part is we need to
create a project and do some

252
00:10:14,450 --> 00:10:15,390
configuration.

253
00:10:15,390 --> 00:10:17,780
I'm going to go through
and talk about that.

254
00:10:17,780 --> 00:10:18,780
Then we get to the fun bit.

255
00:10:18,780 --> 00:10:21,120
Ben's going to then show us how
to write some code to use

256
00:10:21,120 --> 00:10:23,010
the data that we've configured,
and to make that

257
00:10:23,010 --> 00:10:24,260
successful API call.

258
00:10:24,260 --> 00:10:27,080

259
00:10:27,080 --> 00:10:28,200
So the first thing we
need to do is we

260
00:10:28,200 --> 00:10:29,870
need to create a project.

261
00:10:29,870 --> 00:10:36,820
And a project is an entity that
basically represents your

262
00:10:36,820 --> 00:10:39,450
relationship as a developer with
Google for the context of

263
00:10:39,450 --> 00:10:41,120
what you're trying to do.

264
00:10:41,120 --> 00:10:45,180
So when we create a project, I
think of this as a container

265
00:10:45,180 --> 00:10:46,560
for a number of things.

266
00:10:46,560 --> 00:10:48,620
It's a container for resources
that will belong to y our

267
00:10:48,620 --> 00:10:49,760
application.

268
00:10:49,760 --> 00:10:52,130
So, for example, if you're using
Cloud Storage, you'll be

269
00:10:52,130 --> 00:10:53,350
creating buckets.

270
00:10:53,350 --> 00:10:55,800
Those buckets are associated
with a project.

271
00:10:55,800 --> 00:10:57,665
That project, ultimately, will
get the bill for the usage of

272
00:10:57,665 --> 00:10:58,990
those buckets.

273
00:10:58,990 --> 00:11:00,890
Similarly, when you create
virtual machines, they're

274
00:11:00,890 --> 00:11:02,230
associated with the project.

275
00:11:02,230 --> 00:11:05,300
When you upload Big Query data
sets, they're are associated

276
00:11:05,300 --> 00:11:06,750
with the project.

277
00:11:06,750 --> 00:11:09,450
So one key part of what a
project does is access a

278
00:11:09,450 --> 00:11:11,230
container for the resources
that belong to your

279
00:11:11,230 --> 00:11:13,470
application.

280
00:11:13,470 --> 00:11:16,350
The second key part to what a
project does is this is where

281
00:11:16,350 --> 00:11:19,740
you register an application that
wants to make an API call

282
00:11:19,740 --> 00:11:21,150
against Google.

283
00:11:21,150 --> 00:11:23,390
And those API calls
aren't limited to

284
00:11:23,390 --> 00:11:25,190
Cloud Platform resources.

285
00:11:25,190 --> 00:11:28,420
Any of the other 60 APIs that
Google provides goes through

286
00:11:28,420 --> 00:11:30,100
the same common area.

287
00:11:30,100 --> 00:11:32,420
So this is where we will
register our application.

288
00:11:32,420 --> 00:11:34,430
This is where we will get
credentials that we can then

289
00:11:34,430 --> 00:11:37,560
use to make subsequent
API calls.

290
00:11:37,560 --> 00:11:40,310
There's also a bunch of other
configuration that lives

291
00:11:40,310 --> 00:11:41,210
within a project.

292
00:11:41,210 --> 00:11:43,420
We have information there about
billing, if you're using

293
00:11:43,420 --> 00:11:45,230
a service that requires
payment.

294
00:11:45,230 --> 00:11:48,080
We have information about quota
that may be set up,

295
00:11:48,080 --> 00:11:50,570
either a free quota, or you
can actually specify and

296
00:11:50,570 --> 00:11:53,830
configure a per user quota for
individual users that are

297
00:11:53,830 --> 00:11:56,530
using API on your behalf.

298
00:11:56,530 --> 00:11:59,810
We also track here-- this
is also where you enter

299
00:11:59,810 --> 00:12:01,460
authorization information.

300
00:12:01,460 --> 00:12:03,730
And I'll go through that
in more detail later.

301
00:12:03,730 --> 00:12:06,190
But essentially, this is where
you can create a team.

302
00:12:06,190 --> 00:12:08,960
A project is not tied to
an individual person.

303
00:12:08,960 --> 00:12:12,060
That's not typically how
developers operate.

304
00:12:12,060 --> 00:12:13,910
You have other developers that
you're working with.

305
00:12:13,910 --> 00:12:17,130
You shouldn't have to share
passwords to log in to manage

306
00:12:17,130 --> 00:12:18,590
a common set of resources.

307
00:12:18,590 --> 00:12:21,850
So this is where you can add
your teammates to your project

308
00:12:21,850 --> 00:12:25,540
and work and collaborate
together.

309
00:12:25,540 --> 00:12:26,530
So we created a project.

310
00:12:26,530 --> 00:12:27,910
We gave it a name before.

311
00:12:27,910 --> 00:12:30,060
The next thing we need to do
is we need to enable these

312
00:12:30,060 --> 00:12:32,550
services that we're interested
in using.

313
00:12:32,550 --> 00:12:35,990
So here, I'm enabling the
Big Query service.

314
00:12:35,990 --> 00:12:39,380
Now, I should just note, this is
the current what we call a

315
00:12:39,380 --> 00:12:43,040
developer console that we're
looking in through today.

316
00:12:43,040 --> 00:12:46,670
We have another console that I
think you might have seen some

317
00:12:46,670 --> 00:12:48,590
other screenshots of this week
if you've been through some of

318
00:12:48,590 --> 00:12:50,810
the other Cloud Platform
sessions.

319
00:12:50,810 --> 00:12:52,380
It's called the Cloud Console.

320
00:12:52,380 --> 00:12:54,200
These are essentially
equivalent.

321
00:12:54,200 --> 00:12:56,700
The same functionality is fairly
much present in each.

322
00:12:56,700 --> 00:12:59,980
Cloud Console is what we're
moving towards for Cloud, but

323
00:12:59,980 --> 00:13:03,580
it's still not quite has all of
the authentication things

324
00:13:03,580 --> 00:13:05,060
that we're going
to show today.

325
00:13:05,060 --> 00:13:07,480
So that's why I'm still
using the old UI.

326
00:13:07,480 --> 00:13:09,450
If you do use the new UI to
create a project-- and I do

327
00:13:09,450 --> 00:13:11,920
actually recommend doing that,
because it has a nice tie-in

328
00:13:11,920 --> 00:13:13,500
with Google App Engine
that we can talk

329
00:13:13,500 --> 00:13:15,270
about in detail later--

330
00:13:15,270 --> 00:13:17,460
you can still click back through
to the developer

331
00:13:17,460 --> 00:13:18,720
console and see that data.

332
00:13:18,720 --> 00:13:19,710
It's stored in the same spot.

333
00:13:19,710 --> 00:13:23,180
You can manipulate with
either user interface.

334
00:13:23,180 --> 00:13:23,890
Let's keep going.

335
00:13:23,890 --> 00:13:26,240
We've enabled the service.

336
00:13:26,240 --> 00:13:27,490
Now we need to do
something called

337
00:13:27,490 --> 00:13:30,760
create a service account.

338
00:13:30,760 --> 00:13:34,760
Now, let's think about what
happens when you run a process

339
00:13:34,760 --> 00:13:37,070
on your local workstation.

340
00:13:37,070 --> 00:13:39,870
You log into your operating
system as a user, and when you

341
00:13:39,870 --> 00:13:44,630
start a process, it's associated
with your user ID.

342
00:13:44,630 --> 00:13:48,710
What that means is that when you
try and, say, open a file

343
00:13:48,710 --> 00:13:51,620
from within your application,
your operating

344
00:13:51,620 --> 00:13:53,530
system will do a check.

345
00:13:53,530 --> 00:13:56,440
It knows what file you're trying
to access, it knows

346
00:13:56,440 --> 00:13:59,060
what user the application is
running in, and then it does a

347
00:13:59,060 --> 00:14:03,620
check to make sure that the user
ID has access to the file

348
00:14:03,620 --> 00:14:05,710
that you're reading.

349
00:14:05,710 --> 00:14:08,510
Now, if you were to deploy that
same application into a

350
00:14:08,510 --> 00:14:10,670
production environment,
typically you wouldn't run it

351
00:14:10,670 --> 00:14:12,880
as your personal account.

352
00:14:12,880 --> 00:14:14,690
You might set up
a role account.

353
00:14:14,690 --> 00:14:16,340
Let's say you're running
Apache in production.

354
00:14:16,340 --> 00:14:20,500
You might use the Nobody
account on a box.

355
00:14:20,500 --> 00:14:22,350
So when you run that
application, you

356
00:14:22,350 --> 00:14:23,770
assign it an identity.

357
00:14:23,770 --> 00:14:26,040
You might use pseudo and
[INAUDIBLE] and swap it and

358
00:14:26,040 --> 00:14:28,430
run it out as a Nobody user.

359
00:14:28,430 --> 00:14:32,170
Similarly, when you access a
Google API, we need to know

360
00:14:32,170 --> 00:14:35,140
who your application is.

361
00:14:35,140 --> 00:14:37,350
The user ID associated
with the process--

362
00:14:37,350 --> 00:14:40,210
that doesn't mean anything to
us, when you're accessing

363
00:14:40,210 --> 00:14:42,000
across the internet
to our services.

364
00:14:42,000 --> 00:14:44,920
So instead, what we have you do
is we have you assign your

365
00:14:44,920 --> 00:14:47,290
application a service account.

366
00:14:47,290 --> 00:14:50,110
And a service account is very
similar to a role account.

367
00:14:50,110 --> 00:14:53,790
It's our way of knowing who
your application is.

368
00:14:53,790 --> 00:14:54,920
So we have a couple of
different ways of

369
00:14:54,920 --> 00:14:55,690
setting this up.

370
00:14:55,690 --> 00:14:57,530
We have some neat tricks
[INAUDIBLE]

371
00:14:57,530 --> 00:15:00,050
App Engine, but right now,
we're going to create a

372
00:15:00,050 --> 00:15:02,830
service account that has a
private key that we can then

373
00:15:02,830 --> 00:15:05,730
download and put into our
application to access APIs.

374
00:15:05,730 --> 00:15:08,360

375
00:15:08,360 --> 00:15:11,990
So the very first time we click
through this flow, we do

376
00:15:11,990 --> 00:15:14,270
get prompted to enter some
branding information about our

377
00:15:14,270 --> 00:15:15,970
application.

378
00:15:15,970 --> 00:15:18,300
This is really useful if we were
accessing one of those

379
00:15:18,300 --> 00:15:21,080
APIs like Drive API, where we
need to pop a consent screen

380
00:15:21,080 --> 00:15:24,020
up to users, and they need to
see some information about who

381
00:15:24,020 --> 00:15:26,900
is this crazy app that's trying
to access my data?

382
00:15:26,900 --> 00:15:30,250
This is completely irrelevant to
the Cloud Platform in terms

383
00:15:30,250 --> 00:15:31,690
of service accounts.

384
00:15:31,690 --> 00:15:33,880
So skip this screen, fill in the
[INAUDIBLE] field, which

385
00:15:33,880 --> 00:15:36,450
is the name, and
then continue.

386
00:15:36,450 --> 00:15:38,910
Service accounts, they don't
get consent screens.

387
00:15:38,910 --> 00:15:40,630
There's no human associated
with it.

388
00:15:40,630 --> 00:15:42,430
There's nothing for them to
click, so just ignore this

389
00:15:42,430 --> 00:15:45,640
screen and move back on.

390
00:15:45,640 --> 00:15:48,060
So now we have an opportunity
where we can select what type

391
00:15:48,060 --> 00:15:50,620
of client are we creating, or
what type of application are

392
00:15:50,620 --> 00:15:52,090
we registering?

393
00:15:52,090 --> 00:15:55,150
And here, if I was doing one of
the consent driven flows, I

394
00:15:55,150 --> 00:15:58,030
might pick a web application.

395
00:15:58,030 --> 00:16:00,140
Because I want a service
account, I want an identity

396
00:16:00,140 --> 00:16:01,010
for my application.

397
00:16:01,010 --> 00:16:04,780
We hit service account, and
then we generate a public

398
00:16:04,780 --> 00:16:06,220
private key on our service.

399
00:16:06,220 --> 00:16:08,385
We throw away the private
key component.

400
00:16:08,385 --> 00:16:09,440
Well, we don't throw it away.

401
00:16:09,440 --> 00:16:11,040
We let you download it, and
then we throw it away.

402
00:16:11,040 --> 00:16:14,070
We just then keep the public
component off that.

403
00:16:14,070 --> 00:16:15,980
We give you a file that
you download.

404
00:16:15,980 --> 00:16:18,610
This is essentially your
password, or your credentials

405
00:16:18,610 --> 00:16:21,640
that you'll use when you access
our services on behalf

406
00:16:21,640 --> 00:16:24,500
of your application.

407
00:16:24,500 --> 00:16:25,860
We do actually encrypt.

408
00:16:25,860 --> 00:16:29,990
We use a PKCS12 format, which
is an encrypted private key

409
00:16:29,990 --> 00:16:34,210
format, and it has a password
of notasecret.

410
00:16:34,210 --> 00:16:36,320
So don't tell anyone, but write
that down, and we'll use

411
00:16:36,320 --> 00:16:37,960
that for the next step.

412
00:16:37,960 --> 00:16:40,460

413
00:16:40,460 --> 00:16:43,410
When we create that
service account--

414
00:16:43,410 --> 00:16:46,390
they never take screenshots of
my username that I've created

415
00:16:46,390 --> 00:16:47,950
on my service account here.

416
00:16:47,950 --> 00:16:51,180
But we get an email address
associated with that as well.

417
00:16:51,180 --> 00:16:54,170
And that email address, again,
is not a human user.

418
00:16:54,170 --> 00:16:56,290
Don't try and add that
to your G+ posts.

419
00:16:56,290 --> 00:16:58,480
They don't post very often.

420
00:16:58,480 --> 00:17:00,670
But you do need to take note of
that email address, because

421
00:17:00,670 --> 00:17:03,560
when we try and set access
control up later, we use that

422
00:17:03,560 --> 00:17:06,290
email address to represent
this is the user that I'm

423
00:17:06,290 --> 00:17:10,890
trying to access, even though
that user is an application.

424
00:17:10,890 --> 00:17:12,670
There are also some options
here for rotating

425
00:17:12,670 --> 00:17:13,609
that private key.

426
00:17:13,609 --> 00:17:15,300
You can create a new one.

427
00:17:15,300 --> 00:17:19,780
So if you do accidentally lose
that private key file, you can

428
00:17:19,780 --> 00:17:25,579
create a new one here, and
then disable the old one.

429
00:17:25,579 --> 00:17:28,020
So we talked through how
to configure a project.

430
00:17:28,020 --> 00:17:30,920
We set a project up, we've
created a service account,

431
00:17:30,920 --> 00:17:33,710
we've download a private key,
we have an email address

432
00:17:33,710 --> 00:17:36,260
associated with it, and now
we're ready to use it.

433
00:17:36,260 --> 00:17:38,250
I'm going to hand off to Ben,
who's now going to show us how

434
00:17:38,250 --> 00:17:40,820
to write some code to use
that service account

435
00:17:40,820 --> 00:17:43,470
to access an API.

436
00:17:43,470 --> 00:17:44,670
BEN WILEY SITTLER:
Thank you, Adam.

437
00:17:44,670 --> 00:17:47,600
So let's get an access token.

438
00:17:47,600 --> 00:17:53,590
Now, remember that we have an
email address that represents

439
00:17:53,590 --> 00:17:56,250
our surface account-- our
application's identity.

440
00:17:56,250 --> 00:17:58,990
We also have an API we're
trying to access--

441
00:17:58,990 --> 00:18:00,420
in this case, Big Query.

442
00:18:00,420 --> 00:18:03,440
And for each of the Cloud APIs,
there's typically a

443
00:18:03,440 --> 00:18:06,540
scope, or two different scopes,
for the API-- a full

444
00:18:06,540 --> 00:18:09,220
access scope and a
read only scope.

445
00:18:09,220 --> 00:18:11,690
For Big Query we'll use
the full access scope.

446
00:18:11,690 --> 00:18:14,390
Now, to actually get an
access token, we need

447
00:18:14,390 --> 00:18:17,230
to create an assertion.

448
00:18:17,230 --> 00:18:22,010
To do this, we created a JSON
object, which describes who we

449
00:18:22,010 --> 00:18:25,970
are, what we're asking for, and
who we're sending this to,

450
00:18:25,970 --> 00:18:28,000
and how long the assertion
is good for.

451
00:18:28,000 --> 00:18:29,860
We need to make sure that
someone can't take this

452
00:18:29,860 --> 00:18:33,130
assertion and replay it later.

453
00:18:33,130 --> 00:18:41,610
We then JSON encode this, base
64, URL safe encode it, strip

454
00:18:41,610 --> 00:18:46,580
off the equals signs,
and sign it.

455
00:18:46,580 --> 00:18:50,420
The signing uses the key that
Adam showed you earlier, with

456
00:18:50,420 --> 00:18:51,920
the password notasecret.

457
00:18:51,920 --> 00:18:55,730

458
00:18:55,730 --> 00:18:59,950
So in this case, we're going to
use the open SSL library to

459
00:18:59,950 --> 00:19:07,900
sign it, reusing RSA to sign
and a SHA256 signature.

460
00:19:07,900 --> 00:19:14,700
And once we append that to our
earlier assertion, it's ready

461
00:19:14,700 --> 00:19:16,430
to send to Google.

462
00:19:16,430 --> 00:19:23,250
So we send this to
accounts.google.com, and this

463
00:19:23,250 --> 00:19:27,025
assertion gives us back
an access token.

464
00:19:27,025 --> 00:19:28,720
It looks like this.

465
00:19:28,720 --> 00:19:30,580
Or rather, we get a
JSON object that

466
00:19:30,580 --> 00:19:32,060
includes an access token.

467
00:19:32,060 --> 00:19:34,570

468
00:19:34,570 --> 00:19:37,610
This, you may notice,
has an expires_in.

469
00:19:37,610 --> 00:19:41,460
This access token, if someone
else intercepts it, will only

470
00:19:41,460 --> 00:19:43,115
be good for them for an hour.

471
00:19:43,115 --> 00:19:46,010
Of course, you should be using
SSL everywhere, and make sure

472
00:19:46,010 --> 00:19:47,640
that no one can intercept it.

473
00:19:47,640 --> 00:19:50,560
But regardless, at the end of
the hour, you'll need to get

474
00:19:50,560 --> 00:19:52,400
another one.

475
00:19:52,400 --> 00:19:53,990
So go ahead.

476
00:19:53,990 --> 00:19:56,480
Store this in your mem cache.

477
00:19:56,480 --> 00:19:59,850
Share it across the instances
of your application.

478
00:19:59,850 --> 00:20:01,350
Create multiple of them
if you need to.

479
00:20:01,350 --> 00:20:03,880

480
00:20:03,880 --> 00:20:05,330
Now, let's use this.

481
00:20:05,330 --> 00:20:11,070
To actually access the API, we
would like to put that access

482
00:20:11,070 --> 00:20:15,430
token we just got into the HTTP
authorization header.

483
00:20:15,430 --> 00:20:18,110
This is fairly straightforward.

484
00:20:18,110 --> 00:20:22,840
We access our project's
big store data sets,

485
00:20:22,840 --> 00:20:24,420
and we get back this.

486
00:20:24,420 --> 00:20:27,380
Not very exciting, but that is
not what you were looking for.

487
00:20:27,380 --> 00:20:28,795
You were looking for working.

488
00:20:28,795 --> 00:20:31,794

489
00:20:31,794 --> 00:20:34,560
Now, this can be even easier.

490
00:20:34,560 --> 00:20:36,830
We have client libraries
for a variety of

491
00:20:36,830 --> 00:20:39,280
platforms and languages.

492
00:20:39,280 --> 00:20:40,730
Here, we're going
to show Python.

493
00:20:40,730 --> 00:20:44,050
And in this case, we still need
those same three pieces

494
00:20:44,050 --> 00:20:45,000
of information--

495
00:20:45,000 --> 00:20:51,010
your service account's email
address, its private key, and

496
00:20:51,010 --> 00:20:54,140
the API scope we're
trying to access.

497
00:20:54,140 --> 00:20:57,790
We use the
SignedJwtAssertionCredentials

498
00:20:57,790 --> 00:21:02,680
class, and we use this to
authorize an HTTP object.

499
00:21:02,680 --> 00:21:04,240
Now, you may wonder what's
going on here.

500
00:21:04,240 --> 00:21:07,990
What this will give us is an
HTTP object, as you may

501
00:21:07,990 --> 00:21:11,300
already be comfortable
using in Python.

502
00:21:11,300 --> 00:21:15,300
But unlike other HTTP objects,
this one is wrapped and sends

503
00:21:15,300 --> 00:21:17,530
along that authorization header
automatically with

504
00:21:17,530 --> 00:21:18,780
every request.

505
00:21:18,780 --> 00:21:20,760

506
00:21:20,760 --> 00:21:23,320
So what do we get back?

507
00:21:23,320 --> 00:21:26,500
An HTTP object we can use
to access that same API.

508
00:21:26,500 --> 00:21:29,180

509
00:21:29,180 --> 00:21:32,710
And indeed, we get back exactly
the same answer.

510
00:21:32,710 --> 00:21:35,400
Perhaps a boring, but
it works, and

511
00:21:35,400 --> 00:21:37,380
that's what you want.

512
00:21:37,380 --> 00:21:41,850
Now, we also have something
called the discovery API.

513
00:21:41,850 --> 00:21:47,040
The discovery API gives back a
JSON introspection for each of

514
00:21:47,040 --> 00:21:50,960
the API versions that
Google publishes.

515
00:21:50,960 --> 00:21:52,530
We have not just Cloud APIs.

516
00:21:52,530 --> 00:21:54,650
We have a wide variety
of APIs, as

517
00:21:54,650 --> 00:21:56,300
Adam mentioned earlier.

518
00:21:56,300 --> 00:22:00,720
But for all of these APIs, this
discovery API returns the

519
00:22:00,720 --> 00:22:03,860
methods, the parameters, and
how to encode the requests,

520
00:22:03,860 --> 00:22:07,480
and how to read back
the responses.

521
00:22:07,480 --> 00:22:11,930
In this case, we are looking for
the data sets API from Big

522
00:22:11,930 --> 00:22:16,160
Query, and in particular, we're
looking for the list

523
00:22:16,160 --> 00:22:20,310
method with the project
ID mentioned earlier.

524
00:22:20,310 --> 00:22:23,730
And note that once you call
that list method, you're

525
00:22:23,730 --> 00:22:25,010
getting back a request object.

526
00:22:25,010 --> 00:22:27,200
But nothing has actually been
sent to a server yet.

527
00:22:27,200 --> 00:22:28,860
For that, you need
to call execute.

528
00:22:28,860 --> 00:22:31,650
And here is where special
HTTP object comes in.

529
00:22:31,650 --> 00:22:36,250
When we call execute, we pass in
our decorated HTTP object,

530
00:22:36,250 --> 00:22:38,740
and this means the request
will be executed with the

531
00:22:38,740 --> 00:22:41,420
authorization header.

532
00:22:41,420 --> 00:22:45,532
Indeed, response is as before.

533
00:22:45,532 --> 00:22:49,980
Now, we also have Google
hosted environments.

534
00:22:49,980 --> 00:22:52,850
I'm sure you've all heard of App
Engine and Compute Engine.

535
00:22:52,850 --> 00:22:56,130
And we can make this
even easier.

536
00:22:56,130 --> 00:22:58,430
Remember earlier, we had three
pieces of information.

537
00:22:58,430 --> 00:23:01,130

538
00:23:01,130 --> 00:23:03,940
Adam's going to tell you more
about how we use this.

539
00:23:03,940 --> 00:23:04,550
ADAM EIJDENBERG:
Thank you, Ben.

540
00:23:04,550 --> 00:23:07,710
So what Ben's gone through and
shown us is how to use that

541
00:23:07,710 --> 00:23:10,610
private key that we created
before, and how to then use

542
00:23:10,610 --> 00:23:13,010
that to generate what we call an
assertion, and then how to

543
00:23:13,010 --> 00:23:15,550
sign that assertion with
that private key,

544
00:23:15,550 --> 00:23:16,940
send that to Google--

545
00:23:16,940 --> 00:23:18,010
now we have an access token.

546
00:23:18,010 --> 00:23:18,730
We're ready for business.

547
00:23:18,730 --> 00:23:23,830
Once we have that access token,
we can hit those APIs.

548
00:23:23,830 --> 00:23:26,080
We can do exactly the same thing
in Compute Engine and

549
00:23:26,080 --> 00:23:27,290
Google App Engine.

550
00:23:27,290 --> 00:23:30,400
The neat thing about Compute
Engine and App Engine is they

551
00:23:30,400 --> 00:23:32,830
are already running on Google's
infrastructure.

552
00:23:32,830 --> 00:23:34,750
Because they're running in
our data center on our

553
00:23:34,750 --> 00:23:36,830
infrastructure, we know
who they are.

554
00:23:36,830 --> 00:23:41,390
We can prove that that app is
your app, and that app is

555
00:23:41,390 --> 00:23:42,210
belonging to another project.

556
00:23:42,210 --> 00:23:43,270
We know this.

557
00:23:43,270 --> 00:23:46,300
And so what that means is that
we still use a surface account

558
00:23:46,300 --> 00:23:49,520
to access APIs, but we use a
surface account that has built

559
00:23:49,520 --> 00:23:50,840
credentials.

560
00:23:50,840 --> 00:23:53,940
So what that means is that
when you start a Compute

561
00:23:53,940 --> 00:23:57,730
Engine virtual machine, you can
tell it to use a surface

562
00:23:57,730 --> 00:24:00,040
account, and here are the
scopes that I want.

563
00:24:00,040 --> 00:24:02,630
And then from within that
virtual machine, we can make

564
00:24:02,630 --> 00:24:05,570
access tokens available directly
to your application

565
00:24:05,570 --> 00:24:08,155
without ever needing to
see a private key.

566
00:24:08,155 --> 00:24:09,890
And exactly the same
with an App Engine.

567
00:24:09,890 --> 00:24:12,520
When you create an App Engine
app, we create a service

568
00:24:12,520 --> 00:24:15,170
account associated with that App
Engine app, and then you

569
00:24:15,170 --> 00:24:15,780
can use that.

570
00:24:15,780 --> 00:24:17,800
You can add that to access
control lists for other

571
00:24:17,800 --> 00:24:20,520
services and other projects,
and then you can get access

572
00:24:20,520 --> 00:24:22,370
tokens for that straightaway.

573
00:24:22,370 --> 00:24:25,790
And so Ben's going to now
show us how to do that.

574
00:24:25,790 --> 00:24:27,710
BEN WILEY SITTLER:
Thank you, Adam.

575
00:24:27,710 --> 00:24:30,420
So let's start with
App Engine.

576
00:24:30,420 --> 00:24:32,970
Now, before, remember, we
needed three pieces of

577
00:24:32,970 --> 00:24:33,460
information.

578
00:24:33,460 --> 00:24:36,130
We needed the email address for
our service account, we

579
00:24:36,130 --> 00:24:39,530
needed a private key, and
we needed an API scope.

580
00:24:39,530 --> 00:24:43,100
Only the last one
is needed here.

581
00:24:43,100 --> 00:24:47,570
We use the App Identity API
to get an access token.

582
00:24:47,570 --> 00:24:50,480
You notice we did not
sign an assertion.

583
00:24:50,480 --> 00:24:52,430
We didn't have to make
an HTTP request to

584
00:24:52,430 --> 00:24:54,030
get our access token.

585
00:24:54,030 --> 00:24:55,810
This is all handled for
us by App Engine.

586
00:24:55,810 --> 00:24:58,730

587
00:24:58,730 --> 00:25:02,170
Now, our client libraries
also make this easy.

588
00:25:02,170 --> 00:25:06,190
You can use the app assertion
credentials class to get the

589
00:25:06,190 --> 00:25:11,280
same effect, and this gets you
back a decorated HTTP object

590
00:25:11,280 --> 00:25:13,790
very similar to the
one we saw before.

591
00:25:13,790 --> 00:25:16,570
In fact, we can do
the same thing in

592
00:25:16,570 --> 00:25:18,430
Google Compute Engine.

593
00:25:18,430 --> 00:25:21,020
As Adam mentioned, you need to
tell Compute Engine which

594
00:25:21,020 --> 00:25:23,600
scopes your VM is allowed
to access.

595
00:25:23,600 --> 00:25:26,700
So in this case, we're
going to let instance

596
00:25:26,700 --> 00:25:28,650
foobar access Big Query.

597
00:25:28,650 --> 00:25:32,210

598
00:25:32,210 --> 00:25:34,670
To fetch a token in
Compute Engine is

599
00:25:34,670 --> 00:25:36,440
actually an HTTP request.

600
00:25:36,440 --> 00:25:39,060
We can talk to the metadata
server and get back an access

601
00:25:39,060 --> 00:25:44,700
token, just as before.

602
00:25:44,700 --> 00:25:47,820
Now, once again, you can use our
client libraries to make

603
00:25:47,820 --> 00:25:50,730
this even easier.

604
00:25:50,730 --> 00:25:53,760
We have an app assertion
credentials once again, but

605
00:25:53,760 --> 00:25:57,890
this one's from the
oath2client.gce package rather

606
00:25:57,890 --> 00:25:59,040
than for App Engine.

607
00:25:59,040 --> 00:26:03,690
And it gives you, likewise,
an HTTP object, which is

608
00:26:03,690 --> 00:26:05,970
automatically adding
authorization headers.

609
00:26:05,970 --> 00:26:13,820

610
00:26:13,820 --> 00:26:15,120
ADAM EIJDENBERG: So Ben showed
us a number of different ways

611
00:26:15,120 --> 00:26:18,210
to get those access tokens from
him, but all we need is

612
00:26:18,210 --> 00:26:19,250
one access token.

613
00:26:19,250 --> 00:26:22,090
That's all we need to actually
access an API.

614
00:26:22,090 --> 00:26:25,310
And I think we've gone through
three different ways.

615
00:26:25,310 --> 00:26:28,810
We have doing it from first
principles, we have using part

616
00:26:28,810 --> 00:26:30,500
of our client library--
the oauth part

617
00:26:30,500 --> 00:26:31,560
of our client library.

618
00:26:31,560 --> 00:26:35,280
And that oath part-- it gives
us those HTTP objects back.

619
00:26:35,280 --> 00:26:37,680
And to me, that's probably
my favorite part.

620
00:26:37,680 --> 00:26:40,670
We have these special HTTP
objects that's like an HTTP

621
00:26:40,670 --> 00:26:42,320
object with benefits, right?

622
00:26:42,320 --> 00:26:44,840
I can use that object the same
way that I'm used to making

623
00:26:44,840 --> 00:26:48,100
regular HTTP requests, but it
automatically adds that

624
00:26:48,100 --> 00:26:49,820
authorization header for us.

625
00:26:49,820 --> 00:26:51,960
And even better, it'll
detect when my access

626
00:26:51,960 --> 00:26:53,380
token is going to expire.

627
00:26:53,380 --> 00:26:54,430
It'll get me a new one.

628
00:26:54,430 --> 00:26:58,030
So I don't have to write code
in my app to do that for me.

629
00:26:58,030 --> 00:27:00,910
In addition, if for any other
reason, the access token

630
00:27:00,910 --> 00:27:03,500
doesn't work, it'll get a new
one for me automatically.

631
00:27:03,500 --> 00:27:05,880
So I think that's a really
powerful way of taking

632
00:27:05,880 --> 00:27:08,315
advantage of being able to use
those client libraries to

633
00:27:08,315 --> 00:27:10,390
access our APIs, even
if you don't use

634
00:27:10,390 --> 00:27:11,230
the rest of the stack.

635
00:27:11,230 --> 00:27:15,300
Even if you don't use the full
discovery API as well, which

636
00:27:15,300 --> 00:27:18,180
is also a very useful part of
the library, especially when

637
00:27:18,180 --> 00:27:20,050
you're getting started with an
API and you're trying to learn

638
00:27:20,050 --> 00:27:23,180
about what the different
methods are that exist.

639
00:27:23,180 --> 00:27:24,840
So when we run an application,
we assign

640
00:27:24,840 --> 00:27:25,640
it a service account.

641
00:27:25,640 --> 00:27:27,100
We give it an identity.

642
00:27:27,100 --> 00:27:28,730
That's how we do it.

643
00:27:28,730 --> 00:27:30,920
We can use built in credentials
in App Engine and

644
00:27:30,920 --> 00:27:32,420
Compute Engine.

645
00:27:32,420 --> 00:27:33,810
But when you're running
elsewhere--

646
00:27:33,810 --> 00:27:36,560
and this includes when you're
doing local development with

647
00:27:36,560 --> 00:27:39,170
App Engine, where we don't know
who your application is,

648
00:27:39,170 --> 00:27:40,800
because it's running on
your workstation--

649
00:27:40,800 --> 00:27:43,100
we give you the downloadable
private keys that you can then

650
00:27:43,100 --> 00:27:44,840
associate with your
application to

651
00:27:44,840 --> 00:27:46,090
give it that identity.

652
00:27:46,090 --> 00:27:48,350

653
00:27:48,350 --> 00:27:51,040
So that's kind of the first part
of the presentation on

654
00:27:51,040 --> 00:27:53,480
authentication and how we
authenticate your app, where

655
00:27:53,480 --> 00:27:55,170
we need to write code
to do that.

656
00:27:55,170 --> 00:27:57,050
The second part, I'm going to
talk a little bit about

657
00:27:57,050 --> 00:28:01,200
authorization and how to
configure your project so that

658
00:28:01,200 --> 00:28:03,370
once you know who your
application is, we then let it

659
00:28:03,370 --> 00:28:05,170
actually proceed with
the request.

660
00:28:05,170 --> 00:28:07,100
And what I'm really going to go
through is just sort of hit

661
00:28:07,100 --> 00:28:10,550
off on a couple of points on how
we process that request so

662
00:28:10,550 --> 00:28:13,520
that if you get an error back
saying access not configured

663
00:28:13,520 --> 00:28:17,020
correctly or similar, you know
what steps to do to fix it.

664
00:28:17,020 --> 00:28:19,290
So if you remember before,
our access token--

665
00:28:19,290 --> 00:28:20,190
three main parts.

666
00:28:20,190 --> 00:28:23,280
The client that's making the
request, the user associated

667
00:28:23,280 --> 00:28:25,420
with the request, and the scopes
that are associated

668
00:28:25,420 --> 00:28:27,530
with the request.

669
00:28:27,530 --> 00:28:30,240
Now, let's see how
we use those.

670
00:28:30,240 --> 00:28:32,390
Now, primarily the authorization
is done

671
00:28:32,390 --> 00:28:34,090
based on the user.

672
00:28:34,090 --> 00:28:37,860
We look at the user associated
with the token, we look at the

673
00:28:37,860 --> 00:28:40,640
resource that they are trying to
access, and then we look at

674
00:28:40,640 --> 00:28:42,840
the project associated with
that resource that they're

675
00:28:42,840 --> 00:28:44,020
trying to access.

676
00:28:44,020 --> 00:28:46,650
And then we make sure that that
user is on the team for

677
00:28:46,650 --> 00:28:48,730
that project.

678
00:28:48,730 --> 00:28:50,980
Different services have slightly
different semantics

679
00:28:50,980 --> 00:28:54,950
for what the different roles
in a project mean.

680
00:28:54,950 --> 00:28:57,200
I'm showing the project team
page up there right now.

681
00:28:57,200 --> 00:28:59,640
We have can edit, can
view, and owner.

682
00:28:59,640 --> 00:29:01,860
Each service has a slightly
different interpretation of

683
00:29:01,860 --> 00:29:04,485
what those mean, but generally
the edit can write objects,

684
00:29:04,485 --> 00:29:06,960
the read can view objects,
and owner can do

685
00:29:06,960 --> 00:29:08,720
anything to those objects.

686
00:29:08,720 --> 00:29:11,110
Some services, like Cloud
Storage, let you go a little

687
00:29:11,110 --> 00:29:13,310
bit deeper and set access
control entries on individual

688
00:29:13,310 --> 00:29:15,820
objects and individual
buckets.

689
00:29:15,820 --> 00:29:18,600
But essentially, they default
to these parameters here.

690
00:29:18,600 --> 00:29:21,410
So the first thing you want to
do is make sure that the

691
00:29:21,410 --> 00:29:23,660
object that you're trying to
access-- that the project it

692
00:29:23,660 --> 00:29:27,200
belongs to has the application
on the team.

693
00:29:27,200 --> 00:29:29,530
And that's done automatically
for service accounts that you

694
00:29:29,530 --> 00:29:31,040
create within a project.

695
00:29:31,040 --> 00:29:33,440
But if you do you create an
App Engine app, and then

696
00:29:33,440 --> 00:29:35,460
separately, you create a project
in the developer

697
00:29:35,460 --> 00:29:37,510
console, they are different.

698
00:29:37,510 --> 00:29:39,540
So you will need to get the
email address associated with

699
00:29:39,540 --> 00:29:42,020
that App Engine service account
and add that to the

700
00:29:42,020 --> 00:29:44,210
team in the developer's
console.

701
00:29:44,210 --> 00:29:46,110
If you use the new Cloud
Console, a lot of that's

702
00:29:46,110 --> 00:29:48,870
handled automatically for you.

703
00:29:48,870 --> 00:29:51,730
We then look at the scopes
that are in the request.

704
00:29:51,730 --> 00:29:55,400
So once we figured out that the
user is allowed to access

705
00:29:55,400 --> 00:29:59,090
the object, we then check to see
what scopes are associated

706
00:29:59,090 --> 00:30:01,420
with that API call.

707
00:30:01,420 --> 00:30:03,520
And if you don't have those
scopes associated with that

708
00:30:03,520 --> 00:30:04,710
access token, we won't let that

709
00:30:04,710 --> 00:30:05,860
request go through, either.

710
00:30:05,860 --> 00:30:08,520
So make sure that you request
via the appropriate scope with

711
00:30:08,520 --> 00:30:09,510
your access token.

712
00:30:09,510 --> 00:30:11,820
And those scopes can be found in
the documentation for each

713
00:30:11,820 --> 00:30:13,070
of the APIs.

714
00:30:13,070 --> 00:30:15,320

715
00:30:15,320 --> 00:30:17,470
The second part is based
on the client.

716
00:30:17,470 --> 00:30:20,600
So we do most the authorization
based on the

717
00:30:20,600 --> 00:30:23,230
user, but there are a bunch of
other things that we do based

718
00:30:23,230 --> 00:30:24,700
on the client.

719
00:30:24,700 --> 00:30:26,740
And the client, remember, that's
the application that

720
00:30:26,740 --> 00:30:27,830
you register with Google.

721
00:30:27,830 --> 00:30:29,190
And there's a few things
we check there.

722
00:30:29,190 --> 00:30:32,060
And they're not strictly
authorization, but I call them

723
00:30:32,060 --> 00:30:34,000
out here, because you'll get a
very similar error message

724
00:30:34,000 --> 00:30:36,940
back if it's not configured
correctly.

725
00:30:36,940 --> 00:30:39,150
First, we make sure that the
service that you're trying to

726
00:30:39,150 --> 00:30:41,930
access is actually enabled
in the project.

727
00:30:41,930 --> 00:30:43,830
And the project that we're
concerned about there is the

728
00:30:43,830 --> 00:30:47,710
project associated with the
client that you created.

729
00:30:47,710 --> 00:30:49,730
So when you create a client that
belongs to a project, you

730
00:30:49,730 --> 00:30:52,110
need to make sure that the
service or the API you're

731
00:30:52,110 --> 00:30:55,740
trying to access is turned
on for that project.

732
00:30:55,740 --> 00:30:59,210
If it's an API that requires
a credit card or a form of

733
00:30:59,210 --> 00:31:01,520
payment-- some do and some
don't-- you need to make sure

734
00:31:01,520 --> 00:31:06,120
that that billing is enabled
and set up on that project.

735
00:31:06,120 --> 00:31:08,620
And we also will do checks
against quota.

736
00:31:08,620 --> 00:31:10,930
You might see a quota error come
back from time to time.

737
00:31:10,930 --> 00:31:14,240
And that can come back primarily
for two reasons.

738
00:31:14,240 --> 00:31:16,910
Some projects will have a free
quota, and then after that,

739
00:31:16,910 --> 00:31:18,500
it's paid, and maybe
the billing

740
00:31:18,500 --> 00:31:20,550
information isn't set up.

741
00:31:20,550 --> 00:31:23,775
And we also have the ability for
you to be able to specify

742
00:31:23,775 --> 00:31:26,696
a per user quota.

743
00:31:26,696 --> 00:31:30,240
The per user quota here is
probably more useful when

744
00:31:30,240 --> 00:31:33,780
you're building an application
using, say, a drive API or a

745
00:31:33,780 --> 00:31:37,140
calendar API, where you have
individual users who are

746
00:31:37,140 --> 00:31:40,040
accessing data using
your application.

747
00:31:40,040 --> 00:31:41,950
And then you can configure
a per user quota

748
00:31:41,950 --> 00:31:43,570
that gets set up there.

749
00:31:43,570 --> 00:31:44,420
I just mentioned this.

750
00:31:44,420 --> 00:31:45,560
These are places to check.

751
00:31:45,560 --> 00:31:48,220
There's a quotas tab in
the developer console.

752
00:31:48,220 --> 00:31:51,150
These are places to check if
you're having any errors

753
00:31:51,150 --> 00:31:54,150
accessing the API.

754
00:31:54,150 --> 00:31:54,840
And finally--

755
00:31:54,840 --> 00:31:57,300
and this is fairly specific
to Cloud--

756
00:31:57,300 --> 00:32:02,550
all of these checks are
generally based on the project

757
00:32:02,550 --> 00:32:04,910
associated with the credentials
of the client that

758
00:32:04,910 --> 00:32:06,350
you've created.

759
00:32:06,350 --> 00:32:08,930
When you're accessing a resource
that belongs to

760
00:32:08,930 --> 00:32:13,430
another project, we check
in both places.

761
00:32:13,430 --> 00:32:16,950
So if you have project A and
project B, and you have an

762
00:32:16,950 --> 00:32:19,890
application registered here and
a resource in Project B,

763
00:32:19,890 --> 00:32:22,140
we'll do the checks
in both places.

764
00:32:22,140 --> 00:32:23,530
So make sure [INAUDIBLE]

765
00:32:23,530 --> 00:32:24,830
set up.

766
00:32:24,830 --> 00:32:26,300
A lot of the use cases
we see are

767
00:32:26,300 --> 00:32:27,550
typically within one project.

768
00:32:27,550 --> 00:32:28,800
I just mention that
for completeness.

769
00:32:28,800 --> 00:32:31,380

770
00:32:31,380 --> 00:32:35,500
So to finish off, to access any
of our APIs, you need to

771
00:32:35,500 --> 00:32:37,230
give us an access token.

772
00:32:37,230 --> 00:32:40,860
We use service accounts to get
those for Cloud resources, and

773
00:32:40,860 --> 00:32:42,490
then make sure that that
user is authorized.

774
00:32:42,490 --> 00:32:45,170
Make sure it's added
to the right team.

775
00:32:45,170 --> 00:32:47,780
Yeah, we have a fairly active
community in our developer

776
00:32:47,780 --> 00:32:50,030
relations group, and others
watching Stack Overflow.

777
00:32:50,030 --> 00:32:51,780
That's a great spot
to ask for help.

778
00:32:51,780 --> 00:32:54,680
If you're struggling to access
an API, come and ask for help

779
00:32:54,680 --> 00:32:57,990
there, and we will try
and help you out.

780
00:32:57,990 --> 00:33:02,480
And I think what I'd like to
finish on saying is, I don't

781
00:33:02,480 --> 00:33:05,395
think successfully
authenticating an API call is

782
00:33:05,395 --> 00:33:09,990
the exciting part of being a
developer on Cloud Platform.

783
00:33:09,990 --> 00:33:11,520
I don't think that's
that exciting.

784
00:33:11,520 --> 00:33:14,480
To me, what is exciting is being
able to get past that

785
00:33:14,480 --> 00:33:17,180
step and get to those APIs and
start building my app.

786
00:33:17,180 --> 00:33:20,030
Because if you're stuck for
three or four hours trying to

787
00:33:20,030 --> 00:33:23,990
authenticate, that's a lot of
wasted time, and I don't think

788
00:33:23,990 --> 00:33:25,440
it's that interesting.

789
00:33:25,440 --> 00:33:28,090
Once you get past that, once
you get that successful API

790
00:33:28,090 --> 00:33:32,330
call, I think that's a
really good feeling.

791
00:33:32,330 --> 00:33:34,940
But even though you and I might
not be that interested

792
00:33:34,940 --> 00:33:38,060
in the authentication part,
at Google, we're lucky.

793
00:33:38,060 --> 00:33:38,930
We're a big company.

794
00:33:38,930 --> 00:33:43,990
We have over 250 full-time
engineers whose job is to work

795
00:33:43,990 --> 00:33:47,430
on security, and their job is
to work on security of your

796
00:33:47,430 --> 00:33:49,920
data in our data centers.

797
00:33:49,920 --> 00:33:53,260
And they care about this a lot,
and they spend a lot of

798
00:33:53,260 --> 00:33:55,410
time and effort on
these details.

799
00:33:55,410 --> 00:33:59,290
When I first started using some
of our APIs, I kind of

800
00:33:59,290 --> 00:34:00,690
felt there were a lot of
hoops to jump through.

801
00:34:00,690 --> 00:34:02,030
It kind of seemed
a bit strange.

802
00:34:02,030 --> 00:34:04,330
I had to download these private
keys, and create these

803
00:34:04,330 --> 00:34:07,970
assertions, and send them off,
and get access tokens back.

804
00:34:07,970 --> 00:34:11,810
But what I discovered was,
talking to people like Ben,

805
00:34:11,810 --> 00:34:14,239
talking with people on our
security team, is that each of

806
00:34:14,239 --> 00:34:17,389
those hoops is there for a
reason, and most of those

807
00:34:17,389 --> 00:34:19,239
reasons are actually
good ones.

808
00:34:19,239 --> 00:34:23,060
And that once I could convince
myself that there's no magic

809
00:34:23,060 --> 00:34:24,659
actually going on in the
client libraries, it's

810
00:34:24,659 --> 00:34:27,030
actually a pretty simple flow
to make those requests--

811
00:34:27,030 --> 00:34:30,409
once I figured out, hey, now
I understand it, I get it.

812
00:34:30,409 --> 00:34:31,850
Now I'm just going to use the
client libraries, and use

813
00:34:31,850 --> 00:34:33,389
those to make my calls.

814
00:34:33,389 --> 00:34:36,699
And once you get that API call
done, you're an auth ninja.

815
00:34:36,699 --> 00:34:39,280
And the best thing about being
an auth ninja on one of our

816
00:34:39,280 --> 00:34:42,840
APIs is there's then another 60
different APIs that you can

817
00:34:42,840 --> 00:34:44,739
go out and try, and you've
already figured out the

818
00:34:44,739 --> 00:34:47,980
hardest part, which
is authentication.

819
00:34:47,980 --> 00:34:49,810
So thank you very much
for coming out today.

820
00:34:49,810 --> 00:34:53,230
We've got a couple minutes now
for Q and A. Ben and I will be

821
00:34:53,230 --> 00:34:56,560
around outside at Cloud Platform
Sandbox afterwards.

822
00:34:56,560 --> 00:34:57,220
We also have--

823
00:34:57,220 --> 00:35:00,070
I don't know if Ryan Boyd is
in the audience right now.

824
00:35:00,070 --> 00:35:02,640
Ryan has just written a book on
oauth, and I think he might

825
00:35:02,640 --> 00:35:04,050
be doing book signings
a little bit

826
00:35:04,050 --> 00:35:05,620
later there as well.

827
00:35:05,620 --> 00:35:06,870
So, any questions?

828
00:35:06,870 --> 00:35:10,454

829
00:35:10,454 --> 00:35:10,910
Yes?

830
00:35:10,910 --> 00:35:13,100
AUDIENCE: A couple over here.

831
00:35:13,100 --> 00:35:17,390
One is around the concept of
a client versus a project.

832
00:35:17,390 --> 00:35:20,490
I'm still not quite clear in
terms of their relationship,

833
00:35:20,490 --> 00:35:22,930
whether it's a many to many
relationship, or it's a parent

834
00:35:22,930 --> 00:35:24,150
child relationship.

835
00:35:24,150 --> 00:35:25,210
That's first.

836
00:35:25,210 --> 00:35:28,360
And then the second part of it
is around token management.

837
00:35:28,360 --> 00:35:32,780
Is there any facility provided
by Google that allows me to

838
00:35:32,780 --> 00:35:35,700
deactivate or invalidate
a token that I've

839
00:35:35,700 --> 00:35:37,030
given up in the past?

840
00:35:37,030 --> 00:35:38,120
ADAM EIJDENBERG: OK,
so I'll answer the

841
00:35:38,120 --> 00:35:39,000
first part of the question.

842
00:35:39,000 --> 00:35:40,435
I'll defer to Ben
on the second.

843
00:35:40,435 --> 00:35:42,680
I see the relationship between
the client and the project as

844
00:35:42,680 --> 00:35:43,630
parent child.

845
00:35:43,630 --> 00:35:45,900
See, clients belong
to one project.

846
00:35:45,900 --> 00:35:48,970
A project may have multiple
clients as children.

847
00:35:48,970 --> 00:35:51,440
And Ben, on the token
management?

848
00:35:51,440 --> 00:35:55,020
BEN WILEY SITTLER: So anytime
you have an access token, you

849
00:35:55,020 --> 00:35:58,960
can send it to our standard
OAuth 2 token verification

850
00:35:58,960 --> 00:36:03,450
endpoint, and it will stop
working after that.

851
00:36:03,450 --> 00:36:06,162
ADAM EIJDENBERG: You can
also wait one hour.

852
00:36:06,162 --> 00:36:07,580
Yes?

853
00:36:07,580 --> 00:36:08,350
BEN WILEY SITTLER:
Can you come to

854
00:36:08,350 --> 00:36:10,870
the microphone, please?

855
00:36:10,870 --> 00:36:12,950
ADAM EIJDENBERG: Just because
the session's being recorded.

856
00:36:12,950 --> 00:36:16,595
I know we have a lot of folks
that aren't in the room today.

857
00:36:16,595 --> 00:36:19,050
AUDIENCE: Supposing if I'm using
your OAuth token, but I

858
00:36:19,050 --> 00:36:23,200
also want to implement a two
level, like sending the code--

859
00:36:23,200 --> 00:36:25,220
like how Gmail does it--

860
00:36:25,220 --> 00:36:26,840
the code instantly,
whenever I log in.

861
00:36:26,840 --> 00:36:29,150
If I want to put that also
in my application,

862
00:36:29,150 --> 00:36:31,980
what I should do?

863
00:36:31,980 --> 00:36:34,780
Like, the instant code,
I get it, right?

864
00:36:34,780 --> 00:36:37,330
Supposing if I have a two level
authentication, I have

865
00:36:37,330 --> 00:36:38,160
the user name and
then password.

866
00:36:38,160 --> 00:36:41,380
Afterwards, I'll ask for
the code, you know?

867
00:36:41,380 --> 00:36:43,780
So the Google sends me the code
through SMS or something.

868
00:36:43,780 --> 00:36:45,720
So if I want to put also
in my application,

869
00:36:45,720 --> 00:36:46,850
how should I do it?

870
00:36:46,850 --> 00:36:48,335
Along with OAuth, what
should I do?

871
00:36:48,335 --> 00:36:49,880
ADAM EIJDENBERG: So I think what
you're talking about is

872
00:36:49,880 --> 00:36:52,010
probably what we refer to as
two factor authentication,

873
00:36:52,010 --> 00:36:54,360
which, by the way, if anyone
here does not have two factor

874
00:36:54,360 --> 00:36:56,600
authentication set up,
set it up right away.

875
00:36:56,600 --> 00:36:59,540
It is a fantastic way to keep
your account secure.

876
00:36:59,540 --> 00:37:02,330
And if you don't know what two
factor is, what it is--

877
00:37:02,330 --> 00:37:05,220
normally, when you log into a
Google account, you give your

878
00:37:05,220 --> 00:37:07,200
email address and a password.

879
00:37:07,200 --> 00:37:09,730
What two factor does is once
you put your email and

880
00:37:09,730 --> 00:37:13,110
password in, it will then send
you, either via an SMS or via

881
00:37:13,110 --> 00:37:16,830
an app we have on Android,
a six digit code.

882
00:37:16,830 --> 00:37:17,710
And you need to put that in.

883
00:37:17,710 --> 00:37:19,590
You only need to do about
once a month or so.

884
00:37:19,590 --> 00:37:21,450
It can be a little bit
frustrating that once a month

885
00:37:21,450 --> 00:37:24,760
when you do it, but on the plus
side, if someone gets

886
00:37:24,760 --> 00:37:26,335
your password-- because
maybe you've reused

887
00:37:26,335 --> 00:37:27,480
it somewhere else--

888
00:37:27,480 --> 00:37:29,450
then they can't actually
access your account.

889
00:37:29,450 --> 00:37:31,050
Now, back to the question
in terms of how does

890
00:37:31,050 --> 00:37:32,990
that relate to OAuth?

891
00:37:32,990 --> 00:37:36,320
So for the service account use
case, it doesn't apply at all.

892
00:37:36,320 --> 00:37:38,190
The service account just
has a private key.

893
00:37:38,190 --> 00:37:39,700
It's your application.

894
00:37:39,700 --> 00:37:40,820
For a more traditional--

895
00:37:40,820 --> 00:37:44,680
let's say I'm using a Google
API to access.

896
00:37:44,680 --> 00:37:46,410
Let's say we're using
the Drive example.

897
00:37:46,410 --> 00:37:48,420
You're building an application,
and you wanted to

898
00:37:48,420 --> 00:37:50,360
access a user's data.

899
00:37:50,360 --> 00:37:52,800
This is actually one of the
great things about using OAuth

900
00:37:52,800 --> 00:37:56,590
instead of taking the user's
username and password and

901
00:37:56,590 --> 00:37:58,210
sending it on.

902
00:37:58,210 --> 00:38:01,680
You do a redirect back to a
Google screen, and what that

903
00:38:01,680 --> 00:38:03,480
means is that all of the
functionality that's on the

904
00:38:03,480 --> 00:38:07,100
regular Google login screen is
available to the user that's

905
00:38:07,100 --> 00:38:08,630
entering their credentials.

906
00:38:08,630 --> 00:38:10,550
They'll put their username and
password in if they're not

907
00:38:10,550 --> 00:38:12,630
already authenticated in
the browser window.

908
00:38:12,630 --> 00:38:14,440
Then they'll have to go through
two factor, if they

909
00:38:14,440 --> 00:38:17,310
haven't already done
that recently.

910
00:38:17,310 --> 00:38:20,690
Then they all see a screen
saying, hey, this app wants to

911
00:38:20,690 --> 00:38:22,370
access your drive data.

912
00:38:22,370 --> 00:38:22,950
Allow or deny?

913
00:38:22,950 --> 00:38:25,360
When they hit allow, that will
then send an authorization

914
00:38:25,360 --> 00:38:28,140
code back to your application,
which you can then use to

915
00:38:28,140 --> 00:38:29,710
exchange and get an
access token.

916
00:38:29,710 --> 00:38:32,740
And we didn't cover that flow
today, but hopefully, that

917
00:38:32,740 --> 00:38:34,860
answers that question.

918
00:38:34,860 --> 00:38:36,010
Sorry, a question
on this side?

919
00:38:36,010 --> 00:38:37,980
AUDIENCE: Adam, thanks.

920
00:38:37,980 --> 00:38:40,460
I'll try to be as concise
as possible.

921
00:38:40,460 --> 00:38:42,890
I'm going to imagine
an imaginary app

922
00:38:42,890 --> 00:38:44,950
that I want to make.

923
00:38:44,950 --> 00:38:49,620
Let's say I wanted to have a
Chrome extension that did

924
00:38:49,620 --> 00:38:52,410
something like take the URL or
something, put it up on your

925
00:38:52,410 --> 00:38:54,600
Drive, of whoever's
logged in there.

926
00:38:54,600 --> 00:38:58,010
So like you had just said for
the previous one, there's the

927
00:38:58,010 --> 00:39:01,030
client side authentication to
say which Google Drive are

928
00:39:01,030 --> 00:39:02,390
you, if you're not already
there, and then

929
00:39:02,390 --> 00:39:03,280
it gives you that.

930
00:39:03,280 --> 00:39:06,050
But for this project that I
have, let's say I go through

931
00:39:06,050 --> 00:39:10,700
and I make the project
for myself.

932
00:39:10,700 --> 00:39:13,430
I enable it for Google
Drive Service.

933
00:39:13,430 --> 00:39:16,910
I create a Service account,
and I generate a

934
00:39:16,910 --> 00:39:18,500
private key, then.

935
00:39:18,500 --> 00:39:23,080
And then I can, at run time,
get an access token to use.

936
00:39:23,080 --> 00:39:24,110
It all works great.

937
00:39:24,110 --> 00:39:27,300
I put this up as an extension,
and millions of people

938
00:39:27,300 --> 00:39:28,450
download it everywhere.

939
00:39:28,450 --> 00:39:29,980
And then all of a sudden,
now I've got

940
00:39:29,980 --> 00:39:34,020
problems with the quota.

941
00:39:34,020 --> 00:39:34,480
ADAM EIJDENBERG: [INAUDIBLE]

942
00:39:34,480 --> 00:39:36,550
millions of people with access
to your private key.

943
00:39:36,550 --> 00:39:39,830
AUDIENCE: So is there,
I guess, maybe--

944
00:39:39,830 --> 00:39:44,330
is there an API that we can have
for generating these API

945
00:39:44,330 --> 00:39:48,770
tokens so that every single
person who downloads the

946
00:39:48,770 --> 00:39:54,530
extension can have their own
token, let's say, for

947
00:39:54,530 --> 00:39:56,800
themselves as a developer,
when they're really not

948
00:39:56,800 --> 00:39:59,410
developers, but that way, they
have their own quota for every

949
00:39:59,410 --> 00:40:00,390
person that downloads it?

950
00:40:00,390 --> 00:40:02,380
I'm not sure if there's
an API for these APIs.

951
00:40:02,380 --> 00:40:05,050
ADAM EIJDENBERG: It sounds to
me like that's probably more

952
00:40:05,050 --> 00:40:07,310
of a case for what we call the
three legged authentication

953
00:40:07,310 --> 00:40:10,550
flow, where you have the
user consenting to

954
00:40:10,550 --> 00:40:12,290
access their data.

955
00:40:12,290 --> 00:40:15,100
In which case we don't
use the private key.

956
00:40:15,100 --> 00:40:16,700
We don't need to generate
a private key.

957
00:40:16,700 --> 00:40:18,100
We'd probably use--

958
00:40:18,100 --> 00:40:20,380
and I should probably defer to
Ben pretty quickly here.

959
00:40:20,380 --> 00:40:21,730
I was going to say web
application flow.

960
00:40:21,730 --> 00:40:25,290
Do we have something special
for Chrome extensions?

961
00:40:25,290 --> 00:40:26,740
BEN WILEY SITTLER: I think
Chrome extensions--

962
00:40:26,740 --> 00:40:27,990
AUDIENCE: Well, I just
made that up.

963
00:40:27,990 --> 00:40:29,140
Let's just say it's not
a Chrome extension.

964
00:40:29,140 --> 00:40:32,290
It's an executable that I make
freely available, and they

965
00:40:32,290 --> 00:40:33,060
download that there.

966
00:40:33,060 --> 00:40:35,720
But it would be the same
question I have, is how does

967
00:40:35,720 --> 00:40:41,170
that throttling happen when
it's just out there and

968
00:40:41,170 --> 00:40:43,696
everybody's using it
for their own?

969
00:40:43,696 --> 00:40:45,570
ADAM EIJDENBERG: I can give you
a very concrete example.

970
00:40:45,570 --> 00:40:48,690
So if you look at gcutil or
gsutil, and those are

971
00:40:48,690 --> 00:40:51,220
utilities that Google provides
for managing Compute Engine

972
00:40:51,220 --> 00:40:53,130
and Cloud Storage
respectively.

973
00:40:53,130 --> 00:40:55,500
That's a binary, essentially,
that we distribute.

974
00:40:55,500 --> 00:40:57,595
And when you download and run
that binary-- and by the way,

975
00:40:57,595 --> 00:40:59,210
it's using all of
our public APIs.

976
00:40:59,210 --> 00:41:03,050
But when you run that binary,
the user is presented with a

977
00:41:03,050 --> 00:41:04,860
URL that's opened automatically
in the browser

978
00:41:04,860 --> 00:41:08,810
for them that allows them to
consent to manage their cloud

979
00:41:08,810 --> 00:41:10,590
storage objects or their virtual
machine objects on

980
00:41:10,590 --> 00:41:12,040
their behalf.

981
00:41:12,040 --> 00:41:13,730
And that, then returns,
actually, what we call a

982
00:41:13,730 --> 00:41:16,400
refresh token, which is like an
access token, but it's one

983
00:41:16,400 --> 00:41:18,970
that we can use to get more
access tokens after an hour

984
00:41:18,970 --> 00:41:21,500
when it expires.

985
00:41:21,500 --> 00:41:24,020
You would then store that
locally on their machine, and

986
00:41:24,020 --> 00:41:27,530
then you can use that to
make subsequent calls.

987
00:41:27,530 --> 00:41:31,390
And that's when those per user
quotas come into effect.

988
00:41:31,390 --> 00:41:33,290
So that's where you can then
throttle users-- make sure

989
00:41:33,290 --> 00:41:35,990
that one user doesn't ruin it
for everyone else by doing

990
00:41:35,990 --> 00:41:37,680
thousands and thousands
of API calls.

991
00:41:37,680 --> 00:41:41,140
AUDIENCE: But if someone does do
that-- like, what if there

992
00:41:41,140 --> 00:41:45,000
is people who then use this new
thing you've made and you

993
00:41:45,000 --> 00:41:47,020
can't guarantee that other
people who've downloaded it

994
00:41:47,020 --> 00:41:51,820
won't have had the quota taken
up by someone they don't know.

995
00:41:51,820 --> 00:41:52,090
ADAM EIJDENBERG: Yes.

996
00:41:52,090 --> 00:41:55,012
So it actually is a per user
quota that you can set.

997
00:41:55,012 --> 00:41:58,180
So you can set it so that each
user might only be able to do

998
00:41:58,180 --> 00:42:01,930
10 requests per second, or
some limit like that.

999
00:42:01,930 --> 00:42:04,100
So I think we're running
out of time.

1000
00:42:04,100 --> 00:42:05,835
I'm getting the get off the
stage signal from the back.

1001
00:42:05,835 --> 00:42:07,870
Please come and find us after,
because we're going to be

1002
00:42:07,870 --> 00:42:11,520
around until about 10:30 at
the Cloud Platform booth.

1003
00:42:11,520 --> 00:42:13,270
Thank you, everyone,
for coming today.

1004
00:42:13,270 --> 00:42:15,410
If you did enjoy the session,
if you do want Ben and I to

1005
00:42:15,410 --> 00:42:18,480
come back next year and tell you
more about authentication,

1006
00:42:18,480 --> 00:42:20,640
please write the session at
the back, and there's a

1007
00:42:20,640 --> 00:42:22,130
feedback QR code over there.

1008
00:42:22,130 --> 00:42:24,360
If you didn't like the session,
if we just wasted 45

1009
00:42:24,360 --> 00:42:26,230
minutes of your time, no one
reads the feedback, so don't

1010
00:42:26,230 --> 00:42:27,380
worry about it.

1011
00:42:27,380 --> 00:42:28,630
Thank you.

1012
00:42:28,630 --> 00:42:33,358

