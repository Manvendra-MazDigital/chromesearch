1
00:00:00,000 --> 00:00:01,020

2
00:00:01,020 --> 00:00:02,430
MATTHEW GAUNT: Hi everyone.

3
00:00:02,430 --> 00:00:03,310
My name's Matthew Gaunt.

4
00:00:03,310 --> 00:00:06,130
I'm a developer advocate
on the Chrome team.

5
00:00:06,130 --> 00:00:08,550
Thank you for joining me for
The Modern Workflow for

6
00:00:08,550 --> 00:00:11,940
Developing the Mobile Web, which
I must admit I should've

7
00:00:11,940 --> 00:00:14,201
tried to make that
a bit snappier.

8
00:00:14,201 --> 00:00:17,040
But essentially, where this
talk came from is when you

9
00:00:17,040 --> 00:00:20,750
look at the development
environment for the desktop,

10
00:00:20,750 --> 00:00:23,520
the tools and the way you work
is actually quite mature when

11
00:00:23,520 --> 00:00:25,070
you compare it to
the mobile web.

12
00:00:25,070 --> 00:00:28,770
Whether that be a case of the
frameworks you're using, the

13
00:00:28,770 --> 00:00:32,100
way the flow you're working with
your IDE to the browsers

14
00:00:32,100 --> 00:00:33,910
on your local machine--

15
00:00:33,910 --> 00:00:35,000
one way or another, it's

16
00:00:35,000 --> 00:00:36,510
particularly easy on the desktop.

17
00:00:36,510 --> 00:00:38,920
It lends itself to it.

18
00:00:38,920 --> 00:00:41,790
But when you actually start
working on the mobile web, you

19
00:00:41,790 --> 00:00:43,500
realize a lot this isn't
quite the same.

20
00:00:43,500 --> 00:00:45,840
It's not the case.

21
00:00:45,840 --> 00:00:49,400
Now regardless of what your
specific workflow is, I'd say

22
00:00:49,400 --> 00:00:52,710
you could probably most of the
parts of what you do into

23
00:00:52,710 --> 00:00:54,450
these four categories.

24
00:00:54,450 --> 00:00:57,030
You're going to have a setup
stage, whether you're picking

25
00:00:57,030 --> 00:01:00,410
what tools, what source control,
staging server,

26
00:01:00,410 --> 00:01:03,400
production server, all those
kinds of things.

27
00:01:03,400 --> 00:01:05,710
Then you're going to obviously
have the bulk of the work.

28
00:01:05,710 --> 00:01:06,230
The hard bit.

29
00:01:06,230 --> 00:01:08,420
The developing.

30
00:01:08,420 --> 00:01:10,030
You're going to have
a testing stage.

31
00:01:10,030 --> 00:01:12,480
Whether that be just you
yourself testing in a couple

32
00:01:12,480 --> 00:01:16,750
of browsers, automated
testing, QA teams.

33
00:01:16,750 --> 00:01:19,010
And then obviously once you've
launched you're going to have

34
00:01:19,010 --> 00:01:20,980
the iteration steps.

35
00:01:20,980 --> 00:01:22,520
Hopefully adding new features,
improving what

36
00:01:22,520 --> 00:01:24,910
you've already done.

37
00:01:24,910 --> 00:01:26,880
And essentially what we're going
to be looking at is just

38
00:01:26,880 --> 00:01:29,630
some of the tools that you can
be using in your current

39
00:01:29,630 --> 00:01:32,520
workflow for the mobile web to
hopefully make it a bit more

40
00:01:32,520 --> 00:01:35,630
productive, fit in a bit
easier with what you're

41
00:01:35,630 --> 00:01:38,110
already doing.

42
00:01:38,110 --> 00:01:41,420
So let's start off
with set up.

43
00:01:41,420 --> 00:01:43,165
Now I'm not going to go into
particular frame works you

44
00:01:43,165 --> 00:01:45,220
guys should be using because I
think a lot of that comes down

45
00:01:45,220 --> 00:01:46,910
to personal taste.

46
00:01:46,910 --> 00:01:49,010
But the one thing that you will
need for the mobile web

47
00:01:49,010 --> 00:01:52,870
is obviously either testing on
a device or on emulators and

48
00:01:52,870 --> 00:01:54,120
simulators.

49
00:01:54,120 --> 00:01:55,900

50
00:01:55,900 --> 00:01:58,030
And most people will kind
of opt for emulators and

51
00:01:58,030 --> 00:02:00,010
simulators if it's option
because it's just convenient

52
00:02:00,010 --> 00:02:04,790
to have on your desktop, where
you're already working.

53
00:02:04,790 --> 00:02:08,389
But there are a couple of
caveats that I'd kind of just

54
00:02:08,389 --> 00:02:10,820
raise when you're doing this.

55
00:02:10,820 --> 00:02:12,950
One way or another you should
never treat an emulator a

56
00:02:12,950 --> 00:02:16,680
simulator as a replacement for
an actual real device.

57
00:02:16,680 --> 00:02:17,950
They're great for convenience.

58
00:02:17,950 --> 00:02:20,390
They're fantastic for checking
out what your layout is

59
00:02:20,390 --> 00:02:22,110
actually going to
you look like.

60
00:02:22,110 --> 00:02:24,880
And often it's a case that the
APIs, they're a great test bed

61
00:02:24,880 --> 00:02:28,660
just to make sure that what
you're doing is going to work.

62
00:02:28,660 --> 00:02:31,600
The problem is often performance
is very different

63
00:02:31,600 --> 00:02:33,130
from real life devices.

64
00:02:33,130 --> 00:02:34,560
You look at an Android emulator
it's particularly

65
00:02:34,560 --> 00:02:37,300
slow in comparison to a real
device, whether that be a

66
00:02:37,300 --> 00:02:39,510
high-end or a low-end device.

67
00:02:39,510 --> 00:02:42,230
If you then compare that to some
of the simulators that

68
00:02:42,230 --> 00:02:45,050
you can get, they'll actually
perform really, really well.

69
00:02:45,050 --> 00:02:47,892
And then when it comes to
testing on a real device,

70
00:02:47,892 --> 00:02:51,140
actually performance is really
degraded at certain points.

71
00:02:51,140 --> 00:02:53,600
So I just wanted to make
that point quite clear.

72
00:02:53,600 --> 00:02:55,130
Use them because they're
awesome and

73
00:02:55,130 --> 00:02:56,260
they're really helpful.

74
00:02:56,260 --> 00:02:57,790
But don't treat them
as a replacement

75
00:02:57,790 --> 00:03:00,540
for the real thing.

76
00:03:00,540 --> 00:03:03,430
Now the Android SDK, obviously
there's been a slight

77
00:03:03,430 --> 00:03:05,050
announcement at the keynote.

78
00:03:05,050 --> 00:03:06,690
But essentially when
you go to the web

79
00:03:06,690 --> 00:03:07,900
page there's two options.

80
00:03:07,900 --> 00:03:10,490
One of them's hidden, which
is just the plain SDK.

81
00:03:10,490 --> 00:03:14,760
The other one is the ADT,
Android Developer Toolkit.

82
00:03:14,760 --> 00:03:18,060
ADT will come with Eclipse or
now IntelliJ, as well as the

83
00:03:18,060 --> 00:03:21,060
plug-ins to make it
work with the SDK.

84
00:03:21,060 --> 00:03:23,170
There is the option of just
downloading the SDK, if that's

85
00:03:23,170 --> 00:03:25,520
all you want, to avoid
downloading extra stuff you

86
00:03:25,520 --> 00:03:26,965
won't need or use necessarily.

87
00:03:26,965 --> 00:03:29,730

88
00:03:29,730 --> 00:03:31,480
But once you've downloaded,
the first thing that I'd

89
00:03:31,480 --> 00:03:34,150
encourage you to do is just
make sure you add platform

90
00:03:34,150 --> 00:03:36,730
dash tools and tools
to your path.

91
00:03:36,730 --> 00:03:38,175
Generally, there's going to be
a couple of tools that you're

92
00:03:38,175 --> 00:03:40,000
going to be regularly
relying on.

93
00:03:40,000 --> 00:03:42,191
So just make it a bit easier on
yourself and just add it to

94
00:03:42,191 --> 00:03:42,840
the terminal.

95
00:03:42,840 --> 00:03:44,390
It's something that I think
can quite easily be

96
00:03:44,390 --> 00:03:45,450
overlooked.

97
00:03:45,450 --> 00:03:47,860
And two of those tools I want
to talk about is ADB and

98
00:03:47,860 --> 00:03:51,930
Monitor, which will help you set
up the Android emulator.

99
00:03:51,930 --> 00:03:56,740
So whenever I'm starting
development, if I plug in my

100
00:03:56,740 --> 00:03:59,290
device and it doesn't do what
I'm expecting for whatever

101
00:03:59,290 --> 00:04:03,060
program, ADB is the first port
of call that I go to.

102
00:04:03,060 --> 00:04:06,240
If I run ADB devices, it does
a couple of things.

103
00:04:06,240 --> 00:04:09,260
One, if ADB server isn't running
in the background,

104
00:04:09,260 --> 00:04:11,120
it'll actually start it.

105
00:04:11,120 --> 00:04:14,870
And if I do actually run it,
it doesn't start the server

106
00:04:14,870 --> 00:04:16,870
and there's no devices, then
that's normally a good sign

107
00:04:16,870 --> 00:04:19,470
that something's gone wrong with
the USB to the device.

108
00:04:19,470 --> 00:04:21,430
So just unplug and
plug it back in.

109
00:04:21,430 --> 00:04:24,670
Because ADB is essentially the
bridge between your phone and

110
00:04:24,670 --> 00:04:25,920
your local machine.

111
00:04:25,920 --> 00:04:28,180

112
00:04:28,180 --> 00:04:29,660
And the other tool that you're
going to be regularly coming

113
00:04:29,660 --> 00:04:33,010
in to is Monitor And you can
kind of think of Monitor as

114
00:04:33,010 --> 00:04:35,850
just the one stop shop for all
of the Android tools, or at

115
00:04:35,850 --> 00:04:39,120
least the majority of them.

116
00:04:39,120 --> 00:04:42,780
Now when you open it, it looks
quite daunting at first.

117
00:04:42,780 --> 00:04:44,630
But it's really not that bad.

118
00:04:44,630 --> 00:04:47,140
So if you look over on the left
hand side, you're going

119
00:04:47,140 --> 00:04:49,760
to get a list of devices
connected to that machine.

120
00:04:49,760 --> 00:04:54,110
So there'll be emulators as well
as USB connected devices.

121
00:04:54,110 --> 00:04:56,320
Along the bottom you're actually
going to have logcap.

122
00:04:56,320 --> 00:04:58,880

123
00:04:58,880 --> 00:05:01,780
And what this is is the
log output from

124
00:05:01,780 --> 00:05:04,230
emulators and real devices.

125
00:05:04,230 --> 00:05:07,190
Now if you ever do a hybrid
application with a web view,

126
00:05:07,190 --> 00:05:09,550
if you do consult.log,
the messages will

127
00:05:09,550 --> 00:05:11,280
actually end up in here.

128
00:05:11,280 --> 00:05:13,040
So it might be useful if you
ever start working on

129
00:05:13,040 --> 00:05:15,020
projects like that.

130
00:05:15,020 --> 00:05:18,150
And then the top right it
doesn't necessarily have

131
00:05:18,150 --> 00:05:19,650
anything useful for
web developers.

132
00:05:19,650 --> 00:05:22,230
But it's essentially thread
management, as well as memory

133
00:05:22,230 --> 00:05:24,240
management for native
applications.

134
00:05:24,240 --> 00:05:27,460
So if you ever wonder what
that was, there you go.

135
00:05:27,460 --> 00:05:30,380
So along the top you're going
to actually have options to

136
00:05:30,380 --> 00:05:32,690
access another couple
of tools.

137
00:05:32,690 --> 00:05:35,280
Now the first one is the
Android SDK manager.

138
00:05:35,280 --> 00:05:38,500
If you sit there and say you
want to support Android 2.2

139
00:05:38,500 --> 00:05:41,360
and above, this is where you'll
go to download those

140
00:05:41,360 --> 00:05:43,950
versions of Android.

141
00:05:43,950 --> 00:05:46,140
And then there's the Android
Virtual Device Manager.

142
00:05:46,140 --> 00:05:47,440
Now this is where actually
go to set

143
00:05:47,440 --> 00:05:48,795
up all of your emulators.

144
00:05:48,795 --> 00:05:51,580

145
00:05:51,580 --> 00:05:53,510
So we open that up.

146
00:05:53,510 --> 00:05:55,880
Now the first thing I want to
point out on this screen is

147
00:05:55,880 --> 00:05:58,770
over along the top, you'll
actually have Android virtual

148
00:05:58,770 --> 00:06:01,380
devices and device
definitions.

149
00:06:01,380 --> 00:06:04,540
Now you can imagine scenarios
where something

150
00:06:04,540 --> 00:06:05,520
like the Nexus 1.

151
00:06:05,520 --> 00:06:07,400
It's one device but it's
actually been upgraded through

152
00:06:07,400 --> 00:06:09,240
a couple of versions
of Android.

153
00:06:09,240 --> 00:06:12,430
So realistically you want
emulators for each version of

154
00:06:12,430 --> 00:06:15,280
Android, but to that
device definition.

155
00:06:15,280 --> 00:06:18,560
So that's the difference
between the two.

156
00:06:18,560 --> 00:06:22,490
So if we open up device
definitions, you'll notice

157
00:06:22,490 --> 00:06:24,900
that it's just a long
list of devices.

158
00:06:24,900 --> 00:06:28,510
Along the top, we'll have ones
that are provided by the SDK,

159
00:06:28,510 --> 00:06:32,400
which are the Nexus devices, the
flagship ones from Google.

160
00:06:32,400 --> 00:06:35,120
And then below that we'll
have generic devices.

161
00:06:35,120 --> 00:06:38,380
Because in most cases you can
actually kind of an Android

162
00:06:38,380 --> 00:06:40,920
device out in the wild into one
of these categories for

163
00:06:40,920 --> 00:06:42,600
the most part.

164
00:06:42,600 --> 00:06:44,670
But if you ever find that
there's one device that's

165
00:06:44,670 --> 00:06:47,020
actually causing you grief--

166
00:06:47,020 --> 00:06:49,360
whether it be a particularly
large screen size or something

167
00:06:49,360 --> 00:06:51,150
you're not expecting--

168
00:06:51,150 --> 00:06:52,930
you can actually add in your
own device definition.

169
00:06:52,930 --> 00:06:54,860
Something like the Galaxy S3 or
Galaxy Note where they have

170
00:06:54,860 --> 00:06:58,340
a particularly large screen,
you can add it in.

171
00:06:58,340 --> 00:07:02,730
And you just do it the once
and then you'll set up.

172
00:07:02,730 --> 00:07:06,310
So the Android virtual devices,
it's just a long list

173
00:07:06,310 --> 00:07:08,940
of devices which you
would've set up.

174
00:07:08,940 --> 00:07:10,870
Here's some that I've got.

175
00:07:10,870 --> 00:07:13,250
But if you go in, I'll quickly
step through how

176
00:07:13,250 --> 00:07:14,370
to make your own.

177
00:07:14,370 --> 00:07:16,120
So we'll click on the New along
the right hand side.

178
00:07:16,120 --> 00:07:19,030

179
00:07:19,030 --> 00:07:20,310
It's fairly self-explanatory.

180
00:07:20,310 --> 00:07:21,910
You just need to enter in a
name for your emulator,

181
00:07:21,910 --> 00:07:23,160
something that you recognize.

182
00:07:23,160 --> 00:07:26,460

183
00:07:26,460 --> 00:07:28,300
Then you have the option of
selecting which device.

184
00:07:28,300 --> 00:07:32,130
So which device definition
you want to use.

185
00:07:32,130 --> 00:07:34,110
Here we're going to go
for the Nexus 7.

186
00:07:34,110 --> 00:07:36,030
And then you select
which version of

187
00:07:36,030 --> 00:07:38,970
Android you want to use.

188
00:07:38,970 --> 00:07:42,290
Now there are a couple
of other options.

189
00:07:42,290 --> 00:07:43,790
But for the most part, I don't
think you'd need to

190
00:07:43,790 --> 00:07:45,580
change any of them.

191
00:07:45,580 --> 00:07:48,200
The one thing I would like to
highlight is this option down

192
00:07:48,200 --> 00:07:52,810
at the bottom, which
is Use Host GPU.

193
00:07:52,810 --> 00:07:55,810
Now what this basically enables
the emulator to do is

194
00:07:55,810 --> 00:07:58,300
use some of the hardware power
that you've got on the

195
00:07:58,300 --> 00:07:59,570
graphics card.

196
00:07:59,570 --> 00:08:02,410
Now if your machine supports it,
it vastly improves the use

197
00:08:02,410 --> 00:08:04,880
of the emulator because it
speeds it up quite a bit.

198
00:08:04,880 --> 00:08:07,130
Now it's only available in Ice
Cream Sandwich and above.

199
00:08:07,130 --> 00:08:09,000
But if there's something you're
looking at, definitely

200
00:08:09,000 --> 00:08:09,530
switch it on.

201
00:08:09,530 --> 00:08:11,700
Because if it works on your
machine, like I said, it makes

202
00:08:11,700 --> 00:08:14,700
it a lot more usable.

203
00:08:14,700 --> 00:08:18,000
And then obviously to start it,
is just a case of clicking

204
00:08:18,000 --> 00:08:21,490
on your emulator and
clicking start.

205
00:08:21,490 --> 00:08:22,790
Now, I won't lie.

206
00:08:22,790 --> 00:08:25,440
I have edited the video a little
bit to make this nice

207
00:08:25,440 --> 00:08:26,690
and speedy.

208
00:08:26,690 --> 00:08:28,380

209
00:08:28,380 --> 00:08:29,400
We've all--

210
00:08:29,400 --> 00:08:30,210
our time's valuable.

211
00:08:30,210 --> 00:08:31,010
We need not waste it.

212
00:08:31,010 --> 00:08:33,000
But at the same time, if I just
cut off at this point,

213
00:08:33,000 --> 00:08:34,700
it'd feel a little bit harsh.

214
00:08:34,700 --> 00:08:41,480

215
00:08:41,480 --> 00:08:43,380
So you only have to
do this once.

216
00:08:43,380 --> 00:08:45,560
It may seem like quite a long
process but once you set up

217
00:08:45,560 --> 00:08:48,380
your emulators for devices you
want to support, all you have

218
00:08:48,380 --> 00:08:51,940
to do is come into this tool
and start them up.

219
00:08:51,940 --> 00:08:54,470
For the iOS simulators,
it's a bit easier.

220
00:08:54,470 --> 00:08:56,910
If you have X code installed,
you'll actually just have a

221
00:08:56,910 --> 00:08:58,480
drop-down option for
Open Develop

222
00:08:58,480 --> 00:09:00,530
Tools and then Simulator.

223
00:09:00,530 --> 00:09:03,130
And then within that, once it
started up an iPhone or an

224
00:09:03,130 --> 00:09:06,300
iPad, whichever the last one was
opened, it will allow you

225
00:09:06,300 --> 00:09:10,690
to change the hardware, as
well as the version.

226
00:09:10,690 --> 00:09:15,630
So once you set up the emulators
and simulators, we

227
00:09:15,630 --> 00:09:17,190
move on to development.

228
00:09:17,190 --> 00:09:19,170
Now, I think it's fairly common
that all of us one way

229
00:09:19,170 --> 00:09:22,560
or another will be
using local host.

230
00:09:22,560 --> 00:09:24,160
Now the problem is if you
imagine something like the

231
00:09:24,160 --> 00:09:26,670
Android emulator-- where it's
emulating an entire platform

232
00:09:26,670 --> 00:09:28,310
like it would on a device--

233
00:09:28,310 --> 00:09:30,530
well, that device has
its own local host.

234
00:09:30,530 --> 00:09:34,400
So at which point, developing
on your own machine kind of

235
00:09:34,400 --> 00:09:37,200
starts raising the question of
what happens when I type in

236
00:09:37,200 --> 00:09:40,110
local host.

237
00:09:40,110 --> 00:09:41,960
So I'd like to introduce
your new home

238
00:09:41,960 --> 00:09:45,900
away from home, 10.0.2.2.

239
00:09:45,900 --> 00:09:48,720
Now what this is is just an IP
address that Android have just

240
00:09:48,720 --> 00:09:49,340
left in the emulator.

241
00:09:49,340 --> 00:09:50,790
And it's like a back door.

242
00:09:50,790 --> 00:09:53,560
So what you're saying is, when
I type in this, go to local

243
00:09:53,560 --> 00:09:54,890
host on my actual machine.

244
00:09:54,890 --> 00:09:59,570

245
00:09:59,570 --> 00:10:02,160
But then even if you can get
it on your emulators and

246
00:10:02,160 --> 00:10:05,450
simulators, what about
a real device?

247
00:10:05,450 --> 00:10:07,760
Because normally whenever we try
and do this, it leads to a

248
00:10:07,760 --> 00:10:09,860
bit of pain, tears.

249
00:10:09,860 --> 00:10:11,730
Because obviously you
have to find the IP

250
00:10:11,730 --> 00:10:12,840
address of your machine.

251
00:10:12,840 --> 00:10:14,850
You have to type that
in on the device.

252
00:10:14,850 --> 00:10:16,670
That's assuming that your
network allows it, depending

253
00:10:16,670 --> 00:10:18,730
on if you're in a corporate
network or not.

254
00:10:18,730 --> 00:10:20,290
You then also have the issue
of if you've got a

255
00:10:20,290 --> 00:10:21,920
configuration on your
Apache server.

256
00:10:21,920 --> 00:10:24,720
With subdomains, it doesn't
quite work.

257
00:10:24,720 --> 00:10:25,840
It's not fun.

258
00:10:25,840 --> 00:10:27,960
It's not nice.

259
00:10:27,960 --> 00:10:30,450
So in the dev tools, there's
actually a new tool that we've

260
00:10:30,450 --> 00:10:34,460
added in which is called Reverse
Port Forwarding that

261
00:10:34,460 --> 00:10:37,700
actually allows you to locally
develop on your device.

262
00:10:37,700 --> 00:10:41,790
So you have to enable a flag in
the beta or canary version

263
00:10:41,790 --> 00:10:46,290
of Chrome, which is Enable
Developer Tools Experiments.

264
00:10:46,290 --> 00:10:47,780
And when you do that,
you can actually

265
00:10:47,780 --> 00:10:49,920
go into Chrome Inspect.

266
00:10:49,920 --> 00:10:54,800
And when you open up Chrome on
your Android device, you'll

267
00:10:54,800 --> 00:10:58,270
notice it will come up in the
Chrome Inspect option.

268
00:10:58,270 --> 00:11:00,810
And you'll actually end up with
an inspected item like

269
00:11:00,810 --> 00:11:01,970
you've got down here.

270
00:11:01,970 --> 00:11:06,060
I've already opened up the
developer tools in this case.

271
00:11:06,060 --> 00:11:11,530
So this is the developer tools
for Chrome on Android.

272
00:11:11,530 --> 00:11:14,680
Now because I've enabled the
Experiments flag, I've got

273
00:11:14,680 --> 00:11:18,630
this Experiments menu item.

274
00:11:18,630 --> 00:11:21,260
Now what you'll notice, I've
actually enabled already

275
00:11:21,260 --> 00:11:23,510
Enable reverse port
forwarding.

276
00:11:23,510 --> 00:11:25,690
Now what this is basically doing
is saying, whenever I

277
00:11:25,690 --> 00:11:30,380
type in local host port number
on my mobile device, make it

278
00:11:30,380 --> 00:11:33,230
come onto my machine.

279
00:11:33,230 --> 00:11:37,380
So here you'll see that
I've got a number of

280
00:11:37,380 --> 00:11:38,770
ports already mapped.

281
00:11:38,770 --> 00:11:40,820
Now these don't need to be the
same port numbers, but the

282
00:11:40,820 --> 00:11:42,990
left hand side is essentially
the port number that I typed

283
00:11:42,990 --> 00:11:44,200
in on the device.

284
00:11:44,200 --> 00:11:45,930
And then on the right hand side,
it's essentially saying

285
00:11:45,930 --> 00:11:48,380
local host and then the port
number that's actually running

286
00:11:48,380 --> 00:11:50,400
this machine.

287
00:11:50,400 --> 00:11:55,305
So if I switch over
to this machine.

288
00:11:55,305 --> 00:12:05,250

289
00:12:05,250 --> 00:12:09,820
Now, if I make a typo, you'll
have to excuse me.

290
00:12:09,820 --> 00:12:14,010
So this is Adeeb Azmani's
To Do List app.

291
00:12:14,010 --> 00:12:15,020
But essentially, that's running

292
00:12:15,020 --> 00:12:16,690
off of my local machine.

293
00:12:16,690 --> 00:12:20,750
And just to prove that that's
the case, if I switch back

294
00:12:20,750 --> 00:12:23,520
over to my laptop, I
have the Android

295
00:12:23,520 --> 00:12:26,250
emulator already set up.

296
00:12:26,250 --> 00:12:28,200
And just to keep you on your
toes, if you look at the IO

297
00:12:28,200 --> 00:12:32,150
simulator, it's actually a local
host instead of any kind

298
00:12:32,150 --> 00:12:33,400
of back door.

299
00:12:33,400 --> 00:12:35,640

300
00:12:35,640 --> 00:12:37,520
Now, I'm hoping that's not going
to try and use the Wi-Fi

301
00:12:37,520 --> 00:12:39,110
network it's trying to
find, it looks like,

302
00:12:39,110 --> 00:12:40,420
because it will not work.

303
00:12:40,420 --> 00:12:50,060

304
00:12:50,060 --> 00:12:51,310
Go on.

305
00:12:51,310 --> 00:12:53,080

306
00:12:53,080 --> 00:12:56,180
OK, we'll go back
to that, anyway.

307
00:12:56,180 --> 00:12:59,260
But this introduces a new
problem because essentially,

308
00:12:59,260 --> 00:13:03,330
what we're doing is we've
suddenly got two emulators and

309
00:13:03,330 --> 00:13:05,100
simulators on one device.

310
00:13:05,100 --> 00:13:07,410
Now, normally when I'm
developing, I'll have a mobile

311
00:13:07,410 --> 00:13:09,130
device, just a phone.

312
00:13:09,130 --> 00:13:10,310
I'll have a tablet.

313
00:13:10,310 --> 00:13:12,610
And then, I might have a range
of emulators of varying screen

314
00:13:12,610 --> 00:13:15,210
sizes just for this.

315
00:13:15,210 --> 00:13:17,660
And there's nothing controlling
these things.

316
00:13:17,660 --> 00:13:21,280
They're all individually
working on their own.

317
00:13:21,280 --> 00:13:23,400
So that's why I think it's
starting to get to the point

318
00:13:23,400 --> 00:13:25,675
where you might want to think
about having a device lab.

319
00:13:25,675 --> 00:13:28,420
Now normally, when people say
device lab, you think, oh, I

320
00:13:28,420 --> 00:13:31,290
need to have 30 devices to
warrant that kind of thing.

321
00:13:31,290 --> 00:13:31,960
That's not the case.

322
00:13:31,960 --> 00:13:35,020
If you've got a couple of
devices on your desk, start

323
00:13:35,020 --> 00:13:36,960
thinking about using a piece of
software to help you do it.

324
00:13:36,960 --> 00:13:38,750
And there's a range out there.

325
00:13:38,750 --> 00:13:42,030
So there's Adobe Edge Inspect,
which is essentially, you can

326
00:13:42,030 --> 00:13:43,840
download a Chrome extension.

327
00:13:43,840 --> 00:13:46,870
And then, it'll mirror that tab
that's currently open onto

328
00:13:46,870 --> 00:13:48,980
any devices that have got
the Adobe Edge app

329
00:13:48,980 --> 00:13:50,980
installed and open.

330
00:13:50,980 --> 00:13:53,170
There's Paul Kinlan's
Bootstrapping Your Own Test

331
00:13:53,170 --> 00:13:55,500
Lab, which is a small script,
which will actually open up

332
00:13:55,500 --> 00:13:58,980
the browser on any connected
Android emulators or devices

333
00:13:58,980 --> 00:14:00,580
to the correct URL.

334
00:14:00,580 --> 00:14:03,990
And then, there's also this open
source project, which is

335
00:14:03,990 --> 00:14:06,480
Remote Preview.

336
00:14:06,480 --> 00:14:09,400
Now, all this is doing is it's
a small piece of JavaScript

337
00:14:09,400 --> 00:14:12,550
that's just checking
a particular file.

338
00:14:12,550 --> 00:14:17,220
And essentially, whenever that
URL changes, it sets the URL

339
00:14:17,220 --> 00:14:18,950
on the myFrame in
that web page.

340
00:14:18,950 --> 00:14:21,200
So the idea is that you put all
of your mobile devices to

341
00:14:21,200 --> 00:14:22,790
this one URL.

342
00:14:22,790 --> 00:14:24,320
And then, you've got one central
place so when you

343
00:14:24,320 --> 00:14:27,590
change that URL, it changes
across the board.

344
00:14:27,590 --> 00:14:34,990
So if I switch back to the
mobile device, all I'm going

345
00:14:34,990 --> 00:14:38,465
to do is just change the URL.

346
00:14:38,465 --> 00:14:41,130
Oh, I just did it.

347
00:14:41,130 --> 00:14:46,870
But if I come back over to my
laptop, you'll notice that the

348
00:14:46,870 --> 00:14:48,130
Android browser's already
changing.

349
00:14:48,130 --> 00:14:51,050
And the Safari one will be
changing, should it work,

350
00:14:51,050 --> 00:14:51,580
which it is.

351
00:14:51,580 --> 00:14:52,920
So I'll show you
all what I did.

352
00:14:52,920 --> 00:14:55,870

353
00:14:55,870 --> 00:14:59,730
All I did was edit this one
file, which is url.txt.

354
00:14:59,730 --> 00:15:01,250
And then when I change
that, it starts

355
00:15:01,250 --> 00:15:03,580
affecting all the devices.

356
00:15:03,580 --> 00:15:05,325
So again, I'll show you on the
mobile device because that's

357
00:15:05,325 --> 00:15:06,760
the only one that's
playing ball.

358
00:15:06,760 --> 00:15:11,030
But again, it's just changed
to the To Do List app.

359
00:15:11,030 --> 00:15:13,010
So it's a very simple thing
because it means that should

360
00:15:13,010 --> 00:15:14,712
you ever get to the point where
someone comes up to you

361
00:15:14,712 --> 00:15:17,670
and says, hey, I just need
help on this project.

362
00:15:17,670 --> 00:15:19,150
And you're head deep
in something else.

363
00:15:19,150 --> 00:15:20,480
You've only got to
change one place.

364
00:15:20,480 --> 00:15:23,200
And then all the devices that
are connected already start

365
00:15:23,200 --> 00:15:25,490
filtering through.

366
00:15:25,490 --> 00:15:27,715
And there's also this other
website, opendevicelab.com,

367
00:15:27,715 --> 00:15:30,030
that I wanted to highlight,
which is essentially--

368
00:15:30,030 --> 00:15:32,920
it's a list of device labs
across the world that you can

369
00:15:32,920 --> 00:15:35,120
actually go to and check out.

370
00:15:35,120 --> 00:15:37,340
So if you live near one, find
out what they're using to do

371
00:15:37,340 --> 00:15:39,900
this kind of work and figure out
what pitfalls they've had.

372
00:15:39,900 --> 00:15:42,870
And it might solve some of the
problems that you might be

373
00:15:42,870 --> 00:15:46,200
having in your own workflow.

374
00:15:46,200 --> 00:15:47,430
Another tool I wanted
to talk about

375
00:15:47,430 --> 00:15:48,900
was Responsive Inspector.

376
00:15:48,900 --> 00:15:53,010
Now, this is a third-party
Chrome extension made by Peter

377
00:15:53,010 --> 00:15:55,320
from the Adobe Creative
Cloud team.

378
00:15:55,320 --> 00:15:59,700
And it's just a really nice way
of viewing media queries.

379
00:15:59,700 --> 00:16:02,160
So what you're seeing here is
essentially three different

380
00:16:02,160 --> 00:16:05,770
kinds of media queries, which
is basically saying, a media

381
00:16:05,770 --> 00:16:07,760
query where there's only a
max-width set, which is the

382
00:16:07,760 --> 00:16:09,590
orange one on top.

383
00:16:09,590 --> 00:16:12,090
A media query where you've got
a min and a maximum width

384
00:16:12,090 --> 00:16:14,450
defined, which is the green
one in the center.

385
00:16:14,450 --> 00:16:17,380
And then, the two blue ones on
the bottom are the minimum

386
00:16:17,380 --> 00:16:19,870
width that's been defined.

387
00:16:19,870 --> 00:16:21,460
Now, what this tool is really
great for is if you actually

388
00:16:21,460 --> 00:16:23,660
click on one of these media
queries, you'll notice the

389
00:16:23,660 --> 00:16:26,220
browser in the background
snapping to those particular

390
00:16:26,220 --> 00:16:27,962
media queries.

391
00:16:27,962 --> 00:16:30,560
So it's a really nice, easy way
of, A, viewing what the

392
00:16:30,560 --> 00:16:33,190
media queries are doing, and
secondly, just interacting

393
00:16:33,190 --> 00:16:34,910
with them in the same way.

394
00:16:34,910 --> 00:16:37,750
But you also have the option
of going to the ruler-- the

395
00:16:37,750 --> 00:16:39,240
measurement across the top--

396
00:16:39,240 --> 00:16:42,490
and forcing the browsers to snap
at a particular width,

397
00:16:42,490 --> 00:16:44,360
which is really nice if you've
got media queries that are

398
00:16:44,360 --> 00:16:46,450
overlapping and you want to
ensure that things aren't

399
00:16:46,450 --> 00:16:48,830
actually conflicting.

400
00:16:48,830 --> 00:16:52,460
And the last feature which I
really am a fan of is this CSS

401
00:16:52,460 --> 00:16:54,110
option at the side.

402
00:16:54,110 --> 00:16:56,945
Now, if you click on this for
one particular media query,

403
00:16:56,945 --> 00:17:00,790
it'll actually take you to the
CSS that's essentially that

404
00:17:00,790 --> 00:17:02,570
media query.

405
00:17:02,570 --> 00:17:05,069
Now, I found this tool really
useful for, A, if I have a

406
00:17:05,069 --> 00:17:09,829
compilation step with perhaps JS
optimizing CSS, et cetera.

407
00:17:09,829 --> 00:17:11,829
I'll check whether the actual
version of the site I'm

408
00:17:11,829 --> 00:17:14,510
looking at has those media
queries in it.

409
00:17:14,510 --> 00:17:17,140
And secondly, if I'm having
problems, something's not

410
00:17:17,140 --> 00:17:19,770
quite right, normally it's the
case that the CSS isn't quite

411
00:17:19,770 --> 00:17:21,210
doing what I'm expecting,
something's not

412
00:17:21,210 --> 00:17:22,690
in the right order.

413
00:17:22,690 --> 00:17:24,809
And in which case, this CSS
option is really easy.

414
00:17:24,809 --> 00:17:29,760

415
00:17:29,760 --> 00:17:31,900
So then, we come onto testing.

416
00:17:31,900 --> 00:17:37,330
Now, raise your hand if you use
the dev tools in Chrome,

417
00:17:37,330 --> 00:17:40,300
the Firebug in Firefox,
Safari dev tools.

418
00:17:40,300 --> 00:17:43,380
Who here uses them?

419
00:17:43,380 --> 00:17:46,810
Now, keep your hand up if you'd
actually be quite happy

420
00:17:46,810 --> 00:17:48,220
to live without them.

421
00:17:48,220 --> 00:17:50,050
And they're just gone.

422
00:17:50,050 --> 00:17:51,000
Have no option to them.

423
00:17:51,000 --> 00:17:54,600
There's a couple of hands,
which I'm surprised at.

424
00:17:54,600 --> 00:17:56,970
But the problem is with the
mobile web, we don't have

425
00:17:56,970 --> 00:17:57,730
those, right?

426
00:17:57,730 --> 00:17:58,590
They're a separate device.

427
00:17:58,590 --> 00:17:59,330
They're separate browsers.

428
00:17:59,330 --> 00:18:00,860
And generally, the tools
are only just

429
00:18:00,860 --> 00:18:01,820
starting to get there.

430
00:18:01,820 --> 00:18:04,010
But it's not on all platforms.

431
00:18:04,010 --> 00:18:06,970
If you look at something like
the Android web view, there

432
00:18:06,970 --> 00:18:07,900
are no dev tools for that.

433
00:18:07,900 --> 00:18:10,180
You can't hook into them.

434
00:18:10,180 --> 00:18:11,870
So one of the tools that you'll
actually find that most

435
00:18:11,870 --> 00:18:14,070
people use is this tool called
Weinre, which is

436
00:18:14,070 --> 00:18:15,615
web inspector remote.

437
00:18:15,615 --> 00:18:16,840
That's what it stands for.

438
00:18:16,840 --> 00:18:19,570
Some people call it "Weiner."

439
00:18:19,570 --> 00:18:21,440
But essentially, what it does
is you put a little bit of

440
00:18:21,440 --> 00:18:23,450
JavaScript in your web page.

441
00:18:23,450 --> 00:18:27,090
And then, if the APIs are
actually there, what it'll do

442
00:18:27,090 --> 00:18:29,585
is it'll actually use some of
the developer tool APIs to

443
00:18:29,585 --> 00:18:33,080
then give you a remote
dev console that

444
00:18:33,080 --> 00:18:34,980
you'll see on the left.

445
00:18:34,980 --> 00:18:36,830
And the nice thing with this is
you can actually edit the

446
00:18:36,830 --> 00:18:40,310
HTML, edit the CSS, play around
with the JavaScript

447
00:18:40,310 --> 00:18:44,670
console, just like you would on
your actual local machine.

448
00:18:44,670 --> 00:18:46,270
If you wanted to play around
with this, I'd strongly

449
00:18:46,270 --> 00:18:48,570
encourage just check out
debug.phonegap.com.

450
00:18:48,570 --> 00:18:51,230
It's actually a running
server of this.

451
00:18:51,230 --> 00:18:53,930
And what's really nice, as well,
is if you think about

452
00:18:53,930 --> 00:18:56,575
cloud-based testing, you
can actually put

453
00:18:56,575 --> 00:18:57,520
the script in this.

454
00:18:57,520 --> 00:19:00,620
And if the server is actually in
a local, public place, you

455
00:19:00,620 --> 00:19:02,680
can remotely debug a
cloud-based system.

456
00:19:02,680 --> 00:19:07,750

457
00:19:07,750 --> 00:19:09,920
And then, we come onto something
like MIHTool, which

458
00:19:09,920 --> 00:19:12,010
actually uses Weinre.

459
00:19:12,010 --> 00:19:16,150
So it's a native iOS
application.

460
00:19:16,150 --> 00:19:18,660
And essentially, when you
actually load up a web page,

461
00:19:18,660 --> 00:19:20,370
it'll already start
up Weinre for you.

462
00:19:20,370 --> 00:19:22,520
It'll give you a URL, and
you can just access

463
00:19:22,520 --> 00:19:24,540
it on a local network.

464
00:19:24,540 --> 00:19:26,900
If you go and use it on an
iPad, it goes one step

465
00:19:26,900 --> 00:19:28,960
further, and it actually gives
you Weinre inside the

466
00:19:28,960 --> 00:19:29,800
application.

467
00:19:29,800 --> 00:19:33,800
So you can actually debug there
and then on the device.

468
00:19:33,800 --> 00:19:35,620
But the really nice thing with
MIHTool, as well, is it's

469
00:19:35,620 --> 00:19:37,370
actually added a couple of
features which you can't get

470
00:19:37,370 --> 00:19:39,080
in Safari dev tools.

471
00:19:39,080 --> 00:19:41,640
So it'll actually show you the
composited layers as well as

472
00:19:41,640 --> 00:19:42,870
the draw count.

473
00:19:42,870 --> 00:19:44,380
So if you're finding performance
might be a bit of

474
00:19:44,380 --> 00:19:47,010
an issue, you can actually start
using this to find out

475
00:19:47,010 --> 00:19:48,260
what's going on.

476
00:19:48,260 --> 00:19:51,110

477
00:19:51,110 --> 00:19:52,950
I've already briefly touched on
this, but this is the cloud

478
00:19:52,950 --> 00:19:54,750
based testing idea.

479
00:19:54,750 --> 00:19:57,330
So I imagine a lot of you are
familiar with Browser Stack

480
00:19:57,330 --> 00:19:58,260
and Source Labs.

481
00:19:58,260 --> 00:19:59,580
And there are a number
of other services.

482
00:19:59,580 --> 00:20:04,060
But Browser Stack comes from
the idea of manual testing.

483
00:20:04,060 --> 00:20:07,470
You open up a couple of
simulators, emulators.

484
00:20:07,470 --> 00:20:08,590
And you get to play around
with them and

485
00:20:08,590 --> 00:20:10,280
interact with them.

486
00:20:10,280 --> 00:20:12,840
Now, Device Anywhere comes from
a slightly different idea

487
00:20:12,840 --> 00:20:15,400
of real-time devices that you're
actually getting screen

488
00:20:15,400 --> 00:20:17,830
captures from or
web cams from.

489
00:20:17,830 --> 00:20:19,690
Now, the nice thing with this,
if you're having a particular

490
00:20:19,690 --> 00:20:22,270
problem, perhaps a bug in the
JavaScript or something on one

491
00:20:22,270 --> 00:20:25,420
particular device, this is a
nice way of you can actually

492
00:20:25,420 --> 00:20:26,380
gain access to that.

493
00:20:26,380 --> 00:20:30,010
Because it comes with all the
OEM tweaks rather than an

494
00:20:30,010 --> 00:20:32,740
Android emulator, where it's
just stock Android.

495
00:20:32,740 --> 00:20:34,610
And then, Source Labs comes
from more of an automated

496
00:20:34,610 --> 00:20:37,450
testing background.

497
00:20:37,450 --> 00:20:41,110
So let's talk about
automated testing.

498
00:20:41,110 --> 00:20:43,890
There's a couple of different
ways of doing it.

499
00:20:43,890 --> 00:20:46,020
There's obviously unit tests.

500
00:20:46,020 --> 00:20:47,680
And if you develop unit
tests, you may have

501
00:20:47,680 --> 00:20:48,780
them running locally.

502
00:20:48,780 --> 00:20:49,900
But you could also
start looking at

503
00:20:49,900 --> 00:20:52,260
running them in the cloud.

504
00:20:52,260 --> 00:20:55,330
I was recently playing around
with a couple of grunt tasks

505
00:20:55,330 --> 00:20:57,290
for Source Labs and Browser
Stack, which actually take my

506
00:20:57,290 --> 00:20:59,676
unit test and QUnit, and run
them on whatever simulator I

507
00:20:59,676 --> 00:21:00,926
tell it to.

508
00:21:00,926 --> 00:21:03,120

509
00:21:03,120 --> 00:21:05,270
But then, there's also
test scripts.

510
00:21:05,270 --> 00:21:07,860
If anyone's ever worked with a
QA team, you know that quite

511
00:21:07,860 --> 00:21:08,910
often, they'll run scripts.

512
00:21:08,910 --> 00:21:12,400
They'll follow certain steps
and see what the output is.

513
00:21:12,400 --> 00:21:14,300
So you can actually start doing
this in browsers with

514
00:21:14,300 --> 00:21:17,470
something called WebDriver.

515
00:21:17,470 --> 00:21:20,380
Now, what WebDriver allows you
to do is essentially interact

516
00:21:20,380 --> 00:21:22,720
with the browser and control
it in some ways and perform

517
00:21:22,720 --> 00:21:23,970
certain tasks.

518
00:21:23,970 --> 00:21:26,000

519
00:21:26,000 --> 00:21:28,220
And the way you can do this is
you're essentially using a

520
00:21:28,220 --> 00:21:30,860
small, little JavaScript and
nodeJS, as well as a number of

521
00:21:30,860 --> 00:21:31,680
other platforms.

522
00:21:31,680 --> 00:21:35,450
But I'll go through a brief
example in nodeJS.

523
00:21:35,450 --> 00:21:37,735
So here's just a brief
configuration for a browser

524
00:21:37,735 --> 00:21:40,080
that I want Source Labs
to launch for me.

525
00:21:40,080 --> 00:21:42,900
So essentially, we're just
saying, I want an Android

526
00:21:42,900 --> 00:21:47,240
tablet with version 4
of Android running.

527
00:21:47,240 --> 00:21:48,590
And then, we have a small
bit of code, which is

528
00:21:48,590 --> 00:21:49,390
just setting up.

529
00:21:49,390 --> 00:21:52,050
So we're saying to the
WebDriver, I'm going to use a

530
00:21:52,050 --> 00:21:54,240
remote connection
to Source Labs.

531
00:21:54,240 --> 00:21:56,690
And then, down at the bottom,
you'll notice I've got

532
00:21:56,690 --> 00:21:59,200
initialization step, which is
just saying, I want the

533
00:21:59,200 --> 00:22:01,720
browser of Android tablet.

534
00:22:01,720 --> 00:22:04,830
I'm passing in a GET Request
to the URL local host.

535
00:22:04,830 --> 00:22:07,450
And that's because a lot of
these services will enable you

536
00:22:07,450 --> 00:22:09,270
to make a local tunnel
from your

537
00:22:09,270 --> 00:22:11,490
machine to their services.

538
00:22:11,490 --> 00:22:13,630
And then, I'm saying,
take a screen shot.

539
00:22:13,630 --> 00:22:15,340
After that, check
the navigation.

540
00:22:15,340 --> 00:22:18,150
And then, quit.

541
00:22:18,150 --> 00:22:23,130
So if we look at taking a
screen shot, the code is

542
00:22:23,130 --> 00:22:23,920
surprisingly simple.

543
00:22:23,920 --> 00:22:25,580
You literally just say,
take a screen shot.

544
00:22:25,580 --> 00:22:29,690
You get a call back with
a 64-bit encoded image.

545
00:22:29,690 --> 00:22:30,920
And then here, I'm just
using the file

546
00:22:30,920 --> 00:22:34,240
system API to save it.

547
00:22:34,240 --> 00:22:38,380
And then, checking navigation,
here, I'm just saying, find

548
00:22:38,380 --> 00:22:42,470
the link inside an element
with the ID blog.

549
00:22:42,470 --> 00:22:44,380
Click that element.

550
00:22:44,380 --> 00:22:46,800
And then, afterwards, check what
the actual URL of that

551
00:22:46,800 --> 00:22:49,435
current page is and make sure
that it's what I'm expecting.

552
00:22:49,435 --> 00:22:53,380

553
00:22:53,380 --> 00:22:55,850
And I've done a full example
which you can actually take

554
00:22:55,850 --> 00:23:00,190
and run yourself, which you'll
pass in an array of browsers

555
00:23:00,190 --> 00:23:01,990
that you want to test on.

556
00:23:01,990 --> 00:23:04,340
It will then set the orientation
to portrait.

557
00:23:04,340 --> 00:23:06,970
It'll take a screen shot, which
is what you're seeing on

558
00:23:06,970 --> 00:23:08,250
the right hand side.

559
00:23:08,250 --> 00:23:09,400
It doesn't just do the
bit of the screen.

560
00:23:09,400 --> 00:23:12,130
It does the entire thing, if the
body is set up correctly

561
00:23:12,130 --> 00:23:14,380
for the correct height.

562
00:23:14,380 --> 00:23:16,150
And then, once it's actually
done that, it'll check the

563
00:23:16,150 --> 00:23:19,250
navigation, and then flip the
orientation to make sure that

564
00:23:19,250 --> 00:23:22,630
the media queries are actually
happening as they should be.

565
00:23:22,630 --> 00:23:24,710
And then, the check navigation
is just a small example of

566
00:23:24,710 --> 00:23:26,200
things that you can do.

567
00:23:26,200 --> 00:23:28,110
But WebDriver, you can do a
number of other things.

568
00:23:28,110 --> 00:23:31,260
You can execute JavaScript
directly into the page.

569
00:23:31,260 --> 00:23:33,800
You can also, with Source
Labs, actually watch the

570
00:23:33,800 --> 00:23:36,120
entire recording of
the test running.

571
00:23:36,120 --> 00:23:38,180
So if there's certain things you
want to do in terms of--

572
00:23:38,180 --> 00:23:41,090
click this element, and watch
the DOM be manipulated, the

573
00:23:41,090 --> 00:23:44,440
visibility is changing on
certain elements, or sizing's

574
00:23:44,440 --> 00:23:45,450
getting tweaked--

575
00:23:45,450 --> 00:23:47,710
you can actually just sit there,
tell WebDriver to do

576
00:23:47,710 --> 00:23:49,430
this, and then watch
the video that's

577
00:23:49,430 --> 00:23:50,680
captured on Source Labs.

578
00:23:50,680 --> 00:23:53,380

579
00:23:53,380 --> 00:23:56,310
And the other thing I wanted to
talk about was networking.

580
00:23:56,310 --> 00:24:00,490
Now, if we are just working on
our local machine in our

581
00:24:00,490 --> 00:24:02,560
office, we're going to have
a nice, beefy internet

582
00:24:02,560 --> 00:24:04,650
connection, hopefully.

583
00:24:04,650 --> 00:24:07,020
But obviously, mobile users
aren't going to have

584
00:24:07,020 --> 00:24:07,920
this all the time.

585
00:24:07,920 --> 00:24:09,330
They may be at home
on a nice Wi-Fi.

586
00:24:09,330 --> 00:24:12,140
They might be on 2G in the
middle of the woods with

587
00:24:12,140 --> 00:24:14,640
barely any connection at all.

588
00:24:14,640 --> 00:24:16,360
So there's a couple of tools
you can use to actually

589
00:24:16,360 --> 00:24:20,250
throttle the local network.

590
00:24:20,250 --> 00:24:25,320
So here's an example of using
the link conditioner on OS X.

591
00:24:25,320 --> 00:24:28,240
So on the left hand side
is when it's off.

592
00:24:28,240 --> 00:24:29,570
On the right hand side
is when it's on.

593
00:24:29,570 --> 00:24:32,800
And this is, I think,
an EDGE connection.

594
00:24:32,800 --> 00:24:34,860
Now, the really nice thing with
this tool is here, you

595
00:24:34,860 --> 00:24:37,060
can see things are slowly
getting loaded.

596
00:24:37,060 --> 00:24:39,450
It's not particularly
performant.

597
00:24:39,450 --> 00:24:41,590
But if you have a page like this
where you've got a dark

598
00:24:41,590 --> 00:24:44,010
background, and you're actually
using some dark text

599
00:24:44,010 --> 00:24:47,050
on one particular item while a
background image is loading

600
00:24:47,050 --> 00:24:49,590
which is light, what you can
actually find is you can just

601
00:24:49,590 --> 00:24:51,380
set a background color
which is light.

602
00:24:51,380 --> 00:24:53,015
And then suddenly, people can
actually read the text,

603
00:24:53,015 --> 00:24:55,720
whereas before they wouldn't
have been able to.

604
00:24:55,720 --> 00:24:57,660
And plus, it gives you an
indication of what's actually

605
00:24:57,660 --> 00:24:59,210
happening and what your
user is seeing.

606
00:24:59,210 --> 00:25:02,540

607
00:25:02,540 --> 00:25:03,500
So then we have the live step.

608
00:25:03,500 --> 00:25:05,290
We've actually launched
the product.

609
00:25:05,290 --> 00:25:05,730
It's out there.

610
00:25:05,730 --> 00:25:06,200
It's in the world.

611
00:25:06,200 --> 00:25:06,920
People are using it.

612
00:25:06,920 --> 00:25:09,980
And it's awesome.

613
00:25:09,980 --> 00:25:11,680
But one way or another, through
your development

614
00:25:11,680 --> 00:25:15,430
cycle, you will have made
certain assumptions.

615
00:25:15,430 --> 00:25:15,910
We all do it.

616
00:25:15,910 --> 00:25:18,710
We all get to the point where
we need to do it.

617
00:25:18,710 --> 00:25:20,630
But one of the things that you
always have to make, and it's

618
00:25:20,630 --> 00:25:22,800
kind of a tough call,
is break points.

619
00:25:22,800 --> 00:25:25,440
Where do you decide where to
change the look and feel of

620
00:25:25,440 --> 00:25:31,030
your web app to actually fit
the range of devices?

621
00:25:31,030 --> 00:25:35,770
And Google Analytics has this
little, hidden nugget of gold.

622
00:25:35,770 --> 00:25:38,475
And you can actually find out
what the screen resolution of

623
00:25:38,475 --> 00:25:41,810
the mobile devices that are
actually visiting your site.

624
00:25:41,810 --> 00:25:44,100
And the nice thing with this
is you can actually realize

625
00:25:44,100 --> 00:25:46,990
that you can probably support
80% of your users with just a

626
00:25:46,990 --> 00:25:49,580
small number of configurations.

627
00:25:49,580 --> 00:25:51,830
Now, these are metrics that
are actually taking into

628
00:25:51,830 --> 00:25:53,290
account the screen density.

629
00:25:53,290 --> 00:25:55,730
So it's the same as what
your CSS and media

630
00:25:55,730 --> 00:25:57,420
queries would be seeing.

631
00:25:57,420 --> 00:25:59,820
But what's even more
interesting, if you look at

632
00:25:59,820 --> 00:26:04,870
number one, you'll notice that
the height, I think, is 768.

633
00:26:04,870 --> 00:26:07,900
Whereas if you look at number
four, it's 720.

634
00:26:07,900 --> 00:26:10,530
So it's only about 40
pixels different.

635
00:26:10,530 --> 00:26:13,535
But if you were to say, I'm
going to put my break point at

636
00:26:13,535 --> 00:26:17,020
768, which I think is an iPad,
and then everything below that

637
00:26:17,020 --> 00:26:20,820
gets the mobile experience, well
suddenly, that 720 pixel

638
00:26:20,820 --> 00:26:23,720
width device is actually getting
the phone UI rather

639
00:26:23,720 --> 00:26:26,550
than what you've already
designed for a tablet.

640
00:26:26,550 --> 00:26:27,720
And that's a simple change.

641
00:26:27,720 --> 00:26:31,380
That's just changing it
to 40 pixels less.

642
00:26:31,380 --> 00:26:32,900
So at that point, you're
actually giving a better

643
00:26:32,900 --> 00:26:35,165
experience to a wider
audience.

644
00:26:35,165 --> 00:26:38,080

645
00:26:38,080 --> 00:26:39,980
And then, there's
also page speed.

646
00:26:39,980 --> 00:26:42,110
You can actually change the
configuration so you're only

647
00:26:42,110 --> 00:26:44,520
filtering on mobile and
tablet traffic.

648
00:26:44,520 --> 00:26:47,680
So you can actually see what
users are getting in the wild.

649
00:26:47,680 --> 00:26:49,830
Now, the nice thing with this
is you can find out, A, if

650
00:26:49,830 --> 00:26:52,310
what your testing has been doing
is actually matching

651
00:26:52,310 --> 00:26:54,100
what users are getting.

652
00:26:54,100 --> 00:26:55,450
But on the other side of it if,
if you're sitting there

653
00:26:55,450 --> 00:26:57,900
saying, I want to improve this
and you actually start making

654
00:26:57,900 --> 00:27:00,590
steps to do it, you can confirm
that it's working

655
00:27:00,590 --> 00:27:01,840
through this.

656
00:27:01,840 --> 00:27:04,870

657
00:27:04,870 --> 00:27:06,740
And ultimately, this is all
going to feed back into what

658
00:27:06,740 --> 00:27:09,560
you do for the next project or
whatever new features you come

659
00:27:09,560 --> 00:27:10,170
to develop.

660
00:27:10,170 --> 00:27:13,030
Because ultimately, it's going
to influence what your

661
00:27:13,030 --> 00:27:15,500
decision's going to be in terms
of what emulators you

662
00:27:15,500 --> 00:27:18,480
test on, what platforms
you test on.

663
00:27:18,480 --> 00:27:21,050
It's going encourage you to look
at the way you're going

664
00:27:21,050 --> 00:27:22,630
to continue your development.

665
00:27:22,630 --> 00:27:25,540
If you realize that it's too
many device to test against,

666
00:27:25,540 --> 00:27:29,120
perhaps you want to find out
another way of doing it.

667
00:27:29,120 --> 00:27:31,920
Testing, hopefully if you've
started playing with automated

668
00:27:31,920 --> 00:27:33,975
testing, you're going to have
an idea of what works well,

669
00:27:33,975 --> 00:27:36,230
what doesn't work well, what
things you could have really

670
00:27:36,230 --> 00:27:39,490
easily scripted that later
became a bigger problem.

671
00:27:39,490 --> 00:27:42,620
And then live, well, again,
mobile is never

672
00:27:42,620 --> 00:27:43,710
going to sit still.

673
00:27:43,710 --> 00:27:44,450
It's always changing.

674
00:27:44,450 --> 00:27:46,670
So at that point, you're going
to be constantly iterating

675
00:27:46,670 --> 00:27:48,630
over what you want to support
and how you're going to

676
00:27:48,630 --> 00:27:50,670
support it.

677
00:27:50,670 --> 00:27:53,750
And this is the main point of
the mobile web, right, is it's

678
00:27:53,750 --> 00:27:54,770
still relatively new.

679
00:27:54,770 --> 00:27:56,590
Things are changing
constantly.

680
00:27:56,590 --> 00:27:59,050
And these are just some of the
tools you can use today in

681
00:27:59,050 --> 00:28:00,640
your workflow.

682
00:28:00,640 --> 00:28:02,690
But there's nothing to say
that throughout your

683
00:28:02,690 --> 00:28:04,620
development of your next
project, you're going to see

684
00:28:04,620 --> 00:28:05,640
more tools come out.

685
00:28:05,640 --> 00:28:07,310
They're going to change
the way you work,

686
00:28:07,310 --> 00:28:08,950
or make things easier.

687
00:28:08,950 --> 00:28:10,760
Maybe even the case that you
guys are actually making the

688
00:28:10,760 --> 00:28:13,360
tools for this.

689
00:28:13,360 --> 00:28:17,000
So I hope you enjoyed my talk.

690
00:28:17,000 --> 00:28:19,099
That's all I wanted to say.

691
00:28:19,099 --> 00:28:26,200
[APPLAUSE]

692
00:28:26,200 --> 00:28:28,050
MATT GAUNT: So I think we've
got about 10 minutes for

693
00:28:28,050 --> 00:28:29,460
questions if anyone
has anything.

694
00:28:29,460 --> 00:28:34,210
We've got a mic there, if
you want to queue up.

695
00:28:34,210 --> 00:28:36,500
AUDIENCE: I've had the very
unpleasant experience of

696
00:28:36,500 --> 00:28:40,680
trying to develop on a 12 hour
overseas flight and realizing

697
00:28:40,680 --> 00:28:44,630
that to be able to tether an
Android device to a laptop,

698
00:28:44,630 --> 00:28:47,250
you have to be able to hit App
Engine in the cloud, which

699
00:28:47,250 --> 00:28:50,530
doesn't work if you don't have
an internet connection.

700
00:28:50,530 --> 00:28:52,700
Is there anything that's being
done to improve that?

701
00:28:52,700 --> 00:28:56,680
MATT GAUNT: So what I demoed was
the actual local host from

702
00:28:56,680 --> 00:28:58,450
your desktop machine
onto a device.

703
00:28:58,450 --> 00:29:00,740
AUDIENCE: So with no network
connection, you can do remote

704
00:29:00,740 --> 00:29:02,760
port forwarding, and everything
will work?

705
00:29:02,760 --> 00:29:03,150
MATT GAUNT: Yeah.

706
00:29:03,150 --> 00:29:06,290
The only caveat is if you need
to pull a couple of local host

707
00:29:06,290 --> 00:29:09,630
services, you do need
to define each port.

708
00:29:09,630 --> 00:29:11,010
That's the only caveat
that I found.

709
00:29:11,010 --> 00:29:13,910
So what happens is when you
actually unplug your device,

710
00:29:13,910 --> 00:29:15,290
it'll still save which
ports you have

711
00:29:15,290 --> 00:29:17,350
set up for that device.

712
00:29:17,350 --> 00:29:19,510
So you can actually set up
multiple ones and it'll work.

713
00:29:19,510 --> 00:29:20,180
AUDIENCE: OK.

714
00:29:20,180 --> 00:29:22,210
MATT GAUNT: So you'll need
to get beta for Chrome.

715
00:29:22,210 --> 00:29:24,060
And this feature isn't added
to it yet, but it will be

716
00:29:24,060 --> 00:29:25,280
coming very soon.

717
00:29:25,280 --> 00:29:26,175
AUDIENCE: OK, thank you.

718
00:29:26,175 --> 00:29:27,930
MATT GAUNT: Thank you.

719
00:29:27,930 --> 00:29:28,390
AUDIENCE: Hi.

720
00:29:28,390 --> 00:29:28,870
MATTHEW GAUNT: Hi.

721
00:29:28,870 --> 00:29:29,740
AUDIENCE: I'm a bit
curious about

722
00:29:29,740 --> 00:29:31,380
the development workflow.

723
00:29:31,380 --> 00:29:34,030
Today, many of us are sitting
in our text editor.

724
00:29:34,030 --> 00:29:36,230
And we're sitting, when we're
making a change to our web

725
00:29:36,230 --> 00:29:38,660
applications, we're sitting
with the inspector.

726
00:29:38,660 --> 00:29:41,570
And today, we saw that the
Android guys, they got Android

727
00:29:41,570 --> 00:29:44,100
studios to give this fully
integrated development

728
00:29:44,100 --> 00:29:45,410
experience.

729
00:29:45,410 --> 00:29:47,230
Is there any plans on bringing
that to web?

730
00:29:47,230 --> 00:29:49,630
Because today, it's kind
of an isolated world.

731
00:29:49,630 --> 00:29:50,770
I'm sitting in my editor.

732
00:29:50,770 --> 00:29:54,220
I'm going to my inspector,
trying to memorize values,

733
00:29:54,220 --> 00:29:56,310
going back to my editor
to save them.

734
00:29:56,310 --> 00:29:59,050
MATT GAUNT: So Paul Irish is
actually doing a talk on dev

735
00:29:59,050 --> 00:30:00,250
tools in Chrome.

736
00:30:00,250 --> 00:30:02,030
And there's a load of new
features that I think are

737
00:30:02,030 --> 00:30:03,570
addressing exactly
that problem.

738
00:30:03,570 --> 00:30:04,900
That's going to be exactly
the same for this.

739
00:30:04,900 --> 00:30:06,830
So yeah, I definitely recommend

740
00:30:06,830 --> 00:30:07,660
checking that talk out.

741
00:30:07,660 --> 00:30:08,880
AUDIENCE: Thanks.

742
00:30:08,880 --> 00:30:10,130
MATT GAUNT: Thank you.

743
00:30:10,130 --> 00:30:11,930

744
00:30:11,930 --> 00:30:13,210
Cool, thank you, everyone.

745
00:30:13,210 --> 00:30:17,490

746
00:30:17,490 --> 00:30:21,140
My slides will be up with a load
of the other IO stuff.

747
00:30:21,140 --> 00:30:22,530
I haven't put a link up yet.

748
00:30:22,530 --> 00:30:26,320
But follow me on Google+ or
Twitter, and I'll be tweeting

749
00:30:26,320 --> 00:30:27,570
them and everything else.

750
00:30:27,570 --> 00:30:32,007

