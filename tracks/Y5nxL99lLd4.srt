1
00:00:00,000 --> 00:00:09,280

2
00:00:09,280 --> 00:00:12,210
IDO GREEN: So hello, and welcome
to another episode of

3
00:00:12,210 --> 00:00:15,480
GDL-IL, Google Developers
Live Israel.

4
00:00:15,480 --> 00:00:19,130
Today, I'm quite happy and
very pleased to have my

5
00:00:19,130 --> 00:00:23,350
colleague with me, Sam
Dutton from London.

6
00:00:23,350 --> 00:00:24,300
SAM DUTTON: Thank you so much.

7
00:00:24,300 --> 00:00:25,760
Thanks for inviting me.

8
00:00:25,760 --> 00:00:27,950
It's my first time
at an Israel GDL,

9
00:00:27,950 --> 00:00:30,560
so great to be here.

10
00:00:30,560 --> 00:00:32,930
IDO GREEN: No, thank you, and
hopefully in the near future,

11
00:00:32,930 --> 00:00:35,100
we'll be able to do it
face to face here in

12
00:00:35,100 --> 00:00:36,300
campus Tel Aviv, right?

13
00:00:36,300 --> 00:00:36,430
SAM DUTTON: Fantastic.

14
00:00:36,430 --> 00:00:38,230
Looking forward.

15
00:00:38,230 --> 00:00:40,140
IDO GREEN: Excellent.

16
00:00:40,140 --> 00:00:44,810
So today, we're going to cover
some of the new, cool things

17
00:00:44,810 --> 00:00:48,770
that we have in WebRTC.

18
00:00:48,770 --> 00:00:50,850
Maybe the best thing
would be if I could

19
00:00:50,850 --> 00:00:53,020
just share the slides.

20
00:00:53,020 --> 00:00:55,630
We'll have the links for the
slides and all the other good

21
00:00:55,630 --> 00:00:58,570
stuff that we're going to share
with you later on in the

22
00:00:58,570 --> 00:01:03,280
footnotes of the GDL page on
Google Developer Live, and of

23
00:01:03,280 --> 00:01:05,900
course, I'll have it on my blog,
and Sam definitely will

24
00:01:05,900 --> 00:01:09,670
have it on his blog and on his
G+ page, and you have the

25
00:01:09,670 --> 00:01:13,090
links to both of them
in the event itself.

26
00:01:13,090 --> 00:01:15,390
So feel free to go there.

27
00:01:15,390 --> 00:01:22,750
So today, we're going to speak
about WebRTC, and Sam will be

28
00:01:22,750 --> 00:01:26,030
able to share with us some of
the new, cool demos that are

29
00:01:26,030 --> 00:01:30,070
just showing the power
of this cool API.

30
00:01:30,070 --> 00:01:33,270
Maybe the best thing would be
if, Sam, you could take over

31
00:01:33,270 --> 00:01:37,910
and just go through these slides
and some of the great

32
00:01:37,910 --> 00:01:39,620
links that we have here.

33
00:01:39,620 --> 00:01:40,770
SAM DUTTON: Absolutely.

34
00:01:40,770 --> 00:01:49,090
So we've got this new set of
technologies called WebRTC,

35
00:01:49,090 --> 00:01:53,080
and what that gives us is
real-time communication built

36
00:01:53,080 --> 00:01:54,920
into the browser.

37
00:01:54,920 --> 00:01:58,920
So this is for obvious
applications.

38
00:01:58,920 --> 00:02:02,770
We can think of things like
video chat, exchange of data,

39
00:02:02,770 --> 00:02:06,920
low latency between games,
stuff like file

40
00:02:06,920 --> 00:02:10,169
sharing, even telephony.

41
00:02:10,169 --> 00:02:13,480
Now, the point about WebRTC
where it's been implemented is

42
00:02:13,480 --> 00:02:14,830
that it's peer to peer.

43
00:02:14,830 --> 00:02:18,190
So the communication is
happening between the

44
00:02:18,190 --> 00:02:21,450
browsers, between what's
called peers.

45
00:02:21,450 --> 00:02:24,720
So if we think of technologies
like web sockets, which are

46
00:02:24,720 --> 00:02:28,820
really, really fast, but
they're going via an

47
00:02:28,820 --> 00:02:31,940
intermediary server, and
with WebRTC, it's

48
00:02:31,940 --> 00:02:35,630
directly between the peers.

49
00:02:35,630 --> 00:02:41,160
WebRTC has been built as a free
and open-source project,

50
00:02:41,160 --> 00:02:45,100
doesn't need any plug-ins, and
like I say, it's standardized

51
00:02:45,100 --> 00:02:46,070
and it's free.

52
00:02:46,070 --> 00:02:50,040
It's free for developers to use,
and all the technologies

53
00:02:50,040 --> 00:02:54,410
are free for the end
users as well.

54
00:02:54,410 --> 00:03:02,190
If we start, I guess, with the
most important API in this,

55
00:03:02,190 --> 00:03:05,090
we've got something called
getUserMedia, also known as

56
00:03:05,090 --> 00:03:06,270
media stream.

57
00:03:06,270 --> 00:03:11,770
Now, the WebRTC APIs have been
implemented now in Chrome, on

58
00:03:11,770 --> 00:03:15,935
desktop, and on Android, and
in Firefox, and we're told

59
00:03:15,935 --> 00:03:18,490
coming to Opera on mobile
and on desktop.

60
00:03:18,490 --> 00:03:19,850
So that's great news.

61
00:03:19,850 --> 00:03:24,470

62
00:03:24,470 --> 00:03:31,320
This simpl.info/gUM, and you can
see there that it's asking

63
00:03:31,320 --> 00:03:36,000
me permission box up at the top
there if I can let it use

64
00:03:36,000 --> 00:03:36,570
the camera.

65
00:03:36,570 --> 00:03:37,970
So here we are.

66
00:03:37,970 --> 00:03:40,880
We're using the camera and
we're getting [INAUDIBLE]

67
00:03:40,880 --> 00:03:43,800

68
00:03:43,800 --> 00:03:45,090
a video element.

69
00:03:45,090 --> 00:03:49,330
You can see the code is
pretty simple there.

70
00:03:49,330 --> 00:03:49,920
What's that?

71
00:03:49,920 --> 00:03:55,020
20 lines of code to cover
cross-browser as well.

72
00:03:55,020 --> 00:03:59,950
The stream variable there, that
shows what the stream is

73
00:03:59,950 --> 00:04:04,760
coming from the video, and you
can see [INAUDIBLE] elements,

74
00:04:04,760 --> 00:04:07,910
and then [INAUDIBLE]

75
00:04:07,910 --> 00:04:11,390
the video tracks for that.

76
00:04:11,390 --> 00:04:13,240
[INAUDIBLE] that we have
one video track.

77
00:04:13,240 --> 00:04:16,529
This represents the stuff
coming from the camera.

78
00:04:16,529 --> 00:04:19,810
And you can see there the name
and the label, and so on.

79
00:04:19,810 --> 00:04:25,410
So a really useful API on its
own, kind of fun, but people

80
00:04:25,410 --> 00:04:28,914
are doing cool things
with this.

81
00:04:28,914 --> 00:04:32,720
And when these APIs come up
against each other, we see

82
00:04:32,720 --> 00:04:33,500
these amazing things.

83
00:04:33,500 --> 00:04:37,210
So I love this ASCII
camera example.

84
00:04:37,210 --> 00:04:40,090
What's happening here, it's
actually really simple code.

85
00:04:40,090 --> 00:04:42,230
What we're doing is we're
getting the video stream from

86
00:04:42,230 --> 00:04:46,540
the camera, and we're putting
that onto a canvas element,

87
00:04:46,540 --> 00:04:48,580
pretty straightforward, and
then analyzing each of the

88
00:04:48,580 --> 00:04:52,360
pixels of the canvas element and
turning that into ASCII.

89
00:04:52,360 --> 00:04:55,880

90
00:04:55,880 --> 00:04:58,350
Really, if you look at the
code there, it's pretty

91
00:04:58,350 --> 00:04:59,350
minimal stuff.

92
00:04:59,350 --> 00:05:03,970
So again, this richness where
we're getting one API

93
00:05:03,970 --> 00:05:04,910
[INAUDIBLE].

94
00:05:04,910 --> 00:05:07,800
And you can have a look at
Webcam Toy, which does the

95
00:05:07,800 --> 00:05:12,910
same using Web-GL, and
AudoRecorder here.

96
00:05:12,910 --> 00:05:16,700
What we're doing is we're using
getUserMedia as the

97
00:05:16,700 --> 00:05:18,730
input to web audio.

98
00:05:18,730 --> 00:05:22,500
You allow that, you can see I'm
getting some visualization

99
00:05:22,500 --> 00:05:24,790
there happening with the
canvas element again.

100
00:05:24,790 --> 00:05:27,665
And I can actually download
this content using

101
00:05:27,665 --> 00:05:31,025
what we call a JS.

102
00:05:31,025 --> 00:05:37,110
And if I open up that file, you
can see it there in VLC,

103
00:05:37,110 --> 00:05:40,620
and I can play that
back just there.

104
00:05:40,620 --> 00:05:44,000
So again, one API coming up
against another in really

105
00:05:44,000 --> 00:05:46,110
interesting ways.

106
00:05:46,110 --> 00:05:49,030
Speaking of this, actually,
you might be interested to

107
00:05:49,030 --> 00:05:51,260
check out MediaRecorder.

108
00:05:51,260 --> 00:05:53,580
I've linked to the API there.

109
00:05:53,580 --> 00:05:56,290
This has been implemented in
Firefox Nightly, and it's

110
00:05:56,290 --> 00:05:56,890
coming soon.

111
00:05:56,890 --> 00:05:59,060
We've got an intent
to implement in

112
00:05:59,060 --> 00:06:01,720
Chrome, which is great.

113
00:06:01,720 --> 00:06:05,360
So that's going to be the
ability to record audio and

114
00:06:05,360 --> 00:06:07,590
video files.

115
00:06:07,590 --> 00:06:11,700
And again, some links to
some API stuff there.

116
00:06:11,700 --> 00:06:15,760
Now, to do something more
powerful, the core of WebRTC,

117
00:06:15,760 --> 00:06:18,950
we've got this API,
RTCPeerConnection, and this is

118
00:06:18,950 --> 00:06:23,180
the API for peer to peer
communication.

119
00:06:23,180 --> 00:06:30,540
So the obvious stuff for this
is the ability to do stuff

120
00:06:30,540 --> 00:06:36,250
like video chat, but it also
gets used by the API called

121
00:06:36,250 --> 00:06:38,140
RTCDataChannel.

122
00:06:38,140 --> 00:06:38,850
[INAUDIBLE]

123
00:06:38,850 --> 00:06:39,460
swap these over.

124
00:06:39,460 --> 00:06:41,580
We'll fix these up anyway.

125
00:06:41,580 --> 00:06:44,130
So what this allows
us to do is video

126
00:06:44,130 --> 00:06:45,550
chat between browsers.

127
00:06:45,550 --> 00:06:47,190
We've got a link to an
application there.

128
00:06:47,190 --> 00:06:50,040
What I'd really recommend if
you want to get your head

129
00:06:50,040 --> 00:06:56,860
around RTCPeerConnection is to
have a go at the Codelab there

130
00:06:56,860 --> 00:06:59,010
on Bitbucket.

131
00:06:59,010 --> 00:07:00,380
Really straightforward stuff.

132
00:07:00,380 --> 00:07:02,370
And we will fix up the labels
on these pages,

133
00:07:02,370 --> 00:07:04,162
which are back to front.

134
00:07:04,162 --> 00:07:07,540
Now, there is also a part of
RTCPeerConnection, which is

135
00:07:07,540 --> 00:07:09,010
RTCDataChannel.

136
00:07:09,010 --> 00:07:11,620
This is the API for
arbitrary data

137
00:07:11,620 --> 00:07:14,570
communication between peers.

138
00:07:14,570 --> 00:07:16,140
And some examples here.

139
00:07:16,140 --> 00:07:17,840
Let's have a look
at [INAUDIBLE].

140
00:07:17,840 --> 00:07:24,540
This is using the API
for file sharing.

141
00:07:24,540 --> 00:07:26,210
Let's select a file here.

142
00:07:26,210 --> 00:07:32,260
So this is a photograph of a
local pub, and we're using the

143
00:07:32,260 --> 00:07:34,330
RTCDataChannel API
to share this.

144
00:07:34,330 --> 00:07:35,900
Now, if I open this in
a new [INAUDIBLE]

145
00:07:35,900 --> 00:07:42,930

146
00:07:42,930 --> 00:07:46,520
on a new machine, but you can
see that I've actually

147
00:07:46,520 --> 00:07:48,775
downloaded that sharing
peer to peer.

148
00:07:48,775 --> 00:07:52,260
And if I open it up, I should
be able to see &mdash;

149
00:07:52,260 --> 00:07:52,980
maybe not.

150
00:07:52,980 --> 00:07:54,240
OK, not with this.

151
00:07:54,240 --> 00:07:57,740
Anyway, I've downloaded
the file here.

152
00:07:57,740 --> 00:08:01,680
This is a great way to
do file sharing.

153
00:08:01,680 --> 00:08:03,310
Let me go back.

154
00:08:03,310 --> 00:08:07,390
I'll just show you another
link there to a

155
00:08:07,390 --> 00:08:08,590
project called PeerCDN.

156
00:08:08,590 --> 00:08:10,480
Now, this is really
interesting.

157
00:08:10,480 --> 00:08:16,810
This is the idea of sharing
content using RTCDataChannel

158
00:08:16,810 --> 00:08:19,840
to enable content distribution
peer to peer.

159
00:08:19,840 --> 00:08:21,960
So it's something
really radical.

160
00:08:21,960 --> 00:08:24,710
We'll see how the future pans
out, but this could be a

161
00:08:24,710 --> 00:08:27,140
completely different way of
sharing content on the

162
00:08:27,140 --> 00:08:30,740
internet, maybe the peer to
peer dream come true.

163
00:08:30,740 --> 00:08:33,134
I would also strongly recommend
you take a look at

164
00:08:33,134 --> 00:08:36,405
the wonderful Cube
Slam game there.

165
00:08:36,405 --> 00:08:40,190
You can play with friends via
WebRTC or with a bear.

166
00:08:40,190 --> 00:08:43,200

167
00:08:43,200 --> 00:08:47,080
So just to keep going, some more
great stuff coming into

168
00:08:47,080 --> 00:08:49,670
media on the web.

169
00:08:49,670 --> 00:08:54,020
We have a JavaScript API
called Encrypted Media.

170
00:08:54,020 --> 00:08:57,610
This is an extension to
HTML Media Elements.

171
00:08:57,610 --> 00:09:01,970
It gives us the ability to deal
with encrypted media on

172
00:09:01,970 --> 00:09:05,570
the web, so simple cases like,
say, maybe corporate

173
00:09:05,570 --> 00:09:08,845
presentations where we're just
sharing a password to more

174
00:09:08,845 --> 00:09:13,190
complex applications where we're
using a plug-in, what's

175
00:09:13,190 --> 00:09:17,960
called content decryption
module, for stuff like Netflix

176
00:09:17,960 --> 00:09:22,430
and so on where we have a
more complex schedule

177
00:09:22,430 --> 00:09:23,900
set up and so on.

178
00:09:23,900 --> 00:09:27,675
So a way for content
distributors to use the web

179
00:09:27,675 --> 00:09:29,920
with encrypted media
extensions.

180
00:09:29,920 --> 00:09:35,160
Now, this has been implemented
using something called Media

181
00:09:35,160 --> 00:09:36,620
Source Extensions.

182
00:09:36,620 --> 00:09:40,860
Media Source Extensions are a
way of chunking out bits of

183
00:09:40,860 --> 00:09:43,930
video, other content
potentially, and then playing

184
00:09:43,930 --> 00:09:47,200
them back using a JavaScript
interface.

185
00:09:47,200 --> 00:09:50,350
Kind of simple [INAUDIBLE]

186
00:09:50,350 --> 00:09:54,220
if you follow the link, kind
of doesn't do much.

187
00:09:54,220 --> 00:10:00,185
But what we're seeing here is
the ability to get chunks of

188
00:10:00,185 --> 00:10:04,010
[INAUDIBLE] and then play them
back using the Media Source

189
00:10:04,010 --> 00:10:06,330
Extensions [INAUDIBLE].

190
00:10:06,330 --> 00:10:10,990
That works, but what makes it
really powerful is the ability

191
00:10:10,990 --> 00:10:15,640
to use this, stuff like what's
called DASH, MPEG-DASH, to do

192
00:10:15,640 --> 00:10:17,560
adaptive streaming.

193
00:10:17,560 --> 00:10:21,170
That means that depending on the
bandwidth conditions and

194
00:10:21,170 --> 00:10:25,420
so on, we can change the actual
quality, the resolution

195
00:10:25,420 --> 00:10:29,440
of the video that's being
downloaded in real time.

196
00:10:29,440 --> 00:10:33,920
So very, very useful in this
modern world where we've got &mdash;

197
00:10:33,920 --> 00:10:37,750
I heard that Cisco is estimating
something like 80%

198
00:10:37,750 --> 00:10:43,860
to 90% of web traffic
will be video within

199
00:10:43,860 --> 00:10:46,990
the next three years.

200
00:10:46,990 --> 00:10:51,330
YouTube, we've already got
something like 100 hours of

201
00:10:51,330 --> 00:10:55,570
video uploaded each minute,
six billion views a

202
00:10:55,570 --> 00:10:56,790
month, and so on.

203
00:10:56,790 --> 00:10:59,910
And in that context, stuff like
adaptive streaming with

204
00:10:59,910 --> 00:11:02,520
MSE is going to be really,
really important.

205
00:11:02,520 --> 00:11:06,360
But also, the use of
really good codecs.

206
00:11:06,360 --> 00:11:11,750
Google is working on a codec
called VP9, which is source

207
00:11:11,750 --> 00:11:15,680
and royalty free video
standards.

208
00:11:15,680 --> 00:11:26,500
As we look at the [INAUDIBLE]
here, this is showing VP9 in

209
00:11:26,500 --> 00:11:31,420
comparison with H.264, and you
can see it's comparing very

210
00:11:31,420 --> 00:11:34,050
favorably there with the
existing technology.

211
00:11:34,050 --> 00:11:36,500
[INAUDIBLE]

212
00:11:36,500 --> 00:11:38,952
There's nothing we can compare
with [INAUDIBLE].

213
00:11:38,952 --> 00:11:48,300

214
00:11:48,300 --> 00:11:50,290
Let's go out of full screen.

215
00:11:50,290 --> 00:11:52,200
IDO GREEN: So maybe you could
repeat the last sentence,

216
00:11:52,200 --> 00:11:55,140
because I think we couldn't
hear it well.

217
00:11:55,140 --> 00:11:56,430
SAM DUTTON: Sorry, yeah.

218
00:11:56,430 --> 00:12:00,080
So the demo there, people might
think that's an unfair

219
00:12:00,080 --> 00:12:04,000
comparison because it's not
comparing with H.265, the next

220
00:12:04,000 --> 00:12:08,660
version following on from H.264,
also known as HEVC,

221
00:12:08,660 --> 00:12:09,790
confusingly.

222
00:12:09,790 --> 00:12:14,160
We don't have a playback
mechanism for that, that can

223
00:12:14,160 --> 00:12:15,420
compare with in that way.

224
00:12:15,420 --> 00:12:20,300
But really to show that VP9 is
comparing very favorably,

225
00:12:20,300 --> 00:12:24,780
certainly with existing encoding
technology there.

226
00:12:24,780 --> 00:12:27,995
And there's a stack of several
more links if you'd like to

227
00:12:27,995 --> 00:12:30,080
find out more about VP9.

228
00:12:30,080 --> 00:12:34,020
You know, think about coping is
this coming world where we

229
00:12:34,020 --> 00:12:39,110
have HD on the rise, we have
broadcasters moving to IPTV,

230
00:12:39,110 --> 00:12:41,980
in other words, broadcast
over the internet.

231
00:12:41,980 --> 00:12:45,656
And I saw some figures the other
day for the BBC here in

232
00:12:45,656 --> 00:12:50,740
the UK, TV viewing,
broadcasting, is still pretty

233
00:12:50,740 --> 00:12:54,140
much all &mdash; it's like all
still on televisions.

234
00:12:54,140 --> 00:12:58,130
It's something like 1%, I think,
2% maybe of people here

235
00:12:58,130 --> 00:13:01,900
are watching TV on
the internet.

236
00:13:01,900 --> 00:13:02,915
So there's a huge opportunity
there.

237
00:13:02,915 --> 00:13:06,720
There's going to be a huge shift
in the way people view

238
00:13:06,720 --> 00:13:08,145
TV, so we really &mdash;

239
00:13:08,145 --> 00:13:09,130
IDO GREEN: Absolutely,
absolutely.

240
00:13:09,130 --> 00:13:09,570
I agree.

241
00:13:09,570 --> 00:13:14,505
And I think there was a very
interesting blog post that

242
00:13:14,505 --> 00:13:16,900
showed the stats of Netflix
in the US &mdash;

243
00:13:16,900 --> 00:13:20,380
and obviously, it will go to
other markets as well &mdash;

244
00:13:20,380 --> 00:13:22,640
the numbers there are
just staggering.

245
00:13:22,640 --> 00:13:25,255
Like you said, basically, on
what we have today in YouTube.

246
00:13:25,255 --> 00:13:26,560
It's [INAUDIBLE].

247
00:13:26,560 --> 00:13:27,300
SAM DUTTON: Yeah,
that's right.

248
00:13:27,300 --> 00:13:29,990
We've got this huge
move from &mdash;

249
00:13:29,990 --> 00:13:34,040
well, it's video viewing
onto the internet.

250
00:13:34,040 --> 00:13:37,620
I think I saw some figures from
the US that people are

251
00:13:37,620 --> 00:13:41,430
now spending more time on the
internet, and a lot of that

252
00:13:41,430 --> 00:13:43,150
watching video.

253
00:13:43,150 --> 00:13:46,200
And that's going to require
these really good

254
00:13:46,200 --> 00:13:50,640
technologies, like MSE and great
codecs like VP9, for the

255
00:13:50,640 --> 00:13:51,830
internet to keep going.

256
00:13:51,830 --> 00:13:55,480
So some great stuff there,
and check out the links.

257
00:13:55,480 --> 00:13:57,900
There's a whole stack of
more material there.

258
00:13:57,900 --> 00:13:58,650
IDO GREEN: Yeah, absolutely.

259
00:13:58,650 --> 00:13:59,630
Absolutely.

260
00:13:59,630 --> 00:14:05,630
And maybe we'll just
go for the last &mdash;

261
00:14:05,630 --> 00:14:08,580
oh, by the way, I wanted to ask
you about the encrypted

262
00:14:08,580 --> 00:14:12,810
media because I've got questions
from start-ups that

263
00:14:12,810 --> 00:14:18,020
wanted to try and start
playing, or let's say,

264
00:14:18,020 --> 00:14:20,880
developing and check
this technology.

265
00:14:20,880 --> 00:14:25,790
Where does it stand today in
terms of enabling us to

266
00:14:25,790 --> 00:14:29,420
encrypt, decrypt on the client,
and what can you share

267
00:14:29,420 --> 00:14:32,440
with us in terms of where
this project is going?

268
00:14:32,440 --> 00:14:35,400
SAM DUTTON: So over the next
couple of months, we're going

269
00:14:35,400 --> 00:14:38,820
to actually be producing
something called "EME in a

270
00:14:38,820 --> 00:14:44,090
Box." So this is going to be
a complete starter pack for

271
00:14:44,090 --> 00:14:47,260
people who want to have
a go with EME.

272
00:14:47,260 --> 00:14:50,490
In the meantime, I would
check out the links

273
00:14:50,490 --> 00:14:51,530
that we've got there.

274
00:14:51,530 --> 00:14:53,920
Actually, I can share some more
stuff later, some more

275
00:14:53,920 --> 00:14:57,250
resources about how EME works
and how you might implement it

276
00:14:57,250 --> 00:14:58,590
in your project.

277
00:14:58,590 --> 00:15:02,560
But we will be producing some
more materials, resources, for

278
00:15:02,560 --> 00:15:07,670
developers so that they can
integrate the encryption part,

279
00:15:07,670 --> 00:15:11,830
key servers, and the actual
web applications, in their

280
00:15:11,830 --> 00:15:12,630
infrastructure.

281
00:15:12,630 --> 00:15:13,030
IDO GREEN: Excellent.

282
00:15:13,030 --> 00:15:14,350
SAM DUTTON: Their app.

283
00:15:14,350 --> 00:15:14,800
IDO GREEN: Excellent.

284
00:15:14,800 --> 00:15:15,925
So &mdash;

285
00:15:15,925 --> 00:15:16,850
SAM DUTTON: We'll
keep you posted.

286
00:15:16,850 --> 00:15:18,610
We'll distribute that stuff.

287
00:15:18,610 --> 00:15:22,080
It will be available in
the next month or two.

288
00:15:22,080 --> 00:15:23,680
IDO GREEN: Great.

289
00:15:23,680 --> 00:15:27,380
And then last but not
least, we put

290
00:15:27,380 --> 00:15:28,605
some links to resources.

291
00:15:28,605 --> 00:15:31,510
So of course, we'll have the
recording, so people that

292
00:15:31,510 --> 00:15:32,650
weren't with us.

293
00:15:32,650 --> 00:15:35,770
And I know there are a few that
would love to see the

294
00:15:35,770 --> 00:15:37,960
recording, so of course we'll
have a link there.

295
00:15:37,960 --> 00:15:41,716
And there's a Google I/O
presentation on WebRTC.

296
00:15:41,716 --> 00:15:43,160
I highly recommend it.

297
00:15:43,160 --> 00:15:47,160
I watched it live and then
watched it again three or four

298
00:15:47,160 --> 00:15:50,090
weeks ago, and it's a
great presentation.

299
00:15:50,090 --> 00:15:54,680
And then we have two tutorials
on HTML5 Rock about WebRTC

300
00:15:54,680 --> 00:15:57,920
basics and an eBook
or paperback

301
00:15:57,920 --> 00:16:00,862
that you could purchase.

302
00:16:00,862 --> 00:16:02,350
SAM DUTTON: Yeah,
that's right.

303
00:16:02,350 --> 00:16:03,725
The book is brilliant.

304
00:16:03,725 --> 00:16:05,720
I really like that.

305
00:16:05,720 --> 00:16:10,180
Download it to your eBook
reader, and it's just coming

306
00:16:10,180 --> 00:16:12,070
out in the second edition.

307
00:16:12,070 --> 00:16:13,690
We'll actually put a
link there, too.

308
00:16:13,690 --> 00:16:15,890
The other resource I
would recommend &mdash;

309
00:16:15,890 --> 00:16:17,740
shameless self-promotion &mdash;

310
00:16:17,740 --> 00:16:22,090
is the Codelab that we did at
Google I/O. That shows you how

311
00:16:22,090 --> 00:16:26,360
to make a complete video
chat application,

312
00:16:26,360 --> 00:16:27,930
including how to build &mdash;

313
00:16:27,930 --> 00:16:28,920
really, really simple &mdash;

314
00:16:28,920 --> 00:16:31,870
how to build a signaling server
using Node JS and

315
00:16:31,870 --> 00:16:33,790
Socket I/O.

316
00:16:33,790 --> 00:16:34,840
IDO GREEN: Excellent,
excellent.

317
00:16:34,840 --> 00:16:36,160
That sounds brilliant.

318
00:16:36,160 --> 00:16:42,970
And then we put a link just to
show where, for developers

319
00:16:42,970 --> 00:16:47,980
that want to see what are their
users using, and then

320
00:16:47,980 --> 00:16:49,870
plan ahead and see.

321
00:16:49,870 --> 00:16:53,170
So as you mentioned, it's
supported today in Firefox and

322
00:16:53,170 --> 00:16:57,590
Chrome, and hopefully Opera
will join the gang soon.

323
00:16:57,590 --> 00:16:58,840
SAM DUTTON: Yeah.

324
00:16:58,840 --> 00:17:00,640

325
00:17:00,640 --> 00:17:02,050
[INAUDIBLE] happens elsewhere.

326
00:17:02,050 --> 00:17:03,350
IDO GREEN: Yeah, yeah, yeah.

327
00:17:03,350 --> 00:17:04,819
So that's pretty cool.

328
00:17:04,819 --> 00:17:05,109
SAM DUTTON: Yeah.

329
00:17:05,109 --> 00:17:06,359
That's great.

330
00:17:06,359 --> 00:17:08,869
You also might want to check
out chromestatus.com.

331
00:17:08,869 --> 00:17:11,190
We'll put a link to that, too.

332
00:17:11,190 --> 00:17:11,349
IDO GREEN: Yeah.

333
00:17:11,349 --> 00:17:16,400
SAM DUTTON: This tells you the
implementation status of APIs

334
00:17:16,400 --> 00:17:17,490
in Chrome and Chromium.

335
00:17:17,490 --> 00:17:18,560
Great resource.

336
00:17:18,560 --> 00:17:20,430
Just been relaunched.

337
00:17:20,430 --> 00:17:22,990
That's another good way to find
out when things are on

338
00:17:22,990 --> 00:17:25,260
the way, how standardization
is going, and so on.

339
00:17:25,260 --> 00:17:26,884
IDO GREEN: Yeah, absolutely.

340
00:17:26,884 --> 00:17:29,130
[INAUDIBLE] .com/features.

341
00:17:29,130 --> 00:17:32,760
I really like the new edition
to see exactly which API is

342
00:17:32,760 --> 00:17:37,320
going to be supported in which
platforms, and some great work

343
00:17:37,320 --> 00:17:38,030
over there.

344
00:17:38,030 --> 00:17:39,544
SAM DUTTON: Yeah, beautiful
piece of work.

345
00:17:39,544 --> 00:17:40,390
That's very nice.

346
00:17:40,390 --> 00:17:40,990
IDO GREEN: Excellent.

347
00:17:40,990 --> 00:17:41,440
Excellent.

348
00:17:41,440 --> 00:17:43,520
So I think we are
just on time.

349
00:17:43,520 --> 00:17:47,080
I would like to thank you very
much for joining us and

350
00:17:47,080 --> 00:17:51,120
putting some lights on this
cool, new technology.

351
00:17:51,120 --> 00:17:54,190
SAM DUTTON: Thanks, everyone
there, for joining us, and

352
00:17:54,190 --> 00:17:55,920
apologies for the confusion
of RTCDataChannel and

353
00:17:55,920 --> 00:17:57,235
PeerConnection.

354
00:17:57,235 --> 00:17:59,195
We'll put some more
links up there.

355
00:17:59,195 --> 00:18:01,670
I hope it's useful.

356
00:18:01,670 --> 00:18:04,000
If you're working on
stuff, please feel

357
00:18:04,000 --> 00:18:05,910
free to contact us.

358
00:18:05,910 --> 00:18:11,320
And any bugs with the APIs, we
really appreciate all the bug

359
00:18:11,320 --> 00:18:14,120
reports we've had, and feature
requests, and all that stuff.

360
00:18:14,120 --> 00:18:15,653
crbug.com/new.

361
00:18:15,653 --> 00:18:20,150
That's the place for your
comments on the WebRTC APIs.

362
00:18:20,150 --> 00:18:21,500
So thank you.

363
00:18:21,500 --> 00:18:22,080
IDO GREEN: Yeah, absolutely.

364
00:18:22,080 --> 00:18:25,270
So thank you very much, and
until next time, be strong.

365
00:18:25,270 --> 00:18:26,690
Bye bye.

366
00:18:26,690 --> 00:18:27,940
SAM DUTTON: See you.

367
00:18:27,940 --> 00:18:34,302

