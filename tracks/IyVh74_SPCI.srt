1
00:00:00,000 --> 00:03:04,758
[MUSIC PLAYING]

2
00:03:04,758 --> 00:03:07,980
PETE: All right, everybody.

3
00:03:07,980 --> 00:03:08,480
All right.

4
00:03:08,480 --> 00:03:10,070
We're getting ready to start.

5
00:03:10,070 --> 00:03:12,610
Thank you for coming out for
our performance event tonight.

6
00:03:12,610 --> 00:03:16,240
And thank you for making it the
biggest one we've ever done.

7
00:03:16,240 --> 00:03:21,260
[APPLAUSE]

8
00:03:21,260 --> 00:03:23,094
PETE: So a couple
of things to know.

9
00:03:23,094 --> 00:03:24,510
The way it's going
to work tonight

10
00:03:24,510 --> 00:03:27,684
is we have three speakers.

11
00:03:27,684 --> 00:03:29,850
After the speakers, we're
going to have some dinner.

12
00:03:29,850 --> 00:03:31,540
It's going to be tacos.

13
00:03:31,540 --> 00:03:32,900
We fought for better food.

14
00:03:32,900 --> 00:03:35,820
We got you better food.

15
00:03:35,820 --> 00:03:37,400
After that, Colt
McAnlis from Google

16
00:03:37,400 --> 00:03:38,770
is going to do something
that if you've never

17
00:03:38,770 --> 00:03:41,228
seen someone do before, it's
pretty awesome to watch, which

18
00:03:41,228 --> 00:03:43,110
is dissect sites for
their performance.

19
00:03:43,110 --> 00:03:45,432
That's going to be great.

20
00:03:45,432 --> 00:03:47,390
The first speaker tonight,
make sure you're all

21
00:03:47,390 --> 00:03:48,380
on the wireless.

22
00:03:48,380 --> 00:03:52,055
Did everyone see the web page
they were supposed to go to?

23
00:03:52,055 --> 00:03:53,366
Jake will remind you.

24
00:03:53,366 --> 00:03:54,990
This is going to be
an interactive one.

25
00:03:54,990 --> 00:03:57,422
So get your phones ready
to connect to that site.

26
00:03:57,422 --> 00:03:58,630
There's going to be quizzing.

27
00:03:58,630 --> 00:03:59,880
There's going to be answering.

28
00:03:59,880 --> 00:04:03,120
There's going to be minds blown,
like, wait, that's a thing?

29
00:04:03,120 --> 00:04:04,780
Then we're going to have Eitan
talking about the "New York

30
00:04:04,780 --> 00:04:05,280
Times."

31
00:04:05,280 --> 00:04:08,060
And we're going to be having
Adam Grossman from Forecast.io

32
00:04:08,060 --> 00:04:10,150
talking about Forecast.io
or Forecast.io?

33
00:04:10,150 --> 00:04:11,691
ADAM GROSSMAN: It
is now Forecast.io.

34
00:04:11,691 --> 00:04:13,154
PETE: It's Forecast.io?

35
00:04:13,154 --> 00:04:14,570
ADAM GROSSMAN:
It's just Forecast.

36
00:04:14,570 --> 00:04:15,200
PETE: Just Forecast.

37
00:04:15,200 --> 00:04:15,360
OK.

38
00:04:15,360 --> 00:04:16,360
It's just Forecast.

39
00:04:16,360 --> 00:04:17,171
Sorry.

40
00:04:17,171 --> 00:04:19,254
Which if you haven't looked
at, you really should.

41
00:04:19,254 --> 00:04:21,899
But first, Jake
Archibald from Google

42
00:04:21,899 --> 00:04:24,340
is going to give
his excellent quiz.

43
00:04:24,340 --> 00:04:26,120
One more thing.

44
00:04:26,120 --> 00:04:27,420
Sorry.

45
00:04:27,420 --> 00:04:29,960
Bathrooms are on the
sides if you need to.

46
00:04:29,960 --> 00:04:32,342
And anything else, Chris?

47
00:04:32,342 --> 00:04:33,820
Did I get it?

48
00:04:33,820 --> 00:04:34,495
OK.

49
00:04:34,495 --> 00:04:35,620
Jake Archibald from Google.

50
00:04:35,620 --> 00:04:39,284
[APPLAUSE]

51
00:04:39,284 --> 00:04:40,420
JAKE ARCHIBALD: So, yeah.

52
00:04:40,420 --> 00:04:42,200
This is going to be a quiz.

53
00:04:42,200 --> 00:04:46,120
So if you're not on the Wi-Fi,
get yourself on the Wi-Fi now.

54
00:04:46,120 --> 00:04:48,160
The username and
password is on there.

55
00:04:48,160 --> 00:04:50,860
And then once you've done that,
if you want to go to this URL

56
00:04:50,860 --> 00:04:54,512
and make up your own
username and password.

57
00:04:54,512 --> 00:04:56,470
So obviously not the same
username and password

58
00:04:56,470 --> 00:04:59,205
or a bunch of you will
be on the same account.

59
00:04:59,205 --> 00:05:00,830
So you won't be able
to get to that URL

60
00:05:00,830 --> 00:05:02,710
if you're not on
that Wi-Fi network.

61
00:05:02,710 --> 00:05:03,970
So make sure you are.

62
00:05:03,970 --> 00:05:06,471
And if you're watching this
on the live stream, tough luck

63
00:05:06,471 --> 00:05:06,970
I'm afraid.

64
00:05:06,970 --> 00:05:09,720
You've just got to play
along using your brain.

65
00:05:09,720 --> 00:05:11,430
And you can write
things down on paper

66
00:05:11,430 --> 00:05:12,960
and score yourself if you want.

67
00:05:12,960 --> 00:05:15,795
So the reason I'm asking
you for a username

68
00:05:15,795 --> 00:05:18,420
and password is just so you can
switch devices halfway through,

69
00:05:18,420 --> 00:05:21,590
in case one, your phone
starts running out of battery

70
00:05:21,590 --> 00:05:23,310
and you want to
switch to your laptop.

71
00:05:23,310 --> 00:05:24,976
Just use the same
username and password.

72
00:05:24,976 --> 00:05:26,040
And everything will work.

73
00:05:26,040 --> 00:05:28,910
The password is stored in
plain text on my machine.

74
00:05:28,910 --> 00:05:32,070
So don't use your credit card
number or anything like that

75
00:05:32,070 --> 00:05:33,919
unless you are intending
to make a donation.

76
00:05:33,919 --> 00:05:35,460
And that will be
gratefully received.

77
00:05:35,460 --> 00:05:37,270
Thank you very much.

78
00:05:37,270 --> 00:05:39,440
So I'm going to assume
everyone's ready to go.

79
00:05:39,440 --> 00:05:41,820
I will keep the URL in
the corner of the screen.

80
00:05:41,820 --> 00:05:47,680
So if anyone loses it, you'll
be able to pick it back up.

81
00:05:47,680 --> 00:05:49,450
I hacked this
together on a plane.

82
00:05:49,450 --> 00:05:52,020
You could probably break
it by trying to break it.

83
00:05:52,020 --> 00:05:54,290
So please, don't
try and break it.

84
00:05:54,290 --> 00:05:57,500
I've made it so little
Bobby Tables can play.

85
00:05:57,500 --> 00:05:58,990
That's not going to break it.

86
00:05:58,990 --> 00:05:59,890
But there are
probably other things.

87
00:05:59,890 --> 00:06:00,973
You could probably DOS it.

88
00:06:00,973 --> 00:06:02,070
So please don't do that.

89
00:06:02,070 --> 00:06:05,339
And I want to stress that
this quiz is pretty tough.

90
00:06:05,339 --> 00:06:06,880
I've seen it get
the better of people

91
00:06:06,880 --> 00:06:10,460
who do this kind of study of
browser quirks for a living.

92
00:06:10,460 --> 00:06:12,995
So if you're the kind of
person who gets really angry

93
00:06:12,995 --> 00:06:15,150
and starts flipping over
tables when you don't win,

94
00:06:15,150 --> 00:06:19,130
then just maybe stay away from
the tables for a little while.

95
00:06:19,130 --> 00:06:20,150
OK.

96
00:06:20,150 --> 00:06:22,350
Of course, what
kind of a quiz would

97
00:06:22,350 --> 00:06:24,850
be complete without a prize?

98
00:06:24,850 --> 00:06:28,500
So the Chromebook Pixel
is Google's latest laptop,

99
00:06:28,500 --> 00:06:31,220
featuring an i5 1.8
gigahertz dual core

100
00:06:31,220 --> 00:06:34,980
processor, 4 gigabytes of RAM,
and a touchscreen with a higher

101
00:06:34,980 --> 00:06:37,024
DPI than a MacBook Pro.

102
00:06:37,024 --> 00:06:38,440
Couldn't get hold
of one of those.

103
00:06:38,440 --> 00:06:39,460
Sorry.

104
00:06:39,460 --> 00:06:41,300
They wouldn't let me.

105
00:06:41,300 --> 00:06:43,309
But what I did get
is a Chromecast.

106
00:06:43,309 --> 00:06:44,850
So I've got one of
those to give away

107
00:06:44,850 --> 00:06:46,430
for whoever gets
the highest score.

108
00:06:46,430 --> 00:06:47,960
So it's not quite a Pixel.

109
00:06:47,960 --> 00:06:49,740
But it's very, very good.

110
00:06:49,740 --> 00:06:50,920
So let's start.

111
00:06:50,920 --> 00:06:52,765
Let's start off really simple.

112
00:06:52,765 --> 00:06:54,890
And so the URL is there in
the bottom of the screen

113
00:06:54,890 --> 00:06:55,764
if you need it again.

114
00:06:55,764 --> 00:06:57,800
But here's a nice easy start.

115
00:06:57,800 --> 00:06:59,930
You've all worked with
images in HTML, right?

116
00:06:59,930 --> 00:07:00,680
OK.

117
00:07:00,680 --> 00:07:02,070
So here's a DIV.

118
00:07:02,070 --> 00:07:04,259
But it has a source,
like an image might.

119
00:07:04,259 --> 00:07:05,800
Which browsers do
you think are going

120
00:07:05,800 --> 00:07:07,590
to make a request
for that image?

121
00:07:07,590 --> 00:07:09,360
Now, on your phones
or on your laptops,

122
00:07:09,360 --> 00:07:11,059
you should be presented
with the option.

123
00:07:11,059 --> 00:07:13,600
So you pick which ones you think
are going to make a request.

124
00:07:13,600 --> 00:07:14,640
And then hit submit.

125
00:07:14,640 --> 00:07:16,099
If it's not appearing
on the screen

126
00:07:16,099 --> 00:07:18,056
or the icons aren't, you
can just give the page

127
00:07:18,056 --> 00:07:19,850
a refresh and that
should come through.

128
00:07:19,850 --> 00:07:21,516
When we're talking
about these browsers,

129
00:07:21,516 --> 00:07:23,860
I mean the latest versions
of each one, so I10,

130
00:07:23,860 --> 00:07:25,230
et cetera, et cetera.

131
00:07:25,230 --> 00:07:28,647
You get one point if you get it
right for a particular browser.

132
00:07:28,647 --> 00:07:31,230
You lose a point if you get it
wrong for a particular browser.

133
00:07:31,230 --> 00:07:33,390
So there's a maximum of
four points per question

134
00:07:33,390 --> 00:07:34,850
and a minimum of minus 4.

135
00:07:34,850 --> 00:07:37,090
You can score negatively.

136
00:07:37,090 --> 00:07:39,100
You can assume the
HTML5 doc type.

137
00:07:39,100 --> 00:07:41,182
And there's nothing
hidden going on.

138
00:07:41,182 --> 00:07:43,390
I'm not going to turn around
and say, oh, but there's

139
00:07:43,390 --> 00:07:45,255
a base element
that's changing URLs.

140
00:07:45,255 --> 00:07:46,380
There will be none of that.

141
00:07:46,380 --> 00:07:49,141
It's just what's there on
the screen, that one line.

142
00:07:49,141 --> 00:07:51,640
So what we're seeing here is
like a live opinion of the room

143
00:07:51,640 --> 00:07:52,140
as well.

144
00:07:52,140 --> 00:07:55,450
So the needle swings one way
when you're saying collectively

145
00:07:55,450 --> 00:07:57,200
that yes, the browser
will make a request.

146
00:07:57,200 --> 00:07:59,030
It will swing the other
way if you're saying no.

147
00:07:59,030 --> 00:08:00,530
But I'm going to
randomize which way

148
00:08:00,530 --> 00:08:03,200
is yes and no for each
question, so you can't just

149
00:08:03,200 --> 00:08:05,470
look at the screen and
vote along with the room.

150
00:08:05,470 --> 00:08:05,990
OK.

151
00:08:05,990 --> 00:08:07,470
So that's probably enough time.

152
00:08:07,470 --> 00:08:11,310
I'm going to close the
question in three, two, one.

153
00:08:11,310 --> 00:08:11,810
OK.

154
00:08:11,810 --> 00:08:13,476
So we can see from
this that your result

155
00:08:13,476 --> 00:08:16,421
is saying Chrome is going
to make a request here.

156
00:08:16,421 --> 00:08:18,170
You're less sure about
the other browsers.

157
00:08:18,170 --> 00:08:20,975
And the answer is no.

158
00:08:20,975 --> 00:08:23,350
None of the browsers are going
to make a request in this.

159
00:08:23,350 --> 00:08:25,530
But it's not actually
as mad as it seems.

160
00:08:25,530 --> 00:08:28,820
So this doesn't work in HTML5.

161
00:08:28,820 --> 00:08:32,030
But it was proposed in XHTML2.

162
00:08:32,030 --> 00:08:35,080
So XHTML2 allowed
you to do this,

163
00:08:35,080 --> 00:08:36,950
put a source
attribute on anything.

164
00:08:36,950 --> 00:08:38,700
And it would replace
the content with what

165
00:08:38,700 --> 00:08:39,616
you had in the source.

166
00:08:39,616 --> 00:08:41,179
And this was really
good, because it

167
00:08:41,179 --> 00:08:43,544
meant that the old
attribute on images

168
00:08:43,544 --> 00:08:44,960
became redundant
because you could

169
00:08:44,960 --> 00:08:47,080
replace real semantic content.

170
00:08:47,080 --> 00:08:48,170
A pretty cool idea.

171
00:08:48,170 --> 00:08:50,910
But XHTML2 was
backwards incompatible.

172
00:08:50,910 --> 00:08:53,700
And it carried with it XML's
draconian era handling.

173
00:08:53,700 --> 00:08:57,680
And once you invite XML into
your home, it XMLs everything.

174
00:08:57,680 --> 00:08:59,680
XML is all over the
floor, up the walls.

175
00:08:59,680 --> 00:09:02,450
And in the same way that Smurfs
stick the word Smurf in front

176
00:09:02,450 --> 00:09:04,300
of everything to make
it a Smurf thing,

177
00:09:04,300 --> 00:09:07,910
XML does it with X.
You don't want HTML.

178
00:09:07,910 --> 00:09:09,830
You want XHTML.

179
00:09:09,830 --> 00:09:10,940
You don't want Frames.

180
00:09:10,940 --> 00:09:12,670
You want XFrames.

181
00:09:12,670 --> 00:09:13,944
You don't want Forms.

182
00:09:13,944 --> 00:09:14,610
You want XForms.

183
00:09:14,610 --> 00:09:17,220

184
00:09:17,220 --> 00:09:18,990
If you let XML take
over your life,

185
00:09:18,990 --> 00:09:20,730
it will turn your
boyfriend or girlfriend

186
00:09:20,730 --> 00:09:24,377
into an ex-boyfriend
or girlfriend.

187
00:09:24,377 --> 00:09:25,960
And XML is cool with
that, because you

188
00:09:25,960 --> 00:09:27,168
don't need a partner anymore.

189
00:09:27,168 --> 00:09:29,160
You've got XML to
look after you.

190
00:09:29,160 --> 00:09:31,840
It seems fitting
that in 2009, XHTML

191
00:09:31,840 --> 00:09:33,417
became an ex-specification.

192
00:09:33,417 --> 00:09:34,750
And it was completely abandoned.

193
00:09:34,750 --> 00:09:37,260
And no browsers ever implemented
that source attribute

194
00:09:37,260 --> 00:09:40,850
on elements of images and
the things they work on now.

195
00:09:40,850 --> 00:09:41,350
OK.

196
00:09:41,350 --> 00:09:42,652
But what about this?

197
00:09:42,652 --> 00:09:44,110
So here we've got
an image element.

198
00:09:44,110 --> 00:09:44,920
It's got a source.

199
00:09:44,920 --> 00:09:45,940
It's in the page.

200
00:09:45,940 --> 00:09:48,180
But I've spelled
image incorrectly.

201
00:09:48,180 --> 00:09:52,071
I've put it I-M-A-G-E
rather than I-M-G.

202
00:09:52,071 --> 00:09:54,070
Does the browser treat
it as an unknown element?

203
00:09:54,070 --> 00:09:55,572
Or does it make the request?

204
00:09:55,572 --> 00:09:57,280
The browser only has
to make the request.

205
00:09:57,280 --> 00:09:59,029
It doesn't have to
display it on the page,

206
00:09:59,029 --> 00:10:00,664
in case you think that matters.

207
00:10:00,664 --> 00:10:02,330
XML was too strict
to work with the web.

208
00:10:02,330 --> 00:10:03,960
But is HTML this lenient?

209
00:10:03,960 --> 00:10:06,040
Or are the browsers more
lenient than the spec?

210
00:10:06,040 --> 00:10:07,415
Just get your
answers in quickly.

211
00:10:07,415 --> 00:10:12,560
I'm going to close the
question in three, two, one.

212
00:10:12,560 --> 00:10:14,270
And it's closed.

213
00:10:14,270 --> 00:10:18,540
So we're edging towards
no in all of the browsers.

214
00:10:18,540 --> 00:10:21,350
All of the browsers will make
a request for this image.

215
00:10:21,350 --> 00:10:24,820
And they will display
it, because, in the past,

216
00:10:24,820 --> 00:10:28,530
a browser decides that IMG is
quite difficult for developers

217
00:10:28,530 --> 00:10:32,480
to remember so they should
support I-M-A-G-E as well.

218
00:10:32,480 --> 00:10:34,560
And we've been stuck
with it ever since.

219
00:10:34,560 --> 00:10:36,010
Which browser
engine do you think

220
00:10:36,010 --> 00:10:37,370
we've got to thank for this?

221
00:10:37,370 --> 00:10:37,900
Yep.

222
00:10:37,900 --> 00:10:38,930
You've guessed it.

223
00:10:38,930 --> 00:10:43,547
It is Mosaic back in 1993.

224
00:10:43,547 --> 00:10:45,130
The people who
invented the image tag,

225
00:10:45,130 --> 00:10:46,370
they put this alias in.

226
00:10:46,370 --> 00:10:49,650
And a study in 2005
showed that 0.2% of pages

227
00:10:49,650 --> 00:10:52,620
were using this
misspelled image tag.

228
00:10:52,620 --> 00:10:54,470
So any browser that
wants to work on the web

229
00:10:54,470 --> 00:10:57,420
that we have today has
to duplicate this alias.

230
00:10:57,420 --> 00:10:58,571
The WHATWG recognized that.

231
00:10:58,571 --> 00:10:59,820
And they added it to the spec.

232
00:10:59,820 --> 00:11:00,861
This is the parsing spec.

233
00:11:00,861 --> 00:11:04,110
It was start tag, name image,
change the token to IMG,

234
00:11:04,110 --> 00:11:05,030
and reprocess it.

235
00:11:05,030 --> 00:11:07,040
Don't ask, which was great.

236
00:11:07,040 --> 00:11:09,340
But this was actually used
in a clever hack recently.

237
00:11:09,340 --> 00:11:12,070
Alexi 10 came up with
this, which I really liked.

238
00:11:12,070 --> 00:11:14,780
You would use this in place
of your image elements.

239
00:11:14,780 --> 00:11:18,490
What it does is it loads an SVG
for browsers that support SVG.

240
00:11:18,490 --> 00:11:21,140
And it loads a PNG for
browsers that don't.

241
00:11:21,140 --> 00:11:23,650
So the way a modern browser
would parse it is it sees SVG.

242
00:11:23,650 --> 00:11:25,075
And it goes, OK,
it's got a width

243
00:11:25,075 --> 00:11:28,250
and height of 100%
of 100 pixels.

244
00:11:28,250 --> 00:11:29,420
And it sees this.

245
00:11:29,420 --> 00:11:32,010
And it sees this as
an SVG image element,

246
00:11:32,010 --> 00:11:34,450
because in SVG,
images are spelled out

247
00:11:34,450 --> 00:11:35,807
full rather than IMG.

248
00:11:35,807 --> 00:11:36,890
It's got width and height.

249
00:11:36,890 --> 00:11:38,556
And I'm going to load
this, because this

250
00:11:38,556 --> 00:11:41,670
is how you define the
source of an image in SVG.

251
00:11:41,670 --> 00:11:46,250
Because why have Links
when you could have XLinks?

252
00:11:46,250 --> 00:11:47,570
And then it sees this.

253
00:11:47,570 --> 00:11:49,670
And that doesn't mean
anything to SVG images.

254
00:11:49,670 --> 00:11:50,802
So it's ignored.

255
00:11:50,802 --> 00:11:52,260
So we're now showing
the SVG image.

256
00:11:52,260 --> 00:11:56,250
An older browser, such as
Android 2 or IE8 and below,

257
00:11:56,250 --> 00:11:58,210
they will parse it like this.

258
00:11:58,210 --> 00:11:59,162
No idea what that is.

259
00:11:59,162 --> 00:12:00,120
I'm going to ignore it.

260
00:12:00,120 --> 00:12:02,070
I'll treat it like
an unknown element.

261
00:12:02,070 --> 00:12:04,070
Oh, look, the developer
has spelled image wrong.

262
00:12:04,070 --> 00:12:04,620
It's OK.

263
00:12:04,620 --> 00:12:05,995
I'm going to
correct it for them.

264
00:12:05,995 --> 00:12:08,450
It's 100 by 100.

265
00:12:08,450 --> 00:12:10,290
No idea what that means.

266
00:12:10,290 --> 00:12:11,374
So I'll ignore that.

267
00:12:11,374 --> 00:12:13,290
And then, oh, there's
the source of the image.

268
00:12:13,290 --> 00:12:14,912
They're going to
download the PNG.

269
00:12:14,912 --> 00:12:17,370
So it's kind of nice because
it doesn't require JavaScript.

270
00:12:17,370 --> 00:12:19,389
And it's a nice way
to conditionally load

271
00:12:19,389 --> 00:12:21,180
the kind of file that
the browser supports.

272
00:12:21,180 --> 00:12:22,430
We got quite excited about it.

273
00:12:22,430 --> 00:12:24,270
And we were tweeting about it.

274
00:12:24,270 --> 00:12:26,730
The mistake we made
is we did not test it.

275
00:12:26,730 --> 00:12:28,030
So a few of us did just that.

276
00:12:28,030 --> 00:12:30,900
And we found out
something interesting.

277
00:12:30,900 --> 00:12:33,030
All of these
browsers support SVG.

278
00:12:33,030 --> 00:12:35,979
But which browsers will
download the PNG as well?

279
00:12:35,979 --> 00:12:37,020
And I'll give you a clue.

280
00:12:37,020 --> 00:12:37,940
It's not all of them.

281
00:12:37,940 --> 00:12:39,370
Not all of them get it wrong.

282
00:12:39,370 --> 00:12:41,760
It's just one or
some of the browsers

283
00:12:41,760 --> 00:12:44,380
that are going to
get this wrong.

284
00:12:44,380 --> 00:12:48,490
And they'll end up downloading
both, both the PNG and the SVG.

285
00:12:48,490 --> 00:12:53,741
I'm going to close the
question in three, two, one.

286
00:12:53,741 --> 00:12:54,240
OK.

287
00:12:54,240 --> 00:12:56,680
So we're saying no in all
the browsers and yes in IE.

288
00:12:56,680 --> 00:12:58,140
It's almost like
you've been burned

289
00:12:58,140 --> 00:12:59,930
by that browser in the past.

290
00:12:59,930 --> 00:13:03,280
Well, the answer
is, you are right.

291
00:13:03,280 --> 00:13:05,789
Internet Explorer will make a
request for two images here.

292
00:13:05,789 --> 00:13:07,330
And it's because
all modern browsers,

293
00:13:07,330 --> 00:13:08,730
they've got two parsers
built into them.

294
00:13:08,730 --> 00:13:10,604
It's a relatively new
thing for them to have.

295
00:13:10,604 --> 00:13:12,320
But they all have it.

296
00:13:12,320 --> 00:13:13,632
One parser runs ahead.

297
00:13:13,632 --> 00:13:15,340
And it goes, and it
tries and find things

298
00:13:15,340 --> 00:13:17,340
like it should download,
like scripts and images

299
00:13:17,340 --> 00:13:17,890
and whatever.

300
00:13:17,890 --> 00:13:20,390
And the other parser comes along
and does the heavy lifting,

301
00:13:20,390 --> 00:13:22,730
like building the DOM
tree, parsing scripts,

302
00:13:22,730 --> 00:13:24,380
et cetera, et cetera.

303
00:13:24,380 --> 00:13:25,915
And this has a
really large benefit.

304
00:13:25,915 --> 00:13:28,774
A study we did at Google,
we looked at 2,000 sites.

305
00:13:28,774 --> 00:13:29,940
And we added this preloader.

306
00:13:29,940 --> 00:13:31,840
And we got a 20%
speed improvement

307
00:13:31,840 --> 00:13:33,080
to get to DOM content loaded.

308
00:13:33,080 --> 00:13:34,940
So it's really useful.

309
00:13:34,940 --> 00:13:36,980
But in order to be
quick, this pre-parser

310
00:13:36,980 --> 00:13:37,975
is a little bit stupid.

311
00:13:37,975 --> 00:13:41,280
And in Internet Explorer, it's
a bit too stupid at the moment.

312
00:13:41,280 --> 00:13:42,800
It kind of gets over excited.

313
00:13:42,800 --> 00:13:44,920
It's like, oh, look, I'm
going to show this PNG.

314
00:13:44,920 --> 00:13:46,045
I'm going to show this PNG.

315
00:13:46,045 --> 00:13:46,560
Here I go.

316
00:13:46,560 --> 00:13:47,270
Showing the PNG.

317
00:13:47,270 --> 00:13:47,930
Oh, no.

318
00:13:47,930 --> 00:13:48,900
Actually, I won't.

319
00:13:48,900 --> 00:13:50,230
It's actually an SVG.

320
00:13:50,230 --> 00:13:51,770
I'll do that instead.

321
00:13:51,770 --> 00:13:53,634
So the main parser
sees the markup.

322
00:13:53,634 --> 00:13:54,550
And it sees the image.

323
00:13:54,550 --> 00:13:56,274
But it misses the SVG context.

324
00:13:56,274 --> 00:13:58,440
And then the main parser
comes along and goes, well,

325
00:13:58,440 --> 00:14:00,350
why am I downloading PNG?

326
00:14:00,350 --> 00:14:03,747
And it cancels that download
and goes for the SVG instead.

327
00:14:03,747 --> 00:14:05,580
But by that point, it's
made the connection.

328
00:14:05,580 --> 00:14:08,440
It's probably got all of
the image by that point.

329
00:14:08,440 --> 00:14:11,710
The moral here is don't
trust performance tips.

330
00:14:11,710 --> 00:14:13,120
Make sure you test things.

331
00:14:13,120 --> 00:14:16,140
At Chrome, we say, tools
not rules, which rhymes.

332
00:14:16,140 --> 00:14:17,720
So I guess it must be true.

333
00:14:17,720 --> 00:14:21,930
But always be on the lookout for
existing data or existing tests

334
00:14:21,930 --> 00:14:23,520
that you can run.

335
00:14:23,520 --> 00:14:26,037
One of my favorite stories
in science or a tale &mdash; I

336
00:14:26,037 --> 00:14:27,120
don't know how true it is.

337
00:14:27,120 --> 00:14:29,400
But it involves this
man, August Weismann.

338
00:14:29,400 --> 00:14:32,930
And he wanted to disprove
that life experience was

339
00:14:32,930 --> 00:14:35,010
part of evolution, like
something that happened

340
00:14:35,010 --> 00:14:37,504
to you during your life would
be passed down as evolution.

341
00:14:37,504 --> 00:14:39,420
So the way he was going
to disprove this is he

342
00:14:39,420 --> 00:14:40,250
took two mice.

343
00:14:40,250 --> 00:14:42,480
And he cut their tails off
and bred them together.

344
00:14:42,480 --> 00:14:44,021
And then he took
the offspring there.

345
00:14:44,021 --> 00:14:46,160
And he cut their tails off
and bred them together.

346
00:14:46,160 --> 00:14:48,300
And the idea was
we shouldn't end up

347
00:14:48,300 --> 00:14:50,122
with mice being born
without tails, right?

348
00:14:50,122 --> 00:14:52,080
And he was running this
test for quite a while,

349
00:14:52,080 --> 00:14:54,390
until one of his colleagues
pointed out, August,

350
00:14:54,390 --> 00:14:58,130
you do realize that Jewish
people have been inadvertently

351
00:14:58,130 --> 00:15:01,760
carrying out this experiment
a lot longer than you have.

352
00:15:01,760 --> 00:15:03,230
Oh, yeah.

353
00:15:03,230 --> 00:15:07,650
So he stopped his test and
just used that as evidence.

354
00:15:07,650 --> 00:15:08,660
So what about this?

355
00:15:08,660 --> 00:15:09,440
We've got a DIV.

356
00:15:09,440 --> 00:15:11,231
It's displaying none
as an image inside it.

357
00:15:11,231 --> 00:15:12,990
So the image won't be displayed.

358
00:15:12,990 --> 00:15:16,670
But which browsers are
going to download it anyway?

359
00:15:16,670 --> 00:15:19,890
So, yeah, it's not
going to render.

360
00:15:19,890 --> 00:15:22,735
So you could say it's a
waste of bytes to do so.

361
00:15:22,735 --> 00:15:25,360
Or maybe some browsers are going
to get it just in preparation,

362
00:15:25,360 --> 00:15:26,830
thinking it might be shown.

363
00:15:26,830 --> 00:15:31,470
I'm going to close the
question in three, two, one.

364
00:15:31,470 --> 00:15:33,540
So we're leaning towards
yes for every browser.

365
00:15:33,540 --> 00:15:36,123
We're quite certain it's going
to happen in Internet Explorer.

366
00:15:36,123 --> 00:15:36,770
The answer.

367
00:15:36,770 --> 00:15:38,019
Collectively, you are correct.

368
00:15:38,019 --> 00:15:39,400
Yes, all of the
browsers here are

369
00:15:39,400 --> 00:15:41,070
going to download that image.

370
00:15:41,070 --> 00:15:43,080
And this behavior
is part of the spec.

371
00:15:43,080 --> 00:15:45,730
So in the browser, in the
beginning, there is nothing.

372
00:15:45,730 --> 00:15:48,092
And then the browser gets
sprayed with HTML text.

373
00:15:48,092 --> 00:15:50,300
And it will convert that
text into a tree of elements

374
00:15:50,300 --> 00:15:53,270
that we know as the DOM.

375
00:15:53,270 --> 00:15:58,070
When this is HTML, when a tag
is turned into an element,

376
00:15:58,070 --> 00:16:00,150
the construction steps
for that element are run.

377
00:16:00,150 --> 00:16:03,497
And for image, it's really
complicated, actually,

378
00:16:03,497 --> 00:16:04,580
creating an image element.

379
00:16:04,580 --> 00:16:06,330
But step 14 down
here at the bottom

380
00:16:06,330 --> 00:16:09,580
is where it actually makes the
request and requests the image.

381
00:16:09,580 --> 00:16:11,080
So visibility doesn't
matter at all.

382
00:16:11,080 --> 00:16:12,080
It doesn't come into it.

383
00:16:12,080 --> 00:16:14,540
And that's good, because it
means that your images can

384
00:16:14,540 --> 00:16:16,440
download before your
CSS is downloaded,

385
00:16:16,440 --> 00:16:17,940
before your scripts
have downloaded.

386
00:16:17,940 --> 00:16:20,960
As a downside, it meant that
responsive images, polyfills,

387
00:16:20,960 --> 00:16:22,100
did not work.

388
00:16:22,100 --> 00:16:25,190
Because by the time your
JavaScript gets to the image,

389
00:16:25,190 --> 00:16:26,650
it's already
started the download

390
00:16:26,650 --> 00:16:27,960
of the thing that
was there already.

391
00:16:27,960 --> 00:16:29,709
You're just going to
add a second download

392
00:16:29,709 --> 00:16:31,430
by changing the source.

393
00:16:31,430 --> 00:16:34,170
This won't be a problem in the
future, the resource priority

394
00:16:34,170 --> 00:16:34,670
spec.

395
00:16:34,670 --> 00:16:37,040
We've specified the
postpone attribute,

396
00:16:37,040 --> 00:16:39,080
which tells an image
that it shouldn't display

397
00:16:39,080 --> 00:16:42,740
if it's displaying
among other things.

398
00:16:42,740 --> 00:16:45,240
But what if we are using CSS?

399
00:16:45,240 --> 00:16:45,980
What then?

400
00:16:45,980 --> 00:16:47,938
So here we've got a DIV
that's displaying none.

401
00:16:47,938 --> 00:16:50,460
And inside, there's a DIV
with a background image.

402
00:16:50,460 --> 00:16:52,110
So it's similar
to the image one.

403
00:16:52,110 --> 00:16:54,150
But we saw that images
are ignoring CSS.

404
00:16:54,150 --> 00:16:56,370
But here we're actually
in CSS land already.

405
00:16:56,370 --> 00:16:59,800
So are there any browsers that
are going to download that?

406
00:16:59,800 --> 00:17:01,300
Or are they just
going to ignore it?

407
00:17:01,300 --> 00:17:03,440
So once again, it's not
going to be displayed.

408
00:17:03,440 --> 00:17:06,339
So you could consider
it a waste of bytes.

409
00:17:06,339 --> 00:17:10,440
I'm going to close the
question in three, two, one.

410
00:17:10,440 --> 00:17:13,650
So we're edging towards
yes in every browser.

411
00:17:13,650 --> 00:17:14,359
I'm afraid not.

412
00:17:14,359 --> 00:17:16,109
No browsers are going
to download it here.

413
00:17:16,109 --> 00:17:16,900
Not at all.

414
00:17:16,900 --> 00:17:19,560
And I suppose you could
see that as a good thing.

415
00:17:19,560 --> 00:17:20,339
It's saving bytes.

416
00:17:20,339 --> 00:17:21,339
But what if we did this?

417
00:17:21,339 --> 00:17:22,760
Similar question.

418
00:17:22,760 --> 00:17:26,109
It's a DIV, displaying none,
and it has a background image.

419
00:17:26,109 --> 00:17:28,140
So the difference
in the last question

420
00:17:28,140 --> 00:17:30,000
is it's all on one element.

421
00:17:30,000 --> 00:17:33,130
The images isn't inside another
element that's displaying none.

422
00:17:33,130 --> 00:17:34,830
Does that change things?

423
00:17:34,830 --> 00:17:38,150
Once again, it's not going to
need that background image.

424
00:17:38,150 --> 00:17:42,186
I'm going to close the
question in three, two, one.

425
00:17:42,186 --> 00:17:44,060
So we're edging towards
yes in every browser,

426
00:17:44,060 --> 00:17:47,210
a little bit more
confident in Chrome.

427
00:17:47,210 --> 00:17:48,830
Most browsers will.

428
00:17:48,830 --> 00:17:50,450
Firefox will not.

429
00:17:50,450 --> 00:17:52,824
So what's going on here?

430
00:17:52,824 --> 00:17:54,740
So once the browser has
this tree of elements,

431
00:17:54,740 --> 00:17:56,481
it needs to work out
what they look like

432
00:17:56,481 --> 00:17:57,730
and where they go on the page.

433
00:17:57,730 --> 00:17:59,897
And the first step of this
is a style calculation.

434
00:17:59,897 --> 00:18:01,230
So it calculates all the styles.

435
00:18:01,230 --> 00:18:02,920
It goes through the
CSS cascade, the style

436
00:18:02,920 --> 00:18:05,010
attributes, the font tags
if you're from the '90s,

437
00:18:05,010 --> 00:18:07,870
and works out what style
applies to each element.

438
00:18:07,870 --> 00:18:09,760
But not everything gets
its style calculated.

439
00:18:09,760 --> 00:18:12,950
So this DIV up at the top
turned out to be display none.

440
00:18:12,950 --> 00:18:13,950
The browser stops there.

441
00:18:13,950 --> 00:18:15,533
It doesn't calculate
for the children,

442
00:18:15,533 --> 00:18:17,612
because those elements
have no impact

443
00:18:17,612 --> 00:18:18,820
on the rendering of the page.

444
00:18:18,820 --> 00:18:19,936
So it shortcuts.

445
00:18:19,936 --> 00:18:21,810
So if these elements
have a background image,

446
00:18:21,810 --> 00:18:24,120
the browser just never
finds out about it.

447
00:18:24,120 --> 00:18:26,186
This DIV up at the top
here is displaying none.

448
00:18:26,186 --> 00:18:28,060
But it did have its
style calculated in order

449
00:18:28,060 --> 00:18:28,835
to find that out.

450
00:18:28,835 --> 00:18:31,460
And that's when the browser will
discover the background image.

451
00:18:31,460 --> 00:18:34,532
Firefox is a little bit smarter
here and avoids the download.

452
00:18:34,532 --> 00:18:36,740
But if you change that to
instead of displaying none,

453
00:18:36,740 --> 00:18:40,010
you use visibility
hidden or opacity zero,

454
00:18:40,010 --> 00:18:42,310
Firefox would download as well.

455
00:18:42,310 --> 00:18:45,290
Who's getting it right
according to the specification?

456
00:18:45,290 --> 00:18:46,100
Everyone is.

457
00:18:46,100 --> 00:18:48,180
The spec is really vague here.

458
00:18:48,180 --> 00:18:50,310
It says the browser
may optimize,

459
00:18:50,310 --> 00:18:51,860
even if the element
is just obscured.

460
00:18:51,860 --> 00:18:53,460
It's underneath another one.

461
00:18:53,460 --> 00:18:55,480
But no browsers are that smart.

462
00:18:55,480 --> 00:18:57,380
This kind of freedom
in specifications

463
00:18:57,380 --> 00:18:59,780
is good, because it
means the browser can

464
00:18:59,780 --> 00:19:02,400
do the right thing given the
device, the connectivity,

465
00:19:02,400 --> 00:19:05,540
maybe even the battery percent,
how much battery you've

466
00:19:05,540 --> 00:19:06,470
got left.

467
00:19:06,470 --> 00:19:09,020
But it's also scary, as it
means the browsers are doing

468
00:19:09,020 --> 00:19:10,814
different things, as
they try new stuff

469
00:19:10,814 --> 00:19:11,980
with that freedom they have.

470
00:19:11,980 --> 00:19:13,660
But I think that
kind of diversity

471
00:19:13,660 --> 00:19:15,460
is what makes the web great.

472
00:19:15,460 --> 00:19:18,990
It's not one company driving
forward with its own interests.

473
00:19:18,990 --> 00:19:21,010
It's lots of companies
driving forward

474
00:19:21,010 --> 00:19:22,430
in different directions.

475
00:19:22,430 --> 00:19:27,410
And we get this car crash
but with a happy ending.

476
00:19:27,410 --> 00:19:30,360
And that's the web
that we have today.

477
00:19:30,360 --> 00:19:33,357
If you want to avoid
downloading a CSS background,

478
00:19:33,357 --> 00:19:34,690
hiding the element isn't enough.

479
00:19:34,690 --> 00:19:36,398
You need to put it
inside an element that

480
00:19:36,398 --> 00:19:37,290
is displaying none.

481
00:19:37,290 --> 00:19:38,706
But when you do
this, you are just

482
00:19:38,706 --> 00:19:40,980
relying on what
browsers do today.

483
00:19:40,980 --> 00:19:42,240
It's not specified behavior.

484
00:19:42,240 --> 00:19:43,810
Browsers may change.

485
00:19:43,810 --> 00:19:46,280
The only sure-fire way is
make sure the browser doesn't

486
00:19:46,280 --> 00:19:48,690
find out about that
background image.

487
00:19:48,690 --> 00:19:50,922
Don't add the class name
that adds that background

488
00:19:50,922 --> 00:19:52,380
or don't add the
element to the DOM

489
00:19:52,380 --> 00:19:55,270
at all until you really need it.

490
00:19:55,270 --> 00:19:55,770
OK.

491
00:19:55,770 --> 00:19:57,534
Things have been
relatively easy so far

492
00:19:57,534 --> 00:19:59,200
because we weren't
involving JavaScript.

493
00:19:59,200 --> 00:20:01,154
So let's get
JavaScript involved.

494
00:20:01,154 --> 00:20:01,820
What about this?

495
00:20:01,820 --> 00:20:02,575
I'm creating an image.

496
00:20:02,575 --> 00:20:03,590
I'm giving it a source.

497
00:20:03,590 --> 00:20:05,290
I'm not putting it
in the document.

498
00:20:05,290 --> 00:20:07,070
And I'm spelling
image incorrectly,

499
00:20:07,070 --> 00:20:08,390
like we did before.

500
00:20:08,390 --> 00:20:13,980
So we saw in HTML that it
was also correcting I-M-A-G-E

501
00:20:13,980 --> 00:20:17,265
to I-M-G. But does it
do the same in the DOM?

502
00:20:17,265 --> 00:20:19,640
Do images even download when
they're not in the document?

503
00:20:19,640 --> 00:20:21,980
Because once again,
the browser doesn't

504
00:20:21,980 --> 00:20:23,375
need to render this yet.

505
00:20:23,375 --> 00:20:24,885
Or it can't render this yet.

506
00:20:24,885 --> 00:20:29,000
I'm going to close the
question in three, two, one.

507
00:20:29,000 --> 00:20:32,030
So this is the point in the
quiz where the audience just

508
00:20:32,030 --> 00:20:32,890
gets broken.

509
00:20:32,890 --> 00:20:35,380
And the needles just drift
towards the center of I

510
00:20:35,380 --> 00:20:37,600
don't know what's going on.

511
00:20:37,600 --> 00:20:41,060
In this case, most
browsers will download.

512
00:20:41,060 --> 00:20:42,570
Firefox won't.

513
00:20:42,570 --> 00:20:45,370
And there are two parts
of this explanation.

514
00:20:45,370 --> 00:20:48,180
As we saw before,
the DOM gets parsed.

515
00:20:48,180 --> 00:20:50,252
And the creation steps
of the elements are run.

516
00:20:50,252 --> 00:20:51,710
This animation took
me a long time,

517
00:20:51,710 --> 00:20:53,710
which is why you've seen
it three times already.

518
00:20:53,710 --> 00:20:54,870
But that is the last time.

519
00:20:54,870 --> 00:20:57,799
But when an element is
created using DOM stuff,

520
00:20:57,799 --> 00:20:59,590
it's still going to
run the creation steps.

521
00:20:59,590 --> 00:21:01,440
And we saw for
images, at step 14,

522
00:21:01,440 --> 00:21:03,655
that is going to be when
it downloads the image.

523
00:21:03,655 --> 00:21:05,030
We can use this
to our advantage,

524
00:21:05,030 --> 00:21:08,800
because this one line, you can
make a GET request to anything

525
00:21:08,800 --> 00:21:10,400
that the machine can access.

526
00:21:10,400 --> 00:21:14,300
And in fact, images have
their own DOM constructor,

527
00:21:14,300 --> 00:21:15,840
unlike a lot of other elements.

528
00:21:15,840 --> 00:21:17,839
So that tiny bit of
code, instant GET

529
00:21:17,839 --> 00:21:18,880
request to anywhere else.

530
00:21:18,880 --> 00:21:21,171
And this is pretty much how
Google Analytics talks back

531
00:21:21,171 --> 00:21:22,000
to the server.

532
00:21:22,000 --> 00:21:24,750
But we saw before that Firefox
didn't make the request.

533
00:21:24,750 --> 00:21:26,840
So what's going on there?

534
00:21:26,840 --> 00:21:30,250
When we create this, most
browsers &mdash; Chrome, Safari, IE &mdash;

535
00:21:30,250 --> 00:21:32,730
will give us an HTML
image element back.

536
00:21:32,730 --> 00:21:35,120
Whereas Firefox will
give us an HTML element.

537
00:21:35,120 --> 00:21:36,000
It's not an image.

538
00:21:36,000 --> 00:21:39,260
If you add it to the page,
it won't display an image.

539
00:21:39,260 --> 00:21:41,470
And the interesting
thing is here,

540
00:21:41,470 --> 00:21:43,920
it's the only one
getting it right.

541
00:21:43,920 --> 00:21:46,225
We saw before this is
how the browser that

542
00:21:46,225 --> 00:21:48,840
had the spec deals with images
that are spelled incorrectly.

543
00:21:48,840 --> 00:21:51,030
But this is in the parsing spec.

544
00:21:51,030 --> 00:21:54,250
And we bypassed parsing
by using create element.

545
00:21:54,250 --> 00:21:57,850
We're completely
bypassing the parser.

546
00:21:57,850 --> 00:22:00,260
Well, Firefox gives
us an HTML element.

547
00:22:00,260 --> 00:22:02,360
It should give us an
HTML unknown element,

548
00:22:02,360 --> 00:22:04,660
which it does if you
do create on Fubar.

549
00:22:04,660 --> 00:22:07,080
So Firefox is doing something
special for these images.

550
00:22:07,080 --> 00:22:09,770
But it's getting it more
right than other browsers.

551
00:22:09,770 --> 00:22:13,284
I think I preferred it when we
were developing for browsers.

552
00:22:13,284 --> 00:22:14,700
It was like there
was one bad guy.

553
00:22:14,700 --> 00:22:17,000
And it was Internet
Explorer 6 or 7 or 8.

554
00:22:17,000 --> 00:22:19,830
And all the other browsers
seemed perfect in comparison.

555
00:22:19,830 --> 00:22:23,490
But I see the browser scape as
being like an orchestra, where

556
00:22:23,490 --> 00:22:25,060
Internet Explorer
8 was just this kid

557
00:22:25,060 --> 00:22:27,300
hitting two cymbals
together and screaming.

558
00:22:27,300 --> 00:22:29,840
But once we finally kick
the screaming child out

559
00:22:29,840 --> 00:22:32,340
of the room, and we come back
and we start conducting again,

560
00:22:32,340 --> 00:22:34,400
we realize, oh,
everyone's actually

561
00:22:34,400 --> 00:22:35,680
a little bit out of tune.

562
00:22:35,680 --> 00:22:38,560
We just didn't realize because
of the screaming cymbal child

563
00:22:38,560 --> 00:22:40,230
of Internet Explorer.

564
00:22:40,230 --> 00:22:44,704
So let's get CSS involved
again but JavaScript as well.

565
00:22:44,704 --> 00:22:45,370
What about this?

566
00:22:45,370 --> 00:22:46,100
So I'm creating a DIV.

567
00:22:46,100 --> 00:22:47,120
Giving it a background.

568
00:22:47,120 --> 00:22:48,560
It's not in the document.

569
00:22:48,560 --> 00:22:51,010
But everything's
spelled right and valid.

570
00:22:51,010 --> 00:22:53,120
We saw images download
at this point.

571
00:22:53,120 --> 00:22:55,410
But what about when
CSS is involved?

572
00:22:55,410 --> 00:22:57,340
Are we going to see
things download there?

573
00:22:57,340 --> 00:22:58,790
Get your answers in quickly.

574
00:22:58,790 --> 00:23:04,080
I'm going to close the
question in three, two, one.

575
00:23:04,080 --> 00:23:07,020
So once again, the needles
drift into the middle.

576
00:23:07,020 --> 00:23:08,690
The answer here is no.

577
00:23:08,690 --> 00:23:10,910
No browsers will download here.

578
00:23:10,910 --> 00:23:13,040
This is the same as
the display none case.

579
00:23:13,040 --> 00:23:15,300
The browser won't
calculate the style

580
00:23:15,300 --> 00:23:16,650
of elements that display none.

581
00:23:16,650 --> 00:23:18,120
And it also won't
calculate the styles

582
00:23:18,120 --> 00:23:19,750
of elements that aren't in
the document, because there's

583
00:23:19,750 --> 00:23:20,590
no point.

584
00:23:20,590 --> 00:23:22,970
It doesn't affect the
rendering of the page at all.

585
00:23:22,970 --> 00:23:23,470
OK.

586
00:23:23,470 --> 00:23:25,020
I'm going to be cruel now.

587
00:23:25,020 --> 00:23:26,520
What about this?

588
00:23:26,520 --> 00:23:27,790
So same again.

589
00:23:27,790 --> 00:23:29,280
I'm adding it to the document.

590
00:23:29,280 --> 00:23:31,160
Then I'm removing it again.

591
00:23:31,160 --> 00:23:33,890
Is it in the document long
enough for the browser

592
00:23:33,890 --> 00:23:36,710
to go, oh, I should download
this background image?

593
00:23:36,710 --> 00:23:38,790
Or does it not get to
see it long enough?

594
00:23:38,790 --> 00:23:41,610
Does it not bother?

595
00:23:41,610 --> 00:23:47,091
I'm going to close the
question in three, two, one.

596
00:23:47,091 --> 00:23:47,590
OK.

597
00:23:47,590 --> 00:23:49,256
So we're suggesting
yes, because yes, it

598
00:23:49,256 --> 00:23:51,180
has entered the document.

599
00:23:51,180 --> 00:23:53,290
I'm afraid you are all
wrong with that one, all

600
00:23:53,290 --> 00:23:54,497
the people who said that.

601
00:23:54,497 --> 00:23:56,830
The browser doesn't want to
think about styles or layout

602
00:23:56,830 --> 00:23:58,532
until the very last moment.

603
00:23:58,532 --> 00:24:00,490
And that's normally
rendering, when it actually

604
00:24:00,490 --> 00:24:02,250
needs to change
pixels on the screen.

605
00:24:02,250 --> 00:24:03,800
And we can't do
that or we don't do

606
00:24:03,800 --> 00:24:06,130
that while we're in the
middle of JavaScript.

607
00:24:06,130 --> 00:24:07,700
So the browser
actually sits back

608
00:24:07,700 --> 00:24:09,730
and waits for that
JavaScript block to execute.

609
00:24:09,730 --> 00:24:12,146
And then afterwards, it will
go and look at what's changed

610
00:24:12,146 --> 00:24:15,150
and react to that when
it needs to render next.

611
00:24:15,150 --> 00:24:17,340
But does this change that?

612
00:24:17,340 --> 00:24:18,150
So same code again.

613
00:24:18,150 --> 00:24:20,160
But in between adding and
removing it to the document,

614
00:24:20,160 --> 00:24:22,290
I'm going to ask for the
text content of the element.

615
00:24:22,290 --> 00:24:24,456
Now, the text content is
going to be an empty string

616
00:24:24,456 --> 00:24:26,290
because it is an empty element.

617
00:24:26,290 --> 00:24:28,160
But is just accessing
that property

618
00:24:28,160 --> 00:24:29,230
going to change things?

619
00:24:29,230 --> 00:24:31,740
I'm not even assigning
it to a variable.

620
00:24:31,740 --> 00:24:34,760
So is it just even going to be
optimized away by JavaScript

621
00:24:34,760 --> 00:24:36,450
because it has no impact?

622
00:24:36,450 --> 00:24:40,787
I'm going to close the
question in three, two, one.

623
00:24:40,787 --> 00:24:41,870
Almost dead in the middle.

624
00:24:41,870 --> 00:24:42,710
Excellent.

625
00:24:42,710 --> 00:24:43,965
The answer is no.

626
00:24:43,965 --> 00:24:45,876
No browsers will make a request.

627
00:24:45,876 --> 00:24:47,250
Getting the text
content is easy.

628
00:24:47,250 --> 00:24:49,708
It's just going to go through
the DOM, find the text nodes,

629
00:24:49,708 --> 00:24:52,000
and catenate the
values together.

630
00:24:52,000 --> 00:24:52,880
What about this?

631
00:24:52,880 --> 00:24:53,620
Similar question.

632
00:24:53,620 --> 00:24:55,930
But this time, enter HTML
rather than text content.

633
00:24:55,930 --> 00:24:58,810
Once again, it's going to be
an empty string that comes back

634
00:24:58,810 --> 00:25:00,920
there, because the
element is empty.

635
00:25:00,920 --> 00:25:04,519
But does it behave
differently to text content?

636
00:25:04,519 --> 00:25:06,560
Are the browsers going to
do something different?

637
00:25:06,560 --> 00:25:11,280
I'm going to close the
question in three, two, one.

638
00:25:11,280 --> 00:25:14,920
So we're saying no here.

639
00:25:14,920 --> 00:25:16,000
You're mostly right.

640
00:25:16,000 --> 00:25:18,870
Internet Explorer will
make a download here.

641
00:25:18,870 --> 00:25:23,740
And the reason for that is
because in Internet Explorer &mdash;

642
00:25:23,740 --> 00:25:24,460
I don't know.

643
00:25:24,460 --> 00:25:26,480
I have absolutely no idea.

644
00:25:26,480 --> 00:25:29,120
Some things in the world
cannot be explained.

645
00:25:29,120 --> 00:25:31,810
And this is one of them, like
how it takes three attempts

646
00:25:31,810 --> 00:25:34,110
to plug in a USB cable, even
though there are only two

647
00:25:34,110 --> 00:25:35,190
possibilities.

648
00:25:35,190 --> 00:25:38,820
Some things cannot be explained.

649
00:25:38,820 --> 00:25:39,420
OK.

650
00:25:39,420 --> 00:25:42,860
So on the same theme again
but this time in a text.

651
00:25:42,860 --> 00:25:44,610
Once again, like
the other two, this

652
00:25:44,610 --> 00:25:46,200
is going to come back as an
empty string, because it's

653
00:25:46,200 --> 00:25:47,150
an empty element.

654
00:25:47,150 --> 00:25:48,817
But is that going to
behave differently?

655
00:25:48,817 --> 00:25:51,483
Is Internet Explorer still going
to make the request erroneously

656
00:25:51,483 --> 00:25:52,280
like it did before?

657
00:25:52,280 --> 00:25:54,480
Is it going to get
it correct this time?

658
00:25:54,480 --> 00:25:55,100
Who knows.

659
00:25:55,100 --> 00:26:00,240
I'm going to close the
question in three, two, one.

660
00:26:00,240 --> 00:26:01,530
So we're edging towards no.

661
00:26:01,530 --> 00:26:03,620
A little bit less sure
on Internet Explorer.

662
00:26:03,620 --> 00:26:05,740
The answer &mdash; yes.

663
00:26:05,740 --> 00:26:07,640
Most browsers will
make a request here.

664
00:26:07,640 --> 00:26:11,630
And this actually makes
sense in an odd way.

665
00:26:11,630 --> 00:26:12,610
Let's make a DIV.

666
00:26:12,610 --> 00:26:13,800
It's got a background image.

667
00:26:13,800 --> 00:26:15,589
And it's got some inner HTMLs.

668
00:26:15,589 --> 00:26:16,880
It's got Hello World inside it.

669
00:26:16,880 --> 00:26:18,860
But World is inside
a DIV of its own.

670
00:26:18,860 --> 00:26:20,040
We add it to the document.

671
00:26:20,040 --> 00:26:21,206
We ask for its text content.

672
00:26:21,206 --> 00:26:22,160
It's Hello World.

673
00:26:22,160 --> 00:26:26,087
But when we ask for the inner
text in IE, Safari, and Chrome,

674
00:26:26,087 --> 00:26:27,170
it's going to return this.

675
00:26:27,170 --> 00:26:28,790
It's got a line
break in the middle.

676
00:26:28,790 --> 00:26:32,125
And the reason for this is inner
text isn't just a text content.

677
00:26:32,125 --> 00:26:33,500
It's more like
what you would get

678
00:26:33,500 --> 00:26:36,800
if you highlighted the
element and copied it.

679
00:26:36,800 --> 00:26:39,460
And because of this, it's
got style information,

680
00:26:39,460 --> 00:26:41,180
because the world is
on a different line,

681
00:26:41,180 --> 00:26:42,730
because the DIV is block level.

682
00:26:42,730 --> 00:26:43,720
Or it is by default.

683
00:26:43,720 --> 00:26:45,020
And it is in this case.

684
00:26:45,020 --> 00:26:48,150
So what actually happens
here is the browser,

685
00:26:48,150 --> 00:26:49,400
we asked for the text content.

686
00:26:49,400 --> 00:26:50,750
It just gets that back.

687
00:26:50,750 --> 00:26:53,210
But when you ask for the inner
text, the browser has to go,

688
00:26:53,210 --> 00:26:55,870
ah, I need to know what
the layout of this element

689
00:26:55,870 --> 00:26:57,584
is in order to return this.

690
00:26:57,584 --> 00:26:59,500
I need to find out if
that DIV is block level.

691
00:26:59,500 --> 00:27:01,160
Where am I going to
put my line breaks?

692
00:27:01,160 --> 00:27:01,276
Oh, look.

693
00:27:01,276 --> 00:27:02,840
There's a background
image there.

694
00:27:02,840 --> 00:27:04,480
And it downloads it,
because it forces

695
00:27:04,480 --> 00:27:06,220
it to look at the styles.

696
00:27:06,220 --> 00:27:07,730
Most of the time,
the browser will

697
00:27:07,730 --> 00:27:09,764
defer looking at styles
as late as it can.

698
00:27:09,764 --> 00:27:11,930
But here we forced it to
happen sooner because we've

699
00:27:11,930 --> 00:27:14,620
asked for something
that's style dependent.

700
00:27:14,620 --> 00:27:17,630
Firefox didn't make
a request because it

701
00:27:17,630 --> 00:27:18,850
doesn't support inner text.

702
00:27:18,850 --> 00:27:20,510
It doesn't support
the property at all.

703
00:27:20,510 --> 00:27:22,120
So that's just undefined.

704
00:27:22,120 --> 00:27:23,430
That was quite cruel.

705
00:27:23,430 --> 00:27:26,230
But if we used any
of these properties,

706
00:27:26,230 --> 00:27:31,100
like offset left,
offset parent, Firefox

707
00:27:31,100 --> 00:27:34,570
would have made the
request as well.

708
00:27:34,570 --> 00:27:37,860
So with ignorance of
those elements that

709
00:27:37,860 --> 00:27:40,650
will require style
information, that's

710
00:27:40,650 --> 00:27:43,120
one of the number one
problems with performance

711
00:27:43,120 --> 00:27:44,250
that we see on the web.

712
00:27:44,250 --> 00:27:46,430
But also, you can do some
nice hackery with it.

713
00:27:46,430 --> 00:27:49,200
If you look at code like this,
it looks really expensive.

714
00:27:49,200 --> 00:27:49,764
But it's not.

715
00:27:49,764 --> 00:27:51,680
It's really cheap, because
the browser is just

716
00:27:51,680 --> 00:27:53,513
going to sit back and
watch you just writing

717
00:27:53,513 --> 00:27:55,940
this property to an object.

718
00:27:55,940 --> 00:27:59,930
And it's not going to care
about it until that block ends.

719
00:27:59,930 --> 00:28:04,190
And once that's all done, it
will just look at the results.

720
00:28:04,190 --> 00:28:07,310
And in this case, there's
no pixel difference.

721
00:28:07,310 --> 00:28:10,520
This can lead to some
unexpected results, not just

722
00:28:10,520 --> 00:28:12,370
graphical performance.

723
00:28:12,370 --> 00:28:16,460
So let's have a look
at a practical example.

724
00:28:16,460 --> 00:28:17,800
Here is Paul Lewis and me.

725
00:28:17,800 --> 00:28:18,940
We work together.

726
00:28:18,940 --> 00:28:20,056
We want to go over there.

727
00:28:20,056 --> 00:28:21,555
You can tell because
we're pointing.

728
00:28:21,555 --> 00:28:23,850
But let's do it with code.

729
00:28:23,850 --> 00:28:25,410
We're going to say left 0%.

730
00:28:25,410 --> 00:28:27,610
We're going to set a
transition, and then left 100%.

731
00:28:27,610 --> 00:28:30,141
If we run that code, off we go.

732
00:28:30,141 --> 00:28:30,640
Excellent.

733
00:28:30,640 --> 00:28:32,080
We win at code.

734
00:28:32,080 --> 00:28:36,036
But if we run that code
again, nothing happens.

735
00:28:36,036 --> 00:28:37,410
And the reason
nothing happens is

736
00:28:37,410 --> 00:28:39,618
the browser is going to
batch up these style changes.

737
00:28:39,618 --> 00:28:41,940
So we're saying left twice.

738
00:28:41,940 --> 00:28:44,680
But the browser is only going
to listen to the last one.

739
00:28:44,680 --> 00:28:47,400
And we're essentially
saying, transition to 100%.

740
00:28:47,400 --> 00:28:48,910
But we're already at 100%.

741
00:28:48,910 --> 00:28:50,322
So it doesn't move.

742
00:28:50,322 --> 00:28:52,030
You might have
encountered this and tried

743
00:28:52,030 --> 00:28:55,040
to fix it with set timeouts and
an arbitrary number in that.

744
00:28:55,040 --> 00:28:57,180
But what you actually want
to do is at this point,

745
00:28:57,180 --> 00:28:58,710
just after we set
the first left,

746
00:28:58,710 --> 00:29:01,260
you want the browser
to look at that style

747
00:29:01,260 --> 00:29:02,450
and actually think about it.

748
00:29:02,450 --> 00:29:05,033
And we can actually do that by
putting one of those properties

749
00:29:05,033 --> 00:29:06,740
in of set width or whatever.

750
00:29:06,740 --> 00:29:09,330
And once we do that, we can
run that code as many times

751
00:29:09,330 --> 00:29:09,830
as we want.

752
00:29:09,830 --> 00:29:11,710
And it will work every time.

753
00:29:11,710 --> 00:29:13,540
But you are relying on
unspecified behavior

754
00:29:13,540 --> 00:29:14,460
when you do that.

755
00:29:14,460 --> 00:29:17,620
The web animation's
API will save us there.

756
00:29:17,620 --> 00:29:19,250
And just before I
get kicked off stage,

757
00:29:19,250 --> 00:29:22,490
I want to go through
the bad side of that.

758
00:29:22,490 --> 00:29:24,710
Normally, using things
like offset width

759
00:29:24,710 --> 00:29:27,320
in the middle of your code can
lead to performance difficulty.

760
00:29:27,320 --> 00:29:28,570
And here's an example of that.

761
00:29:28,570 --> 00:29:30,831
So here I've got a page
with a load of paragraphs.

762
00:29:30,831 --> 00:29:32,372
And what I'm going
to do is I'm going

763
00:29:32,372 --> 00:29:33,980
to set Chrome's timeline
recording, which

764
00:29:33,980 --> 00:29:35,420
is going to record
everything that's going on,

765
00:29:35,420 --> 00:29:37,730
resize the screen box, and
I'm going to hit that button.

766
00:29:37,730 --> 00:29:39,688
When I hit that button,
all of these paragraphs

767
00:29:39,688 --> 00:29:42,070
are going to become the
same size as the green box.

768
00:29:42,070 --> 00:29:42,820
So we do that.

769
00:29:42,820 --> 00:29:44,900
Press the button.

770
00:29:44,900 --> 00:29:45,850
And they all change.

771
00:29:45,850 --> 00:29:46,850
And that was quite slow.

772
00:29:46,850 --> 00:29:49,600
We can see in the timeline,
there's a little spike there.

773
00:29:49,600 --> 00:29:52,650
And if we have a look at the
number that comes up there,

774
00:29:52,650 --> 00:29:55,340
it's like 1.27 seconds.

775
00:29:55,340 --> 00:29:56,670
It's very slow.

776
00:29:56,670 --> 00:29:58,870
But there's this little
warning icon on there.

777
00:29:58,870 --> 00:30:01,459
And if we look into that, we
get a clue of what's going on.

778
00:30:01,459 --> 00:30:03,750
We get this Recalculate Style
Layout, Recalculate Style

779
00:30:03,750 --> 00:30:05,700
Layout, happening
over and over again.

780
00:30:05,700 --> 00:30:07,740
And that's not looking great.

781
00:30:07,740 --> 00:30:09,370
The code we're using
is really simple.

782
00:30:09,370 --> 00:30:11,203
We just loop through
all of those paragraphs

783
00:30:11,203 --> 00:30:14,257
and set the offset width of the
green block to the paragraph.

784
00:30:14,257 --> 00:30:16,090
Now, the first time we
go through this loop,

785
00:30:16,090 --> 00:30:18,680
we ask the browser, what is
the size of the green box?

786
00:30:18,680 --> 00:30:21,380
And it goes, oh,
I know that answer

787
00:30:21,380 --> 00:30:22,549
because I've just drawn it.

788
00:30:22,549 --> 00:30:23,340
Here's your answer.

789
00:30:23,340 --> 00:30:24,609
Easy peasy.

790
00:30:24,609 --> 00:30:26,400
And then we set the
width of the paragraph.

791
00:30:26,400 --> 00:30:27,980
But the next time we
come around the loop,

792
00:30:27,980 --> 00:30:30,229
we ask the browser, what's
the width of the green box?

793
00:30:30,229 --> 00:30:33,670
And it's like, I used to know
the answer to that question.

794
00:30:33,670 --> 00:30:35,510
But since then, you've
been playing around

795
00:30:35,510 --> 00:30:36,830
with styles on the page.

796
00:30:36,830 --> 00:30:39,850
So I need to go away and have a
think about what you've changed

797
00:30:39,850 --> 00:30:43,110
and see if it affects the
width of the green block.

798
00:30:43,110 --> 00:30:44,900
And that's going to
happen on every loop.

799
00:30:44,900 --> 00:30:46,250
This is layout frashing.

800
00:30:46,250 --> 00:30:48,420
This is interleaving
style reads and writes.

801
00:30:48,420 --> 00:30:50,000
And it's a performance killer.

802
00:30:50,000 --> 00:30:52,670
What we actually want to
do is just cache that,

803
00:30:52,670 --> 00:30:55,562
do the reads first outside the
loop, get the green box width,

804
00:30:55,562 --> 00:30:56,770
and then go through the loop.

805
00:30:56,770 --> 00:30:58,630
And the difference is
absolutely astounding.

806
00:30:58,630 --> 00:31:00,990
So recording that, changing
the width of the green box,

807
00:31:00,990 --> 00:31:01,580
click the button.

808
00:31:01,580 --> 00:31:02,663
It just happens instantly.

809
00:31:02,663 --> 00:31:04,130
And it's a massive difference.

810
00:31:04,130 --> 00:31:06,330
That was like 60 milliseconds
all in for everything

811
00:31:06,330 --> 00:31:09,050
versus over a second.

812
00:31:09,050 --> 00:31:12,290
So if you need to read something
that's style dependent,

813
00:31:12,290 --> 00:31:14,840
do it before you start
making style changes.

814
00:31:14,840 --> 00:31:16,220
Am I out of time?

815
00:31:16,220 --> 00:31:17,340
Am I done?

816
00:31:17,340 --> 00:31:17,840
OK.

817
00:31:17,840 --> 00:31:21,600
But before we do that, we'll
have a look at the final scores

818
00:31:21,600 --> 00:31:24,672
and see who managed to
win the Chromecast if I

819
00:31:24,672 --> 00:31:27,590
can get the mouse
pointer over here.

820
00:31:27,590 --> 00:31:30,180
Right.

821
00:31:30,180 --> 00:31:32,830
A moment of tension.

822
00:31:32,830 --> 00:31:34,200
Where's my mouse pointer?

823
00:31:34,200 --> 00:31:35,200
Let's see if this works.

824
00:31:35,200 --> 00:31:40,270

825
00:31:40,270 --> 00:31:41,665
OK.

826
00:31:41,665 --> 00:31:42,840
Oh, we've got a draw.

827
00:31:42,840 --> 00:31:45,450

828
00:31:45,450 --> 00:31:47,452
We've got one Chromecast.

829
00:31:47,452 --> 00:31:48,410
We can get another one.

830
00:31:48,410 --> 00:31:48,940
That's excellent.

831
00:31:48,940 --> 00:31:49,939
I do have a bonus round.

832
00:31:49,939 --> 00:31:51,470
But we're definitely
out of time.

833
00:31:51,470 --> 00:31:54,100
Where are you two people?

834
00:31:54,100 --> 00:31:56,220
Where are you?

835
00:31:56,220 --> 00:31:58,710
Oh, one here.

836
00:31:58,710 --> 00:31:59,314
And there.

837
00:31:59,314 --> 00:32:00,230
Congratulations, guys.

838
00:32:00,230 --> 00:32:02,063
A round of applause for
these guys actually.

839
00:32:02,063 --> 00:32:06,083
[APPLAUSE]

840
00:32:06,083 --> 00:32:09,000
JAKE ARCHIBALD: And with that,
I say, thank you very much.

841
00:32:09,000 --> 00:32:10,220
And I'm going to make
way for someone else.

842
00:32:10,220 --> 00:32:11,303
Thank you very much, guys.

843
00:32:11,303 --> 00:32:13,106
Cheers.

844
00:32:13,106 --> 00:32:17,524
[APPLAUSE]

845
00:32:17,524 --> 00:32:18,315
PETE: Thanks, Jake.

846
00:32:18,315 --> 00:32:18,939
That was great.

847
00:32:18,939 --> 00:32:24,080

848
00:32:24,080 --> 00:32:24,580
All right.

849
00:32:24,580 --> 00:32:26,961
And our next speaker is the
"New York Times'" own Eitan

850
00:32:26,961 --> 00:32:27,460
Konigsburg.

851
00:32:27,460 --> 00:32:28,599
He's a front-end architect.

852
00:32:28,599 --> 00:32:30,515
And he's going to be
talking about the history

853
00:32:30,515 --> 00:32:31,681
of performance at the Times.

854
00:32:31,681 --> 00:32:44,250

855
00:32:44,250 --> 00:32:45,270
Looks good.

856
00:32:45,270 --> 00:32:45,770
OK.

857
00:32:45,770 --> 00:32:59,910

858
00:32:59,910 --> 00:33:01,040
EITAN KONIGSBURG: Hello?

859
00:33:01,040 --> 00:33:02,150
Hey.

860
00:33:02,150 --> 00:33:03,730
So hi, everybody.

861
00:33:03,730 --> 00:33:05,265
My name's Eitan Konigsburg.

862
00:33:05,265 --> 00:33:06,930
I'm a front-end
software architect here

863
00:33:06,930 --> 00:33:08,430
at the "New York Times."

864
00:33:08,430 --> 00:33:11,920
Today, I'm going to be talking
about the very real history

865
00:33:11,920 --> 00:33:15,897
of our web performance efforts
here at the "New York Times."

866
00:33:15,897 --> 00:33:17,730
Before I dive in, I
wanted to share with you

867
00:33:17,730 --> 00:33:19,410
this tweet by Steve
Souders himself.

868
00:33:19,410 --> 00:33:21,160
If you're not familiar
with Steve Souders,

869
00:33:21,160 --> 00:33:22,618
it's the place to
start when you're

870
00:33:22,618 --> 00:33:24,030
talking about web performance.

871
00:33:24,030 --> 00:33:26,100
He tweeted, "is
performance of "the Web"

872
00:33:26,100 --> 00:33:27,730
getting better or worse?

873
00:33:27,730 --> 00:33:30,630
My past week was painfully
slow, marred by top sites w/ bad

874
00:33:30,630 --> 00:33:31,460
#WebPerf.

875
00:33:31,460 --> 00:33:33,190
Is it too hard?"

876
00:33:33,190 --> 00:33:35,710
I don't know if the "New York
Times" was among these sites

877
00:33:35,710 --> 00:33:37,390
that Steve was
having trouble with.

878
00:33:37,390 --> 00:33:39,220
We've known that we've had a
little bit of a performance

879
00:33:39,220 --> 00:33:39,960
problem.

880
00:33:39,960 --> 00:33:42,110
I like to think that
he's checking our site.

881
00:33:42,110 --> 00:33:45,120
And he's actually complaining
for real that our site is slow,

882
00:33:45,120 --> 00:33:46,760
so that we make it fast for him.

883
00:33:46,760 --> 00:33:48,510
But I'm going to get
back to this question

884
00:33:48,510 --> 00:33:50,870
about whether it's too hard.

885
00:33:50,870 --> 00:33:53,304
So while I was
preparing for this talk,

886
00:33:53,304 --> 00:33:55,220
I was thinking that this
is a very real story.

887
00:33:55,220 --> 00:33:58,360
And it reminded me of a
Geico ad from about 2006

888
00:33:58,360 --> 00:34:00,080
that I just wanted
to share with you.

889
00:34:00,080 --> 00:34:04,064
So just give me one sec to play.

890
00:34:04,064 --> 00:34:05,010
[VIDEO PLAYBACK]

891
00:34:05,010 --> 00:34:07,880
-Paula Sala is a real Geico
customer, not an actor.

892
00:34:07,880 --> 00:34:10,260
So to help tell her story,
we hired that announcer guy

893
00:34:10,260 --> 00:34:11,760
from the movies.

894
00:34:11,760 --> 00:34:15,350
-When the storm hit, both our
cars were totally under water.

895
00:34:15,350 --> 00:34:19,370
-In a world where both of our
cars were totally under water.

896
00:34:19,370 --> 00:34:21,880
-We thought it would take
forever to get some help.

897
00:34:21,880 --> 00:34:25,290
-But a new wind
was about to blow.

898
00:34:25,290 --> 00:34:27,980
-With Geico, we had
our check in two days.

899
00:34:27,980 --> 00:34:31,910
-Payback &mdash; this
time it's for real.

900
00:34:31,910 --> 00:34:32,409
-Geico.

901
00:34:32,409 --> 00:34:33,920
Real service, real savings.

902
00:34:33,920 --> 00:34:34,184
[END VIDEO PLAYBACK]

903
00:34:34,184 --> 00:34:36,642
EITAN KONIGSBURG: So I thought
about doing this entire talk

904
00:34:36,642 --> 00:34:38,110
in movie announcer voice.

905
00:34:38,110 --> 00:34:40,860
I didn't think I'd be able to
keep it up all the way through.

906
00:34:40,860 --> 00:34:42,420
Colt is actually
the expert at that.

907
00:34:42,420 --> 00:34:45,389
So you should check out
his talk on National Talk

908
00:34:45,389 --> 00:34:46,630
Like a Pirate Day.

909
00:34:46,630 --> 00:34:48,090
That was actually really great.

910
00:34:48,090 --> 00:34:49,699
Kudos.

911
00:34:49,699 --> 00:34:55,350
So in a world of static
pages, pages on our website

912
00:34:55,350 --> 00:34:57,890
are published basically
like you would a newspaper.

913
00:34:57,890 --> 00:34:59,180
Somebody hits a button.

914
00:34:59,180 --> 00:35:01,560
And the content goes
through templates

915
00:35:01,560 --> 00:35:03,190
and is written to disk.

916
00:35:03,190 --> 00:35:05,860
And we mix it with a
proprietary language

917
00:35:05,860 --> 00:35:09,070
that we compile to give a
little bit of dynamicism

918
00:35:09,070 --> 00:35:10,310
on the server side.

919
00:35:10,310 --> 00:35:12,470
And it was fast.

920
00:35:12,470 --> 00:35:15,990
We have about 1 million of
these static pages since 2004.

921
00:35:15,990 --> 00:35:18,774
And republishing them is
really not an option for us.

922
00:35:18,774 --> 00:35:20,690
If, hypothetically, it
took about five seconds

923
00:35:20,690 --> 00:35:23,810
to republish one of these pages,
5 million seconds, I think,

924
00:35:23,810 --> 00:35:25,370
comes out to about two months.

925
00:35:25,370 --> 00:35:28,410
We can't be doing that
every time we make a change.

926
00:35:28,410 --> 00:35:31,420
So what ends up happening is
it's extremely hard for us

927
00:35:31,420 --> 00:35:33,950
to change markup once
it's been published.

928
00:35:33,950 --> 00:35:36,040
And every time we
make a change, it's

929
00:35:36,040 --> 00:35:38,550
only present from the
day we deploy it onward,

930
00:35:38,550 --> 00:35:41,770
which means we have an
unknown number of permutations

931
00:35:41,770 --> 00:35:44,910
of these markups to handle
and support over time.

932
00:35:44,910 --> 00:35:47,400
So our front-end assets,
our JavaScript and CSS,

933
00:35:47,400 --> 00:35:50,010
have to handle all of
these permutations.

934
00:35:50,010 --> 00:35:52,670
And in order to be able
to change these files,

935
00:35:52,670 --> 00:35:55,420
since we can't change the
asset path because the HTML is

936
00:35:55,420 --> 00:35:58,320
static, we have to
keep the time to live,

937
00:35:58,320 --> 00:36:01,880
the cache expiration timeout,
very low on these files, which

938
00:36:01,880 --> 00:36:04,650
is a performance bad practice.

939
00:36:04,650 --> 00:36:07,030
And we also don't really
know what pages on the site

940
00:36:07,030 --> 00:36:10,160
call which assets in general.

941
00:36:10,160 --> 00:36:12,460
So I want to talk
about our CSS history.

942
00:36:12,460 --> 00:36:14,460
We didn't really
have a CSS framework

943
00:36:14,460 --> 00:36:17,830
which means we have a
lot of repetitive styles.

944
00:36:17,830 --> 00:36:21,180
Files were imported,
basically, as needed.

945
00:36:21,180 --> 00:36:25,980
Style sheets approached the
import limits in IE &mdash; 31 total

946
00:36:25,980 --> 00:36:28,930
and maybe up to three
nested levels deep.

947
00:36:28,930 --> 00:36:30,510
There was inconsistent
load style.

948
00:36:30,510 --> 00:36:32,850
We were using link tags in
one case, and right after it,

949
00:36:32,850 --> 00:36:36,320
using a style tag with
an add import directive.

950
00:36:36,320 --> 00:36:38,420
And basically, we
also have to deal

951
00:36:38,420 --> 00:36:40,950
with web producers
who go through.

952
00:36:40,950 --> 00:36:42,774
And they're able
to modify the look

953
00:36:42,774 --> 00:36:44,940
and feel of our page on the
fly as the news happens.

954
00:36:44,940 --> 00:36:47,000
So they can be dropped
into our content system

955
00:36:47,000 --> 00:36:49,460
and appear anywhere on the page.

956
00:36:49,460 --> 00:36:52,330
In the JavaScript department,
JavaScript was very ad hoc.

957
00:36:52,330 --> 00:36:55,120
Since most of the dynamicism
was on the server side,

958
00:36:55,120 --> 00:36:57,060
we basically used
JS basically as

959
00:36:57,060 --> 00:36:59,930
needed to fix
cross-browser issues,

960
00:36:59,930 --> 00:37:01,810
to do widgets that
respond to events

961
00:37:01,810 --> 00:37:03,840
by the user in the browser.

962
00:37:03,840 --> 00:37:06,427
Most of the variables
and functions are global.

963
00:37:06,427 --> 00:37:08,510
Script tags are dropped
wherever they were needed.

964
00:37:08,510 --> 00:37:10,330
You would define a new
DIV, leave it empty,

965
00:37:10,330 --> 00:37:12,080
and you'd put a script
tag right after it.

966
00:37:12,080 --> 00:37:15,340
We didn't defer execution,
another performance no-no.

967
00:37:15,340 --> 00:37:17,510
We didn't have a DOM
framework to handle

968
00:37:17,510 --> 00:37:20,920
any cross-browser functionality.

969
00:37:20,920 --> 00:37:22,250
That framework war happened.

970
00:37:22,250 --> 00:37:25,080
And we still hadn't
picked one yet.

971
00:37:25,080 --> 00:37:27,260
Some words on images.

972
00:37:27,260 --> 00:37:29,980
Basically, the UI images
that are part of a product

973
00:37:29,980 --> 00:37:32,730
would get uploaded
individually to production.

974
00:37:32,730 --> 00:37:35,330
You could easily forget
how to do that when

975
00:37:35,330 --> 00:37:36,540
you were deploying.

976
00:37:36,540 --> 00:37:38,610
So they would go missing
for a little while.

977
00:37:38,610 --> 00:37:41,120
Our content photography
is extremely hard for us

978
00:37:41,120 --> 00:37:42,100
to optimize.

979
00:37:42,100 --> 00:37:43,880
We have a lot of pride
in our photography.

980
00:37:43,880 --> 00:37:45,963
There's a lot of resistance
in making them smaller

981
00:37:45,963 --> 00:37:49,180
and not featuring them
as largely on our pages.

982
00:37:49,180 --> 00:37:52,110
We did some experiments
with lossless compression.

983
00:37:52,110 --> 00:37:54,250
We actually, for
color novices, we

984
00:37:54,250 --> 00:37:58,002
noticed some colors changing
in whatever these tools were.

985
00:37:58,002 --> 00:38:00,460
There's a whole department here
that does color correction.

986
00:38:00,460 --> 00:38:02,980
And the red walls don't
appear in their area,

987
00:38:02,980 --> 00:38:05,590
so that they don't have a
little bit of red dilution

988
00:38:05,590 --> 00:38:10,500
on their screens to do
this color correction.

989
00:38:10,500 --> 00:38:13,540
It's basically a manual process
to re-size these images.

990
00:38:13,540 --> 00:38:14,990
And we have a lot of them.

991
00:38:14,990 --> 00:38:17,407
And in order for them to be
fast and have them be smaller,

992
00:38:17,407 --> 00:38:20,031
people have to cut them and make
sure they don't crop something

993
00:38:20,031 --> 00:38:21,020
out of the picture.

994
00:38:21,020 --> 00:38:23,780
Because it's manual, it
doesn't happen a lot.

995
00:38:23,780 --> 00:38:25,880
Other concerns for
the business, we

996
00:38:25,880 --> 00:38:27,562
have these editorial
constraints.

997
00:38:27,562 --> 00:38:29,020
Like I mentioned
earlier, producers

998
00:38:29,020 --> 00:38:33,000
have a need to adjust based on
what's happening in the news.

999
00:38:33,000 --> 00:38:35,020
So we use this
free-form module where

1000
00:38:35,020 --> 00:38:37,420
they can drop any
bit of HTML code.

1001
00:38:37,420 --> 00:38:40,860
It doesn't even have
to be balanced tags.

1002
00:38:40,860 --> 00:38:43,130
So this can easily
mess up our page.

1003
00:38:43,130 --> 00:38:44,700
But they have the
freedom to do that.

1004
00:38:44,700 --> 00:38:47,320
And we have to be able to handle
styles and scripts occurring

1005
00:38:47,320 --> 00:38:48,040
in them.

1006
00:38:48,040 --> 00:38:51,940
And ads, of course, they're
top-level objects in our DOM.

1007
00:38:51,940 --> 00:38:54,169
They're not treated
in any special way.

1008
00:38:54,169 --> 00:38:56,210
They bring their own copies
of DOM frameworks in.

1009
00:38:56,210 --> 00:38:57,710
We get older versions of jQuery.

1010
00:38:57,710 --> 00:39:02,392
We saw an ad that tried to
encapsulate Prototype &mdash; which

1011
00:39:02,392 --> 00:39:04,350
if you're familiar with
how Prototype JS works,

1012
00:39:04,350 --> 00:39:06,890
it modifies built-in
objects in the browser.

1013
00:39:06,890 --> 00:39:10,610
You can't actually
contain it in a box.

1014
00:39:10,610 --> 00:39:12,380
So it didn't really work.

1015
00:39:12,380 --> 00:39:14,380
Ads animate as
soon as they load.

1016
00:39:14,380 --> 00:39:17,380
We get a lot of painting
issues when animations

1017
00:39:17,380 --> 00:39:19,200
happen while the
page is loading.

1018
00:39:19,200 --> 00:39:23,220
And basically, they are
higher in the DOM order

1019
00:39:23,220 --> 00:39:26,559
as the page is loading than
our own logo on the homepage.

1020
00:39:26,559 --> 00:39:27,350
You'll see two ads.

1021
00:39:27,350 --> 00:39:29,880
And then you'll see our logo
if you look at the source.

1022
00:39:29,880 --> 00:39:31,660
So just to caveat
all of this history,

1023
00:39:31,660 --> 00:39:33,840
it wasn't really
entirely all bad.

1024
00:39:33,840 --> 00:39:35,560
We do use a CDN.

1025
00:39:35,560 --> 00:39:37,910
We've had Akamai for
a number of years.

1026
00:39:37,910 --> 00:39:38,900
It's been great.

1027
00:39:38,900 --> 00:39:43,430
We did turn gzip on in 2007.

1028
00:39:43,430 --> 00:39:45,779
The bandwidth savings
were actually immediate.

1029
00:39:45,779 --> 00:39:47,570
And there were a lot
of really happy people

1030
00:39:47,570 --> 00:39:48,528
as soon as we did that.

1031
00:39:48,528 --> 00:39:49,950
But it wasn't on previously.

1032
00:39:49,950 --> 00:39:53,030
And it's worth mentioning
that we did turn it on.

1033
00:39:53,030 --> 00:39:56,020
So a new wind for
our efforts and what

1034
00:39:56,020 --> 00:39:59,020
we were trying to do starting
in 2009 to make the site faster.

1035
00:39:59,020 --> 00:40:00,580
2009 was the year
we were focusing

1036
00:40:00,580 --> 00:40:02,330
on tools and libraries.

1037
00:40:02,330 --> 00:40:05,980
We basically built a new build
system for front-end files.

1038
00:40:05,980 --> 00:40:08,890
And this was our first foray
into doing automatic builds.

1039
00:40:08,890 --> 00:40:12,920
We used to manually
untar uncompressed files

1040
00:40:12,920 --> 00:40:14,140
in production.

1041
00:40:14,140 --> 00:40:16,970
And we were actually pulling
changes from version control,

1042
00:40:16,970 --> 00:40:19,180
as opposed to somebody's
home directory.

1043
00:40:19,180 --> 00:40:21,900
They would arrange the files the
way they wanted them to appear.

1044
00:40:21,900 --> 00:40:22,941
We would package them up.

1045
00:40:22,941 --> 00:40:25,430
And someone would
manually unpackage it.

1046
00:40:25,430 --> 00:40:27,922
Now, it's coming from
version control directly.

1047
00:40:27,922 --> 00:40:29,380
There were
semi-stateful rollbacks.

1048
00:40:29,380 --> 00:40:30,671
There was a rollback mechanism.

1049
00:40:30,671 --> 00:40:34,200
But you could really only
roll back the latest one.

1050
00:40:34,200 --> 00:40:36,010
If you tried to roll
back any before that,

1051
00:40:36,010 --> 00:40:37,620
you'd end up in
an unknown state.

1052
00:40:37,620 --> 00:40:39,366
And that was really bad.

1053
00:40:39,366 --> 00:40:40,740
But the really
exciting bit of it

1054
00:40:40,740 --> 00:40:44,130
was that there were
hooks for build scripts.

1055
00:40:44,130 --> 00:40:46,470
And we can expand
on this process,

1056
00:40:46,470 --> 00:40:48,010
basically, dynamically.

1057
00:40:48,010 --> 00:40:50,560
So we did just that for our CSS.

1058
00:40:50,560 --> 00:40:52,700
It was the first system
to use those new hooks.

1059
00:40:52,700 --> 00:40:54,980
And we wrote a bunch
of proprietary scripts

1060
00:40:54,980 --> 00:40:57,700
to not only unravel the ad
import directives to make

1061
00:40:57,700 --> 00:41:01,220
one concatenated file, we
wrote a script also trying

1062
00:41:01,220 --> 00:41:04,235
to remove some of the white
space and the comments.

1063
00:41:04,235 --> 00:41:06,360
This is all downstream from
development work, which

1064
00:41:06,360 --> 00:41:07,860
is also a really good point.

1065
00:41:07,860 --> 00:41:10,070
We didn't want our
developers to feel

1066
00:41:10,070 --> 00:41:13,475
that they couldn't comment
their work adequately.

1067
00:41:13,475 --> 00:41:14,850
While we were
doing this, we were

1068
00:41:14,850 --> 00:41:16,310
working on our CSS framework.

1069
00:41:16,310 --> 00:41:19,184
We took the concepts
from our design.

1070
00:41:19,184 --> 00:41:20,850
And we turned them
into these base files

1071
00:41:20,850 --> 00:41:22,530
that can be used
across the site.

1072
00:41:22,530 --> 00:41:24,150
We split code into
reusable modules

1073
00:41:24,150 --> 00:41:26,760
and actually tried to
reuse them in a sane way.

1074
00:41:26,760 --> 00:41:30,277
We aimed to have a single entry
point at the top of the page.

1075
00:41:30,277 --> 00:41:31,860
While we were doing
this, we were also

1076
00:41:31,860 --> 00:41:33,880
trying to lock down
our JS development.

1077
00:41:33,880 --> 00:41:36,170
We introduced a
top-level name space

1078
00:41:36,170 --> 00:41:38,400
called NYTD and
the module pattern

1079
00:41:38,400 --> 00:41:41,750
also called the Immediately
Invoked Function Expression.

1080
00:41:41,750 --> 00:41:45,360
This is a great way to wrap all
your variables in a closure.

1081
00:41:45,360 --> 00:41:50,220
Although thanks to Colt,
I'm now afraid of closures.

1082
00:41:50,220 --> 00:41:52,890
We introduced Prototype
JS as a DOM library.

1083
00:41:52,890 --> 00:41:54,954
This one bullet
point doesn't really

1084
00:41:54,954 --> 00:41:56,870
reflect the amount of
meetings and discussions

1085
00:41:56,870 --> 00:41:59,530
and debates and fights we
had over this decision.

1086
00:41:59,530 --> 00:42:02,310
But Prototype JS
won out in the end.

1087
00:42:02,310 --> 00:42:04,730
We also tried to write our
own proprietary asynchronous

1088
00:42:04,730 --> 00:42:08,020
JavaScript loader in the
days before RequireJS.

1089
00:42:08,020 --> 00:42:10,451
Any of these, LabJS,
any of these loaders,

1090
00:42:10,451 --> 00:42:11,200
they didn't exist.

1091
00:42:11,200 --> 00:42:12,080
We tried to write our own.

1092
00:42:12,080 --> 00:42:13,050
It didn't really work.

1093
00:42:13,050 --> 00:42:17,100
It became a synchronous
JavaScript loader.

1094
00:42:17,100 --> 00:42:18,930
So we started with
our home page.

1095
00:42:18,930 --> 00:42:20,530
And there's a number
of reasons why.

1096
00:42:20,530 --> 00:42:21,954
It's published very frequently.

1097
00:42:21,954 --> 00:42:23,370
So this problem
with legacy markup

1098
00:42:23,370 --> 00:42:25,000
really doesn't become an issue.

1099
00:42:25,000 --> 00:42:26,150
It gets the most traffic.

1100
00:42:26,150 --> 00:42:29,540
So it has the potential to save
people the most amount of time.

1101
00:42:29,540 --> 00:42:31,830
It has an isolated
implementation.

1102
00:42:31,830 --> 00:42:33,960
And basically, if
something went wrong,

1103
00:42:33,960 --> 00:42:36,144
nothing would go wrong on
other parts of the site.

1104
00:42:36,144 --> 00:42:37,810
And it's viewed very
heavily internally.

1105
00:42:37,810 --> 00:42:39,893
If something were really
bad, it would get noticed

1106
00:42:39,893 --> 00:42:42,800
before it got out
into production.

1107
00:42:42,800 --> 00:42:45,590
So in November 2009, we
put our CSS optimizations

1108
00:42:45,590 --> 00:42:46,750
on the home page.

1109
00:42:46,750 --> 00:42:51,242
It saved 25 HTTP connections to
what our very small CSS files.

1110
00:42:51,242 --> 00:42:53,200
The first pane occurred
a whole second earlier.

1111
00:42:53,200 --> 00:42:55,580
And the homepage
really felt faster.

1112
00:42:55,580 --> 00:42:57,690
And we were very happy by this.

1113
00:42:57,690 --> 00:43:01,800
So in 2010, we wanted to
continue these efforts.

1114
00:43:01,800 --> 00:43:03,500
The CSS framework
basically rolled out

1115
00:43:03,500 --> 00:43:05,550
to our section
and article pages.

1116
00:43:05,550 --> 00:43:07,690
Again, we were focusing
on the single entry point.

1117
00:43:07,690 --> 00:43:10,597
But we never optimized them.

1118
00:43:10,597 --> 00:43:12,930
There were some concerns with
these proprietary scripts.

1119
00:43:12,930 --> 00:43:14,740
And it turns out later
when we did an audit

1120
00:43:14,740 --> 00:43:16,466
that we were right
to be concerned.

1121
00:43:16,466 --> 00:43:18,090
There were references
to missing files.

1122
00:43:18,090 --> 00:43:19,730
There were ad import cycles.

1123
00:43:19,730 --> 00:43:21,510
A would include B,
include C, include A.

1124
00:43:21,510 --> 00:43:23,760
And if you're ever curious
about what the browser does

1125
00:43:23,760 --> 00:43:27,020
to get out of that, I still
don't know the answer.

1126
00:43:27,020 --> 00:43:28,667
And there were syntax
errors that there

1127
00:43:28,667 --> 00:43:30,500
were styles not getting
applied because they

1128
00:43:30,500 --> 00:43:32,770
were typed improperly.

1129
00:43:32,770 --> 00:43:36,590
So we decided to build a
new JS build system in 2010.

1130
00:43:36,590 --> 00:43:37,720
We forked the codebase.

1131
00:43:37,720 --> 00:43:39,240
We wanted to create
a clean build.

1132
00:43:39,240 --> 00:43:43,890
And only code that was
modular and name spaced

1133
00:43:43,890 --> 00:43:45,990
would be able to
be in this build.

1134
00:43:45,990 --> 00:43:48,600
Basically, we had these
manifests of files that had

1135
00:43:48,600 --> 00:43:51,880
an @import-like syntax
in a JS comment,

1136
00:43:51,880 --> 00:43:56,080
so that they would be inert
if the build process failed.

1137
00:43:56,080 --> 00:43:58,236
We used YUI compressor
for minification.

1138
00:43:58,236 --> 00:44:00,110
We no longer wanted to
write our own scripts.

1139
00:44:00,110 --> 00:44:01,610
This was well
supported at the time.

1140
00:44:01,610 --> 00:44:02,810
So why not?

1141
00:44:02,810 --> 00:44:04,960
We were focusing
on two build files,

1142
00:44:04,960 --> 00:44:06,860
one at the top,
one at the bottom.

1143
00:44:06,860 --> 00:44:08,652
If you're familiar with
the best practices,

1144
00:44:08,652 --> 00:44:10,151
they say that you're
supposed to put

1145
00:44:10,151 --> 00:44:11,780
your JS at the
bottom of the page.

1146
00:44:11,780 --> 00:44:13,610
So why did we have
them at the top?

1147
00:44:13,610 --> 00:44:16,344
If you remember that editors
can put JavaScript on the page,

1148
00:44:16,344 --> 00:44:18,010
if we wanted them to
use our frameworks,

1149
00:44:18,010 --> 00:44:21,076
it had to be there before they
could actually run their code.

1150
00:44:21,076 --> 00:44:22,700
So we put stuff at
the top to make sure

1151
00:44:22,700 --> 00:44:24,460
that that wouldn't
break anything.

1152
00:44:24,460 --> 00:44:26,540
This build process
was executed manually.

1153
00:44:26,540 --> 00:44:28,650
So it didn't see
widespread usage.

1154
00:44:28,650 --> 00:44:31,000
It's basically almost done
only on the home page.

1155
00:44:31,000 --> 00:44:33,330
And now, we have two codebases
and still no automatic

1156
00:44:33,330 --> 00:44:35,380
build process.

1157
00:44:35,380 --> 00:44:37,834
But when we did launch these
JS changes to the homepage,

1158
00:44:37,834 --> 00:44:38,750
it was pretty drastic.

1159
00:44:38,750 --> 00:44:42,270
We got a 50% speedup, 6
seconds, down from 12.

1160
00:44:42,270 --> 00:44:44,390
We were very excited by that.

1161
00:44:44,390 --> 00:44:47,237
So 2011 was a bit
of a slow year.

1162
00:44:47,237 --> 00:44:49,820
As you might remember, if you're
fans of the "New York Times,"

1163
00:44:49,820 --> 00:44:53,010
we introduced digital
subscriptions in 2011.

1164
00:44:53,010 --> 00:44:54,690
So resourcing for
this kind of work

1165
00:44:54,690 --> 00:44:56,760
was really hard to come by.

1166
00:44:56,760 --> 00:44:57,826
Oh, hello.

1167
00:44:57,826 --> 00:44:59,600
I don't know what I just did.

1168
00:44:59,600 --> 00:45:01,470
All right.

1169
00:45:01,470 --> 00:45:06,120
There were efforts to optimize
our analytics packaging.

1170
00:45:06,120 --> 00:45:07,660
We have a lot of
analytics packages.

1171
00:45:07,660 --> 00:45:09,830
And they were doing
some really bad stuff.

1172
00:45:09,830 --> 00:45:11,850
They got aborted
mostly because we

1173
00:45:11,850 --> 00:45:14,587
were afraid to break
these actual reports.

1174
00:45:14,587 --> 00:45:16,420
We wanted to make sure
that the business was

1175
00:45:16,420 --> 00:45:18,640
able to analyze
things correctly.

1176
00:45:18,640 --> 00:45:19,850
So we didn't continue that.

1177
00:45:19,850 --> 00:45:22,520
So we used a series of code
reviews and style guides

1178
00:45:22,520 --> 00:45:24,050
to make sure that
we were enforcing

1179
00:45:24,050 --> 00:45:25,530
good standards
and best practices

1180
00:45:25,530 --> 00:45:27,900
to keep the status quo.

1181
00:45:27,900 --> 00:45:31,090
But at the end of 2011,
we made the decision.

1182
00:45:31,090 --> 00:45:32,900
We decided to
replace PrototypeJS

1183
00:45:32,900 --> 00:45:34,690
with jQuery sitewide.

1184
00:45:34,690 --> 00:45:39,077
And as you can imagine,
this is really, really hard.

1185
00:45:39,077 --> 00:45:41,410
We needed both of them to
coexist during the transition.

1186
00:45:41,410 --> 00:45:43,451
We weren't going to rewrite
everything and launch

1187
00:45:43,451 --> 00:45:45,280
a new site on a new
framework all at once.

1188
00:45:45,280 --> 00:45:47,080
So we needed both of
them to, basically,

1189
00:45:47,080 --> 00:45:49,780
be around while we did this.

1190
00:45:49,780 --> 00:45:52,880
But in 2012, a group
of five developers

1191
00:45:52,880 --> 00:45:54,480
basically set out
to try and excise

1192
00:45:54,480 --> 00:45:57,140
PrototypeJS from article pages.

1193
00:45:57,140 --> 00:45:59,450
And we were making really,
really excellent progress.

1194
00:45:59,450 --> 00:46:01,766
Things were going great,
hours and hours of work.

1195
00:46:01,766 --> 00:46:04,140
And then we found out there
were some inline scripts that

1196
00:46:04,140 --> 00:46:07,795
made references to PrototypeJS.

1197
00:46:07,795 --> 00:46:10,420
And if you remember that we have
these static pages with markup

1198
00:46:10,420 --> 00:46:12,870
that we can't change,
we really have no idea

1199
00:46:12,870 --> 00:46:15,506
what's calling PrototypeJS
and inline scripts.

1200
00:46:15,506 --> 00:46:16,880
And so, therefore,
we're not ever

1201
00:46:16,880 --> 00:46:19,910
able to remove PrototypeJS
fully from our site.

1202
00:46:19,910 --> 00:46:21,160
So now we have two frameworks.

1203
00:46:21,160 --> 00:46:22,070
They both download.

1204
00:46:22,070 --> 00:46:23,890
They're both still in use.

1205
00:46:23,890 --> 00:46:26,230
And this actually causes
some really strange bugs.

1206
00:46:26,230 --> 00:46:29,060
In older IE, where you
don't have a get elements

1207
00:46:29,060 --> 00:46:32,770
by class name,
PrototypeJS would add one.

1208
00:46:32,770 --> 00:46:35,360
And jQuery will
detect it and use it.

1209
00:46:35,360 --> 00:46:36,750
It returns Prototype objects.

1210
00:46:36,750 --> 00:46:41,200
And jQuery says, I have no
idea what these are, and bails.

1211
00:46:41,200 --> 00:46:45,070
So 2012 also marked the end
of life for this proprietary

1212
00:46:45,070 --> 00:46:46,610
build system.

1213
00:46:46,610 --> 00:46:48,020
We basically
migrated to a system

1214
00:46:48,020 --> 00:46:51,900
that mirrored our entire
SVN repositories via Hudson.

1215
00:46:51,900 --> 00:46:55,450
We wrote a new script to
concatenate the CSS imports.

1216
00:46:55,450 --> 00:46:57,610
We needed feature parity
with what we had before.

1217
00:46:57,610 --> 00:46:59,485
So we had to write
something new to make sure

1218
00:46:59,485 --> 00:47:02,877
that we could handle it for the
homepage, which already had it.

1219
00:47:02,877 --> 00:47:04,210
It does have all these features.

1220
00:47:04,210 --> 00:47:06,210
Although CSSLint is
added on the list

1221
00:47:06,210 --> 00:47:10,290
to catch syntax errors that
didn't exist until 2012,

1222
00:47:10,290 --> 00:47:11,420
I believe.

1223
00:47:11,420 --> 00:47:13,720
It uses YUI compressor
to do minification

1224
00:47:13,720 --> 00:47:15,370
and also has to be run manually.

1225
00:47:15,370 --> 00:47:19,040
So again, it's really just
limited to the home page.

1226
00:47:19,040 --> 00:47:23,110
So finally, I'm going to
talk a bit about some efforts

1227
00:47:23,110 --> 00:47:24,900
in modern times of
what we're trying

1228
00:47:24,900 --> 00:47:26,650
to do to really
fix this problem.

1229
00:47:26,650 --> 00:47:29,560
So we were really gifted
a very rare opportunity

1230
00:47:29,560 --> 00:47:30,710
by the business.

1231
00:47:30,710 --> 00:47:32,430
In March 2013, the
"New York Times"

1232
00:47:32,430 --> 00:47:35,260
announced that it was going
to introduce a new article

1233
00:47:35,260 --> 00:47:36,840
redesign.

1234
00:47:36,840 --> 00:47:39,520
And for us, it's more than
just a new user interface,

1235
00:47:39,520 --> 00:47:41,060
a new user experience.

1236
00:47:41,060 --> 00:47:42,520
It's really a
technological reboot.

1237
00:47:42,520 --> 00:47:44,530
We've changed everything
about our systems

1238
00:47:44,530 --> 00:47:47,250
in order to deal with some
of these legacy issues

1239
00:47:47,250 --> 00:47:48,590
that we've had.

1240
00:47:48,590 --> 00:47:51,080
So the best thing &mdash; and I have
an exclamation point here,

1241
00:47:51,080 --> 00:47:52,996
and it really doesn't
represent our excitement

1242
00:47:52,996 --> 00:47:55,781
by this &mdash; we have
dynamic pages now.

1243
00:47:55,781 --> 00:47:57,780
We no longer have to deal
with an unknown number

1244
00:47:57,780 --> 00:47:58,980
of permutations.

1245
00:47:58,980 --> 00:48:00,660
We can actually
change our asset URLs

1246
00:48:00,660 --> 00:48:03,870
on the fly to bypass the cache
as soon as we do a deploy.

1247
00:48:03,870 --> 00:48:05,930
We pushed a lot of
the user customization

1248
00:48:05,930 --> 00:48:07,565
into the client side.

1249
00:48:07,565 --> 00:48:08,940
We're not doing
it on the server.

1250
00:48:08,940 --> 00:48:11,620
So we can actually cache our
pages better on the back end.

1251
00:48:11,620 --> 00:48:14,190
We introduced HTML5
Boilerplate and Modernizr

1252
00:48:14,190 --> 00:48:17,480
to give us a nice starting
point for these new pages.

1253
00:48:17,480 --> 00:48:20,560
So now, we have a modern
build system using Grunt.

1254
00:48:20,560 --> 00:48:22,710
It can be run both in
our Developer Sandboxes

1255
00:48:22,710 --> 00:48:25,010
and in Hudson to
prepare a build.

1256
00:48:25,010 --> 00:48:26,504
And most of these
web performance

1257
00:48:26,504 --> 00:48:28,670
best practices are actually
available as Grunt tasks

1258
00:48:28,670 --> 00:48:30,086
already, which
made it really easy

1259
00:48:30,086 --> 00:48:34,550
to integrate some of this
great advice for our code.

1260
00:48:34,550 --> 00:48:38,310
And we're using RPM
packaging for deployments.

1261
00:48:38,310 --> 00:48:40,500
They have very great
rollback support.

1262
00:48:40,500 --> 00:48:44,050
And they're really easy to use.

1263
00:48:44,050 --> 00:48:47,770
So for style development,
we switched to using LESS.

1264
00:48:47,770 --> 00:48:49,920
LESS itself handles
concatenation.

1265
00:48:49,920 --> 00:48:52,420
Minification is supported
by a YUI compressor

1266
00:48:52,420 --> 00:48:53,830
through the Grunt task.

1267
00:48:53,830 --> 00:48:56,201
So this is really easy
to get these two wins.

1268
00:48:56,201 --> 00:48:58,700
Variables and mix-ins allow us
to do some really interesting

1269
00:48:58,700 --> 00:49:02,690
things in CSS that we had to
do with images before &mdash; arrows,

1270
00:49:02,690 --> 00:49:06,120
buttons, data
URIs, and spriting.

1271
00:49:06,120 --> 00:49:07,870
So earlier this year,
I wrote a Grunt task

1272
00:49:07,870 --> 00:49:10,480
that automates the
creation of spritesheets.

1273
00:49:10,480 --> 00:49:13,090
I don't really know
what the diction

1274
00:49:13,090 --> 00:49:16,229
is around sprites
and spritesheets.

1275
00:49:16,229 --> 00:49:16,770
I don't know.

1276
00:49:16,770 --> 00:49:19,500
What do you call the individual
images on a spritesheet?

1277
00:49:19,500 --> 00:49:20,500
I have no idea.

1278
00:49:20,500 --> 00:49:23,600
So I'm making up
the terminology.

1279
00:49:23,600 --> 00:49:26,800
Basically, the task takes in
a bunch of images and exports

1280
00:49:26,800 --> 00:49:29,040
not only the combined
spritesheet but also

1281
00:49:29,040 --> 00:49:31,652
a bunch of mix-ins in LESS with
the background coordinates,

1282
00:49:31,652 --> 00:49:33,110
which makes it not
only really easy

1283
00:49:33,110 --> 00:49:34,370
to make these
combined images, you

1284
00:49:34,370 --> 00:49:35,870
don't have to maintain
them manually.

1285
00:49:35,870 --> 00:49:38,220
It's really easy for developers
to use them in the code.

1286
00:49:38,220 --> 00:49:40,094
The mix-ins are named
after the image itself.

1287
00:49:40,094 --> 00:49:42,530
So you just put the image
name, and you basically

1288
00:49:42,530 --> 00:49:44,379
get the sprite.

1289
00:49:44,379 --> 00:49:46,670
And the best part about it
is if the coordinates change

1290
00:49:46,670 --> 00:49:49,500
because we've added a new
image, and if it's alphabetical,

1291
00:49:49,500 --> 00:49:53,092
and you added a C, all the
images shift a little bit.

1292
00:49:53,092 --> 00:49:54,800
All you have to do is
rebuild the system.

1293
00:49:54,800 --> 00:49:56,090
And all the coordinates
are updated.

1294
00:49:56,090 --> 00:49:58,756
Nobody has to go in and actually
figure something out and change

1295
00:49:58,756 --> 00:49:59,430
anything.

1296
00:49:59,430 --> 00:50:02,690
And we're currently combining
I think over 100 small images

1297
00:50:02,690 --> 00:50:03,190
into one.

1298
00:50:03,190 --> 00:50:06,760
That's 99 saved requests
to very small files

1299
00:50:06,760 --> 00:50:08,800
that we need for our new design.

1300
00:50:08,800 --> 00:50:09,800
I'm not showing it here.

1301
00:50:09,800 --> 00:50:13,230
You can check out the marketing
page to see what it looks like.

1302
00:50:13,230 --> 00:50:15,110
Just a heads up.

1303
00:50:15,110 --> 00:50:19,520
For JavaScript, we
switched to RequireJS.

1304
00:50:19,520 --> 00:50:22,080
This handles, again,
concatenation and minification

1305
00:50:22,080 --> 00:50:22,850
in the Grunt task.

1306
00:50:22,850 --> 00:50:24,310
And we also get
source maps, which

1307
00:50:24,310 --> 00:50:26,400
is something we're
really excited to use

1308
00:50:26,400 --> 00:50:28,460
for our development.

1309
00:50:28,460 --> 00:50:30,072
We no longer need
a global namespace.

1310
00:50:30,072 --> 00:50:31,780
That's why the slide
is titled that we're

1311
00:50:31,780 --> 00:50:34,810
deleting our
Window.NYTD namespace.

1312
00:50:34,810 --> 00:50:37,170
We get asynchronous
loading of JavaScript.

1313
00:50:37,170 --> 00:50:41,870
And we, basically, decided to
focus on larger build files,

1314
00:50:41,870 --> 00:50:44,370
so that once you've establish
a connection on mobile,

1315
00:50:44,370 --> 00:50:46,361
you want to make sure
you keep the latency low.

1316
00:50:46,361 --> 00:50:48,110
That initial handshake
can be really high.

1317
00:50:48,110 --> 00:50:51,210
So we keep these large
build files around instead

1318
00:50:51,210 --> 00:50:55,800
of using a bunch of
individual RequireJS loads.

1319
00:50:55,800 --> 00:50:57,840
Since we moved a lot of
the client customization

1320
00:50:57,840 --> 00:50:59,920
to the browser,
we needed to make

1321
00:50:59,920 --> 00:51:01,730
sure we could template properly.

1322
00:51:01,730 --> 00:51:04,010
So we use Underscore JS
templates instead of building

1323
00:51:04,010 --> 00:51:06,340
with the DOM or
any HTML strings.

1324
00:51:06,340 --> 00:51:07,800
And it's way faster
to precompile.

1325
00:51:07,800 --> 00:51:09,841
You're essentially running
a JavaScript function,

1326
00:51:09,841 --> 00:51:11,610
which is optimized
in the browser.

1327
00:51:11,610 --> 00:51:13,580
Grunt can automate
this compilation.

1328
00:51:13,580 --> 00:51:15,420
There's a built-in
task to do it.

1329
00:51:15,420 --> 00:51:17,470
And we turn them into
a RequireJS module

1330
00:51:17,470 --> 00:51:21,090
that gets included as
part of our build process.

1331
00:51:21,090 --> 00:51:24,280
So we use Backbone to organize
everything into modules.

1332
00:51:24,280 --> 00:51:25,136
They are reusable.

1333
00:51:25,136 --> 00:51:26,760
And they are shared
across applications

1334
00:51:26,760 --> 00:51:28,339
if we would like them to be.

1335
00:51:28,339 --> 00:51:29,880
But the real win is
that they give us

1336
00:51:29,880 --> 00:51:31,850
a bunch of inherited
functionality.

1337
00:51:31,850 --> 00:51:34,990
So we can abstract out
touch events and analytics

1338
00:51:34,990 --> 00:51:37,470
or some common
element references,

1339
00:51:37,470 --> 00:51:40,990
so that we won't have to
look them up all the time.

1340
00:51:40,990 --> 00:51:44,390
And we can get this
functionality in everything

1341
00:51:44,390 --> 00:51:45,140
very easily.

1342
00:51:45,140 --> 00:51:48,140
We get event delegation,
fewer event listeners,

1343
00:51:48,140 --> 00:51:50,200
so things run a
little more smoothly.

1344
00:51:50,200 --> 00:51:52,627
And the modules communicate
with each other using events.

1345
00:51:52,627 --> 00:51:53,710
So you can publish events.

1346
00:51:53,710 --> 00:51:55,668
Or you can subscribe to
another module's events

1347
00:51:55,668 --> 00:51:57,369
to find out about changes.

1348
00:51:57,369 --> 00:51:58,410
So this is the big topic.

1349
00:51:58,410 --> 00:51:59,480
What did we do about ads?

1350
00:51:59,480 --> 00:52:01,380
We took ads out of
the critical path.

1351
00:52:01,380 --> 00:52:04,910
What we do is on DOM ready,
we write the ad markup

1352
00:52:04,910 --> 00:52:06,340
into a new Iframe.

1353
00:52:06,340 --> 00:52:07,860
You just take the
frames document,

1354
00:52:07,860 --> 00:52:10,520
and you document.write
it into the frame.

1355
00:52:10,520 --> 00:52:13,130
And what happens, if the ad
itself calls document.write,

1356
00:52:13,130 --> 00:52:14,510
you don't lose your whole page.

1357
00:52:14,510 --> 00:52:16,040
You would just lose the
content of the Iframe, which

1358
00:52:16,040 --> 00:52:17,490
is blank to begin with.

1359
00:52:17,490 --> 00:52:19,946
So we don't care what they
do once they're in the frame,

1360
00:52:19,946 --> 00:52:20,570
once they load.

1361
00:52:20,570 --> 00:52:23,184
If they decide to bust out
of the frame, they can.

1362
00:52:23,184 --> 00:52:25,600
But we have this notion of
trusted ads that aren't framed.

1363
00:52:25,600 --> 00:52:27,890
And trusted basically means
that they specifically

1364
00:52:27,890 --> 00:52:30,180
don't do things that
are bad for page speed.

1365
00:52:30,180 --> 00:52:33,910
And also, if there's actually a
problem, it's very easy for us

1366
00:52:33,910 --> 00:52:35,870
to get in touch with
them and make the change.

1367
00:52:35,870 --> 00:52:38,400
And this has been really,
really effective for us.

1368
00:52:38,400 --> 00:52:41,275
So this is the results page.

1369
00:52:41,275 --> 00:52:42,900
I thought it would
be great to show you

1370
00:52:42,900 --> 00:52:44,970
a comparative slide
of our waterfalls

1371
00:52:44,970 --> 00:52:47,140
to show you how really
dramatic this is.

1372
00:52:47,140 --> 00:52:49,970
We're not quite ready to show
you that information yet.

1373
00:52:49,970 --> 00:52:50,950
It's still being built.

1374
00:52:50,950 --> 00:52:53,030
So we're not quite
ready to do that.

1375
00:52:53,030 --> 00:52:55,370
But just to give
you an overview,

1376
00:52:55,370 --> 00:52:57,170
before starting to
render, the page

1377
00:52:57,170 --> 00:52:59,760
used to download
over 60 requests.

1378
00:52:59,760 --> 00:53:03,270
It's about 10 now,
maybe even fewer.

1379
00:53:03,270 --> 00:53:06,140
Before we're fully loaded, we
had to download 200 assets.

1380
00:53:06,140 --> 00:53:07,940
It's about 70 now.

1381
00:53:07,940 --> 00:53:10,720
Start render is under
one second in Chrome.

1382
00:53:10,720 --> 00:53:13,220
And document complete is
under three seconds in Chrome.

1383
00:53:13,220 --> 00:53:14,570
So this is a huge win for us.

1384
00:53:14,570 --> 00:53:16,170
Before, previously,
document complete

1385
00:53:16,170 --> 00:53:19,400
would be about nine seconds
on our article pages.

1386
00:53:19,400 --> 00:53:21,070
So to answer Steve's
question about

1387
00:53:21,070 --> 00:53:25,920
is web performance
too hard, no and yes.

1388
00:53:25,920 --> 00:53:27,870
It's really not that hard.

1389
00:53:27,870 --> 00:53:29,780
The optimization
practices are really not

1390
00:53:29,780 --> 00:53:31,050
that difficult to begin with.

1391
00:53:31,050 --> 00:53:33,810
And there is excellent tooling
that exist to make it really,

1392
00:53:33,810 --> 00:53:35,420
really, really easy to do.

1393
00:53:35,420 --> 00:53:38,550
However, there are some unique
challenges that, I think,

1394
00:53:38,550 --> 00:53:40,815
not just big websites,
but companies

1395
00:53:40,815 --> 00:53:42,940
tend to have their own
challenges that people can't

1396
00:53:42,940 --> 00:53:44,880
solve their problems
for them, and not

1397
00:53:44,880 --> 00:53:47,360
to mention any legacy
decisions, such as ours, where

1398
00:53:47,360 --> 00:53:49,800
we have our static pages
that was holding us back.

1399
00:53:49,800 --> 00:53:52,060
We found that we did this
negative feedback cycle.

1400
00:53:52,060 --> 00:53:54,136
We had this poor setup.

1401
00:53:54,136 --> 00:53:55,760
And we tried to do
this proprietary fix

1402
00:53:55,760 --> 00:53:56,570
to make it better.

1403
00:53:56,570 --> 00:53:59,153
And we found ourselves slightly
worse off than we were before,

1404
00:53:59,153 --> 00:54:01,710
even though we were getting
slightly faster speed.

1405
00:54:01,710 --> 00:54:05,190
So here's some stuff that we
learned, share some advice.

1406
00:54:05,190 --> 00:54:06,780
It's really worth
it to fight to solve

1407
00:54:06,780 --> 00:54:08,430
these big, difficult problems.

1408
00:54:08,430 --> 00:54:11,637
They are the 800-pound gorilla
in the room for a reason.

1409
00:54:11,637 --> 00:54:12,470
Fight to solve them.

1410
00:54:12,470 --> 00:54:14,100
Once they're out of
your way, it really

1411
00:54:14,100 --> 00:54:16,884
opens the path to making
this a lot simpler.

1412
00:54:16,884 --> 00:54:18,300
We live in a world
where you don't

1413
00:54:18,300 --> 00:54:20,940
have to rely on proprietary
systems anymore.

1414
00:54:20,940 --> 00:54:23,670
You might need some
because it's your business.

1415
00:54:23,670 --> 00:54:27,220
So you may need to
make sure that you

1416
00:54:27,220 --> 00:54:29,410
have all your requirements
taken care of.

1417
00:54:29,410 --> 00:54:33,050
But a lot of the tooling exists
to make this very simple.

1418
00:54:33,050 --> 00:54:36,170
I always say that you should
count your HTTP connections

1419
00:54:36,170 --> 00:54:40,770
before you count
bytes in every file.

1420
00:54:40,770 --> 00:54:42,140
Do the big, easy wins first.

1421
00:54:42,140 --> 00:54:44,250
It's really easy to
combine files together

1422
00:54:44,250 --> 00:54:46,320
than it is to figure
out what code is old

1423
00:54:46,320 --> 00:54:48,760
and needs to be removed
from your files.

1424
00:54:48,760 --> 00:54:49,930
And automate everything.

1425
00:54:49,930 --> 00:54:51,930
As soon as you introduce
manual to the equation,

1426
00:54:51,930 --> 00:54:53,250
it really doesn't get done.

1427
00:54:53,250 --> 00:54:54,970
So if you can
automate everything,

1428
00:54:54,970 --> 00:55:00,020
it's by far going to pave the
road and make it really easy.

1429
00:55:00,020 --> 00:55:00,880
So that's it.

1430
00:55:00,880 --> 00:55:02,880
I think I'm running out of time.

1431
00:55:02,880 --> 00:55:04,008
Thank you very much.

1432
00:55:04,008 --> 00:55:08,954
[APPLAUSE]

1433
00:55:08,954 --> 00:55:11,370
EITAN KONIGSBURG: I don't think
I have time for questions.

1434
00:55:11,370 --> 00:55:13,269
But I will be around at dinner.

1435
00:55:13,269 --> 00:55:14,810
So if you want to
come find me, and I

1436
00:55:14,810 --> 00:55:16,180
can talk endlessly about this.

1437
00:55:16,180 --> 00:55:17,120
So please find me.

1438
00:55:17,120 --> 00:55:19,936
I will share all
of my knowledge.

1439
00:55:19,936 --> 00:55:21,580
PETE: All right.

1440
00:55:21,580 --> 00:55:22,609
So that's one point.

1441
00:55:22,609 --> 00:55:24,150
You can talk to
people at dinnertime.

1442
00:55:24,150 --> 00:55:26,510
We may have time for questions
at the end of the night.

1443
00:55:26,510 --> 00:55:27,009
We'll see.

1444
00:55:27,009 --> 00:55:30,290

1445
00:55:30,290 --> 00:55:30,790
All right.

1446
00:55:30,790 --> 00:55:35,419
So our next speaker is Adam
Grossman from Forecast.

1447
00:55:35,419 --> 00:55:37,960
Really, if you haven't looked
at this, you should look at it.

1448
00:55:37,960 --> 00:55:40,251
You should pull it up on your
browser, maybe right now,

1449
00:55:40,251 --> 00:55:42,880
and see how it is.

1450
00:55:42,880 --> 00:55:44,310
One quick question.

1451
00:55:44,310 --> 00:55:46,720
Is everyone OK on temperature?

1452
00:55:46,720 --> 00:55:48,475
Raise your hand if
you're too warm.

1453
00:55:48,475 --> 00:55:51,430

1454
00:55:51,430 --> 00:55:52,165
OK.

1455
00:55:52,165 --> 00:55:52,665
Looks good.

1456
00:55:52,665 --> 00:56:29,624

1457
00:56:29,624 --> 00:56:31,290
ADAM GROSSMAN: You'll
have to excuse me.

1458
00:56:31,290 --> 00:56:32,790
This is my first
time using Keynote.

1459
00:56:32,790 --> 00:56:37,260

1460
00:56:37,260 --> 00:56:38,620
All right.

1461
00:56:38,620 --> 00:56:39,460
Word of warning.

1462
00:56:39,460 --> 00:56:41,290
I'm getting over a cold.

1463
00:56:41,290 --> 00:56:45,440
So I'm really hoping that my
voice lasts the entire thing.

1464
00:56:45,440 --> 00:56:46,750
So I'll try to keep this short.

1465
00:56:46,750 --> 00:56:49,960
And also, full disclosure.

1466
00:56:49,960 --> 00:56:53,410
Right now, I'm a little
bit high on the 'Tussin.

1467
00:56:53,410 --> 00:56:56,930
And it turns out, I
just learned this right

1468
00:56:56,930 --> 00:56:59,020
before coming here,
that you're not

1469
00:56:59,020 --> 00:57:02,230
supposed to mix cold
medicine with whiskey.

1470
00:57:02,230 --> 00:57:04,580
I didn't know that.

1471
00:57:04,580 --> 00:57:08,480
But that train has sailed.

1472
00:57:08,480 --> 00:57:15,310
So we're going to
make the best of it.

1473
00:57:15,310 --> 00:57:16,560
I'm Adam Grossman.

1474
00:57:16,560 --> 00:57:20,360
I work for a tiny little
two-person company

1475
00:57:20,360 --> 00:57:21,580
called Dark Sky.

1476
00:57:21,580 --> 00:57:24,380

1477
00:57:24,380 --> 00:57:26,810
We make weather
prediction software.

1478
00:57:26,810 --> 00:57:29,240
We have an iOS app
called Dark Sky.

1479
00:57:29,240 --> 00:57:31,710
We have a weather API
for other developers.

1480
00:57:31,710 --> 00:57:35,440
And we make, more
recently, a weather website

1481
00:57:35,440 --> 00:57:37,270
called Forecast.

1482
00:57:37,270 --> 00:57:38,876
It's forecast.io.

1483
00:57:38,876 --> 00:57:40,250
If you want to
give us heartburn,

1484
00:57:40,250 --> 00:57:42,180
you can call it
"forecast-ee-oh."

1485
00:57:42,180 --> 00:57:45,512
And it looks like
this on the desktop.

1486
00:57:45,512 --> 00:57:48,880
On mobile, it looks
more like this.

1487
00:57:48,880 --> 00:57:50,220
That's the iPhone version.

1488
00:57:50,220 --> 00:57:56,830
And we really tried hard to
make the mobile experience

1489
00:57:56,830 --> 00:57:59,540
feel like a native app.

1490
00:57:59,540 --> 00:58:01,230
So you save it to
your home screen.

1491
00:58:01,230 --> 00:58:02,850
In fact, we require it.

1492
00:58:02,850 --> 00:58:05,430
And that's a very
controversial decision.

1493
00:58:05,430 --> 00:58:06,940
It lives on your homescreen.

1494
00:58:06,940 --> 00:58:08,100
It's got a little icon.

1495
00:58:08,100 --> 00:58:09,870
It fits in with
all the other apps.

1496
00:58:09,870 --> 00:58:13,180

1497
00:58:13,180 --> 00:58:13,930
And you launch it.

1498
00:58:13,930 --> 00:58:16,055
And you get something that
looks like a native app.

1499
00:58:16,055 --> 00:58:17,512
And when you slide
between views,

1500
00:58:17,512 --> 00:58:18,720
it's a nice smooth animation.

1501
00:58:18,720 --> 00:58:22,050
And we even got a nice,
smoothly animating radar map.

1502
00:58:22,050 --> 00:58:27,447
And the reason we
did this &mdash; and I

1503
00:58:27,447 --> 00:58:28,780
don't recommend it for all apps.

1504
00:58:28,780 --> 00:58:32,060
But the reason we did this is
because if you want a weather

1505
00:58:32,060 --> 00:58:35,375
app on your phone, and you've
got your phone and you're out

1506
00:58:35,375 --> 00:58:37,500
and you want to access the
weather, the last thing

1507
00:58:37,500 --> 00:58:40,230
you want to do is
open your web browser,

1508
00:58:40,230 --> 00:58:42,680
navigate to some weather
website, enter your location,

1509
00:58:42,680 --> 00:58:43,970
and wait for it to load.

1510
00:58:43,970 --> 00:58:47,020
You just want to launch an
app and get the weather.

1511
00:58:47,020 --> 00:58:49,510
So if we had gone the
more traditional route,

1512
00:58:49,510 --> 00:58:52,510
I think a lot of people
just wouldn't use it.

1513
00:58:52,510 --> 00:58:55,540
So that's the reason
that we did it.

1514
00:58:55,540 --> 00:58:59,150
Now, a lot of ink
has been spilled

1515
00:58:59,150 --> 00:59:04,030
on the topic of mobile
web UI performance

1516
00:59:04,030 --> 00:59:09,350
and the bigger picture question
of what's the future of mobile.

1517
00:59:09,350 --> 00:59:10,880
Is it native apps?

1518
00:59:10,880 --> 00:59:13,620
Or is it the mobile web?

1519
00:59:13,620 --> 00:59:15,650
And more recently,
the question has

1520
00:59:15,650 --> 00:59:20,550
been why are mobile web apps so
crummy compared to native apps?

1521
00:59:20,550 --> 00:59:22,230
And they are.

1522
00:59:22,230 --> 00:59:24,480
If you take the
average mobile web app

1523
00:59:24,480 --> 00:59:26,950
and you compare it to
the average native app,

1524
00:59:26,950 --> 00:59:28,430
it doesn't perform as well.

1525
00:59:28,430 --> 00:59:31,260
And of course, there
are always exceptions.

1526
00:59:31,260 --> 00:59:35,990
And if you do some Googling,
the general consensus,

1527
00:59:35,990 --> 00:59:37,490
if there is such a
thing on the web,

1528
00:59:37,490 --> 00:59:41,900
is that web apps are slow
because JavaScript is slow.

1529
00:59:41,900 --> 00:59:44,290
There was a great article,
great blog post put out

1530
00:59:44,290 --> 00:59:47,260
by a guy named Drew
Crawford called

1531
00:59:47,260 --> 00:59:49,660
"Why Mobile Web Apps Are Slow."

1532
00:59:49,660 --> 00:59:51,420
And he did a comparison.

1533
00:59:51,420 --> 00:59:56,080
He showed benchmarks of
JavaScript versus native code.

1534
00:59:56,080 --> 00:59:59,050
And he found, of course,
that especially on mobile,

1535
00:59:59,050 --> 01:00:01,490
JavaScript is way
slower than native code.

1536
01:00:01,490 --> 01:00:04,354
And his conclusion
is that web apps

1537
01:00:04,354 --> 01:00:06,270
can't compete with native
apps because they're

1538
01:00:06,270 --> 01:00:07,730
written in JavaScript.

1539
01:00:07,730 --> 01:00:10,955
And JavaScript has
to compete with,

1540
01:00:10,955 --> 01:00:14,160
on iOS, Objective-C,
which is nice and fast.

1541
01:00:14,160 --> 01:00:18,580
On Android, it's generally
Java, even BlackBerry,

1542
01:00:18,580 --> 01:00:19,405
presumably Fortran.

1543
01:00:19,405 --> 01:00:23,410

1544
01:00:23,410 --> 01:00:25,390
And all of these are fast.

1545
01:00:25,390 --> 01:00:28,790
And JavaScript is
comparatively much slower.

1546
01:00:28,790 --> 01:00:31,940
And that's why mobile
web apps are slow.

1547
01:00:31,940 --> 01:00:33,390
This is not true.

1548
01:00:33,390 --> 01:00:37,260
Web apps are not slow and
crummy because JavaScript slow.

1549
01:00:37,260 --> 01:00:40,040
And the reason is really simple.

1550
01:00:40,040 --> 01:00:45,120
Graphical rendering on the web
does not happen in JavaScript.

1551
01:00:45,120 --> 01:00:48,700
Unless you're doing
pixel-by-pixel graphics

1552
01:00:48,700 --> 01:00:52,630
on a canvas element, nothing
is being drawn by JavaScript.

1553
01:00:52,630 --> 01:00:56,786
It's all being drawn by the
engine underneath it which

1554
01:00:56,786 --> 01:00:57,910
has been heavily optimized.

1555
01:00:57,910 --> 01:01:01,860
And in fact, on iOS,
graphical rendering

1556
01:01:01,860 --> 01:01:05,760
is not done in Objective-C.
Most of it, at least

1557
01:01:05,760 --> 01:01:08,330
the heavy lifting, is
offloaded onto the GPU.

1558
01:01:08,330 --> 01:01:10,530
And in fact, you can
prove this yourself

1559
01:01:10,530 --> 01:01:11,940
with a little
thought experiment.

1560
01:01:11,940 --> 01:01:14,970
Imagine ripping out your GPU,
the little chip on your iPhone,

1561
01:01:14,970 --> 01:01:17,320
and being forced to do
everything in Objective-C.

1562
01:01:17,320 --> 01:01:20,240
You would get a really
crummy experience.

1563
01:01:20,240 --> 01:01:22,640
So really when it comes
to graphical performance,

1564
01:01:22,640 --> 01:01:24,150
it's not about JavaScript.

1565
01:01:24,150 --> 01:01:28,869
It's not about Objective-C.
So that brings us back

1566
01:01:28,869 --> 01:01:29,910
to the original question.

1567
01:01:29,910 --> 01:01:35,520
Why are mobile web apps so
crummy compared to native apps?

1568
01:01:35,520 --> 01:01:39,400
And to answer this
question, I think

1569
01:01:39,400 --> 01:01:44,570
I have to stop and give
you the two rules for how

1570
01:01:44,570 --> 01:01:47,020
to create performant
mobile web apps.

1571
01:01:47,020 --> 01:01:48,740
There's only two rules
you need to know.

1572
01:01:48,740 --> 01:01:52,390
And you only need to know these
two rules and nothing else.

1573
01:01:52,390 --> 01:01:54,120
So you might want to grab a pen.

1574
01:01:54,120 --> 01:01:58,480
The two rules for performant
mobile web UI, number one,

1575
01:01:58,480 --> 01:02:02,840
is to do stuff
that is performant.

1576
01:02:02,840 --> 01:02:06,780
Number two, second
rule, is avoid stuff

1577
01:02:06,780 --> 01:02:09,820
that performs poorly.

1578
01:02:09,820 --> 01:02:13,000
Now, before I continue, a
brief anecdotal interlude.

1579
01:02:13,000 --> 01:02:16,220

1580
01:02:16,220 --> 01:02:18,240
Growing up, I played baseball.

1581
01:02:18,240 --> 01:02:20,160
I was on the little league team.

1582
01:02:20,160 --> 01:02:22,550
And I had a little league coach.

1583
01:02:22,550 --> 01:02:23,340
That's not him.

1584
01:02:23,340 --> 01:02:25,210
He was much fatter.

1585
01:02:25,210 --> 01:02:27,005
And that's the wrong sport.

1586
01:02:27,005 --> 01:02:31,840

1587
01:02:31,840 --> 01:02:33,720
And one day, he gathered
all of us around.

1588
01:02:33,720 --> 01:02:36,050
And he said, kids,
I'm going to tell you

1589
01:02:36,050 --> 01:02:39,630
the key to winning
any baseball game.

1590
01:02:39,630 --> 01:02:41,420
And of course, our
ears perked up.

1591
01:02:41,420 --> 01:02:42,150
And we leaned in.

1592
01:02:42,150 --> 01:02:45,367
And he said, the key to
winning any baseball game

1593
01:02:45,367 --> 01:02:47,075
is to score more runs
than your opponent.

1594
01:02:47,075 --> 01:02:49,740

1595
01:02:49,740 --> 01:02:52,270
Thanks, coach.

1596
01:02:52,270 --> 01:02:53,570
You're a really bad coach.

1597
01:02:53,570 --> 01:02:55,070
And it turns out
he was a bad coach.

1598
01:02:55,070 --> 01:02:56,910
We lost most of the
games that year.

1599
01:02:56,910 --> 01:03:03,380
And I know that this rule
seems very similar in spirit

1600
01:03:03,380 --> 01:03:07,980
to my two rules for
performant mobile web UI.

1601
01:03:07,980 --> 01:03:09,520
But they're not.

1602
01:03:09,520 --> 01:03:10,740
They're not the same.

1603
01:03:10,740 --> 01:03:13,190
And I think there's
some interesting things

1604
01:03:13,190 --> 01:03:17,470
that we can pull from this
if we really, really try.

1605
01:03:17,470 --> 01:03:20,110
The first thing to notice
is that on the surface

1606
01:03:20,110 --> 01:03:23,450
these two rules seem like
the same rule, just worded

1607
01:03:23,450 --> 01:03:26,990
in two different ways, so I can
fill up two points on a slide.

1608
01:03:26,990 --> 01:03:30,690
But really, I think
they're different.

1609
01:03:30,690 --> 01:03:34,030
And one of these
rules is much harder

1610
01:03:34,030 --> 01:03:36,364
to accomplish than
the other rule.

1611
01:03:36,364 --> 01:03:38,780
And if you're going to ask
someone who is just starting up

1612
01:03:38,780 --> 01:03:41,590
in web development
which rule was easy

1613
01:03:41,590 --> 01:03:43,400
and which rule
was hard, he would

1614
01:03:43,400 --> 01:03:48,310
say, the hard rule is the first
one &mdash; doing stuff that performs

1615
01:03:48,310 --> 01:03:50,752
well, finding the
techniques that you need,

1616
01:03:50,752 --> 01:03:52,710
because there's lot of
stuff you need to learn.

1617
01:03:52,710 --> 01:03:54,180
And learning is hard.

1618
01:03:54,180 --> 01:03:57,610
And you may have to learn about
CSS transitions, and Appcache,

1619
01:03:57,610 --> 01:04:01,740
and browser compatibility,
and all of that.

1620
01:04:01,740 --> 01:04:02,750
And that's really hard.

1621
01:04:02,750 --> 01:04:05,880
Meanwhile, rule number
two &mdash; avoiding stuff.

1622
01:04:05,880 --> 01:04:06,580
That's easy.

1623
01:04:06,580 --> 01:04:07,880
That's not doing something.

1624
01:04:07,880 --> 01:04:09,680
And not doing something
is really easy.

1625
01:04:09,680 --> 01:04:11,724
And you can just try things.

1626
01:04:11,724 --> 01:04:14,140
And if you look on your phone
and they don't perform well,

1627
01:04:14,140 --> 01:04:15,790
well, you just don't include it.

1628
01:04:15,790 --> 01:04:19,170
And so that's really easy.

1629
01:04:19,170 --> 01:04:24,150
But I think true enlightenment
comes from the realization

1630
01:04:24,150 --> 01:04:27,900
that the situation is
reversed, that, in actuality,

1631
01:04:27,900 --> 01:04:31,120
the hard one is to avoid
stuff that performs poorly.

1632
01:04:31,120 --> 01:04:35,010
And the easy one is to do
stuff that performs well.

1633
01:04:35,010 --> 01:04:38,070
I need my water.

1634
01:04:38,070 --> 01:04:44,930
So I've been doing web
development for a while.

1635
01:04:44,930 --> 01:04:48,920
I was doing freelance
before I started Dark Sky.

1636
01:04:48,920 --> 01:04:52,921
But I'd never done any big
mobile project, like Forecast.

1637
01:04:52,921 --> 01:04:54,670
And I didn't know,
really, where to start.

1638
01:04:54,670 --> 01:04:56,836
I didn't know what the
performance bottlenecks were.

1639
01:04:56,836 --> 01:05:00,130

1640
01:05:00,130 --> 01:05:05,000
Well, what I did was
I went to Google.

1641
01:05:05,000 --> 01:05:08,140
And I asked Google,
hey Google, how do I

1642
01:05:08,140 --> 01:05:10,870
make smooth animations
in mobile web apps?

1643
01:05:10,870 --> 01:05:14,140
And Google said, hey,
here are some links

1644
01:05:14,140 --> 01:05:15,410
you might like to read.

1645
01:05:15,410 --> 01:05:17,752
And there's a whole
bunch of them.

1646
01:05:17,752 --> 01:05:19,710
And the first thing you
learn is that if you're

1647
01:05:19,710 --> 01:05:22,400
going to make mobile
animations that are performant,

1648
01:05:22,400 --> 01:05:25,370
you should use CSS transitions
and transforms because they're

1649
01:05:25,370 --> 01:05:27,050
hardware accelerated
and they're fast.

1650
01:05:27,050 --> 01:05:28,120
So I went back to Google.

1651
01:05:28,120 --> 01:05:32,030
And I said, tell me about CSS
transforms and transitions.

1652
01:05:32,030 --> 01:05:35,500
And it worked, even though
I spelled transitions wrong.

1653
01:05:35,500 --> 01:05:39,400
And suddenly, in
a weekend, I was

1654
01:05:39,400 --> 01:05:43,000
able to make my animations fast
and performant on my iPhone.

1655
01:05:43,000 --> 01:05:44,500
So then I went on
to the next thing.

1656
01:05:44,500 --> 01:05:46,144
I asked Google
about touch events.

1657
01:05:46,144 --> 01:05:47,560
And it told me
about touch events,

1658
01:05:47,560 --> 01:05:50,059
how to capture the event when
your finger touches the phone.

1659
01:05:50,059 --> 01:05:54,130
And suddenly, my smooth
animations were interactive.

1660
01:05:54,130 --> 01:05:55,590
You can interact with them.

1661
01:05:55,590 --> 01:05:56,950
And then I got excited.

1662
01:05:56,950 --> 01:05:59,075
And I went on and I asked
Google about Appcache.

1663
01:05:59,075 --> 01:06:00,450
It is this thing
I'd heard about.

1664
01:06:00,450 --> 01:06:02,500
I always heard that it
was tough and confusing.

1665
01:06:02,500 --> 01:06:03,921
But you ask Google about it.

1666
01:06:03,921 --> 01:06:05,670
And it gives you the
links, the blog posts

1667
01:06:05,670 --> 01:06:06,590
that you need to know.

1668
01:06:06,590 --> 01:06:09,890
And the Appcache is
something that, well,

1669
01:06:09,890 --> 01:06:11,550
it tells the browser
to cache the app,

1670
01:06:11,550 --> 01:06:13,008
so that next time
you go to it, you

1671
01:06:13,008 --> 01:06:17,440
don't have to pull in all
of the HTML and JavaScript.

1672
01:06:17,440 --> 01:06:21,900
And suddenly, your
interactive, smooth animations

1673
01:06:21,900 --> 01:06:23,030
now load quickly.

1674
01:06:23,030 --> 01:06:25,130
And finally, you want
to make it into an app

1675
01:06:25,130 --> 01:06:26,150
that you save to
your home screen.

1676
01:06:26,150 --> 01:06:28,410
So I asked Google, how do I save
mobile apps to the home screen,

1677
01:06:28,410 --> 01:06:29,951
because that would
be really awesome?

1678
01:06:29,951 --> 01:06:33,750
And it tells you about
metatags that you

1679
01:06:33,750 --> 01:06:34,940
can include in your page.

1680
01:06:34,940 --> 01:06:35,980
It's really easy.

1681
01:06:35,980 --> 01:06:39,580
And when you include
those metatags,

1682
01:06:39,580 --> 01:06:43,070
the Chrome disappears, the
back button and what have you.

1683
01:06:43,070 --> 01:06:46,140
And you now have an app
that fills the screen.

1684
01:06:46,140 --> 01:06:49,110
And you also find about
metatags for specifying icons.

1685
01:06:49,110 --> 01:06:51,930
So very little work in about
two weekends of Googling.

1686
01:06:51,930 --> 01:06:52,970
It's not tough.

1687
01:06:52,970 --> 01:06:56,718
In two weekends,
you can have an app

1688
01:06:56,718 --> 01:06:58,810
that lives on your home
screen, has an icon.

1689
01:06:58,810 --> 01:07:01,310
And when you launch the icon,
you get an app in full screen.

1690
01:07:01,310 --> 01:07:02,730
And it's performant.

1691
01:07:02,730 --> 01:07:03,590
And it's great.

1692
01:07:03,590 --> 01:07:05,310
And suddenly, the
"New York Times"

1693
01:07:05,310 --> 01:07:08,070
is asking you to
give presentations.

1694
01:07:08,070 --> 01:07:12,510
And I think that was the
body from someone else.

1695
01:07:12,510 --> 01:07:13,990
That's not my body.

1696
01:07:13,990 --> 01:07:17,102
So learning the techniques
that perform well

1697
01:07:17,102 --> 01:07:18,560
is actually pretty
straightforward.

1698
01:07:18,560 --> 01:07:20,940
It doesn't take that long,
especially if you're already

1699
01:07:20,940 --> 01:07:22,480
a web developer.

1700
01:07:22,480 --> 01:07:27,500
And we like to think that
web development is difficult,

1701
01:07:27,500 --> 01:07:30,220
because it's our jobs,
it's our livelihoods.

1702
01:07:30,220 --> 01:07:33,560
But in reality, the hard
part is all the stuff that

1703
01:07:33,560 --> 01:07:35,830
happens behind the scenes,
all the people that

1704
01:07:35,830 --> 01:07:38,540
work on the web kit team,
people at Google and Apple

1705
01:07:38,540 --> 01:07:41,390
and Mozilla, who are
making the tools,

1706
01:07:41,390 --> 01:07:44,090
doing the hard work to give
us the handful of tools

1707
01:07:44,090 --> 01:07:47,940
to make mobile apps
that perform well.

1708
01:07:47,940 --> 01:07:49,470
So this is easy.

1709
01:07:49,470 --> 01:07:53,560
And I really think that avoiding
techniques that perform poorly

1710
01:07:53,560 --> 01:07:56,380
is the hard part.

1711
01:07:56,380 --> 01:07:58,550
This is a little bit
counterintuitive,

1712
01:07:58,550 --> 01:08:01,910
because introducing crummy
performance on the web is

1713
01:08:01,910 --> 01:08:03,810
really an active endeavour.

1714
01:08:03,810 --> 01:08:05,990
The default is good performance.

1715
01:08:05,990 --> 01:08:11,140
So one of my favorite mobile
websites is Wikipedia.

1716
01:08:11,140 --> 01:08:14,120
And this is one of the
only content-heavy sites

1717
01:08:14,120 --> 01:08:16,260
where I actually prefer
their mobile site

1718
01:08:16,260 --> 01:08:20,060
over their desktop
site on my phone.

1719
01:08:20,060 --> 01:08:21,240
And it performs beautifully.

1720
01:08:21,240 --> 01:08:23,359
I think the most complicated
thing on the site

1721
01:08:23,359 --> 01:08:25,550
is an auto complete
in the search.

1722
01:08:25,550 --> 01:08:27,760
But they don't try
to do anything fancy.

1723
01:08:27,760 --> 01:08:30,029
And because of that, they
get great performance.

1724
01:08:30,029 --> 01:08:32,430
It scrolls beautifully.

1725
01:08:32,430 --> 01:08:35,020
When you click on a
sub-heading that's collapsed,

1726
01:08:35,020 --> 01:08:37,180
it just appears.

1727
01:08:37,180 --> 01:08:41,450
No jittery animations because
there aren't any animations.

1728
01:08:41,450 --> 01:08:45,120
So really, good
performance is the default.

1729
01:08:45,120 --> 01:08:49,717
And when you come
across crummy websites,

1730
01:08:49,717 --> 01:08:51,800
it's because someone is
actively making it crummy.

1731
01:08:51,800 --> 01:08:53,490
And that's a very
perplexing thing.

1732
01:08:53,490 --> 01:08:56,620
One example is I
was reading a blog.

1733
01:08:56,620 --> 01:08:58,729
And it had a mobile interface.

1734
01:08:58,729 --> 01:09:02,609
And I was scrolling
through it vertically.

1735
01:09:02,609 --> 01:09:05,399
And as you're apt to do,
because your thumb is

1736
01:09:05,399 --> 01:09:08,979
on a weird swivel, I couldn't
scroll perfectly up and down.

1737
01:09:08,979 --> 01:09:10,750
And I managed to go a
little bit sideways.

1738
01:09:10,750 --> 01:09:13,649
And all of a sudden, this
red semicircle appeared.

1739
01:09:13,649 --> 01:09:17,410
And it had this chunky animated
bitty, disgusting loading

1740
01:09:17,410 --> 01:09:18,340
screen.

1741
01:09:18,340 --> 01:09:19,720
The UI froze up.

1742
01:09:19,720 --> 01:09:23,149
And then a new blog post loaded.

1743
01:09:23,149 --> 01:09:25,960
And it was because someone tried
to get fancy with a swiping

1744
01:09:25,960 --> 01:09:28,260
gesture to load
up new blog posts.

1745
01:09:28,260 --> 01:09:29,470
And it failed miserably.

1746
01:09:29,470 --> 01:09:34,460
And this is someone who was
not heeding rule number two.

1747
01:09:34,460 --> 01:09:37,330
Another example is
on the ESPN site.

1748
01:09:37,330 --> 01:09:42,370
I just saw this where
you get a main headline.

1749
01:09:42,370 --> 01:09:46,191
And then you get one
sub-story and a more link.

1750
01:09:46,191 --> 01:09:48,149
And when you click that
more link, it comes up.

1751
01:09:48,149 --> 01:09:50,050
And you get more articles.

1752
01:09:50,050 --> 01:09:53,420
And when you do that, it is
this chunky, horrible animation

1753
01:09:53,420 --> 01:09:55,550
that's a few frames a second.

1754
01:09:55,550 --> 01:09:58,120
And doing this in a
way that is smooth

1755
01:09:58,120 --> 01:10:01,590
takes no extra work than doing
it in a way that's not smooth.

1756
01:10:01,590 --> 01:10:03,560
And this is a major website.

1757
01:10:03,560 --> 01:10:08,030
And they've failed to
heed rule number two.

1758
01:10:08,030 --> 01:10:10,190
There are design
examples of this too.

1759
01:10:10,190 --> 01:10:13,590
Any time you see
content that spills over

1760
01:10:13,590 --> 01:10:16,975
or nav that spills
over your content,

1761
01:10:16,975 --> 01:10:22,170
it's someone who has actively
incorporated crummy design.

1762
01:10:22,170 --> 01:10:25,560
My favorite example
is this website.

1763
01:10:25,560 --> 01:10:26,640
You go here.

1764
01:10:26,640 --> 01:10:29,420
And I exaggerated by
putting it in landscape.

1765
01:10:29,420 --> 01:10:31,700
But you have browser Chrome
on the top and the bottom.

1766
01:10:31,700 --> 01:10:35,180
And then they've introduced
a header and a footer that's

1767
01:10:35,180 --> 01:10:36,810
always there, fixed positioning.

1768
01:10:36,810 --> 01:10:40,800
And I don't understand
the share links.

1769
01:10:40,800 --> 01:10:43,740
It's as if you're going to get
halfway through the article,

1770
01:10:43,740 --> 01:10:47,110
and you just can't wait
to share it on Twitter.

1771
01:10:47,110 --> 01:10:48,880
So it's there and again.

1772
01:10:48,880 --> 01:10:51,120
So it's not just
performance in terms

1773
01:10:51,120 --> 01:10:53,920
of making smooth animations.

1774
01:10:53,920 --> 01:10:55,542
It's also the design too.

1775
01:10:55,542 --> 01:10:57,000
And this is someone
actively making

1776
01:10:57,000 --> 01:10:58,610
the design worse by doing this.

1777
01:10:58,610 --> 01:11:00,280
The rest of the site
looks really nice,

1778
01:11:00,280 --> 01:11:01,980
but this one aspect.

1779
01:11:01,980 --> 01:11:04,750
So why do we do it?

1780
01:11:04,750 --> 01:11:06,350
If it's an active
thing, it seems

1781
01:11:06,350 --> 01:11:09,420
like it should be
really easy to avoid.

1782
01:11:09,420 --> 01:11:13,300
And it seems to be a bigger
problem on the mobile web

1783
01:11:13,300 --> 01:11:15,510
than in native apps.

1784
01:11:15,510 --> 01:11:16,550
And why is that?

1785
01:11:16,550 --> 01:11:19,210
I think this rule &mdash;
avoid stuff that

1786
01:11:19,210 --> 01:11:22,430
performs poorly &mdash; I
think the key difference

1787
01:11:22,430 --> 01:11:26,070
between native apps and mobile
web apps is that this rule is

1788
01:11:26,070 --> 01:11:28,080
really easy to break on the web.

1789
01:11:28,080 --> 01:11:31,470
And it's really hard to break
when you make native apps.

1790
01:11:31,470 --> 01:11:33,650
So what do I mean by this?

1791
01:11:33,650 --> 01:11:38,350
On the web, you're given all
sorts of ways to do things.

1792
01:11:38,350 --> 01:11:40,970
And generally, the way
that you've learned them

1793
01:11:40,970 --> 01:11:43,272
when you're just
making static content

1794
01:11:43,272 --> 01:11:44,730
is not the way you
should do things

1795
01:11:44,730 --> 01:11:47,040
when you're trying to make
dynamic animations that

1796
01:11:47,040 --> 01:11:47,980
perform well.

1797
01:11:47,980 --> 01:11:50,420
So one example is say
you make a static page

1798
01:11:50,420 --> 01:11:52,570
and you want to position
something absolutely.

1799
01:11:52,570 --> 01:11:55,940
So you give it a CSS
position absolute.

1800
01:11:55,940 --> 01:11:58,340
And you said it's top
in left attributes.

1801
01:11:58,340 --> 01:12:00,842
And you put it somewhere.

1802
01:12:00,842 --> 01:12:02,550
And now, say you want
to make it dynamic.

1803
01:12:02,550 --> 01:12:03,520
You want to animate it.

1804
01:12:03,520 --> 01:12:06,000
I think the first thing we
all do is we load up jQuery.

1805
01:12:06,000 --> 01:12:08,880
And we animate the top and
left attributes in jQuery.

1806
01:12:08,880 --> 01:12:11,485
And when you try it,
historically, that

1807
01:12:11,485 --> 01:12:13,690
has given really poor
performance on mobile.

1808
01:12:13,690 --> 01:12:18,240
You should really be
using CSS transitions.

1809
01:12:18,240 --> 01:12:23,980
Meanwhile, on native apps &mdash; and
this is especially true in iOS.

1810
01:12:23,980 --> 01:12:26,490
As far as native apps go,
I'm only an iOS developer,

1811
01:12:26,490 --> 01:12:29,740
but I imagine this
is true on Android.

1812
01:12:29,740 --> 01:12:34,950
Apple makes it really hard to
do things that perform poorly.

1813
01:12:34,950 --> 01:12:38,892
Apple has &mdash; you do UI
kit and core animation.

1814
01:12:38,892 --> 01:12:41,350
And there's all sorts of juicy
things you can do with this.

1815
01:12:41,350 --> 01:12:44,007
And you can't find anything
in there that performs poorly.

1816
01:12:44,007 --> 01:12:46,090
If you try to break it and
try to do these things,

1817
01:12:46,090 --> 01:12:48,150
it's really hard to
do that, because Apple

1818
01:12:48,150 --> 01:12:49,650
has it locked down.

1819
01:12:49,650 --> 01:12:52,650
And they only give you
tools that perform well.

1820
01:12:52,650 --> 01:12:57,847
And one big example of this
is it is possible to make,

1821
01:12:57,847 --> 01:12:59,680
of course, iOS apps
that don't perform well.

1822
01:12:59,680 --> 01:13:01,850
And the biggest
way to do this is

1823
01:13:01,850 --> 01:13:04,830
to do custom drawing operations.

1824
01:13:04,830 --> 01:13:09,280
And so in the iOS world, there
are things called UI views.

1825
01:13:09,280 --> 01:13:13,480
And UI views, you can think of
them as DIVs in the HTML world.

1826
01:13:13,480 --> 01:13:15,350
They're just generic
rectangle containers

1827
01:13:15,350 --> 01:13:16,640
that you can put stuff in.

1828
01:13:16,640 --> 01:13:19,020
And you can implement
an optional method

1829
01:13:19,020 --> 01:13:21,790
on them called drawRect.

1830
01:13:21,790 --> 01:13:22,550
It's optional.

1831
01:13:22,550 --> 01:13:24,160
You usually don't
want to use it.

1832
01:13:24,160 --> 01:13:26,960
But when you implement
it, it turns a UI view

1833
01:13:26,960 --> 01:13:29,370
into, essentially, a
canvas element, where

1834
01:13:29,370 --> 01:13:31,140
you can do a canvas
drawing to it.

1835
01:13:31,140 --> 01:13:34,680
And actually, the syntax is
very similar to the syntax

1836
01:13:34,680 --> 01:13:38,960
for a canvas drawing, presumably
because canvas was originally

1837
01:13:38,960 --> 01:13:40,890
developed by Apple.

1838
01:13:40,890 --> 01:13:45,130
So Apple cares so much
about you not using this

1839
01:13:45,130 --> 01:13:47,596
that they'll actually
put this optional method.

1840
01:13:47,596 --> 01:13:49,470
When you go into Xcode
and you create a file,

1841
01:13:49,470 --> 01:13:51,002
they'll put this method here.

1842
01:13:51,002 --> 01:13:51,960
They'll comment it out.

1843
01:13:51,960 --> 01:13:54,272
And in the comment, they
tell you not to use it.

1844
01:13:54,272 --> 01:13:55,980
And I think the only
reason they actually

1845
01:13:55,980 --> 01:13:58,770
put this here is so that they
can tell you that it adversely

1846
01:13:58,770 --> 01:13:59,970
affects performance.

1847
01:13:59,970 --> 01:14:04,140
And so I think this is
the biggest difference

1848
01:14:04,140 --> 01:14:08,940
between the native
world and the web world

1849
01:14:08,940 --> 01:14:12,100
is that it's really
hard to break this rule.

1850
01:14:12,100 --> 01:14:14,930
So where do we go from here?

1851
01:14:14,930 --> 01:14:18,240
How do we avoid making
crummy web apps?

1852
01:14:18,240 --> 01:14:22,580
I think the biggest thing,
more so than on native apps,

1853
01:14:22,580 --> 01:14:24,761
is discipline.

1854
01:14:24,761 --> 01:14:26,920
We need to take
great care that we

1855
01:14:26,920 --> 01:14:29,180
don't introduce
poor performance.

1856
01:14:29,180 --> 01:14:35,170
Some things to watch out
for are &mdash; well, the biggest

1857
01:14:35,170 --> 01:14:37,510
thing to watch out for,
and this is something

1858
01:14:37,510 --> 01:14:41,990
that I fall for all the
time, is falling in love

1859
01:14:41,990 --> 01:14:43,020
with a bad idea.

1860
01:14:43,020 --> 01:14:44,950
So maybe you have an idea.

1861
01:14:44,950 --> 01:14:46,962
Presumably, the person
who made that blog post

1862
01:14:46,962 --> 01:14:48,670
with the really awful
swiping, he fell in

1863
01:14:48,670 --> 01:14:53,030
love with the idea of swiping to
get back and forth between blog

1864
01:14:53,030 --> 01:14:54,704
posts.

1865
01:14:54,704 --> 01:14:56,120
For me, it's been
a lot of things.

1866
01:14:56,120 --> 01:14:58,070
I wanted to implement
a thing in Forecast

1867
01:14:58,070 --> 01:15:00,260
for deleting saved
locations where

1868
01:15:00,260 --> 01:15:03,460
when you click that delete
button, the thing jumps up,

1869
01:15:03,460 --> 01:15:06,140
crinkles up, gets thrown
away into a trash bin,

1870
01:15:06,140 --> 01:15:07,260
and fades out.

1871
01:15:07,260 --> 01:15:10,510
And it's really seductive to
fall in love with an idea.

1872
01:15:10,510 --> 01:15:12,480
And when you test
it, it will often

1873
01:15:12,480 --> 01:15:15,870
work because you're testing
it in an environment that's

1874
01:15:15,870 --> 01:15:19,100
not a real-world environment.

1875
01:15:19,100 --> 01:15:21,100
And it turns out when you
actually implement it,

1876
01:15:21,100 --> 01:15:23,641
when it's actually interacting
with other things on the page,

1877
01:15:23,641 --> 01:15:24,490
sometimes it fails.

1878
01:15:24,490 --> 01:15:26,814
And if you fall in
love with a bad idea,

1879
01:15:26,814 --> 01:15:28,480
it's sometimes really
hard to let it go.

1880
01:15:28,480 --> 01:15:30,400
And it stays in.

1881
01:15:30,400 --> 01:15:32,640
And sometimes you
don't listen when

1882
01:15:32,640 --> 01:15:35,620
your friends try to
talk you out of it.

1883
01:15:35,620 --> 01:15:38,100
And they say that idea
is no good for you.

1884
01:15:38,100 --> 01:15:39,650
And that's fine.

1885
01:15:39,650 --> 01:15:40,880
Experiment.

1886
01:15:40,880 --> 01:15:42,290
Fool around a little bit.

1887
01:15:42,290 --> 01:15:43,630
We're young.

1888
01:15:43,630 --> 01:15:46,570
But don't settle down too
easily if it turns out

1889
01:15:46,570 --> 01:15:49,780
that the idea turns out
to be no good for you.

1890
01:15:49,780 --> 01:15:51,917
I don't know why I
used this picture

1891
01:15:51,917 --> 01:15:54,250
of an example of a couple
that's no good for each other.

1892
01:15:54,250 --> 01:15:55,970
They look really happy.

1893
01:15:55,970 --> 01:16:00,220

1894
01:16:00,220 --> 01:16:02,364
And if one of them
decides to change

1895
01:16:02,364 --> 01:16:03,530
their hair before the other.

1896
01:16:03,530 --> 01:16:06,260

1897
01:16:06,260 --> 01:16:08,630
Another thing to
avoid is, of course,

1898
01:16:08,630 --> 01:16:10,110
designer-developer disconnect.

1899
01:16:10,110 --> 01:16:12,910
And this tends to be true at
larger organizations, where

1900
01:16:12,910 --> 01:16:14,842
you have a designer
designing something

1901
01:16:14,842 --> 01:16:15,800
or a team of designers.

1902
01:16:15,800 --> 01:16:17,870
And they hand it
down to developers.

1903
01:16:17,870 --> 01:16:21,610
And time was you could design
something in Photoshop,

1904
01:16:21,610 --> 01:16:23,490
because websites were static.

1905
01:16:23,490 --> 01:16:25,750
And developers
could implement it.

1906
01:16:25,750 --> 01:16:28,050
And sometimes they had
to do disgusting things,

1907
01:16:28,050 --> 01:16:31,220
like chop it up into a grid
of images and use tables.

1908
01:16:31,220 --> 01:16:32,860
But it worked.

1909
01:16:32,860 --> 01:16:36,200
But now, especially
on the mobile web,

1910
01:16:36,200 --> 01:16:37,320
websites are dynamic.

1911
01:16:37,320 --> 01:16:38,150
They're animated.

1912
01:16:38,150 --> 01:16:40,275
And it's really hard to
design for that, especially

1913
01:16:40,275 --> 01:16:41,330
in Photoshop.

1914
01:16:41,330 --> 01:16:43,227
So designers may have
these great ideas

1915
01:16:43,227 --> 01:16:45,310
for how to do things, how
to interact with things.

1916
01:16:45,310 --> 01:16:47,430
And when it comes time
to actually develop them,

1917
01:16:47,430 --> 01:16:48,650
it doesn't work.

1918
01:16:48,650 --> 01:16:52,660
And I think that
very often developers

1919
01:16:52,660 --> 01:16:54,490
don't speak up about it.

1920
01:16:54,490 --> 01:16:56,180
And it stays in there.

1921
01:16:56,180 --> 01:16:59,930
So I think the way to avoid this
is to really &mdash; developers take

1922
01:16:59,930 --> 01:17:04,237
ownership in any design work and
any app that you're working on.

1923
01:17:04,237 --> 01:17:06,570
I don't know any organization
where a developer couldn't

1924
01:17:06,570 --> 01:17:09,240
go back to the designers
and even back to management

1925
01:17:09,240 --> 01:17:11,172
and say, this was a great idea.

1926
01:17:11,172 --> 01:17:13,130
But it turns out when we
actually implement it,

1927
01:17:13,130 --> 01:17:14,170
it doesn't work.

1928
01:17:14,170 --> 01:17:17,450
So there needs to be
this cyclical process

1929
01:17:17,450 --> 01:17:20,170
of development.

1930
01:17:20,170 --> 01:17:24,050
Another thing to avoid is
one platform preference.

1931
01:17:24,050 --> 01:17:25,640
I am an iPhone guy.

1932
01:17:25,640 --> 01:17:27,280
I love my iPhone.

1933
01:17:27,280 --> 01:17:29,680
I will never switch to Android.

1934
01:17:29,680 --> 01:17:31,790
I have a bunch of
Android phones.

1935
01:17:31,790 --> 01:17:33,490
And I never use them.

1936
01:17:33,490 --> 01:17:35,460
I have a Firefox OS device.

1937
01:17:35,460 --> 01:17:39,070
And I really want the Firefox
OS device to be great.

1938
01:17:39,070 --> 01:17:40,460
But it's not that great.

1939
01:17:40,460 --> 01:17:42,050
So I'm really about iOS.

1940
01:17:42,050 --> 01:17:45,510
And this is to the severe
detriment of Forecast

1941
01:17:45,510 --> 01:17:49,941
because it works way better on
iOS than it does on Android.

1942
01:17:49,941 --> 01:17:51,190
So this is something to avoid.

1943
01:17:51,190 --> 01:17:54,370
And this is the lesson
I need to learn.

1944
01:17:54,370 --> 01:17:56,390
But I haven't.

1945
01:17:56,390 --> 01:17:58,050
I can put it in a slide.

1946
01:17:58,050 --> 01:18:04,010
The next thing to avoid is
what I call test blindness.

1947
01:18:04,010 --> 01:18:09,586
And when you develop an app,
as you progress in development,

1948
01:18:09,586 --> 01:18:10,710
you're constantly using it.

1949
01:18:10,710 --> 01:18:12,160
You're constantly
interacting with it.

1950
01:18:12,160 --> 01:18:13,530
You're loading it on your phone.

1951
01:18:13,530 --> 01:18:16,540
And pretty soon, you
learn how to avoid

1952
01:18:16,540 --> 01:18:18,700
interacting with it in
a way that breaks it.

1953
01:18:18,700 --> 01:18:21,130
You know all the
little hidden gotchas.

1954
01:18:21,130 --> 01:18:23,550
And subconsciously,
you avoid it.

1955
01:18:23,550 --> 01:18:25,000
And I do this all the time.

1956
01:18:25,000 --> 01:18:25,750
I'll do something.

1957
01:18:25,750 --> 01:18:26,570
And I'll think it has no bugs.

1958
01:18:26,570 --> 01:18:28,060
And then I'll hand
it to my wife.

1959
01:18:28,060 --> 01:18:30,147
And the very first thing
she does is break it.

1960
01:18:30,147 --> 01:18:31,730
She'll double-tap
on things you're not

1961
01:18:31,730 --> 01:18:32,952
supposed to double-tap on.

1962
01:18:32,952 --> 01:18:34,910
She'll slide when you're
not supposed to slide.

1963
01:18:34,910 --> 01:18:37,260
And it completely falls apart.

1964
01:18:37,260 --> 01:18:41,010
And so the way I know that
I'm falling for test blindness

1965
01:18:41,010 --> 01:18:45,130
is when I show a new app
to someone new on my phone.

1966
01:18:45,130 --> 01:18:49,470
And instead of handing
it to them, I load it up.

1967
01:18:49,470 --> 01:18:50,550
And I show it to them.

1968
01:18:50,550 --> 01:18:52,770
And I show them how I'm
interacting with it.

1969
01:18:52,770 --> 01:18:53,879
Isn't this a great thing?

1970
01:18:53,879 --> 01:18:55,170
And I don't hand over my phone.

1971
01:18:55,170 --> 01:18:56,230
And I've seen
other developers do

1972
01:18:56,230 --> 01:18:57,780
this too when they're
working on something,

1973
01:18:57,780 --> 01:18:58,980
especially when it's in beta.

1974
01:18:58,980 --> 01:19:00,854
And if you're afraid to
hand over your phone,

1975
01:19:00,854 --> 01:19:03,670
if you try to show people it
by you interacting with it,

1976
01:19:03,670 --> 01:19:07,870
then you're probably
succumbing to test blindness.

1977
01:19:07,870 --> 01:19:11,290
So these are the
things to avoid.

1978
01:19:11,290 --> 01:19:14,000
And there's lots of
other things to avoid.

1979
01:19:14,000 --> 01:19:17,400
But it really
boils down to this.

1980
01:19:17,400 --> 01:19:20,810
The only way that we're going
to compete with native apps

1981
01:19:20,810 --> 01:19:24,480
is through unflinching
diligence to keep crumminess out

1982
01:19:24,480 --> 01:19:25,850
of our apps.

1983
01:19:25,850 --> 01:19:27,362
Native app developers
have it easy.

1984
01:19:27,362 --> 01:19:28,320
They got it by default.

1985
01:19:28,320 --> 01:19:30,580
But we have to spend every
waking minute that we're

1986
01:19:30,580 --> 01:19:32,860
developing a mobile
web app and make sure

1987
01:19:32,860 --> 01:19:35,890
that crumminess
doesn't get introduced,

1988
01:19:35,890 --> 01:19:39,990
because once it's there, it's
really hard to get rid of it.

1989
01:19:39,990 --> 01:19:42,140
Thank you.

1990
01:19:42,140 --> 01:19:47,080
One quick thing, I do have
one anecdotal postscript

1991
01:19:47,080 --> 01:19:52,550
that has nothing to do with
the mobile web UI performance.

1992
01:19:52,550 --> 01:19:54,642
I had one slide in
here where I was

1993
01:19:54,642 --> 01:19:57,100
going to talk about how web
development is so easy that you

1994
01:19:57,100 --> 01:19:59,150
could teach my
grandmother to do it.

1995
01:19:59,150 --> 01:20:00,950
So here's my
grandmother, presumably,

1996
01:20:00,950 --> 01:20:04,809
rocking out in BBEdit,
listening to 5by5 podcasts.

1997
01:20:04,809 --> 01:20:06,350
Actually, this is
not my grandmother.

1998
01:20:06,350 --> 01:20:09,650
I had to do a Google image
search for old ladies

1999
01:20:09,650 --> 01:20:10,580
on a computer.

2000
01:20:10,580 --> 01:20:13,940
And there's a lot of images
of old ladies on computers.

2001
01:20:13,940 --> 01:20:18,000
But one really strange
phenomenon is even more

2002
01:20:18,000 --> 01:20:19,900
than there are old
ladies on computers,

2003
01:20:19,900 --> 01:20:23,750
there are a bunch of old
ladies smoking cigars.

2004
01:20:23,750 --> 01:20:26,300
I don't understand
this phenomenon.

2005
01:20:26,300 --> 01:20:27,310
It's all over.

2006
01:20:27,310 --> 01:20:31,480
The web is filled with
old ladies smoking cigars.

2007
01:20:31,480 --> 01:20:33,840
This one's my favorite.

2008
01:20:33,840 --> 01:20:34,750
It's inexplicable.

2009
01:20:34,750 --> 01:20:37,230
And this may be the
Robitussin talking,

2010
01:20:37,230 --> 01:20:40,330
but I love that
we live in a world

2011
01:20:40,330 --> 01:20:43,011
where such a thing is possible.

2012
01:20:43,011 --> 01:20:43,985
Thank you.

2013
01:20:43,985 --> 01:20:48,855
[APPLAUSE]

2014
01:20:48,855 --> 01:20:50,620
PETE: Thank you, Adam.

2015
01:20:50,620 --> 01:20:51,120
OK.

2016
01:20:51,120 --> 01:20:52,610
It's time for dinner.

2017
01:20:52,610 --> 01:20:54,610
Wait.

2018
01:20:54,610 --> 01:20:57,100
There is a lot of us.

2019
01:20:57,100 --> 01:20:59,290
There's a small space
for getting through

2020
01:20:59,290 --> 01:21:00,820
to food and drinks.

2021
01:21:00,820 --> 01:21:03,500
Food is on this side.

2022
01:21:03,500 --> 01:21:05,150
Drinks are on this side.

2023
01:21:05,150 --> 01:21:06,030
OK?

2024
01:21:06,030 --> 01:21:09,830
Consider taking the side you're
on to get that thing first.

2025
01:21:09,830 --> 01:21:13,090
We're going to have to cooperate
to get through the food

2026
01:21:13,090 --> 01:21:14,660
and get everyone
through and fed.

2027
01:21:14,660 --> 01:21:16,600
Also, consider that when
you're looking at portions.

2028
01:21:16,600 --> 01:21:17,350
We have more food.

2029
01:21:17,350 --> 01:21:19,920
But be considerate of
your fellow attendee.

2030
01:21:19,920 --> 01:21:22,000
We've got a little bit of time.

2031
01:21:22,000 --> 01:21:31,460
We have 40 &mdash; so we're
meeting back here at 8:30.

2032
01:21:31,460 --> 01:21:32,900
So back in your seats at 8:30.

2033
01:21:32,900 --> 01:21:34,050
You can eat in here.

2034
01:21:34,050 --> 01:21:36,040
You can eat out on the balcony.

2035
01:21:36,040 --> 01:21:36,610
Get to it.

2036
01:21:36,610 --> 02:05:53,631
[MUSIC PLAYING]

2037
02:05:53,631 --> 02:05:58,620
PETE: All right, everybody.

2038
02:05:58,620 --> 02:06:00,866
You can find your seats.

2039
02:06:00,866 --> 02:06:04,300
We're ready to begin the second
part of our show this evening.

2040
02:06:04,300 --> 02:06:06,800
We've got Colt McAnlis
from Google here.

2041
02:06:06,800 --> 02:06:08,880
And he's going to
be doing something,

2042
02:06:08,880 --> 02:06:10,930
if you've never
seen it before, it's

2043
02:06:10,930 --> 02:06:12,160
pretty interesting to watch.

2044
02:06:12,160 --> 02:06:14,650
He's going to be looking
at other people's websites,

2045
02:06:14,650 --> 02:06:17,820
looking at them through
the lens of tooling that's

2046
02:06:17,820 --> 02:06:21,540
available in Chrome and his
expertise as a performance

2047
02:06:21,540 --> 02:06:24,607
expert, and look at performance
issues that are happening

2048
02:06:24,607 --> 02:06:25,690
and why they're happening.

2049
02:06:25,690 --> 02:06:27,400
He'll tell you more about that.

2050
02:06:27,400 --> 02:06:29,599
And we've also got
some stuff on mobile.

2051
02:06:29,599 --> 02:06:31,140
So this should be
pretty interesting.

2052
02:06:31,140 --> 02:06:33,240
So without further ado, Colt
McAnlis, Developer Advocate

2053
02:06:33,240 --> 02:06:33,770
at Google.

2054
02:06:33,770 --> 02:06:37,282
[APPLAUSE]

2055
02:06:37,282 --> 02:06:38,365
COLT MCANLIS: Are we good?

2056
02:06:38,365 --> 02:06:38,640
Test?

2057
02:06:38,640 --> 02:06:39,695
Can everybody hear me?

2058
02:06:39,695 --> 02:06:43,830
Can everyone see how bald I
am from where you're sitting?

2059
02:06:43,830 --> 02:06:47,190
Hands up if you can see
your reflection in my head.

2060
02:06:47,190 --> 02:06:49,330
So I have a really
tough job tonight.

2061
02:06:49,330 --> 02:06:51,880
My job is to try to keep
you entertained and awake

2062
02:06:51,880 --> 02:06:54,620
at this time of night, after
you've been fed and alcoholed.

2063
02:06:54,620 --> 02:06:57,685
So I'm going to try to
do that as best I can.

2064
02:06:57,685 --> 02:06:59,310
Let me introduce
myself really quickly.

2065
02:06:59,310 --> 02:07:00,310
My name is Colt McAnlis.

2066
02:07:00,310 --> 02:07:03,720
I'm actually the team lead
for Chrome Developer Relations

2067
02:07:03,720 --> 02:07:04,680
Performance.

2068
02:07:04,680 --> 02:07:06,900
About a year ago in
January, we actually

2069
02:07:06,900 --> 02:07:10,450
identified that the web
performance community

2070
02:07:10,450 --> 02:07:12,260
was good and doing well.

2071
02:07:12,260 --> 02:07:13,910
But we didn't have
someone focused

2072
02:07:13,910 --> 02:07:16,280
on bringing the message
to people constantly.

2073
02:07:16,280 --> 02:07:19,150
And as talked about in the
previous talks tonight,

2074
02:07:19,150 --> 02:07:21,786
it's really easy to do dumb,
slow things on the web.

2075
02:07:21,786 --> 02:07:23,910
And one of the first things
we need to do with that

2076
02:07:23,910 --> 02:07:25,820
is fix it with education.

2077
02:07:25,820 --> 02:07:28,966
So we defined from the
beginning that after looking

2078
02:07:28,966 --> 02:07:31,340
at all the education and
looking at everything out there,

2079
02:07:31,340 --> 02:07:34,730
they're really three
pillars of web performance.

2080
02:07:34,730 --> 02:07:37,540
Up until now, the web
as a whole has really

2081
02:07:37,540 --> 02:07:38,920
only focused on one of them.

2082
02:07:38,920 --> 02:07:41,040
All you've heard from
most performance experts

2083
02:07:41,040 --> 02:07:43,280
is, how fast does
your website load?

2084
02:07:43,280 --> 02:07:44,780
We've all seen the
studies that show

2085
02:07:44,780 --> 02:07:48,250
that one millisecond of time
actually related to $10 million

2086
02:07:48,250 --> 02:07:50,400
of lost revenue for
site X, Y, and Z.

2087
02:07:50,400 --> 02:07:52,200
And they only really
talk about network.

2088
02:07:52,200 --> 02:07:55,660
But in the modern age
of web applications,

2089
02:07:55,660 --> 02:07:57,590
we often tend to
neglect the other two

2090
02:07:57,590 --> 02:08:01,540
pillars of web performance &mdash;
rendering and compute.

2091
02:08:01,540 --> 02:08:04,130
A great part of the
Forecast.io &mdash; Forecast.io?

2092
02:08:04,130 --> 02:08:07,230

2093
02:08:07,230 --> 02:08:08,750
I wanted to see if
he was listening.

2094
02:08:08,750 --> 02:08:09,590
That was good.

2095
02:08:09,590 --> 02:08:10,090
See?

2096
02:08:10,090 --> 02:08:11,479
I've got to keep you awake too.

2097
02:08:11,479 --> 02:08:13,770
One of the great parts of
the Forecast talk, I believe,

2098
02:08:13,770 --> 02:08:16,729
was when he really said,
we have to actually solve

2099
02:08:16,729 --> 02:08:18,270
this problem of
rendering, because it

2100
02:08:18,270 --> 02:08:19,270
doesn't happen for free.

2101
02:08:19,270 --> 02:08:22,292
I think the existence of
the previous type of web,

2102
02:08:22,292 --> 02:08:24,250
where CSS animations
weren't something you even

2103
02:08:24,250 --> 02:08:28,010
had availability to, allowed
us to do really stupid things.

2104
02:08:28,010 --> 02:08:29,690
And the browser
kept us really fast.

2105
02:08:29,690 --> 02:08:32,440
But now, because we
contend our own yard,

2106
02:08:32,440 --> 02:08:34,330
we're running into
some problems there.

2107
02:08:34,330 --> 02:08:35,940
So when you think
about performance,

2108
02:08:35,940 --> 02:08:37,650
you should know that
network render and compute,

2109
02:08:37,650 --> 02:08:39,483
you can have problems
in all three of these.

2110
02:08:39,483 --> 02:08:43,220
And much like Jake said
earlier, a huge problem

2111
02:08:43,220 --> 02:08:44,870
in one of these
portions can actually

2112
02:08:44,870 --> 02:08:47,310
cloud out issues that are
happening in the other two.

2113
02:08:47,310 --> 02:08:49,980
So as you're going through your
process of finding performance

2114
02:08:49,980 --> 02:08:52,072
issues in your website,
you need to make sure

2115
02:08:52,072 --> 02:08:53,780
that you're evaluating
all three of these

2116
02:08:53,780 --> 02:08:55,560
with the right tools
at the right time.

2117
02:08:55,560 --> 02:08:57,030
And what I'm going
to do tonight is

2118
02:08:57,030 --> 02:08:59,280
I'm going to try to walk you
through some of the sites

2119
02:08:59,280 --> 02:09:01,170
that you've submitted &mdash;
ha, ha, ha, ha, ha &mdash;

2120
02:09:01,170 --> 02:09:04,390
and, hopefully, bruise
your ego a little bit.

2121
02:09:04,390 --> 02:09:05,124
No offense.

2122
02:09:05,124 --> 02:09:06,290
It's what we all have to do.

2123
02:09:06,290 --> 02:09:08,620
Quite frankly, I think one
of the big things we've

2124
02:09:08,620 --> 02:09:10,480
been trying to do with
the web performance

2125
02:09:10,480 --> 02:09:12,270
movement over the
past year is actually

2126
02:09:12,270 --> 02:09:15,000
bruise a lot of egos in the web,
because we're all programmers.

2127
02:09:15,000 --> 02:09:16,050
We're all smart.

2128
02:09:16,050 --> 02:09:17,810
We're too smart, quite frankly.

2129
02:09:17,810 --> 02:09:20,460
And we've got to be taken
down a peg, because we all

2130
02:09:20,460 --> 02:09:23,759
know in here, everyone in here,
think about your coworkers.

2131
02:09:23,759 --> 02:09:25,550
And think about what
really motivates them.

2132
02:09:25,550 --> 02:09:28,080
99% of the time, if you
can bruise their ego

2133
02:09:28,080 --> 02:09:30,330
or challenge them or tell
them they're not good enough

2134
02:09:30,330 --> 02:09:31,755
or the problem is
too hard, that's

2135
02:09:31,755 --> 02:09:33,380
what actually gets
them to move, right?

2136
02:09:33,380 --> 02:09:35,172
AUDIENCE: Or if
you pay them more.

2137
02:09:35,172 --> 02:09:36,280
COLT MCANLIS: OK.

2138
02:09:36,280 --> 02:09:38,780
Maybe, maybe, maybe.

2139
02:09:38,780 --> 02:09:41,590
If you've got Yankees
money, I guess so.

2140
02:09:41,590 --> 02:09:42,904
So this is the loop.

2141
02:09:42,904 --> 02:09:44,820
So this is what you
should all be thinking of.

2142
02:09:44,820 --> 02:09:47,440
Now, I've got about 10 years
of game development background

2143
02:09:47,440 --> 02:09:48,190
under my belt.

2144
02:09:48,190 --> 02:09:49,682
I'm a C++ programmer at heart.

2145
02:09:49,682 --> 02:09:51,640
And I'm trying to apply
a lot of the lessons we

2146
02:09:51,640 --> 02:09:53,690
use in game development
to web development,

2147
02:09:53,690 --> 02:09:56,430
because, in reality, we're both
dealing with real-time media

2148
02:09:56,430 --> 02:09:57,407
interfaces.

2149
02:09:57,407 --> 02:09:59,240
So when you guys say,
how fast can something

2150
02:09:59,240 --> 02:10:00,570
load off an internet site?

2151
02:10:00,570 --> 02:10:03,390
I'm thinking, how fast can that
stuff be streamed off a DVD?

2152
02:10:03,390 --> 02:10:06,827
It's the same problem we've
had, just 10 years later.

2153
02:10:06,827 --> 02:10:08,410
So when you're doing
your performance,

2154
02:10:08,410 --> 02:10:10,710
the main thing that you have to
do is follow these three steps.

2155
02:10:10,710 --> 02:10:12,370
The first thing is you
need to gather information.

2156
02:10:12,370 --> 02:10:13,840
You go open up Chrome DevTools.

2157
02:10:13,840 --> 02:10:16,680
You open up webpagetest.org.

2158
02:10:16,680 --> 02:10:20,060
This gives you information about
what is going on in your page.

2159
02:10:20,060 --> 02:10:21,600
From that you
actually need insight.

2160
02:10:21,600 --> 02:10:24,490
Because, really, what's a whole
sheet of floating point numbers

2161
02:10:24,490 --> 02:10:25,345
mean to you?

2162
02:10:25,345 --> 02:10:25,970
Nothing, right?

2163
02:10:25,970 --> 02:10:27,950
You need to know what those
floating point numbers mean.

2164
02:10:27,950 --> 02:10:29,060
And your tooling
system needs to be

2165
02:10:29,060 --> 02:10:31,480
able to infer what those
floating point numbers mean.

2166
02:10:31,480 --> 02:10:32,980
And then once you
have that insight,

2167
02:10:32,980 --> 02:10:34,580
you need to be able to
actually plan an action.

2168
02:10:34,580 --> 02:10:35,310
You have this data.

2169
02:10:35,310 --> 02:10:36,768
You have to then
go to your manager

2170
02:10:36,768 --> 02:10:40,360
and justify, please, let
me spend two weeks fixing

2171
02:10:40,360 --> 02:10:43,260
seven milliseconds of load
time from our website,

2172
02:10:43,260 --> 02:10:44,150
because it matters.

2173
02:10:44,150 --> 02:10:46,110
And then you need to be able
to repeat this constantly,

2174
02:10:46,110 --> 02:10:47,068
constantly, constantly.

2175
02:10:47,068 --> 02:10:48,780
You need continuous
integration tools.

2176
02:10:48,780 --> 02:10:51,300
You need the ability
to actually track down

2177
02:10:51,300 --> 02:10:54,427
whose check-in broke the build.

2178
02:10:54,427 --> 02:10:55,260
Quick show of hands.

2179
02:10:55,260 --> 02:10:56,500
How many of you in
here actually have

2180
02:10:56,500 --> 02:10:58,291
some continuous
integration for performance

2181
02:10:58,291 --> 02:11:00,330
in your suite right now?

2182
02:11:00,330 --> 02:11:03,890
One, two, three, four, five.

2183
02:11:03,890 --> 02:11:04,440
Wait.

2184
02:11:04,440 --> 02:11:06,446
Were you just showing
me your Pepsi can?

2185
02:11:06,446 --> 02:11:09,310
I mean, it's a cool can.

2186
02:11:09,310 --> 02:11:11,400
Bravo.

2187
02:11:11,400 --> 02:11:13,820
So maybe four, maybe
five of an entire room.

2188
02:11:13,820 --> 02:11:17,379
I've asked this question to
probably about 3,000 developers

2189
02:11:17,379 --> 02:11:18,920
this week while I've
been in New York

2190
02:11:18,920 --> 02:11:20,190
and meeting and giving talks.

2191
02:11:20,190 --> 02:11:23,690
And the total number of
people is close to about 15

2192
02:11:23,690 --> 02:11:25,290
with the five in this room.

2193
02:11:25,290 --> 02:11:28,020
This shows that there's a huge
problem in the web community

2194
02:11:28,020 --> 02:11:30,490
is that we're not actually
testing for performance

2195
02:11:30,490 --> 02:11:33,750
and giving it the gravitas that
we are our features and our CSS

2196
02:11:33,750 --> 02:11:35,250
and those pretty
little bubbly items

2197
02:11:35,250 --> 02:11:36,530
everywhere else on our pages.

2198
02:11:36,530 --> 02:11:38,120
This is why we
actually moved forward

2199
02:11:38,120 --> 02:11:40,270
with trying to build a
better community about this.

2200
02:11:40,270 --> 02:11:42,630
So for you in the audience,
this is the only slide

2201
02:11:42,630 --> 02:11:44,088
I want you to take
away from today.

2202
02:11:44,088 --> 02:11:45,610
Burn this into your retina.

2203
02:11:45,610 --> 02:11:46,110
Tweet it.

2204
02:11:46,110 --> 02:11:46,830
Blog it.

2205
02:11:46,830 --> 02:11:47,680
Get a tattoo of it.

2206
02:11:47,680 --> 02:11:48,760
If you get a tattoo
if it, tweet it to me.

2207
02:11:48,760 --> 02:11:49,950
And I'll send you some swag.

2208
02:11:49,950 --> 02:11:51,236
Please don't get a tattoo.

2209
02:11:51,236 --> 02:11:52,735
Anything I say is
not representative

2210
02:11:52,735 --> 02:11:55,320
of any organization or
Google or the lawyers that

2211
02:11:55,320 --> 02:11:56,480
are affiliated with me.

2212
02:11:56,480 --> 02:11:57,890
All comments are my own.

2213
02:11:57,890 --> 02:12:00,036
Please do not get a tattoo.

2214
02:12:00,036 --> 02:12:01,660
First off, if you're
doing performance,

2215
02:12:01,660 --> 02:12:03,290
go to HTML5rocks.com.

2216
02:12:03,290 --> 02:12:04,651
There's a landing page.

2217
02:12:04,651 --> 02:12:05,650
It's called performance.

2218
02:12:05,650 --> 02:12:06,760
You click on the button.

2219
02:12:06,760 --> 02:12:09,490
I'm actually the guy
that maintains that page.

2220
02:12:09,490 --> 02:12:11,240
If you start there,
it's going to walk you

2221
02:12:11,240 --> 02:12:13,114
through the three pillars
of web performance.

2222
02:12:13,114 --> 02:12:15,500
You're going to be able
to go step by step on how

2223
02:12:15,500 --> 02:12:18,270
to find and address
the largest problems

2224
02:12:18,270 --> 02:12:19,890
on each one of
these three pillars.

2225
02:12:19,890 --> 02:12:21,660
Next is you need to
be following and using

2226
02:12:21,660 --> 02:12:23,300
the perfmatters hashtag.

2227
02:12:23,300 --> 02:12:25,970
We actually started this
hashtag just earlier this year.

2228
02:12:25,970 --> 02:12:28,660
And we wanted to use web perf.

2229
02:12:28,660 --> 02:12:29,270
We really did.

2230
02:12:29,270 --> 02:12:30,520
We wanted to use that hashtag.

2231
02:12:30,520 --> 02:12:31,228
It was out there.

2232
02:12:31,228 --> 02:12:34,520
But we didn't feel like
it bruised enough egos.

2233
02:12:34,520 --> 02:12:37,610
We wanted perfmatters to
be this name, this brand,

2234
02:12:37,610 --> 02:12:39,330
this answer to a question.

2235
02:12:39,330 --> 02:12:41,210
And what we saw was,
very quickly, people

2236
02:12:41,210 --> 02:12:43,400
started hosting links
to their friends

2237
02:12:43,400 --> 02:12:45,280
websites and be
like, yo, dude, why

2238
02:12:45,280 --> 02:12:47,100
does it takes 15 seconds
to load your site?

2239
02:12:47,100 --> 02:12:48,922
Perfmatters.

2240
02:12:48,922 --> 02:12:51,380
We wanted it to be something
you could take to your manager

2241
02:12:51,380 --> 02:12:52,980
and say, hey, it
takes 15 seconds

2242
02:12:52,980 --> 02:12:54,410
for our site to load on mobile.

2243
02:12:54,410 --> 02:12:55,930
Perfmatters.

2244
02:12:55,930 --> 02:12:57,680
We want this to be a badge.

2245
02:12:57,680 --> 02:12:59,940
We are all egotistical
programmers.

2246
02:12:59,940 --> 02:13:01,970
Wear the badge.

2247
02:13:01,970 --> 02:13:03,340
Own the sticker.

2248
02:13:03,340 --> 02:13:04,692
Make it a part of your culture.

2249
02:13:04,692 --> 02:13:06,150
Make it a part of
your environment.

2250
02:13:06,150 --> 02:13:06,983
That's what we want.

2251
02:13:06,983 --> 02:13:08,160
We want attitude in that.

2252
02:13:08,160 --> 02:13:09,910
That's why you should
follow that hashtag.

2253
02:13:09,910 --> 02:13:13,020
Finally, check out the G+
web performance community.

2254
02:13:13,020 --> 02:13:14,790
If you're in Google+,
it's a cool place.

2255
02:13:14,790 --> 02:13:15,760
A lot of cool people
hang out there.

2256
02:13:15,760 --> 02:13:16,660
Some of them are bald.

2257
02:13:16,660 --> 02:13:17,743
Some of them post content.

2258
02:13:17,743 --> 02:13:19,076
I'm not saying who.

2259
02:13:19,076 --> 02:13:20,950
But you need to follow
that, because, really,

2260
02:13:20,950 --> 02:13:23,969
if you combine perfmatters with
the Google+ web performance

2261
02:13:23,969 --> 02:13:26,260
communities and the articles
coming through HTML5rocks,

2262
02:13:26,260 --> 02:13:28,660
you're actually going to find
an overflow of information.

2263
02:13:28,660 --> 02:13:31,890
I bet most of you in here
haven't actually dived into &mdash;

2264
02:13:31,890 --> 02:13:32,390
Here.

2265
02:13:32,390 --> 02:13:32,973
We'll do this.

2266
02:13:32,973 --> 02:13:33,630
We'll do this.

2267
02:13:33,630 --> 02:13:38,680
Put your hand up if you've
read more than five articles

2268
02:13:38,680 --> 02:13:40,650
about performance.

2269
02:13:40,650 --> 02:13:41,350
OK.

2270
02:13:41,350 --> 02:13:41,870
Keep your hands up.

2271
02:13:41,870 --> 02:13:42,661
Keep your hands up.

2272
02:13:42,661 --> 02:13:44,400
More than 10 articles?

2273
02:13:44,400 --> 02:13:44,900
OK.

2274
02:13:44,900 --> 02:13:46,254
Let's ramp this exponentially.

2275
02:13:46,254 --> 02:13:46,753
20?

2276
02:13:46,753 --> 02:13:50,457

2277
02:13:50,457 --> 02:13:53,206
28?

2278
02:13:53,206 --> 02:13:56,500
Let's go 40 articles
on performance.

2279
02:13:56,500 --> 02:13:58,040
OK.

2280
02:13:58,040 --> 02:13:59,956
For those of you who
have had your hands up,

2281
02:13:59,956 --> 02:14:01,580
of those 40 articles,
how many of those

2282
02:14:01,580 --> 02:14:02,621
things did you implement?

2283
02:14:02,621 --> 02:14:04,990
Maybe 5, 6, 20?

2284
02:14:04,990 --> 02:14:08,417
No fair if you actually
did a talk earlier tonight.

2285
02:14:08,417 --> 02:14:09,500
I'm not taking your input.

2286
02:14:09,500 --> 02:14:10,540
So the point that
we're getting at though

2287
02:14:10,540 --> 02:14:12,180
is that for those of you
who haven't been reading

2288
02:14:12,180 --> 02:14:13,330
a lot of this content,
there is actually

2289
02:14:13,330 --> 02:14:14,480
going to be overflow
of information.

2290
02:14:14,480 --> 02:14:15,410
Hopefully, you can find it.

2291
02:14:15,410 --> 02:14:16,118
You can guide it.

2292
02:14:16,118 --> 02:14:17,472
You can move through it.

2293
02:14:17,472 --> 02:14:18,305
What's the next one?

2294
02:14:18,305 --> 02:14:18,670
Yeah.

2295
02:14:18,670 --> 02:14:21,086
So what I'm going to do now
is with the rest of the time &mdash;

2296
02:14:21,086 --> 02:14:22,760
Pete, how much time do we have?

2297
02:14:22,760 --> 02:14:23,937
40, 60, as much as I want?

2298
02:14:23,937 --> 02:14:25,520
Keep talking until
people fall asleep.

2299
02:14:25,520 --> 02:14:26,019
Good.

2300
02:14:26,019 --> 02:14:27,300
I can do that.

2301
02:14:27,300 --> 02:14:29,640
So what we're going to do
is I'm actually only going

2302
02:14:29,640 --> 02:14:31,470
to load these
websites on mobile.

2303
02:14:31,470 --> 02:14:33,830
Quite frankly, I ran
through these earlier today.

2304
02:14:33,830 --> 02:14:37,149
And most of your sites actually
fell over dead on mobile.

2305
02:14:37,149 --> 02:14:39,190
There were some interesting
use cases on desktop.

2306
02:14:39,190 --> 02:14:41,047
But quite frankly,
desktop is dead.

2307
02:14:41,047 --> 02:14:43,130
If you're not making your
site mobile and friendly

2308
02:14:43,130 --> 02:14:45,420
and fast there, you're
doing it wrong, period.

2309
02:14:45,420 --> 02:14:46,440
Period, period, period.

2310
02:14:46,440 --> 02:14:49,910
Mobile is all that matters
right now. #perfmatters.

2311
02:14:49,910 --> 02:14:50,810
You can tweet that.

2312
02:14:50,810 --> 02:14:52,285
I'll give you a second.

2313
02:14:52,285 --> 02:14:53,060
No, go ahead.

2314
02:14:53,060 --> 02:14:54,794
It's OK. #perfmatters.

2315
02:14:54,794 --> 02:14:57,460
So we're going to take a look at
a couple of these really quick.

2316
02:14:57,460 --> 02:15:01,410
And I'm going to try to organize
these in terms of discussion

2317
02:15:01,410 --> 02:15:02,810
and pointing out
a couple things.

2318
02:15:02,810 --> 02:15:04,850
So if we don't get to
all of them, I apologize.

2319
02:15:04,850 --> 02:15:07,079
Please feel free to email
me later and curse at me.

2320
02:15:07,079 --> 02:15:08,120
Or do it on social media.

2321
02:15:08,120 --> 02:15:09,184
That's always fun too.

2322
02:15:09,184 --> 02:15:10,850
So what I've got here
is a little setup.

2323
02:15:10,850 --> 02:15:12,760
And you can actually
see my little phone,

2324
02:15:12,760 --> 02:15:14,000
so I can click on some stuff.

2325
02:15:14,000 --> 02:15:17,640
And what I'm using over here is
the Chrome Developer Tools ADB

2326
02:15:17,640 --> 02:15:18,530
extension.

2327
02:15:18,530 --> 02:15:21,030
So this is a fantastic
little &mdash; who's using this?

2328
02:15:21,030 --> 02:15:22,770
Anyone using this?

2329
02:15:22,770 --> 02:15:25,720
No fair if you're
hosting the event, dude.

2330
02:15:25,720 --> 02:15:26,220
God.

2331
02:15:26,220 --> 02:15:27,290
You guys are cheating.

2332
02:15:27,290 --> 02:15:29,070
So this is a fantastic
Chrome extension.

2333
02:15:29,070 --> 02:15:30,190
You go to the Chrome Web Store.

2334
02:15:30,190 --> 02:15:32,040
You can actually download
and install this extension.

2335
02:15:32,040 --> 02:15:32,960
Basically, what it
allows you to do

2336
02:15:32,960 --> 02:15:35,400
is to interface with the
Android developer tools

2337
02:15:35,400 --> 02:15:36,720
very easily and quickly.

2338
02:15:36,720 --> 02:15:39,360
So I can actually click on this
and go view inspection targets.

2339
02:15:39,360 --> 02:15:43,170
And you'll actually see that it
loads and shows me this Galaxy

2340
02:15:43,170 --> 02:15:45,329
Nexus phone that's actually
plugged in right here.

2341
02:15:45,329 --> 02:15:47,370
And I can actually click &mdash;
well, I'll close this,

2342
02:15:47,370 --> 02:15:49,300
so you can actually see
what this looks like.

2343
02:15:49,300 --> 02:15:51,370
I can click the inspect button.

2344
02:15:51,370 --> 02:15:53,785
And what this inspect
button shows is

2345
02:15:53,785 --> 02:15:57,020
it actually shows me what's
on my phone right now.

2346
02:15:57,020 --> 02:15:59,299
So this one of the sites.

2347
02:15:59,299 --> 02:16:01,590
I'll get to it in a little
bit deeper here in a minute.

2348
02:16:01,590 --> 02:16:03,360
But this is actually
what's on the phone.

2349
02:16:03,360 --> 02:16:04,496
You can see it's moving.

2350
02:16:04,496 --> 02:16:05,120
It's scrolling.

2351
02:16:05,120 --> 02:16:05,730
It's doing stuff.

2352
02:16:05,730 --> 02:16:06,290
We go over here.

2353
02:16:06,290 --> 02:16:07,831
And you can actually
see the network.

2354
02:16:07,831 --> 02:16:10,234
So if I hit reload
on my phone, you

2355
02:16:10,234 --> 02:16:12,400
can actually see the network
request coming through.

2356
02:16:12,400 --> 02:16:13,170
This is not the desktop site.

2357
02:16:13,170 --> 02:16:14,340
This is actually a mobile site.

2358
02:16:14,340 --> 02:16:17,030
This is really good, because I'm
actually testing on the device

2359
02:16:17,030 --> 02:16:19,170
that my users are using.

2360
02:16:19,170 --> 02:16:20,080
Wow.

2361
02:16:20,080 --> 02:16:21,340
Great comment.

2362
02:16:21,340 --> 02:16:23,430
#perfmatters.

2363
02:16:23,430 --> 02:16:24,920
One of you will
tweet it tonight.

2364
02:16:24,920 --> 02:16:25,690
It will happen.

2365
02:16:25,690 --> 02:16:27,287
I'll keep drilling it into you.

2366
02:16:27,287 --> 02:16:28,870
But the cool thing
is you can actually

2367
02:16:28,870 --> 02:16:30,150
see what's going on here.

2368
02:16:30,150 --> 02:16:32,090
And notice, for this
particular website,

2369
02:16:32,090 --> 02:16:34,620
that it's actually
not done loading yet.

2370
02:16:34,620 --> 02:16:37,767
You can still see the bar
moving on the side over there.

2371
02:16:37,767 --> 02:16:40,100
And the funny thing is if you
load this site in desktop,

2372
02:16:40,100 --> 02:16:41,867
you don't see that same problem.

2373
02:16:41,867 --> 02:16:43,700
So obviously, there's
an issue on the mobile

2374
02:16:43,700 --> 02:16:45,830
that is not showing
up on the desktop.

2375
02:16:45,830 --> 02:16:48,590
Again, we need to make sure that
we're testing things properly.

2376
02:16:48,590 --> 02:16:49,530
But the cool thing
is we can actually

2377
02:16:49,530 --> 02:16:51,420
see all the same
events, use the dev

2378
02:16:51,420 --> 02:16:54,719
tools in the same way minus
everything crashing because

2379
02:16:54,719 --> 02:16:56,930
of memory issues, which
might happen tonight.

2380
02:16:56,930 --> 02:16:58,180
I apologize for the live feed.

2381
02:16:58,180 --> 02:17:01,150
But we can actually go through
here and just record memory

2382
02:17:01,150 --> 02:17:03,270
and see what's
going on in memory.

2383
02:17:03,270 --> 02:17:04,670
And so let me show
you over here.

2384
02:17:04,670 --> 02:17:07,389
I can go through and actually
scroll and go back and actually

2385
02:17:07,389 --> 02:17:09,790
see how memory is adjusting
based on this stuff.

2386
02:17:09,790 --> 02:17:13,421
So if you haven't adopted
this Chrome ADB extension

2387
02:17:13,421 --> 02:17:14,879
into your tooling
and your testing,

2388
02:17:14,879 --> 02:17:16,209
you need to definitely do this.

2389
02:17:16,209 --> 02:17:17,625
Definitely get
this in your stuff,

2390
02:17:17,625 --> 02:17:20,489
because no other tool allows
you this sort of integration.

2391
02:17:20,489 --> 02:17:22,530
And Chrome Dev Tools are
already top of the line.

2392
02:17:22,530 --> 02:17:23,530
It should be part of it.

2393
02:17:23,530 --> 02:17:25,350
So anyhow, enough
of me babbling.

2394
02:17:25,350 --> 02:17:28,760
So let's start with one
of the first sites here.

2395
02:17:28,760 --> 02:17:29,940
Clicky, clicky.

2396
02:17:29,940 --> 02:17:31,660
There's a native app for you.

2397
02:17:31,660 --> 02:17:34,209
Slow in loading.

2398
02:17:34,209 --> 02:17:36,629
Forecast.io?

2399
02:17:36,629 --> 02:17:37,510
I'll get it right.

2400
02:17:37,510 --> 02:17:38,070
Sorry.

2401
02:17:38,070 --> 02:17:41,588
So we're going to try this
first one here, allout.org.

2402
02:17:41,588 --> 02:17:42,379
This was submitted.

2403
02:17:42,379 --> 02:17:43,910
Someone in the room
submitted this.

2404
02:17:43,910 --> 02:17:44,370
I don't know who it is.

2405
02:17:44,370 --> 02:17:45,110
Doesn't matter.

2406
02:17:45,110 --> 02:17:46,059
But we're going to take
a look at your site.

2407
02:17:46,059 --> 02:17:47,950
And hopefully, we're
going to make you upset.

2408
02:17:47,950 --> 02:17:49,870
So this is loading.

2409
02:17:49,870 --> 02:17:52,460
I'm going to show you what
the page looks like first.

2410
02:17:52,460 --> 02:17:54,209
So first off, we all
just watched it load.

2411
02:17:54,209 --> 02:17:55,639
This is on a 4G connection.

2412
02:17:55,639 --> 02:17:57,840
I'm not on the local Wi-Fi.

2413
02:17:57,840 --> 02:18:01,479
We can see that this actually
is not a mobile site.

2414
02:18:01,479 --> 02:18:04,670

2415
02:18:04,670 --> 02:18:06,129
I shouldn't have to scroll.

2416
02:18:06,129 --> 02:18:07,760
Oh, I can zoom.

2417
02:18:07,760 --> 02:18:08,870
Yay.

2418
02:18:08,870 --> 02:18:11,620
But most of the site
is actually eclipsed.

2419
02:18:11,620 --> 02:18:13,730
We've got some sort of
spinner here at the top.

2420
02:18:13,730 --> 02:18:15,160
It's a marquee movement.

2421
02:18:15,160 --> 02:18:18,223
We've got some other items
down here on the bottom.

2422
02:18:18,223 --> 02:18:19,139
Some stuff's going on.

2423
02:18:19,139 --> 02:18:19,879
So let's take a
look at what that

2424
02:18:19,879 --> 02:18:21,469
looks like in Chrome Dev Tools.

2425
02:18:21,469 --> 02:18:22,320
So I can go here.

2426
02:18:22,320 --> 02:18:22,935
Click inspect.

2427
02:18:22,935 --> 02:18:26,700

2428
02:18:26,700 --> 02:18:28,809
Again, native
applications &mdash; they're slow.

2429
02:18:28,809 --> 02:18:30,100
So let's go to the Network tab.

2430
02:18:30,100 --> 02:18:32,315
And I want to take a look
at how this thing loads.

2431
02:18:32,315 --> 02:18:33,690
So I'm going to
hit reload again.

2432
02:18:33,690 --> 02:18:36,524
And we're going to watch
all the assets come through.

2433
02:18:36,524 --> 02:18:37,940
And notice here
on the bottom here

2434
02:18:37,940 --> 02:18:39,830
you can see six
requests, 12 requests.

2435
02:18:39,830 --> 02:18:43,240
I'll keep scrolling down to
the bottom so you can see that.

2436
02:18:43,240 --> 02:18:45,959
Seven seconds worth of load time
before it's actually loaded.

2437
02:18:45,959 --> 02:18:47,625
So this down here on
the bottom tells us

2438
02:18:47,625 --> 02:18:50,010
that it took about six
seconds before content

2439
02:18:50,010 --> 02:18:52,260
complete was actually
issued, before the page load

2440
02:18:52,260 --> 02:18:55,500
event occurred and
7.9 seconds total.

2441
02:18:55,500 --> 02:18:56,870
8K actually came up.

2442
02:18:56,870 --> 02:18:57,370
Nope.

2443
02:18:57,370 --> 02:18:58,980
We're still not done.

2444
02:18:58,980 --> 02:19:00,780
9K came through, pardon me.

2445
02:19:00,780 --> 02:19:01,620
And so 34 requests.

2446
02:19:01,620 --> 02:19:03,639
We can actually see the
health of this object

2447
02:19:03,639 --> 02:19:04,320
and the health of this site.

2448
02:19:04,320 --> 02:19:06,070
Now, 34 requests,
that's actually nothing.

2449
02:19:06,070 --> 02:19:08,780
9K, that's a drop in the bucket.

2450
02:19:08,780 --> 02:19:11,080
The Robitussin-laced
grandmother picture from earlier

2451
02:19:11,080 --> 02:19:13,454
could easily load
9K very quickly.

2452
02:19:13,454 --> 02:19:15,870
What's important here though,
and I want to show you this,

2453
02:19:15,870 --> 02:19:18,260
is when we go up here and
actually sort by size,

2454
02:19:18,260 --> 02:19:19,904
we actually get
a different sense

2455
02:19:19,904 --> 02:19:21,570
of the content that's
being sent around.

2456
02:19:21,570 --> 02:19:25,780

2457
02:19:25,780 --> 02:19:27,540
So we can actually
see the images loaded.

2458
02:19:27,540 --> 02:19:30,500
We can actually see that most
of the large assets here, 6.4K,

2459
02:19:30,500 --> 02:19:32,510
512 bytes.

2460
02:19:32,510 --> 02:19:35,022
We can see that the
large images here.

2461
02:19:35,022 --> 02:19:36,480
This is actually
interesting to me.

2462
02:19:36,480 --> 02:19:40,709
So this is a 1,024 by 576.

2463
02:19:40,709 --> 02:19:41,236
It's 213K.

2464
02:19:41,236 --> 02:19:43,959

2465
02:19:43,959 --> 02:19:44,959
Quick round of applause.

2466
02:19:44,959 --> 02:19:47,156
Who thinks that's too
large for a mobile site?

2467
02:19:47,156 --> 02:19:48,585
[APPLAUSE]

2468
02:19:48,585 --> 02:19:49,960
COLT MCANLIS:
Here's another one.

2469
02:19:49,960 --> 02:19:51,290
Here's 109K.

2470
02:19:51,290 --> 02:19:52,230
A little bit better.

2471
02:19:52,230 --> 02:19:53,250
Same resolution though.

2472
02:19:53,250 --> 02:19:54,410
Anyone notice that?

2473
02:19:54,410 --> 02:19:56,840
Same resolution, half the size.

2474
02:19:56,840 --> 02:19:59,097

2475
02:19:59,097 --> 02:20:00,180
Another round of applause.

2476
02:20:00,180 --> 02:20:02,620
Who's written a JPEG compressor?

2477
02:20:02,620 --> 02:20:04,916
One guy, two guys, three guys.

2478
02:20:04,916 --> 02:20:06,040
We'll get some beers later.

2479
02:20:06,040 --> 02:20:07,360
And we'll talk about
DCT coefficients.

2480
02:20:07,360 --> 02:20:08,710
I've had this really
cool idea that you

2481
02:20:08,710 --> 02:20:10,010
can actually &mdash; you know what?

2482
02:20:10,010 --> 02:20:10,849
Never mind.

2483
02:20:10,849 --> 02:20:12,640
So notice, though, that
this image actually

2484
02:20:12,640 --> 02:20:14,500
has a lot more data to it.

2485
02:20:14,500 --> 02:20:15,667
There's a lot more edges.

2486
02:20:15,667 --> 02:20:17,250
There's a lot more
noise to the image.

2487
02:20:17,250 --> 02:20:18,920
Yet it's smaller
than this one here.

2488
02:20:18,920 --> 02:20:20,140
This is actually mostly pink.

2489
02:20:20,140 --> 02:20:22,610
There's no reason that
the image with more detail

2490
02:20:22,610 --> 02:20:26,447
should be less size than the
one with less detail in it.

2491
02:20:26,447 --> 02:20:28,780
What this tells &mdash; I know
nothing about these developers.

2492
02:20:28,780 --> 02:20:29,740
I know nothing about the site.

2493
02:20:29,740 --> 02:20:31,020
But this tells me that
they're not actually

2494
02:20:31,020 --> 02:20:33,740
exporting this particular image
with the right compression

2495
02:20:33,740 --> 02:20:34,660
settings.

2496
02:20:34,660 --> 02:20:37,110
So I like doing these
polls, because it's late.

2497
02:20:37,110 --> 02:20:39,100
And I need you all entertained.

2498
02:20:39,100 --> 02:20:42,220
So how many of you
actually just export

2499
02:20:42,220 --> 02:20:44,870
your images at some
constant format?

2500
02:20:44,870 --> 02:20:47,510
When you do an export from
a JPEG it's on 12 or 80

2501
02:20:47,510 --> 02:20:51,100
depending on what you're doing?

2502
02:20:51,100 --> 02:20:56,530
Everyone else hand optimizes
your exact perfect PSNR

2503
02:20:56,530 --> 02:20:58,681
relationship for your JPEG?

2504
02:20:58,681 --> 02:20:59,180
Yes?

2505
02:20:59,180 --> 02:21:00,221
Is that what I'm hearing?

2506
02:21:00,221 --> 02:21:01,340
Because I saw three hands.

2507
02:21:01,340 --> 02:21:03,048
So either you're all
lying to each other.

2508
02:21:03,048 --> 02:21:06,156
Or you have no idea the way that
your images &mdash; Round of applause

2509
02:21:06,156 --> 02:21:07,780
for no idea of the
compression quality.

2510
02:21:07,780 --> 02:21:08,280
[APPLAUSE]

2511
02:21:08,280 --> 02:21:09,030
COLT MCANLIS: OK.

2512
02:21:09,030 --> 02:21:10,159
Fantastic.

2513
02:21:10,159 --> 02:21:11,700
So seeing this site
actually tells us

2514
02:21:11,700 --> 02:21:12,780
that this is a systemic problem.

2515
02:21:12,780 --> 02:21:14,160
And again, the 3,000
developers I've

2516
02:21:14,160 --> 02:21:16,340
talked to over the past
week all see this problem.

2517
02:21:16,340 --> 02:21:17,220
On a couple of
the other websites

2518
02:21:17,220 --> 02:21:18,594
I'm going to load
tonight, you're

2519
02:21:18,594 --> 02:21:20,530
going to see the show
up very prevalently,

2520
02:21:20,530 --> 02:21:22,480
that in general, we
as a web community

2521
02:21:22,480 --> 02:21:27,420
do a horrible, horrible job of
optimizing images for quality

2522
02:21:27,420 --> 02:21:28,180
against size.

2523
02:21:28,180 --> 02:21:30,020
Now, in reality,
this isn't something

2524
02:21:30,020 --> 02:21:31,280
that's that difficult.

2525
02:21:31,280 --> 02:21:33,800
Most of us consider
a single-way pipe.

2526
02:21:33,800 --> 02:21:36,920
We have artists or designers
that are working in a vacuum.

2527
02:21:36,920 --> 02:21:39,060
They're trying to optimize
for the visual quality

2528
02:21:39,060 --> 02:21:39,700
of the image.

2529
02:21:39,700 --> 02:21:41,440
Meanwhile, there's
bald engineers

2530
02:21:41,440 --> 02:21:44,524
in a corner somewhere
going, why is my site slow?

2531
02:21:44,524 --> 02:21:46,940
And there's this constant back
and forth between these two

2532
02:21:46,940 --> 02:21:49,180
camps about size of
images versus quality

2533
02:21:49,180 --> 02:21:50,972
of images and load
times and all the stuff.

2534
02:21:50,972 --> 02:21:52,638
Let me give you a
little word of advice.

2535
02:21:52,638 --> 02:21:54,990
If any of you are able to
implement something like this,

2536
02:21:54,990 --> 02:21:58,650
it's very simple to spin
up an Amazon EC2 instance,

2537
02:21:58,650 --> 02:22:00,720
or even do this at your
desk, and actually run

2538
02:22:00,720 --> 02:22:02,630
a compressor, a command
line compressor,

2539
02:22:02,630 --> 02:22:04,920
like libjpeg or jpeg-turbo.

2540
02:22:04,920 --> 02:22:07,110
By the way, jpeg-turbo
is the actual codec

2541
02:22:07,110 --> 02:22:09,530
that we use inside
of Chrome for JPEGs.

2542
02:22:09,530 --> 02:22:11,940
And actually compress it
at various quality settings

2543
02:22:11,940 --> 02:22:14,247
and test the PSNR of the images.

2544
02:22:14,247 --> 02:22:15,830
PSNR, for those of
you who don't know,

2545
02:22:15,830 --> 02:22:18,000
is Peak Signal to Noise Ratio.

2546
02:22:18,000 --> 02:22:21,340
This is actually a
measurement of the amount

2547
02:22:21,340 --> 02:22:23,700
of noise and error that's
introduced to an image.

2548
02:22:23,700 --> 02:22:25,160
It's the blockiness
that actually

2549
02:22:25,160 --> 02:22:26,420
comes from the
compression format.

2550
02:22:26,420 --> 02:22:28,211
We actually have a
standardization process.

2551
02:22:28,211 --> 02:22:29,450
We call it PSNR.

2552
02:22:29,450 --> 02:22:32,270
And that's how we compare image
compressors to each other.

2553
02:22:32,270 --> 02:22:35,240
So you can actually take your
image, compress it at level 90,

2554
02:22:35,240 --> 02:22:37,220
see what the PSNR is.

2555
02:22:37,220 --> 02:22:38,030
Compress it at 80.

2556
02:22:38,030 --> 02:22:39,190
See what the PSNR is.

2557
02:22:39,190 --> 02:22:40,760
70, 60, 50, 40, 30.

2558
02:22:40,760 --> 02:22:43,020
If you get below 30,
you've gone too far.

2559
02:22:43,020 --> 02:22:43,930
Just stop at 30.

2560
02:22:43,930 --> 02:22:46,180
But the cool thing about
this is that you can actually

2561
02:22:46,180 --> 02:22:49,310
run 10,000, 20,000, 30,000
images through this process

2562
02:22:49,310 --> 02:22:52,650
and, for each one, find
the exact right compression

2563
02:22:52,650 --> 02:22:56,770
value to give you a
PSNR of around 38 to 45.

2564
02:22:56,770 --> 02:22:58,450
So you're not actually
just exporting

2565
02:22:58,450 --> 02:23:00,487
to a single compression
number, a slider

2566
02:23:00,487 --> 02:23:02,320
that your artists have
no idea what it does.

2567
02:23:02,320 --> 02:23:03,694
You can actually
programmatically

2568
02:23:03,694 --> 02:23:06,260
find this value by implementing
a simple iterative process

2569
02:23:06,260 --> 02:23:07,760
against the command
line compressor.

2570
02:23:07,760 --> 02:23:09,175
That's kind of cool.

2571
02:23:09,175 --> 02:23:10,300
Round of applause for cool?

2572
02:23:10,300 --> 02:23:11,577
[APPLAUSE]

2573
02:23:11,577 --> 02:23:13,410
COLT MCANLIS: I saw
some of you begrudgingly

2574
02:23:13,410 --> 02:23:14,447
go, that's not cool.

2575
02:23:14,447 --> 02:23:16,530
Let's save the questions
for the end if that's OK,

2576
02:23:16,530 --> 02:23:18,530
because, otherwise, I'm
going to stare at Putin.

2577
02:23:18,530 --> 02:23:20,722
And he kind of scares me.

2578
02:23:20,722 --> 02:23:22,680
So let's take a look at
some other things here.

2579
02:23:22,680 --> 02:23:23,944
So I want to go over timeline.

2580
02:23:23,944 --> 02:23:24,860
So that was load time.

2581
02:23:24,860 --> 02:23:26,360
Everyone knows
the network stuff.

2582
02:23:26,360 --> 02:23:31,670
If you're not using
webpagetest.org or modpagespeed

2583
02:23:31,670 --> 02:23:33,480
or pagespeedinsights
and all that stuff,

2584
02:23:33,480 --> 02:23:34,740
you need to be using all that.

2585
02:23:34,740 --> 02:23:36,070
So let's just take a
look at what this site is

2586
02:23:36,070 --> 02:23:37,390
doing while I'm doing nothing.

2587
02:23:37,390 --> 02:23:38,890
So now, I haven't
touched this site.

2588
02:23:38,890 --> 02:23:40,350
To be clear, my
phone almost actually

2589
02:23:40,350 --> 02:23:42,130
went locked, because
I haven't touched it.

2590
02:23:42,130 --> 02:23:43,390
I'm still not touching it.

2591
02:23:43,390 --> 02:23:45,931
But I want you to notice what
the memory is doing on the top.

2592
02:23:45,931 --> 02:23:48,970
Now, I'm a C++ game developer.

2593
02:23:48,970 --> 02:23:51,430
To me, the only thing that
matters for performance

2594
02:23:51,430 --> 02:23:53,220
is follow the memory.

2595
02:23:53,220 --> 02:23:55,280
I actually gave a talk
at Velocity yesterday,

2596
02:23:55,280 --> 02:23:58,250
where I, in a very
heretic fashion,

2597
02:23:58,250 --> 02:24:00,880
suggested that web developers
were really bad developers

2598
02:24:00,880 --> 02:24:03,012
because we're not
controlling our memory.

2599
02:24:03,012 --> 02:24:04,970
We're actually letting
JavaScript do it for us.

2600
02:24:04,970 --> 02:24:06,500
And because of this,
we have no idea

2601
02:24:06,500 --> 02:24:08,490
what's going on under the hood.

2602
02:24:08,490 --> 02:24:11,120
How many of you know
what your heap size is?

2603
02:24:11,120 --> 02:24:12,700
How many of you care?

2604
02:24:12,700 --> 02:24:14,400
That's another question.

2605
02:24:14,400 --> 02:24:15,299
I like that.

2606
02:24:15,299 --> 02:24:16,090
I like your outfit.

2607
02:24:16,090 --> 02:24:17,256
Does that have a cummerbund.

2608
02:24:17,256 --> 02:24:18,890
What is that?

2609
02:24:18,890 --> 02:24:19,630
I like that.

2610
02:24:19,630 --> 02:24:20,130
That's cool.

2611
02:24:20,130 --> 02:24:21,450
I'm going to have to
get me one of those.

2612
02:24:21,450 --> 02:24:21,950
Perfmatters.

2613
02:24:21,950 --> 02:24:24,379
I've got to get me one of those.

2614
02:24:24,379 --> 02:24:25,670
So again, I've touched nothing.

2615
02:24:25,670 --> 02:24:27,003
But notice this here on the top.

2616
02:24:27,003 --> 02:24:28,550
I don't know if you
guys can see it.

2617
02:24:28,550 --> 02:24:31,816
It's allocating between
7.5 megs and 9 megs.

2618
02:24:31,816 --> 02:24:32,690
I'm touching nothing.

2619
02:24:32,690 --> 02:24:34,106
Nothing's occurring
on the screen.

2620
02:24:34,106 --> 02:24:37,730
Yet two megabytes of data are
being allocated and cleared

2621
02:24:37,730 --> 02:24:38,740
in this environment.

2622
02:24:38,740 --> 02:24:40,281
Now, I can actually
figure out what's

2623
02:24:40,281 --> 02:24:43,346
going on with this, if
I stop my recording.

2624
02:24:43,346 --> 02:24:44,220
Too much information.

2625
02:24:44,220 --> 02:24:45,928
Let me just do a quick
record real quick,

2626
02:24:45,928 --> 02:24:48,839
so I can clear all that.

2627
02:24:48,839 --> 02:24:50,630
So we can see something
on a timeline here.

2628
02:24:50,630 --> 02:24:52,130
So it looks like,
first off, they've

2629
02:24:52,130 --> 02:24:54,460
got like two different
timers firing.

2630
02:24:54,460 --> 02:24:56,090
So we've got Widgets.js
and Chartbeat.

2631
02:24:56,090 --> 02:24:57,910
Chartbeat, I'm guessing,
is like an analytics thing.

2632
02:24:57,910 --> 02:24:59,840
I see this on a bunch of
sites you guys gave me.

2633
02:24:59,840 --> 02:25:01,230
And then widgets seems
like their things.

2634
02:25:01,230 --> 02:25:03,757
So I'm guessing this is that
marquee scroll at the top.

2635
02:25:03,757 --> 02:25:05,340
They've got some
timer that's actually

2636
02:25:05,340 --> 02:25:06,890
moving those images around.

2637
02:25:06,890 --> 02:25:08,330
What I don't like &mdash; pardon?

2638
02:25:08,330 --> 02:25:09,442
AUDIENCE: It's Twitter.

2639
02:25:09,442 --> 02:25:10,650
COLT MCANLIS: For Widgets.js?

2640
02:25:10,650 --> 02:25:13,061
Oh, cool.

2641
02:25:13,061 --> 02:25:13,560
Nice.

2642
02:25:13,560 --> 02:25:16,470

2643
02:25:16,470 --> 02:25:17,220
Widgets.js.

2644
02:25:17,220 --> 02:25:17,470
Twitter.

2645
02:25:17,470 --> 02:25:17,960
Oh, cool.

2646
02:25:17,960 --> 02:25:19,350
So Twitter is actually
screwing this page up.

2647
02:25:19,350 --> 02:25:19,920
Go, Twitter.

2648
02:25:19,920 --> 02:25:21,380
Is anyone here from Twitter?

2649
02:25:21,380 --> 02:25:24,344
Boo, Twitter.

2650
02:25:24,344 --> 02:25:25,760
So what we see
down here though is

2651
02:25:25,760 --> 02:25:27,920
we see recalculate
and paint and whatnot.

2652
02:25:27,920 --> 02:25:31,410
For our memory, this
view doesn't actually

2653
02:25:31,410 --> 02:25:32,790
tell us what's being allocated.

2654
02:25:32,790 --> 02:25:35,500
We can see where the events
are occurring and whatnot.

2655
02:25:35,500 --> 02:25:38,182
I can actually mouse over the
GCs when they actually happen.

2656
02:25:38,182 --> 02:25:40,390
More importantly, though,
I can actually go over here

2657
02:25:40,390 --> 02:25:41,850
to the Profiles
page, because I don't

2658
02:25:41,850 --> 02:25:43,140
like seeing that kind of memory.

2659
02:25:43,140 --> 02:25:45,300
And I can actually do a
record of heap applications.

2660
02:25:45,300 --> 02:25:47,258
So I can just hit start
and let this thing run.

2661
02:25:47,258 --> 02:25:49,510
And basically, what you're
seeing here is on this top,

2662
02:25:49,510 --> 02:25:51,270
you're seeing timeline
view plus memory

2663
02:25:51,270 --> 02:25:52,560
profiling at the same time.

2664
02:25:52,560 --> 02:25:55,230
At the top, any of
these blue lines

2665
02:25:55,230 --> 02:25:56,999
is when memory
allocations occur.

2666
02:25:56,999 --> 02:25:59,290
Now, when you see a gray
line, what the gray line means

2667
02:25:59,290 --> 02:26:02,220
is that memory has been freed
by a garbage collection process

2668
02:26:02,220 --> 02:26:02,900
somewhere.

2669
02:26:02,900 --> 02:26:05,800
So you can actually see a
new set that just happened.

2670
02:26:05,800 --> 02:26:07,800
And some of the
gray lines happened.

2671
02:26:07,800 --> 02:26:11,970
But these blues tend to pop
up in a very regular fashion.

2672
02:26:11,970 --> 02:26:14,490
Now, in this, I can
actually go through here

2673
02:26:14,490 --> 02:26:17,850
and change the size of
my window and actually

2674
02:26:17,850 --> 02:26:20,090
see exactly what was allocated.

2675
02:26:20,090 --> 02:26:22,480
So in this single event,
at about eight seconds

2676
02:26:22,480 --> 02:26:25,250
into my capture, about 3K
worth of data was allocated.

2677
02:26:25,250 --> 02:26:27,390
And we can see a similar
pattern over here.

2678
02:26:27,390 --> 02:26:28,630
l can highlight this window.

2679
02:26:28,630 --> 02:26:30,957
And we see about almost 3K.

2680
02:26:30,957 --> 02:26:32,290
And over here, a similar window.

2681
02:26:32,290 --> 02:26:34,910
There's about 3K plus
a lot of extra change

2682
02:26:34,910 --> 02:26:36,410
there that hasn't
been freed up yet.

2683
02:26:36,410 --> 02:26:38,160
But let me focus on
this guy really quick.

2684
02:26:38,160 --> 02:26:40,940
So here I can actually see that
3K came from compiled code.

2685
02:26:40,940 --> 02:26:43,895
So somewhere in the system,
deoptimization code came from.

2686
02:26:43,895 --> 02:26:45,270
Now, for those of
you who are not

2687
02:26:45,270 --> 02:26:47,569
versed in fast path and
slow path JavaScript,

2688
02:26:47,569 --> 02:26:49,360
effectively, what this
little block of data

2689
02:26:49,360 --> 02:26:51,510
you're seeing here &mdash; see
that deoptimization data?

2690
02:26:51,510 --> 02:26:55,379
The way that V8 and most modern
JavaScript VMs work is they

2691
02:26:55,379 --> 02:26:57,670
will actually try to optimize
your code on your behalf,

2692
02:26:57,670 --> 02:26:59,635
because come on, you're
a stupid programmer.

2693
02:26:59,635 --> 02:27:01,010
You don't know
how to write code.

2694
02:27:01,010 --> 02:27:02,450
Obviously, the VM
knows better than you,

2695
02:27:02,450 --> 02:27:03,065
because it's a machine.

2696
02:27:03,065 --> 02:27:03,648
And it's fast.

2697
02:27:03,648 --> 02:27:04,310
And it's smart.

2698
02:27:04,310 --> 02:27:05,940
So what it will actually
do is take a code path

2699
02:27:05,940 --> 02:27:06,710
that you've written.

2700
02:27:06,710 --> 02:27:07,920
And it will actually
optimize it.

2701
02:27:07,920 --> 02:27:08,920
It'll manage the memory.

2702
02:27:08,920 --> 02:27:10,760
It will make some fast
path optimizations.

2703
02:27:10,760 --> 02:27:12,650
And it will put it out
there and start running it.

2704
02:27:12,650 --> 02:27:14,210
Well, the problem
is that it does this

2705
02:27:14,210 --> 02:27:16,543
with some assumptions about
the state of the environment

2706
02:27:16,543 --> 02:27:17,161
that it's in.

2707
02:27:17,161 --> 02:27:17,910
And it'll do this.

2708
02:27:17,910 --> 02:27:19,609
And oftentimes it'll break.

2709
02:27:19,609 --> 02:27:20,650
And it'll go, whoa, whoa.

2710
02:27:20,650 --> 02:27:22,510
We actually caused an exception
somewhere in the stack

2711
02:27:22,510 --> 02:27:24,710
doing our optimization, because
we're just a stupid robot.

2712
02:27:24,710 --> 02:27:26,834
And we actually don't know
what we're doing either.

2713
02:27:26,834 --> 02:27:28,410
When this happens,
basically, Chrome

2714
02:27:28,410 --> 02:27:32,020
has to create this new block
of code that's parallel

2715
02:27:32,020 --> 02:27:34,779
to the block of code you had,
delete your block of code,

2716
02:27:34,779 --> 02:27:37,320
put your new block of code in
the stack, and have it execute.

2717
02:27:37,320 --> 02:27:39,720
When that deoptimization
occurs, because the optimization

2718
02:27:39,720 --> 02:27:42,857
failed, it has to take
your old block of code,

2719
02:27:42,857 --> 02:27:44,690
put it back in, and
delete the block of code

2720
02:27:44,690 --> 02:27:46,829
that it just created.

2721
02:27:46,829 --> 02:27:48,370
So there are specific
code paths that

2722
02:27:48,370 --> 02:27:49,950
generally cause this to happen.

2723
02:27:49,950 --> 02:27:52,450
Closures are one of them.

2724
02:27:52,450 --> 02:27:55,187
How many of you are using
closures in your timers?

2725
02:27:55,187 --> 02:27:55,770
Don't applaud.

2726
02:27:55,770 --> 02:27:58,726
I don't want you
to applaud that.

2727
02:27:58,726 --> 02:28:00,100
Closures are one
of these things.

2728
02:28:00,100 --> 02:28:01,890
If you actually have
a closure running,

2729
02:28:01,890 --> 02:28:06,800
it's very common for people to
do set interval closure, 1,000.

2730
02:28:06,800 --> 02:28:08,405
That closure in
that set interval

2731
02:28:08,405 --> 02:28:11,200
is actually causing these
sorts of memory leaks to occur.

2732
02:28:11,200 --> 02:28:14,380
It's a deoptimization path
that V8 can't optimize around.

2733
02:28:14,380 --> 02:28:17,000
And so, basically, every
single time you're doing this,

2734
02:28:17,000 --> 02:28:18,684
you're running into
this situation.

2735
02:28:18,684 --> 02:28:20,850
So let's take a look at
something else really quick.

2736
02:28:20,850 --> 02:28:23,110
So I want to go over
here and show you

2737
02:28:23,110 --> 02:28:24,480
what I'm seeing on the screen.

2738
02:28:24,480 --> 02:28:28,800
Now, I've turned on a couple
modes on the developer tools.

2739
02:28:28,800 --> 02:28:31,680
So first off, you'll see
this beautiful little &mdash;

2740
02:28:31,680 --> 02:28:33,320
you can't see it too well.

2741
02:28:33,320 --> 02:28:34,740
I wonder if I can tilt my
phone just a little bit.

2742
02:28:34,740 --> 02:28:35,940
You can see up at the
top that I actually

2743
02:28:35,940 --> 02:28:37,780
have a little graph
showing me frame rate,

2744
02:28:37,780 --> 02:28:42,270
as well as how much GPU
memory is being used.

2745
02:28:42,270 --> 02:28:43,790
Quick show of hands.

2746
02:28:43,790 --> 02:28:48,210
Who understands how a
web page is painted?

2747
02:28:48,210 --> 02:28:50,757
It's like the same guys
that wrote JPEG compilers.

2748
02:28:50,757 --> 02:28:52,840
So for everyone else, let
me do this really quick.

2749
02:28:52,840 --> 02:28:58,751
How your page is rasterized
is a delicate ballet.

2750
02:28:58,751 --> 02:29:00,000
Really, it's more like boxing.

2751
02:29:00,000 --> 02:29:02,208
It's basically two people
smashing each other's faces

2752
02:29:02,208 --> 02:29:04,050
in for about six
milliseconds a frame.

2753
02:29:04,050 --> 02:29:07,980
Effectively, what happens is
Chrome will take your web page.

2754
02:29:07,980 --> 02:29:09,020
And it will dice it up.

2755
02:29:09,020 --> 02:29:13,020
It'll create square regions
of 256 by 256 tiles.

2756
02:29:13,020 --> 02:29:16,220
For each one of these tiles, it
will actually spin up a thread

2757
02:29:16,220 --> 02:29:19,630
and actually rasterize all
of the pixels in that tile,

2758
02:29:19,630 --> 02:29:21,370
all of the WebKit &mdash;
well, Blink now.

2759
02:29:21,370 --> 02:29:21,470
Sorry.

2760
02:29:21,470 --> 02:29:23,720
I've got to get my terminology
right &mdash; all of the page

2761
02:29:23,720 --> 02:29:27,480
elements and actually composite
that to a CPU chunk of memory,

2762
02:29:27,480 --> 02:29:31,226
32 bits per pixel,
256 by 256 tile.

2763
02:29:31,226 --> 02:29:33,100
And it will rasterize
all that data in there.

2764
02:29:33,100 --> 02:29:36,140
Once that data is rasterized, it
will then upload it to the GPU.

2765
02:29:36,140 --> 02:29:39,500
When you scroll a page,
the GPU is actually

2766
02:29:39,500 --> 02:29:41,100
the thing that's
moving your page.

2767
02:29:41,100 --> 02:29:44,330
Now, some of you in here are
young, much younger than me.

2768
02:29:44,330 --> 02:29:45,680
You may not know this.

2769
02:29:45,680 --> 02:29:48,480
But back before Quake 3
was hardware accelerated,

2770
02:29:48,480 --> 02:29:51,072
we had something called
software rasterization.

2771
02:29:51,072 --> 02:29:52,030
Software rasterization?

2772
02:29:52,030 --> 02:29:53,300
Heretic Doom?

2773
02:29:53,300 --> 02:29:53,830
Quake?

2774
02:29:53,830 --> 02:29:54,339
Anybody?

2775
02:29:54,339 --> 02:29:56,130
Any other professional
gamers in the house?

2776
02:29:56,130 --> 02:29:57,640
Yeah.

2777
02:29:57,640 --> 02:30:00,970
So back then, we used a term
called software rasterization.

2778
02:30:00,970 --> 02:30:02,160
This was generally OK.

2779
02:30:02,160 --> 02:30:04,440
But once we invented
GPUs, GPUs are basically

2780
02:30:04,440 --> 02:30:05,570
hardware rasterization.

2781
02:30:05,570 --> 02:30:08,360
They're built to take pixels
and put them on the screen.

2782
02:30:08,360 --> 02:30:10,080
They're dedicated
silicon for this.

2783
02:30:10,080 --> 02:30:12,930
But Chrome is actually still
using software rasterization

2784
02:30:12,930 --> 02:30:14,560
to paint the pixels
on the screen.

2785
02:30:14,560 --> 02:30:16,350
This means that
this is a slow path.

2786
02:30:16,350 --> 02:30:17,891
This also means that
every one of you

2787
02:30:17,891 --> 02:30:20,070
right now should be
really, really scared,

2788
02:30:20,070 --> 02:30:23,400
because how many of you have
actually tested whether or not

2789
02:30:23,400 --> 02:30:27,460
those rounded corners and drop
shadows affect your render

2790
02:30:27,460 --> 02:30:29,370
time?

2791
02:30:29,370 --> 02:30:30,790
They do, actually,
quite frankly.

2792
02:30:30,790 --> 02:30:33,345
If you go to HTML5rocks, I
actually did a study on this.

2793
02:30:33,345 --> 02:30:34,000
I'm sorry.

2794
02:30:34,000 --> 02:30:34,840
That was a leading question.

2795
02:30:34,840 --> 02:30:35,423
That was mean.

2796
02:30:35,423 --> 02:30:37,190
I knew that you didn't
know that answer.

2797
02:30:37,190 --> 02:30:41,295
But basically, what
happens is your CSS effects

2798
02:30:41,295 --> 02:30:43,920
have to be software rasterized,
which means we have to actually

2799
02:30:43,920 --> 02:30:46,760
go and draw rounded rectangles
and then actually add a drop

2800
02:30:46,760 --> 02:30:48,104
shadow to the side of it.

2801
02:30:48,104 --> 02:30:49,520
And this actually
takes more time.

2802
02:30:49,520 --> 02:30:51,311
In fact, if you have
those two combinations

2803
02:30:51,311 --> 02:30:53,460
of things together,
it actually takes 4x

2804
02:30:53,460 --> 02:30:55,780
as long as each one of
them individually, which

2805
02:30:55,780 --> 02:30:58,360
means that there's
combinations of CSS properties

2806
02:30:58,360 --> 02:31:02,411
that hurt your rendering
performance more than others.

2807
02:31:02,411 --> 02:31:04,160
Hopefully, all of you
are going, dear God,

2808
02:31:04,160 --> 02:31:06,044
I have to test this right now.

2809
02:31:06,044 --> 02:31:08,210
And how you can test this
is you can actually see up

2810
02:31:08,210 --> 02:31:11,619
here in this frame rate meter
that as you're scrolling,

2811
02:31:11,619 --> 02:31:13,160
you can actually
see the milliseconds

2812
02:31:13,160 --> 02:31:15,335
taken to render that
part of your page.

2813
02:31:15,335 --> 02:31:16,710
Now, what you're
also seeing here

2814
02:31:16,710 --> 02:31:19,216
is notice this big red
box that keeps popping up?

2815
02:31:19,216 --> 02:31:21,090
This is actually a mode
in Chrome Dev Tools &mdash;

2816
02:31:21,090 --> 02:31:21,790
and let me show you this.

2817
02:31:21,790 --> 02:31:23,340
And I know I'm spending
more time on this site.

2818
02:31:23,340 --> 02:31:24,950
As we go to the other
sites, you actually

2819
02:31:24,950 --> 02:31:25,950
see this stuff play out.

2820
02:31:25,950 --> 02:31:27,980
But I need to test
the groundwork here.

2821
02:31:27,980 --> 02:31:29,290
Is that in or left?

2822
02:31:29,290 --> 02:31:30,150
AUDIENCE: Left.

2823
02:31:30,150 --> 02:31:30,670
COLT MCANLIS: Left.

2824
02:31:30,670 --> 02:31:31,169
Oh, wow.

2825
02:31:31,169 --> 02:31:32,360
I'll keep working.

2826
02:31:32,360 --> 02:31:34,249
So anyhow, I have show
paint rectangles on.

2827
02:31:34,249 --> 02:31:36,290
Basically, what this does
is when I turn this on,

2828
02:31:36,290 --> 02:31:37,740
it's going to show
a red rectangle

2829
02:31:37,740 --> 02:31:39,950
for every part of the page
that actually gets repainted.

2830
02:31:39,950 --> 02:31:41,908
So this actually tells
me what part of the page

2831
02:31:41,908 --> 02:31:45,370
is being rerasterized, which
is really cool to know,

2832
02:31:45,370 --> 02:31:47,920
because I'm pretty sure all
of you will look at your site

2833
02:31:47,920 --> 02:31:50,840
and find that you've got some
little square icon like this.

2834
02:31:50,840 --> 02:31:53,500
But for some reason it's
rasterizing like a 6x size

2835
02:31:53,500 --> 02:31:56,100
window of that that all has
to be reprocessed on the CPU.

2836
02:31:56,100 --> 02:31:57,220
This slows down your page.

2837
02:31:57,220 --> 02:31:58,190
It creates jank.

2838
02:31:58,190 --> 02:31:59,309
I hate that word.

2839
02:31:59,309 --> 02:32:01,350
Hitching, by the way,
hitching is the right term.

2840
02:32:01,350 --> 02:32:03,380
Every other medium &mdash;
video games, AV,

2841
02:32:03,380 --> 02:32:05,740
movies &mdash; it's called hitching.

2842
02:32:05,740 --> 02:32:07,400
Can we all agree
to use hitching?

2843
02:32:07,400 --> 02:32:08,520
No?

2844
02:32:08,520 --> 02:32:11,170
I'll get hitchfree.org later.

2845
02:32:11,170 --> 02:32:12,875
Anyhow, let me move
on to the next site,

2846
02:32:12,875 --> 02:32:15,500
because I want to make sure that
we talk about some more stuff.

2847
02:32:15,500 --> 02:32:16,940
But basically, you can
see that on this site,

2848
02:32:16,940 --> 02:32:17,990
there's a couple things.

2849
02:32:17,990 --> 02:32:20,120
First off, they're
sending too large images

2850
02:32:20,120 --> 02:32:21,500
to a mobile device.

2851
02:32:21,500 --> 02:32:22,750
They don't have a mobile view.

2852
02:32:22,750 --> 02:32:25,190
They don't have a
mindset of a viewport

2853
02:32:25,190 --> 02:32:26,970
for these mobile environments.

2854
02:32:26,970 --> 02:32:29,730
Plus, it seems like
their marquee is actually

2855
02:32:29,730 --> 02:32:31,909
rendering and updating
different parts of the page

2856
02:32:31,909 --> 02:32:32,950
at different frequencies.

2857
02:32:32,950 --> 02:32:36,376
They're allocating about
a meg of memory per minute

2858
02:32:36,376 --> 02:32:38,000
or so, when no one's
touching anything.

2859
02:32:38,000 --> 02:32:41,437
So if this is your
site, fix those things,

2860
02:32:41,437 --> 02:32:42,270
because you need to.

2861
02:32:42,270 --> 02:32:44,800
And also, your load time
is pretty harsh too.

2862
02:32:44,800 --> 02:32:47,480
So let's do this next one.

2863
02:32:47,480 --> 02:32:49,180
So this next one
should be pretty quick.

2864
02:32:49,180 --> 02:32:52,270
I just want to highlight
something really poignant here.

2865
02:32:52,270 --> 02:32:54,040
So I'm going to close this.

2866
02:32:54,040 --> 02:32:55,020
Which view are you on?

2867
02:32:55,020 --> 02:32:57,970

2868
02:32:57,970 --> 02:32:58,720
So let's show you.

2869
02:32:58,720 --> 02:33:00,930
So this is dosomething.org.

2870
02:33:00,930 --> 02:33:02,050
Cool little website.

2871
02:33:02,050 --> 02:33:04,660
It just encourages everyone
to do something interesting,

2872
02:33:04,660 --> 02:33:07,530
like small butterfly
wings change

2873
02:33:07,530 --> 02:33:09,990
the course of tides in
Africa and all that stuff.

2874
02:33:09,990 --> 02:33:15,190
But we see it's a pretty simple
website, just a little strata

2875
02:33:15,190 --> 02:33:16,560
of images and whatnot.

2876
02:33:16,560 --> 02:33:19,120
When we go over here
to Chrome Dev Tools,

2877
02:33:19,120 --> 02:33:20,620
let's inspect this
information here.

2878
02:33:20,620 --> 02:33:22,480
And I'm going to put this
back on the Network tab.

2879
02:33:22,480 --> 02:33:24,350
And we're going to go
ahead and reload this.

2880
02:33:24,350 --> 02:33:28,240

2881
02:33:28,240 --> 02:33:31,220
So we can actually see the
page loaded pretty quickly.

2882
02:33:31,220 --> 02:33:33,480
We got a lot of
information really quick,

2883
02:33:33,480 --> 02:33:34,600
about 2.9 seconds.

2884
02:33:34,600 --> 02:33:36,970
So this is a lot better
than the previous website.

2885
02:33:36,970 --> 02:33:39,334
We're right around that
three-second load time.

2886
02:33:39,334 --> 02:33:40,500
And again, this is on my 4G.

2887
02:33:40,500 --> 02:33:41,360
I'm not on the wireless.

2888
02:33:41,360 --> 02:33:42,276
So that's pretty good.

2889
02:33:42,276 --> 02:33:43,850
10K transferred.

2890
02:33:43,850 --> 02:33:44,800
That's all right.

2891
02:33:44,800 --> 02:33:45,510
21 requests.

2892
02:33:45,510 --> 02:33:46,500
Not that bad at all.

2893
02:33:46,500 --> 02:33:47,750
So let's, again, sort by size.

2894
02:33:47,750 --> 02:33:50,100
Let's see if anything's
coming up here.

2895
02:33:50,100 --> 02:33:51,210
I got a couple not founds.

2896
02:33:51,210 --> 02:33:53,500
That's not necessarily
a good idea.

2897
02:33:53,500 --> 02:33:57,092
A couple images here.

2898
02:33:57,092 --> 02:33:58,050
So this is interesting.

2899
02:33:58,050 --> 02:34:00,780
Again, another 106K image
that's being delivered

2900
02:34:00,780 --> 02:34:04,550
to a mobile screen, that,
obviously, does not need 106K.

2901
02:34:04,550 --> 02:34:06,550
That one's a little bit
better, well not better.

2902
02:34:06,550 --> 02:34:08,133
I mean that's a very
depressing image.

2903
02:34:08,133 --> 02:34:12,290
I didn't mean that
that was &mdash; Again,

2904
02:34:12,290 --> 02:34:14,030
my opinions are my
own and not that

2905
02:34:14,030 --> 02:34:15,670
of any organization
or secret service

2906
02:34:15,670 --> 02:34:17,049
that I'm influenced with.

2907
02:34:17,049 --> 02:34:18,840
So we can actually see
some of these images

2908
02:34:18,840 --> 02:34:20,775
may be a little bit
larger than others.

2909
02:34:20,775 --> 02:34:22,650
But for the most part,
this is actually nice.

2910
02:34:22,650 --> 02:34:23,860
What happened here?

2911
02:34:23,860 --> 02:34:27,476

2912
02:34:27,476 --> 02:34:28,460
This technology.

2913
02:34:28,460 --> 02:34:29,510
Isn't it great?

2914
02:34:29,510 --> 02:34:32,720
So we can actually see though
that this page is actually

2915
02:34:32,720 --> 02:34:35,236
a pretty good example of
what to do on a website.

2916
02:34:35,236 --> 02:34:37,610
If you load this on the desktop,
what you'll actually see

2917
02:34:37,610 --> 02:34:39,610
is that there's larger
versions of these images.

2918
02:34:39,610 --> 02:34:41,350
They're tiled differently
with a different layout.

2919
02:34:41,350 --> 02:34:42,516
There's a difference scheme.

2920
02:34:42,516 --> 02:34:44,420
But in the mobile
version, they really only

2921
02:34:44,420 --> 02:34:46,086
have one or two images
that are probably

2922
02:34:46,086 --> 02:34:47,992
too large for the mobile device.

2923
02:34:47,992 --> 02:34:49,450
But in the most
part, this actually

2924
02:34:49,450 --> 02:34:52,030
scrolls pretty quickly.

2925
02:34:52,030 --> 02:34:54,110
I know you can't see
it up at the top here,

2926
02:34:54,110 --> 02:34:57,795
but this is actually about
three milliseconds to five

2927
02:34:57,795 --> 02:34:59,920
milliseconds to actually
draw the part of the page.

2928
02:34:59,920 --> 02:35:02,020
And you can actually see
that as I'm scrolling,

2929
02:35:02,020 --> 02:35:04,850
notice that there's
no red tiles.

2930
02:35:04,850 --> 02:35:06,430
You don't see those
big red flashes.

2931
02:35:06,430 --> 02:35:08,490
What that means is this
entire page has actually

2932
02:35:08,490 --> 02:35:10,760
been rasterized on the CPU
and uploaded to the GPU.

2933
02:35:10,760 --> 02:35:12,900
And it's been cached in the GPU.

2934
02:35:12,900 --> 02:35:14,540
And so as you're
scrolling up and down,

2935
02:35:14,540 --> 02:35:16,320
the CPU doesn't
have to do any work.

2936
02:35:16,320 --> 02:35:17,440
So this is what you want.

2937
02:35:17,440 --> 02:35:20,330
You want to no red blocks
going on in your page.

2938
02:35:20,330 --> 02:35:22,732
So let's do another
site here really quick,

2939
02:35:22,732 --> 02:35:25,190
because now I'm freaking out
that I've only got 30 minutes.

2940
02:35:25,190 --> 02:35:27,992
MALE SPEAKER: You've
got 45 minutes.

2941
02:35:27,992 --> 02:35:29,400
COLT MCANLIS: Yes!

2942
02:35:29,400 --> 02:35:32,380
We're going all night.

2943
02:35:32,380 --> 02:35:34,920
Let's just open
up every website.

2944
02:35:34,920 --> 02:35:37,801
So this is the one we
saw a little bit earlier.

2945
02:35:37,801 --> 02:35:38,300
Sorry.

2946
02:35:38,300 --> 02:35:40,175
I don't know if my antics
distracted you all.

2947
02:35:40,175 --> 02:35:42,569
Let's reload this again.

2948
02:35:42,569 --> 02:35:43,860
Let's see how the load time is.

2949
02:35:43,860 --> 02:35:46,390
So notice on the top here
that it's about halfway.

2950
02:35:46,390 --> 02:35:47,765
So this page hasn't
unloaded yet.

2951
02:35:47,765 --> 02:35:49,765
Let's just be clear about
what we're looking at.

2952
02:35:49,765 --> 02:35:50,982
This is an instant load.

2953
02:35:50,982 --> 02:35:52,940
Now, we've actually gotten
to the loading part.

2954
02:35:52,940 --> 02:35:59,390

2955
02:35:59,390 --> 02:36:02,290
If this is your
website, I'm sorry.

2956
02:36:02,290 --> 02:36:04,660
Hopefully, you understand
there's work that needs to do.

2957
02:36:04,660 --> 02:36:07,327
AUDIENCE: [INAUDIBLE].

2958
02:36:07,327 --> 02:36:08,410
COLT MCANLIS: It might be.

2959
02:36:08,410 --> 02:36:09,822
Let's find out.

2960
02:36:09,822 --> 02:36:11,530
So again, over here,
let's go to inspect.

2961
02:36:11,530 --> 02:36:12,870
I wonder if I can just
catch this midstream,

2962
02:36:12,870 --> 02:36:14,726
if it will just tell
me what that image is

2963
02:36:14,726 --> 02:36:15,850
or if I have to hit reload.

2964
02:36:15,850 --> 02:36:18,379

2965
02:36:18,379 --> 02:36:19,170
It's still loading.

2966
02:36:19,170 --> 02:36:19,670
OK.

2967
02:36:19,670 --> 02:36:23,350
Here, I'll hit reload and
see what goes on here.

2968
02:36:23,350 --> 02:36:24,030
Oh, web fonts.

2969
02:36:24,030 --> 02:36:24,530
OK.

2970
02:36:24,530 --> 02:36:26,530
We'll take a look
at that in a second.

2971
02:36:26,530 --> 02:36:27,030
OK.

2972
02:36:27,030 --> 02:36:28,020
So I hit reload.

2973
02:36:28,020 --> 02:36:29,350
This is waiting to reload.

2974
02:36:29,350 --> 02:36:32,280
So obviously, there's already
some problems with this site.

2975
02:36:32,280 --> 02:36:34,920
Hopefully, someone in
here is going, please

2976
02:36:34,920 --> 02:36:37,670
stop clicking buttons.

2977
02:36:37,670 --> 02:36:40,050
Please take my website off
of your screen, you angry,

2978
02:36:40,050 --> 02:36:41,710
bald man.

2979
02:36:41,710 --> 02:36:42,300
OK.

2980
02:36:42,300 --> 02:36:44,660
Let's see how this
is going here.

2981
02:36:44,660 --> 02:36:46,230
So you can't see the screen.

2982
02:36:46,230 --> 02:36:47,400
It's still loading.

2983
02:36:47,400 --> 02:36:49,720
The fonts just now appeared.

2984
02:36:49,720 --> 02:36:51,780
Let's take a look at
what's going on here

2985
02:36:51,780 --> 02:36:54,290
and see whether or not we can
discuss some of these items.

2986
02:36:54,290 --> 02:36:58,170
So let's sort by size here.

2987
02:36:58,170 --> 02:37:00,754
This is something I want to let
everybody know, because this

2988
02:37:00,754 --> 02:37:02,920
is the first thing I want
to point out on this site.

2989
02:37:02,920 --> 02:37:04,630
This is a WOFF file.

2990
02:37:04,630 --> 02:37:06,060
It's a web font.

2991
02:37:06,060 --> 02:37:08,710
Round of applause if you're
using web fonts in your site.

2992
02:37:08,710 --> 02:37:09,562
[APPLAUSE]

2993
02:37:09,562 --> 02:37:10,910
COLT MCANLIS: Good.

2994
02:37:10,910 --> 02:37:13,770
Please stop.

2995
02:37:13,770 --> 02:37:16,640
Please, please stop.

2996
02:37:16,640 --> 02:37:18,505
I don't know if you saw this.

2997
02:37:18,505 --> 02:37:19,380
Web fonts look great.

2998
02:37:19,380 --> 02:37:20,046
They're awesome.

2999
02:37:20,046 --> 02:37:21,930
This is 38K for that web font.

3000
02:37:21,930 --> 02:37:24,834
And unfortunately, some
of these have been cached.

3001
02:37:24,834 --> 02:37:27,250
So you can't actually see the
true size of a lot of these.

3002
02:37:27,250 --> 02:37:30,322
But there's actually five or
six web fonts on this page.

3003
02:37:30,322 --> 02:37:31,780
So you guys are
getting a bum deal.

3004
02:37:31,780 --> 02:37:33,902
You're not seeing
how horrible this is.

3005
02:37:33,902 --> 02:37:35,360
But basically,
here's what happens.

3006
02:37:35,360 --> 02:37:37,420
When you've got five
web fonts, each one

3007
02:37:37,420 --> 02:37:40,630
can be somewhere between
the range of 40K and 90K

3008
02:37:40,630 --> 02:37:41,470
for a font.

3009
02:37:41,470 --> 02:37:44,600
That font is required
before text can actually

3010
02:37:44,600 --> 02:37:47,240
be drawn to your screen.

3011
02:37:47,240 --> 02:37:48,460
So pop quiz.

3012
02:37:48,460 --> 02:37:50,900
What happens if you're
ready to draw text,

3013
02:37:50,900 --> 02:37:53,450
and your CSS is down, and
your JavaScript is down,

3014
02:37:53,450 --> 02:37:57,990
and your images are down,
but your WOFF isn't down yet?

3015
02:37:57,990 --> 02:37:59,056
Good answer.

3016
02:37:59,056 --> 02:37:59,930
No one said anything.

3017
02:37:59,930 --> 02:38:00,480
Good answer.

3018
02:38:00,480 --> 02:38:00,650
Nothing.

3019
02:38:00,650 --> 02:38:01,332
Nothing happens.

3020
02:38:01,332 --> 02:38:02,290
Chrome will do nothing.

3021
02:38:02,290 --> 02:38:03,110
Chrome will block.

3022
02:38:03,110 --> 02:38:03,550
Chrome will wait.

3023
02:38:03,550 --> 02:38:05,720
Chrome will wait for every
single one of your WOFFs

3024
02:38:05,720 --> 02:38:09,090
to come down before a
single character of text

3025
02:38:09,090 --> 02:38:12,855
is drawn on your screen.

3026
02:38:12,855 --> 02:38:15,633
AUDIENCE: [INAUDIBLE] render all
the text that you [INAUDIBLE].

3027
02:38:15,633 --> 02:38:18,780
COLT MCANLIS: Jake
Archibald says I'm dumb.

3028
02:38:18,780 --> 02:38:21,030
If that single WOFF is
visible, it'll render that one.

3029
02:38:21,030 --> 02:38:22,450
Now, Firefox will do it
a little bit differently.

3030
02:38:22,450 --> 02:38:24,110
Basically, what it will do
is it'll wait three seconds.

3031
02:38:24,110 --> 02:38:24,655
Right, Jake?

3032
02:38:24,655 --> 02:38:25,530
JAKE ARCHIBALD: Yeah.

3033
02:38:25,530 --> 02:38:27,155
COLT MCANLIS: It'll
wait three seconds.

3034
02:38:27,155 --> 02:38:31,204
Maybe you should &mdash; having
an awkward mic moment.

3035
02:38:31,204 --> 02:38:32,870
Basically, what will
happen with Firefox

3036
02:38:32,870 --> 02:38:34,874
is it'll start the
request for the WOFF.

3037
02:38:34,874 --> 02:38:36,790
If it hasn't been
downloaded in three seconds,

3038
02:38:36,790 --> 02:38:40,535
it'll actually keep
allowing that to download.

3039
02:38:40,535 --> 02:38:43,140
But it'll actually display
the font with a default.

3040
02:38:43,140 --> 02:38:44,240
It'll just see Arial.

3041
02:38:44,240 --> 02:38:46,114
So if you're actually
seeing this on Firefox,

3042
02:38:46,114 --> 02:38:47,647
you'll see three
seconds of nothing.

3043
02:38:47,647 --> 02:38:48,730
And then you'll see Arial.

3044
02:38:48,730 --> 02:38:50,080
And then when the
font comes in, you'll

3045
02:38:50,080 --> 02:38:52,163
see it pop to whatever the
font is supposed to be.

3046
02:38:52,163 --> 02:38:53,620
And so you see this flicker.

3047
02:38:53,620 --> 02:38:54,190
I see it.

3048
02:38:54,190 --> 02:38:56,600
You see it a lot on mobile,
because these mobile devices

3049
02:38:56,600 --> 02:39:00,444
are actually 6x slower in
hardware just across the board,

3050
02:39:00,444 --> 02:39:02,110
probably for at least
another two years,

3051
02:39:02,110 --> 02:39:04,486
depending on which hardware
manufacturer you're trending,

3052
02:39:04,486 --> 02:39:06,151
then what you're
seeing on the desktops.

3053
02:39:06,151 --> 02:39:08,130
Not only is it slower to
download these things,

3054
02:39:08,130 --> 02:39:10,842
but these WOFFs are actually
very complex spline paths

3055
02:39:10,842 --> 02:39:13,300
that actually can be interpreted
by these under-powered ARM

3056
02:39:13,300 --> 02:39:14,260
chips as well.

3057
02:39:14,260 --> 02:39:17,300
Anyone in here written
a software rasterizer?

3058
02:39:17,300 --> 02:39:18,430
Cool.

3059
02:39:18,430 --> 02:39:20,690
Spline paths are slow.

3060
02:39:20,690 --> 02:39:22,720
Anyhow, WOFFs are bad.

3061
02:39:22,720 --> 02:39:24,137
And you should
feel bad if you're

3062
02:39:24,137 --> 02:39:25,720
using them in your
websites right now.

3063
02:39:25,720 --> 02:39:26,710
Now, things have been
happening that are

3064
02:39:26,710 --> 02:39:27,860
trying to optimize this.

3065
02:39:27,860 --> 02:39:28,890
I know that there's
people talking

3066
02:39:28,890 --> 02:39:31,265
about different ways to compress
WOFFS and different ways

3067
02:39:31,265 --> 02:39:33,420
to use these type of
fonts in different ways.

3068
02:39:33,420 --> 02:39:36,470
But please note that if you
have them as part of your site,

3069
02:39:36,470 --> 02:39:38,110
you should feel bad.

3070
02:39:38,110 --> 02:39:41,400
Now, can I shift reload this?

3071
02:39:41,400 --> 02:39:42,230
I don't know.

3072
02:39:42,230 --> 02:39:43,960
I can't get the data from cache.

3073
02:39:43,960 --> 02:39:46,270
But we also see and here
a couple of these things.

3074
02:39:46,270 --> 02:39:47,410
And I can't show you this.

3075
02:39:47,410 --> 02:39:50,040
But these images are
actually a little bit larger

3076
02:39:50,040 --> 02:39:51,600
than they should be as well.

3077
02:39:51,600 --> 02:39:53,125
These are OK.

3078
02:39:53,125 --> 02:39:54,540
Is that Willie Nelson?

3079
02:39:54,540 --> 02:39:56,640
I don't know.

3080
02:39:56,640 --> 02:39:58,050
Again, there's another WOFF.

3081
02:39:58,050 --> 02:40:00,850
This PNG, where was
his header on that?

3082
02:40:00,850 --> 02:40:01,650
This one's a WebP.

3083
02:40:01,650 --> 02:40:02,560
Oh, fantastic.

3084
02:40:02,560 --> 02:40:04,143
So this guy was
actually using a WebP.

3085
02:40:04,143 --> 02:40:06,360

3086
02:40:06,360 --> 02:40:07,090
Interesting.

3087
02:40:07,090 --> 02:40:07,510
I don't know what that's doing.

3088
02:40:07,510 --> 02:40:08,460
AUDIENCE: That was
the accept header.

3089
02:40:08,460 --> 02:40:10,418
COLT MCANLIS: That was
the accept header, yeah.

3090
02:40:10,418 --> 02:40:12,660
So at least a WebP
did come down.

3091
02:40:12,660 --> 02:40:15,500
However, we see that &mdash;
let's go down here.

3092
02:40:15,500 --> 02:40:16,199
Again, 124K.

3093
02:40:16,199 --> 02:40:17,990
So again, you guys are
getting the bad rap,

3094
02:40:17,990 --> 02:40:21,980
because I'm not doing a
cached fresh reload on this.

3095
02:40:21,980 --> 02:40:24,290
But basically, this
site is actually

3096
02:40:24,290 --> 02:40:27,160
passing full megabyte,
two megabyte images down.

3097
02:40:27,160 --> 02:40:29,705
It's got the WOFFs in the
direct path to rendering.

3098
02:40:29,705 --> 02:40:31,330
And so that's going
to take a long time

3099
02:40:31,330 --> 02:40:32,404
before text will show up.

3100
02:40:32,404 --> 02:40:34,570
In fact, the image will try
to progressively load in

3101
02:40:34,570 --> 02:40:36,050
before all the text does.

3102
02:40:36,050 --> 02:40:38,150
And this will annoy
your users a lot more.

3103
02:40:38,150 --> 02:40:40,319
So let's try to avoid that.

3104
02:40:40,319 --> 02:40:42,152
Let's try another website
here really quick.

3105
02:40:42,152 --> 02:40:45,250

3106
02:40:45,250 --> 02:40:48,390
Just let me go over to this.

3107
02:40:48,390 --> 02:40:52,070
Is anyone sad yet about
the state of things?

3108
02:40:52,070 --> 02:40:53,580
Is anyone going,
wow, I wonder how

3109
02:40:53,580 --> 02:40:56,010
my site does under
this type of scrutiny?

3110
02:40:56,010 --> 02:40:56,870
If so, then yay.

3111
02:40:56,870 --> 02:40:58,000
I'm doing my job.

3112
02:40:58,000 --> 02:41:01,320
I can get paid this week.

3113
02:41:01,320 --> 02:41:01,820
Cool.

3114
02:41:01,820 --> 02:41:03,460
That was actually pretty quick.

3115
02:41:03,460 --> 02:41:04,990
That actually wasn't that bad.

3116
02:41:04,990 --> 02:41:05,865
Let me do that again.

3117
02:41:05,865 --> 02:41:11,081

3118
02:41:11,081 --> 02:41:12,330
That actually wasn't that bad.

3119
02:41:12,330 --> 02:41:16,180

3120
02:41:16,180 --> 02:41:17,680
Load, load, load.

3121
02:41:17,680 --> 02:41:18,180
Good.

3122
02:41:18,180 --> 02:41:18,790
Cool.

3123
02:41:18,790 --> 02:41:19,010
OK.

3124
02:41:19,010 --> 02:41:20,240
So this might be a good site.

3125
02:41:20,240 --> 02:41:21,260
Let's take a look at this one.

3126
02:41:21,260 --> 02:41:22,547
So we'll hit Inspect again.

3127
02:41:22,547 --> 02:41:23,255
We'll load it up.

3128
02:41:23,255 --> 02:41:26,020

3129
02:41:26,020 --> 02:41:26,770
Let's see here.

3130
02:41:26,770 --> 02:41:30,860
Scrolling actually seems
pretty smooth on this site.

3131
02:41:30,860 --> 02:41:33,670
It doesn't seem that bad.

3132
02:41:33,670 --> 02:41:36,189
We can move stuff
around pretty easily.

3133
02:41:36,189 --> 02:41:37,730
Let's take a look
at the Network tab.

3134
02:41:37,730 --> 02:41:38,688
Let's hit reload again.

3135
02:41:38,688 --> 02:41:43,916

3136
02:41:43,916 --> 02:41:45,540
Again, unfortunately,
all of this stuff

3137
02:41:45,540 --> 02:41:46,748
is coming from the cache now.

3138
02:41:46,748 --> 02:41:49,700
I should have used
my other tablet.

3139
02:41:49,700 --> 02:41:51,360
.com, CSS, not that bad.

3140
02:41:51,360 --> 02:41:52,590
22K CSS.

3141
02:41:52,590 --> 02:41:54,060
27K CSS.

3142
02:41:54,060 --> 02:41:55,610
200K.

3143
02:41:55,610 --> 02:42:02,440
I don't like this 192K JPEG
that's only 920 by 300.

3144
02:42:02,440 --> 02:42:03,190
Notice this.

3145
02:42:03,190 --> 02:42:06,630
So this is 192K
for an image that

3146
02:42:06,630 --> 02:42:10,050
is a quarter of
the size of Putin.

3147
02:42:10,050 --> 02:42:11,100
Quick show of hands.

3148
02:42:11,100 --> 02:42:12,500
Who knows what that means?

3149
02:42:12,500 --> 02:42:15,350
Yeah, not optimizing your JPEGs.

3150
02:42:15,350 --> 02:42:17,600
I think there's actually
some other bad examples here.

3151
02:42:17,600 --> 02:42:19,030
Here's another one, 240K.

3152
02:42:19,030 --> 02:42:22,909
Oh, oh, 240K, 920 by 300.

3153
02:42:22,909 --> 02:42:24,450
Does anyone off the
back of your hand

3154
02:42:24,450 --> 02:42:27,466
know what this is if it
were a raw image size?

3155
02:42:27,466 --> 02:42:33,646
So it's 920 times 300
times 24 bits per pixel.

3156
02:42:33,646 --> 02:42:34,270
Get back to me.

3157
02:42:34,270 --> 02:42:36,210
Jake will give you some swag.

3158
02:42:36,210 --> 02:42:38,020
Oh, there's a Facebook
icon, only 9K.

3159
02:42:38,020 --> 02:42:40,370
Yay.

3160
02:42:40,370 --> 02:42:42,810
100 by 100 is 9K.

3161
02:42:42,810 --> 02:42:44,872
That seems a little
bit excessive.

3162
02:42:44,872 --> 02:42:47,330
That seems like there's actually
some bloat going on there.

3163
02:42:47,330 --> 02:42:49,520
I wonder if there's a
negative JPEG encoder.

3164
02:42:49,520 --> 02:42:52,090
Make it larger.

3165
02:42:52,090 --> 02:42:55,340
By the way, if any of you are
going to be in San Francisco

3166
02:42:55,340 --> 02:42:57,490
next week or have a chance
or have the internet,

3167
02:42:57,490 --> 02:43:01,220
I think, definitely tune into my
talk I'm giving on compression

3168
02:43:01,220 --> 02:43:02,202
on the web.

3169
02:43:02,202 --> 02:43:04,160
And hopefully, if you've
seen my talk yesterday

3170
02:43:04,160 --> 02:43:07,150
about being scared of closures,
if you see my talk next week

3171
02:43:07,150 --> 02:43:09,490
on compression on the web,
hopefully, compression

3172
02:43:09,490 --> 02:43:10,930
will scare you after that.

3173
02:43:10,930 --> 02:43:14,670
And you'll drudge toward
that monster with a wary eye.

3174
02:43:14,670 --> 02:43:18,000
But anyhow, 100K
pixels is 3.9K in size.

3175
02:43:18,000 --> 02:43:21,160
So that actually seems a
little bit excessive there too.

3176
02:43:21,160 --> 02:43:23,200
Here's, again, those
are the same images.

3177
02:43:23,200 --> 02:43:24,470
Here's another one.

3178
02:43:24,470 --> 02:43:27,845
These are really large, 180K
being sent to my mobile device.

3179
02:43:27,845 --> 02:43:29,470
And the reason this
loaded, again, this

3180
02:43:29,470 --> 02:43:30,220
loaded a little fast.

3181
02:43:30,220 --> 02:43:31,430
This is a bias,
because I've been

3182
02:43:31,430 --> 02:43:32,550
testing these things all day.

3183
02:43:32,550 --> 02:43:33,800
And this is coming from cache.

3184
02:43:33,800 --> 02:43:36,357
So you're not really feeling
as much pain as you should be.

3185
02:43:36,357 --> 02:43:37,523
JAKE ARCHIBALD: [INAUDIBLE].

3186
02:43:37,523 --> 02:43:40,409

3187
02:43:40,409 --> 02:43:42,080
COLT MCANLIS: Beautiful.

3188
02:43:42,080 --> 02:43:42,720
All right.

3189
02:43:42,720 --> 02:43:44,085
Jake Archibald for the win.

3190
02:43:44,085 --> 02:43:45,210
Here, let's hit reload now.

3191
02:43:45,210 --> 02:43:49,030

3192
02:43:49,030 --> 02:43:50,640
There we go.

3193
02:43:50,640 --> 02:43:52,150
Oh, yeah.

3194
02:43:52,150 --> 02:43:54,360
Oh, feel it.

3195
02:43:54,360 --> 02:43:55,960
Feel it.

3196
02:43:55,960 --> 02:43:59,420
So awkward right now.

3197
02:43:59,420 --> 02:44:01,399
AUDIENCE: [INAUDIBLE].

3198
02:44:01,399 --> 02:44:03,190
COLT MCANLIS: They kind
of should be, yeah.

3199
02:44:03,190 --> 02:44:05,997

3200
02:44:05,997 --> 02:44:07,580
No one is hiding
their face right now.

3201
02:44:07,580 --> 02:44:09,621
So maybe the guy who put
this site in isn't here.

3202
02:44:09,621 --> 02:44:12,380
Or you've got a
great poker face.

3203
02:44:12,380 --> 02:44:15,340
I will not bet
money against you.

3204
02:44:15,340 --> 02:44:17,609
OK.

3205
02:44:17,609 --> 02:44:18,900
AUDIENCE: And then they shrank.

3206
02:44:18,900 --> 02:44:21,000
COLT MCANLIS: And
then they shrank.

3207
02:44:21,000 --> 02:44:22,460
That's actually a great point.

3208
02:44:22,460 --> 02:44:24,910
I'll bring this up
really quick too.

3209
02:44:24,910 --> 02:44:27,870
How many of you have
responsive websites?

3210
02:44:27,870 --> 02:44:28,370
OK.

3211
02:44:28,370 --> 02:44:31,210
You're doing it wrong.

3212
02:44:31,210 --> 02:44:32,980
Let me ask that in a better way.

3213
02:44:32,980 --> 02:44:34,870
How many of your
responsive websites

3214
02:44:34,870 --> 02:44:37,440
will actually resize the
image that you've been given?

3215
02:44:37,440 --> 02:44:40,130

3216
02:44:40,130 --> 02:44:40,630
Jake?

3217
02:44:40,630 --> 02:44:41,900
JAKE ARCHIBALD: What
do you mean by resize?

3218
02:44:41,900 --> 02:44:44,100
COLT MCANLIS: You've
got a CSS resize, where

3219
02:44:44,100 --> 02:44:46,150
you're changing the
properties of it.

3220
02:44:46,150 --> 02:44:49,880
If it comes down as 1024
pixels by 1024 pixels

3221
02:44:49,880 --> 02:44:53,310
and you display it as 900 pixels
by 900 pixels or something

3222
02:44:53,310 --> 02:44:54,030
like that.

3223
02:44:54,030 --> 02:44:55,292
Anybody resizing?

3224
02:44:55,292 --> 02:44:57,000
You're telling me
every single one of you

3225
02:44:57,000 --> 02:45:00,880
gives exactly the right pixel
ratio for every single device

3226
02:45:00,880 --> 02:45:01,880
that loads your website?

3227
02:45:01,880 --> 02:45:03,335
Is that what I'm hearing?

3228
02:45:03,335 --> 02:45:04,460
That guy's hiding his face.

3229
02:45:04,460 --> 02:45:05,300
So I know he's doing it wrong.

3230
02:45:05,300 --> 02:45:06,647
At least you're honest, brother.

3231
02:45:06,647 --> 02:45:08,230
I've got some swag
for you after this.

3232
02:45:08,230 --> 02:45:11,780
So here's something a
lot of you don't know.

3233
02:45:11,780 --> 02:45:16,010
Decoding a JPEG or a PNG
or a WebP file actually

3234
02:45:16,010 --> 02:45:17,052
takes time from your CPU.

3235
02:45:17,052 --> 02:45:18,676
And in fact, you know
how I was talking

3236
02:45:18,676 --> 02:45:20,570
about those tiles
getting rasterized?

3237
02:45:20,570 --> 02:45:23,390
What happens is before a
tile can be rasterized,

3238
02:45:23,390 --> 02:45:25,170
Chrome actually has
to go decompress

3239
02:45:25,170 --> 02:45:28,010
all the images that
are in that tile.

3240
02:45:28,010 --> 02:45:31,390
Now, when that tile is
evicted from the cache,

3241
02:45:31,390 --> 02:45:33,950
we're going to have to repaint
it again sometime later.

3242
02:45:33,950 --> 02:45:36,160
Well, lo and behold,
there's actually

3243
02:45:36,160 --> 02:45:38,230
a texture decompression
cache as well.

3244
02:45:38,230 --> 02:45:41,040
So there's a chance, a very
high, high, high chance

3245
02:45:41,040 --> 02:45:45,780
on mobile devices, that we'll
actually decompress a JPEG file

3246
02:45:45,780 --> 02:45:50,090
and then have to resize the
uncompressed version of it.

3247
02:45:50,090 --> 02:45:52,590
So you're actually getting full
32-bit pixels actually being

3248
02:45:52,590 --> 02:45:55,130
resized from 1024 to 512.

3249
02:45:55,130 --> 02:45:57,700
And then the next time you
have to render that image,

3250
02:45:57,700 --> 02:46:00,520
you have to decompress
it and resize it again.

3251
02:46:00,520 --> 02:46:02,880
So if an image is split
between two tiles,

3252
02:46:02,880 --> 02:46:05,620
you can run into a very
awkward situation, where

3253
02:46:05,620 --> 02:46:09,040
you have to decode and resize
that image for each tile

3254
02:46:09,040 --> 02:46:11,680
that it's split in.

3255
02:46:11,680 --> 02:46:15,350
So if you are resizing your
images dynamically right now,

3256
02:46:15,350 --> 02:46:18,170
this could be a
problem for your site.

3257
02:46:18,170 --> 02:46:19,420
Hopefully, some of you &mdash;

3258
02:46:19,420 --> 02:46:23,740
AUDIENCE: So should we
not do dynamic websites?

3259
02:46:23,740 --> 02:46:25,620
COLT MCANLIS: Save the
questions for the end.

3260
02:46:25,620 --> 02:46:26,536
I said it to that guy.

3261
02:46:26,536 --> 02:46:28,160
I've got to say it to you too.

3262
02:46:28,160 --> 02:46:30,083
Was that because I
called you Forecast.io?

3263
02:46:30,083 --> 02:46:30,794
OK.

3264
02:46:30,794 --> 02:46:31,502
That's all right.

3265
02:46:31,502 --> 02:46:33,622
Much love.

3266
02:46:33,622 --> 02:46:37,250
Anyhow, so I think we see that
this website has some issues.

3267
02:46:37,250 --> 02:46:39,250
And most of it is
on the Network tab.

3268
02:46:39,250 --> 02:46:43,610
Let me go ahead and turn
on continuous show paint

3269
02:46:43,610 --> 02:46:47,270
rectangles as well, because
I want to show this off too.

3270
02:46:47,270 --> 02:46:48,724
So see that red rectangle?

3271
02:46:48,724 --> 02:46:49,890
You can see this little one.

3272
02:46:49,890 --> 02:46:50,830
Let me show it on
the screen here.

3273
02:46:50,830 --> 02:46:52,413
You can see this one
little pop it up.

3274
02:46:52,413 --> 02:46:54,550
But watch this red rectangle
happen full screen.

3275
02:46:54,550 --> 02:46:55,870
Did you see that?

3276
02:46:55,870 --> 02:46:56,620
See that again?

3277
02:46:56,620 --> 02:46:59,790

3278
02:46:59,790 --> 02:47:02,180
I see this almost on every
single site on this list.

3279
02:47:02,180 --> 02:47:04,080
Basically, they got
a marquee on top.

3280
02:47:04,080 --> 02:47:06,380
And that marquee,
for some reason,

3281
02:47:06,380 --> 02:47:10,090
is actually invalidating the
entire page below it as well.

3282
02:47:10,090 --> 02:47:14,040
So the actual DIV that's
expanding this thing, that's

3283
02:47:14,040 --> 02:47:16,290
getting repainted, is
touching every single pixel

3284
02:47:16,290 --> 02:47:19,387
on the page, which
means that even sitting

3285
02:47:19,387 --> 02:47:21,470
here doing nothing, where
actually the CPU is just

3286
02:47:21,470 --> 02:47:22,520
sitting here
spinning and spinning

3287
02:47:22,520 --> 02:47:24,170
and spinning and spinning
and working and working.

3288
02:47:24,170 --> 02:47:26,900
And that's actually going to
make scrolling not as smooth

3289
02:47:26,900 --> 02:47:27,560
as possible.

3290
02:47:27,560 --> 02:47:28,780
And you can't see it.

3291
02:47:28,780 --> 02:47:30,150
I can feel it a little bit here.

3292
02:47:30,150 --> 02:47:31,921
This is actually a
pretty janky website.

3293
02:47:31,921 --> 02:47:34,420
Up at the top, it says that our
average frame rate right now

3294
02:47:34,420 --> 02:47:38,880
is about 18 frames a
second, 17 frames a second.

3295
02:47:38,880 --> 02:47:41,327
I can actually really
feel this on mobile.

3296
02:47:41,327 --> 02:47:42,285
Now, I have 30 minutes.

3297
02:47:42,285 --> 02:47:43,210
Yes.

3298
02:47:43,210 --> 02:47:45,757
15 minutes of filler.

3299
02:47:45,757 --> 02:47:47,090
So obviously, this is a problem.

3300
02:47:47,090 --> 02:47:48,770
And because when I see
something dynamic like this,

3301
02:47:48,770 --> 02:47:51,370
I generally think that memory
is going wonky as well.

3302
02:47:51,370 --> 02:47:53,840
So let's go ahead and do a
timeline and hit record again.

3303
02:47:53,840 --> 02:47:55,100
Let's see what's going on.

3304
02:47:55,100 --> 02:47:58,870

3305
02:47:58,870 --> 02:48:00,540
We've seen this before.

3306
02:48:00,540 --> 02:48:03,040
Same pattern we saw
with the other site.

3307
02:48:03,040 --> 02:48:05,210
We see just memory being
allocated and allocated

3308
02:48:05,210 --> 02:48:07,082
and allocated and allocated.

3309
02:48:07,082 --> 02:48:08,790
Let's hit stop and
see if we can drill in

3310
02:48:08,790 --> 02:48:09,956
and see what the culprit is.

3311
02:48:09,956 --> 02:48:12,090
Again, I know nothing
of these websites.

3312
02:48:12,090 --> 02:48:14,260
I'm just a primitive
C++ developer.

3313
02:48:14,260 --> 02:48:17,330
Your web development
scares and confuses me.

3314
02:48:17,330 --> 02:48:20,450
So let's go to Profile.

3315
02:48:20,450 --> 02:48:22,460
And let's do a record
heap allocations.

3316
02:48:22,460 --> 02:48:23,650
So we can see that
memory is a problem.

3317
02:48:23,650 --> 02:48:25,233
Now, let's dig in a
little bit deeper.

3318
02:48:25,233 --> 02:48:27,260
Let's record a heap application.

3319
02:48:27,260 --> 02:48:27,760
OK.

3320
02:48:27,760 --> 02:48:29,760
Again, I'm not touching
anything on the website.

3321
02:48:29,760 --> 02:48:32,890
And memory, 10K, 5K, 10K, 5K.

3322
02:48:32,890 --> 02:48:35,560
Let's hit stop.

3323
02:48:35,560 --> 02:48:38,680
Let's try to drill in
here on one of these guys.

3324
02:48:38,680 --> 02:48:39,850
Let's just look at this one.

3325
02:48:39,850 --> 02:48:41,070
Compiled code.

3326
02:48:41,070 --> 02:48:43,550
Looks familiar again.

3327
02:48:43,550 --> 02:48:44,460
Oh, wow.

3328
02:48:44,460 --> 02:48:47,470
It's almost like we've seen
this exact three lines of code

3329
02:48:47,470 --> 02:48:48,650
before.

3330
02:48:48,650 --> 02:48:50,359
So again, I know
nothing of this website.

3331
02:48:50,359 --> 02:48:52,233
I haven't even looked
at the source code yet.

3332
02:48:52,233 --> 02:48:54,540
But something in here is
already passing a closure

3333
02:48:54,540 --> 02:48:56,640
to a set timeout
or a set interval.

3334
02:48:56,640 --> 02:48:57,140
Sorry.

3335
02:48:57,140 --> 02:48:58,990
Set timeout is a different
operating system.

3336
02:48:58,990 --> 02:49:01,073
But there's some other
stuff going on in here too.

3337
02:49:01,073 --> 02:49:03,390
It looks like some other
relocation info is going on.

3338
02:49:03,390 --> 02:49:05,390
I don't see any
injections, which is good.

3339
02:49:05,390 --> 02:49:07,880
No one's calling eval, because,
otherwise, we'd probably

3340
02:49:07,880 --> 02:49:10,160
see the 6K worth of information.

3341
02:49:10,160 --> 02:49:10,830
Someone laughed.

3342
02:49:10,830 --> 02:49:11,410
That's probably good.

3343
02:49:11,410 --> 02:49:12,190
Eval is bad.

3344
02:49:12,190 --> 02:49:13,390
And you should feel bad.

3345
02:49:13,390 --> 02:49:15,800
So if you're using closures
and eval, just get out.

3346
02:49:15,800 --> 02:49:19,000
Just get out, dude.

3347
02:49:19,000 --> 02:49:20,500
I'm going to see a tweet.

3348
02:49:20,500 --> 02:49:23,760
Colt says, use set interval
with closure and eval &mdash;

3349
02:49:23,760 --> 02:49:27,095
perfmatters &mdash; inside of a WOFF.

3350
02:49:27,095 --> 02:49:28,720
By the way, I saw
someone the other day

3351
02:49:28,720 --> 02:49:31,900
that actually had a WOFF
embedded inside of a CSS.

3352
02:49:31,900 --> 02:49:34,420
And I was like, that's just a
bad idea from all principles.

3353
02:49:34,420 --> 02:49:35,520
The CSS gets bloated.

3354
02:49:35,520 --> 02:49:38,334
And then the WOFF
has to be &mdash; Anyhow,

3355
02:49:38,334 --> 02:49:40,000
we see that this other
part is an array.

3356
02:49:40,000 --> 02:49:41,274
Now, this is interesting.

3357
02:49:41,274 --> 02:49:42,690
So when you see
this array object,

3358
02:49:42,690 --> 02:49:44,720
this means this is an
actual JavaScript array that

3359
02:49:44,720 --> 02:49:46,050
is allocated
somewhere on the page.

3360
02:49:46,050 --> 02:49:47,549
And you can see
some of it is coming

3361
02:49:47,549 --> 02:49:50,520
from internal with
V8, the code DOP data.

3362
02:49:50,520 --> 02:49:52,440
But otherwise, the
relocation info &mdash; here's

3363
02:49:52,440 --> 02:49:56,190
a null array is just being
created for no reason.

3364
02:49:56,190 --> 02:49:58,160
And no items are
being added to it.

3365
02:49:58,160 --> 02:50:00,270
We can go down here to string.

3366
02:50:00,270 --> 02:50:04,030
And we can see a GM string
has been created somewhere.

3367
02:50:04,030 --> 02:50:05,150
Let's scroll this up.

3368
02:50:05,150 --> 02:50:05,680
Do we have any information?

3369
02:50:05,680 --> 02:50:06,906
AUDIENCE: [INAUDIBLE].

3370
02:50:06,906 --> 02:50:07,900
COLT MCANLIS: Yeah.

3371
02:50:07,900 --> 02:50:08,120
Yeah.

3372
02:50:08,120 --> 02:50:09,286
That's what's going on here.

3373
02:50:09,286 --> 02:50:11,020
So there's a regex
occurring somewhere.

3374
02:50:11,020 --> 02:50:12,280
A GM is being created.

3375
02:50:12,280 --> 02:50:13,988
And then there's some
system-level stuff.

3376
02:50:13,988 --> 02:50:16,152
This is mostly
dragons and krakens

3377
02:50:16,152 --> 02:50:17,860
and other things going
on under the hood.

3378
02:50:17,860 --> 02:50:19,276
If we expand this
a little bit, we

3379
02:50:19,276 --> 02:50:22,630
can actually slide over and
see, again, compiled code.

3380
02:50:22,630 --> 02:50:24,300
There's another relocation info.

3381
02:50:24,300 --> 02:50:25,870
Let's see if there's
a DOP this time.

3382
02:50:25,870 --> 02:50:26,370
No.

3383
02:50:26,370 --> 02:50:28,453
That makes sense, because
the spike's not as high.

3384
02:50:28,453 --> 02:50:29,270
We're on this guy.

3385
02:50:29,270 --> 02:50:30,770
Compiled code.

3386
02:50:30,770 --> 02:50:31,400
Relocation.

3387
02:50:31,400 --> 02:50:32,530
Spike's not as high again.

3388
02:50:32,530 --> 02:50:34,880
So again, DOP is actually what's
causing the memory spike here.

3389
02:50:34,880 --> 02:50:37,480
And then, of course, that's
causing inflation in our heap.

3390
02:50:37,480 --> 02:50:38,830
So we can actually see
there's a couple problems.

3391
02:50:38,830 --> 02:50:40,720
Obviously, they're sending
too much data down the pipe.

3392
02:50:40,720 --> 02:50:41,886
This page is loading slowly.

3393
02:50:41,886 --> 02:50:43,090
The person should feel bad.

3394
02:50:43,090 --> 02:50:45,120
They've also got some
timers and some closures

3395
02:50:45,120 --> 02:50:47,000
and some memory leak
issues that are causing

3396
02:50:47,000 --> 02:50:48,550
some friction with their users.

3397
02:50:48,550 --> 02:50:49,665
Let's load another site.

3398
02:50:49,665 --> 02:50:57,610

3399
02:50:57,610 --> 02:51:00,750
Chrome always, thank you.

3400
02:51:00,750 --> 02:51:01,910
So let's see this one.

3401
02:51:01,910 --> 02:51:03,701
Who thinks this is
going to be a fast site?

3402
02:51:03,701 --> 02:51:05,190
Show of hands.

3403
02:51:05,190 --> 02:51:05,690
No hands.

3404
02:51:05,690 --> 02:51:06,620
Good job.

3405
02:51:06,620 --> 02:51:08,120
You win.

3406
02:51:08,120 --> 02:51:09,710
I like the spinner.

3407
02:51:09,710 --> 02:51:11,695
We're trying to load.

3408
02:51:11,695 --> 02:51:14,070
We're letting you know that
we don't know how to do this.

3409
02:51:14,070 --> 02:51:14,250
Sorry.

3410
02:51:14,250 --> 02:51:15,350
That was below the belt.

3411
02:51:15,350 --> 02:51:15,850
I'm sorry.

3412
02:51:15,850 --> 02:51:17,061
I'm sorry.

3413
02:51:17,061 --> 02:51:20,150
I'm sorry.

3414
02:51:20,150 --> 02:51:21,595
I'm sorry.

3415
02:51:21,595 --> 02:51:22,470
That was a good idea.

3416
02:51:22,470 --> 02:51:23,261
We see it in Gmail.

3417
02:51:23,261 --> 02:51:24,440
I don't know.

3418
02:51:24,440 --> 02:51:27,720
It's like, hey, we're not
ready to figure out how

3419
02:51:27,720 --> 02:51:28,880
to steam content yet.

3420
02:51:28,880 --> 02:51:29,617
We saw load.

3421
02:51:29,617 --> 02:51:30,200
That was good.

3422
02:51:30,200 --> 02:51:31,730
So let's do this again.

3423
02:51:31,730 --> 02:51:33,280
Actually, let me show.

3424
02:51:33,280 --> 02:51:36,682
Scrolling doesn't seem that bad.

3425
02:51:36,682 --> 02:51:39,570
Let's click on something.

3426
02:51:39,570 --> 02:51:41,075
That was actually pretty fast.

3427
02:51:41,075 --> 02:51:42,580
That was actually
a little too fast.

3428
02:51:42,580 --> 02:51:44,762
Hold on.

3429
02:51:44,762 --> 02:51:45,570
Wait a minute.

3430
02:51:45,570 --> 02:51:46,482
Let me go back.

3431
02:51:46,482 --> 02:51:47,190
I'm back to slow.

3432
02:51:47,190 --> 02:51:49,120
Let me click on something
else, like trust no one.

3433
02:51:49,120 --> 02:51:50,036
I don't trust anybody.

3434
02:51:50,036 --> 02:51:52,054

3435
02:51:52,054 --> 02:51:54,470
Wow, that actually loaded a
lot faster than the main site.

3436
02:51:54,470 --> 02:51:56,539
Let's drill in here.

3437
02:51:56,539 --> 02:51:57,455
AUDIENCE: [INAUDIBLE].

3438
02:51:57,455 --> 02:51:59,802

3439
02:51:59,802 --> 02:52:01,510
COLT MCANLIS: Dude,
you're messing it up.

3440
02:52:01,510 --> 02:52:03,644

3441
02:52:03,644 --> 02:52:04,935
Jake, who's got the microphone?

3442
02:52:04,935 --> 02:52:06,018
JAKE ARCHIBALD: I'm sorry.

3443
02:52:06,018 --> 02:52:09,360
COLT MCANLIS: I didn't
interrupt your talk.

3444
02:52:09,360 --> 02:52:10,950
So let's take a
look at this here.

3445
02:52:10,950 --> 02:52:13,040
So I'm going to
go to Network tab.

3446
02:52:13,040 --> 02:52:16,046
And I'm going to hit
reload again here.

3447
02:52:16,046 --> 02:52:17,670
And we're going to
take a look at this.

3448
02:52:17,670 --> 02:52:18,560
Let's see what's going on.

3449
02:52:18,560 --> 02:52:19,518
So it was really weird.

3450
02:52:19,518 --> 02:52:20,952
The main page loaded slow.

3451
02:52:20,952 --> 02:52:21,660
That was awkward.

3452
02:52:21,660 --> 02:52:24,470
But then all subsequent
clicks loaded actually really,

3453
02:52:24,470 --> 02:52:26,579
really, really
fast, which tells us

3454
02:52:26,579 --> 02:52:28,120
if you can't get
the main page right,

3455
02:52:28,120 --> 02:52:29,930
why are you getting
the sub-clicks right?

3456
02:52:29,930 --> 02:52:31,200
That's kind of awkward.

3457
02:52:31,200 --> 02:52:32,470
So we're still loading.

3458
02:52:32,470 --> 02:52:33,640
We're still loading.

3459
02:52:33,640 --> 02:52:34,560
We're still loading.

3460
02:52:34,560 --> 02:52:37,000
Again, I always sort
by size, because I'm

3461
02:52:37,000 --> 02:52:39,910
a big dude who says that
memory is where the performance

3462
02:52:39,910 --> 02:52:42,250
problems are.

3463
02:52:42,250 --> 02:52:47,220
We can actually see
that they're loading.

3464
02:52:47,220 --> 02:52:49,410
And I'll give away
the punchline here.

3465
02:52:49,410 --> 02:52:53,850
But these images were on the
sub pages, not the main page.

3466
02:52:53,850 --> 02:52:57,010
But they're being
loaded on the main page.

3467
02:52:57,010 --> 02:52:58,084
Anyone figure it out yet?

3468
02:52:58,084 --> 02:52:59,750
Basically, what they're
doing is they're

3469
02:52:59,750 --> 02:53:02,440
loading all of the images
for all of the articles

3470
02:53:02,440 --> 02:53:06,730
that you would click to before
the main page is loaded.

3471
02:53:06,730 --> 02:53:08,509
So they're basically
trading off.

3472
02:53:08,509 --> 02:53:10,050
They're saying your
initial load time

3473
02:53:10,050 --> 02:53:11,258
is going to be really crummy.

3474
02:53:11,258 --> 02:53:13,480
But every click after that
is going to be golden.

3475
02:53:13,480 --> 02:53:15,890
So they're giving up that
initial three-second load time

3476
02:53:15,890 --> 02:53:18,740
to get one-second
load times later.

3477
02:53:18,740 --> 02:53:19,940
Maybe that's a discussion.

3478
02:53:19,940 --> 02:53:21,190
Again, here's a WOFF.

3479
02:53:21,190 --> 02:53:23,240
Anyone like WOFFs now?

3480
02:53:23,240 --> 02:53:24,421
The answer should be no.

3481
02:53:24,421 --> 02:53:25,920
But yeah, this is
really interesting

3482
02:53:25,920 --> 02:53:26,920
that we're seeing
some of these images.

3483
02:53:26,920 --> 02:53:28,378
Let me see if I
can sort this again

3484
02:53:28,378 --> 02:53:30,860
and see if we can't get better.

3485
02:53:30,860 --> 02:53:31,960
Here's another PNG.

3486
02:53:31,960 --> 02:53:33,480
Again, this is not
on the main page.

3487
02:53:33,480 --> 02:53:35,060
So let me hit back here.

3488
02:53:35,060 --> 02:53:36,750
Let's show you the
main page here.

3489
02:53:36,750 --> 02:53:39,354

3490
02:53:39,354 --> 02:53:41,120
Even clicking back
takes some time.

3491
02:53:41,120 --> 02:53:44,170

3492
02:53:44,170 --> 02:53:46,980
No?

3493
02:53:46,980 --> 02:53:49,340
Backy?

3494
02:53:49,340 --> 02:53:50,140
No, I guess not.

3495
02:53:50,140 --> 02:53:51,490
AUDIENCE: You can do it.

3496
02:53:51,490 --> 02:53:53,540
COLT MCANLIS: We're stuck now.

3497
02:53:53,540 --> 02:53:55,170
There we go.

3498
02:53:55,170 --> 02:53:55,700
So yeah.

3499
02:53:55,700 --> 02:53:56,783
So notice this right here.

3500
02:53:56,783 --> 02:53:58,800
So this was one of the
last things I clicked on.

3501
02:53:58,800 --> 02:54:00,174
And they have a
little drop-down.

3502
02:54:00,174 --> 02:54:03,690
So basically, each one of
these items, the images

3503
02:54:03,690 --> 02:54:07,570
and the extra content is
loaded in the main page, not

3504
02:54:07,570 --> 02:54:08,762
the subsequent page.

3505
02:54:08,762 --> 02:54:11,220
We're seeing that break down
in a lot of these charts here.

3506
02:54:11,220 --> 02:54:14,340

3507
02:54:14,340 --> 02:54:17,940
They have a couple lower
res versions here too.

3508
02:54:17,940 --> 02:54:21,830
So remember when that 100 pixel
by 100 pixel Facebook icon

3509
02:54:21,830 --> 02:54:22,990
was 9K?

3510
02:54:22,990 --> 02:54:25,430
Here's a 320 by 180 that's 10K.

3511
02:54:25,430 --> 02:54:27,781
So again, don't trust
your Facebook icons.

3512
02:54:27,781 --> 02:54:29,530
I would like to say,
don't trust Facebook.

3513
02:54:29,530 --> 02:54:31,280
But I'm not allowed
to say that on camera.

3514
02:54:31,280 --> 02:54:33,584
Shit.

3515
02:54:33,584 --> 02:54:34,980
Sorry.

3516
02:54:34,980 --> 02:54:36,160
Again, perfect.

3517
02:54:36,160 --> 02:54:39,000
Here's a 320 by 180
that's exactly 9.1K.

3518
02:54:39,000 --> 02:54:40,680
So again, I think
all of you should

3519
02:54:40,680 --> 02:54:42,640
be questioning how
big your images are.

3520
02:54:42,640 --> 02:54:45,490
But I think this Quartz site
is actually an interesting case

3521
02:54:45,490 --> 02:54:47,630
study, because they've
definitely traded off

3522
02:54:47,630 --> 02:54:51,720
one type of load time for
another type of load time.

3523
02:54:51,720 --> 02:54:55,540
And I'm not really
sure why or where

3524
02:54:55,540 --> 02:54:56,832
the justifications of that are.

3525
02:54:56,832 --> 02:54:58,206
But I think we
can definitely all

3526
02:54:58,206 --> 02:55:00,480
agree that the 20 years
that we've had on the web

3527
02:55:00,480 --> 02:55:03,885
have all accumulated that the
initial load time is pretty

3528
02:55:03,885 --> 02:55:05,760
much the most important
thing, because that's

3529
02:55:05,760 --> 02:55:07,380
the first thing your user feels.

3530
02:55:07,380 --> 02:55:09,505
None of you have seen this
site, except for the one

3531
02:55:09,505 --> 02:55:10,420
guy who submitted it.

3532
02:55:10,420 --> 02:55:12,950
And all of you felt the
pain of this site loading

3533
02:55:12,950 --> 02:55:14,065
for me hitting a button.

3534
02:55:14,065 --> 02:55:16,440
And it doesn't matter how much
the clicks after that are.

3535
02:55:16,440 --> 02:55:18,980
Most of us would have left the
site before we got to that.

3536
02:55:18,980 --> 02:55:20,350
Let me go over here too.

3537
02:55:20,350 --> 02:55:21,300
I want to show this.

3538
02:55:21,300 --> 02:55:27,020
So notice this &mdash; I moved now &mdash;
but this YouTube image here.

3539
02:55:27,020 --> 02:55:28,490
So if I click this
button, you'll

3540
02:55:28,490 --> 02:55:31,935
see the red boxes
again show up here.

3541
02:55:31,935 --> 02:55:35,720
So we can actually see
that that part of the page

3542
02:55:35,720 --> 02:55:38,280
is being re-rendered.

3543
02:55:38,280 --> 02:55:41,320
So you can see, again,
that it's showing &mdash; nope.

3544
02:55:41,320 --> 02:55:41,820
Don't care.

3545
02:55:41,820 --> 02:55:42,650
Don't care.

3546
02:55:42,650 --> 02:55:43,150
Don't.

3547
02:55:43,150 --> 02:55:44,140
No, dumb.

3548
02:55:44,140 --> 02:55:45,210
Stop.

3549
02:55:45,210 --> 02:55:46,270
Stop.

3550
02:55:46,270 --> 02:55:47,620
Let me click.

3551
02:55:47,620 --> 02:55:48,134
Done.

3552
02:55:48,134 --> 02:55:49,550
What I'd really
like to show here,

3553
02:55:49,550 --> 02:55:51,800
and this isn't really showing
up on the main screen.

3554
02:55:51,800 --> 02:55:52,380
I'm sorry.

3555
02:55:52,380 --> 02:55:54,420
But can anyone see this
orange line right here?

3556
02:55:54,420 --> 02:55:55,190
This orange line?

3557
02:55:55,190 --> 02:55:56,960
So one of the other
interesting things,

3558
02:55:56,960 --> 02:55:59,660
there's a talk that I gave at
Google I/O this year on this.

3559
02:55:59,660 --> 02:56:03,630
It's called webpage design
with the GPU in mind.

3560
02:56:03,630 --> 02:56:06,410
So what happens is
certain elements on a page

3561
02:56:06,410 --> 02:56:08,039
are &mdash; Imagine your
page is a plane.

3562
02:56:08,039 --> 02:56:09,830
And all of your images
and all of your text

3563
02:56:09,830 --> 02:56:11,486
exist on this plane.

3564
02:56:11,486 --> 02:56:12,860
Some of those
things are actually

3565
02:56:12,860 --> 02:56:16,400
propagated to its own plane, so
that the webpage can actually

3566
02:56:16,400 --> 02:56:17,590
scroll in the background.

3567
02:56:17,590 --> 02:56:21,495
And this other plane can
actually scroll relative to it.

3568
02:56:21,495 --> 02:56:23,120
So there is relative
scrolling concept.

3569
02:56:23,120 --> 02:56:26,567
Let me actually show you
this on a big screen here.

3570
02:56:26,567 --> 02:56:27,650
Let me load up HTML5rocks.

3571
02:56:27,650 --> 02:56:32,570

3572
02:56:32,570 --> 02:56:33,070
No.

3573
02:56:33,070 --> 02:56:36,860
I typed in the wrong
thing, because I can type.

3574
02:56:36,860 --> 02:56:41,771

3575
02:56:41,771 --> 02:56:42,645
Who's on my internet?

3576
02:56:42,645 --> 02:56:47,760

3577
02:56:47,760 --> 02:56:49,150
Watch my Wi-Fi go down now.

3578
02:56:49,150 --> 02:56:52,125

3579
02:56:52,125 --> 02:56:52,750
We'll try that.

3580
02:56:52,750 --> 02:56:54,040
There we go.

3581
02:56:54,040 --> 02:56:58,640
So I'm going to pick a random
article with some random guy

3582
02:56:58,640 --> 02:57:01,295
on it, some random
good-looking guy.

3583
02:57:01,295 --> 02:57:02,670
I think he's pretty
good looking.

3584
02:57:02,670 --> 02:57:04,890
Bald is beautiful here.

3585
02:57:04,890 --> 02:57:06,260
So let's go ahead and turn on.

3586
02:57:06,260 --> 02:57:08,010
This is Chrome DevTools
on a desktop site.

3587
02:57:08,010 --> 02:57:09,718
I know I wasn't going
to talk about this.

3588
02:57:09,718 --> 02:57:12,490
But let's do forced accelerated
and show composite layer

3589
02:57:12,490 --> 02:57:12,990
borders.

3590
02:57:12,990 --> 02:57:14,960
So turning on layer
borders here shows us

3591
02:57:14,960 --> 02:57:16,270
what we're seeing normally.

3592
02:57:16,270 --> 02:57:19,230
The first thing you see is
that the blue lines here

3593
02:57:19,230 --> 02:57:21,280
actually represent the
tiling of the page.

3594
02:57:21,280 --> 02:57:23,320
And this orange line
actually represents

3595
02:57:23,320 --> 02:57:25,320
something that's been
promoted to its own layer.

3596
02:57:25,320 --> 02:57:27,450
So how many of you are
using translateZ(0)?

3597
02:57:27,450 --> 02:57:28,130
TranslateZ(0).

3598
02:57:28,130 --> 02:57:29,010
Translate3D.

3599
02:57:29,010 --> 02:57:32,829
This is the hardware-accelerated
fast path, the silver bullet

3600
02:57:32,829 --> 02:57:34,870
that makes your web fast,
because you're suddenly

3601
02:57:34,870 --> 02:57:36,580
using the GPU on the web.

3602
02:57:36,580 --> 02:57:37,984
It's so amazing.

3603
02:57:37,984 --> 02:57:39,400
Actually, that's
not how it works.

3604
02:57:39,400 --> 02:57:42,240
What happens is when you use
translateZ(0) or translate3D,

3605
02:57:42,240 --> 02:57:44,830
you're actually promoting
these pieces of content

3606
02:57:44,830 --> 02:57:45,592
to its own plane.

3607
02:57:45,592 --> 02:57:47,300
This is actually a
separate set of tiles.

3608
02:57:47,300 --> 02:57:49,760
So remember how I said
the GPU will actually

3609
02:57:49,760 --> 02:57:51,320
scroll your tiles on the screen?

3610
02:57:51,320 --> 02:57:53,160
When you actually
use translateZ(0),

3611
02:57:53,160 --> 02:57:55,645
you get another layer that
the GPU also controls.

3612
02:57:55,645 --> 02:57:57,270
Now, I'm going to
see if I can do this,

3613
02:57:57,270 --> 02:58:01,070
because for some reason we
get paused in the debug.

3614
02:58:01,070 --> 02:58:02,010
Too much clicking.

3615
02:58:02,010 --> 02:58:08,195
So as I scroll here, notice
how these objects on the side &mdash;

3616
02:58:08,195 --> 02:58:08,695
watch this.

3617
02:58:08,695 --> 02:58:11,650
The table of contents
has not orange.

3618
02:58:11,650 --> 02:58:13,370
And so once it gets
to a certain part,

3619
02:58:13,370 --> 02:58:15,260
it actually gets promoted
to its own layer.

3620
02:58:15,260 --> 02:58:19,550
The orange border represents
different layers in GPU memory.

3621
02:58:19,550 --> 02:58:21,160
And then as I scroll
down the page,

3622
02:58:21,160 --> 02:58:22,410
they actually stay static.

3623
02:58:22,410 --> 02:58:24,899
Any time you have relative
scrolling content on your page,

3624
02:58:24,899 --> 02:58:26,690
you're actually going
to want to promote it

3625
02:58:26,690 --> 02:58:28,900
with this translateZ(0)
or translate3D.

3626
02:58:28,900 --> 02:58:31,240
Now, beware that this actually
puts a lot of pressure

3627
02:58:31,240 --> 02:58:31,831
on your GPU.

3628
02:58:31,831 --> 02:58:33,330
So for all of you
who are just going

3629
02:58:33,330 --> 02:58:36,222
to start putting translateZ(0)
on every part of your page &mdash;

3630
02:58:36,222 --> 02:58:37,680
we saw this happen
a lot because it

3631
02:58:37,680 --> 02:58:39,240
was supposed to be
a silver bullet &mdash;

3632
02:58:39,240 --> 02:58:41,406
every one of these tiles,
every one of these layers,

3633
02:58:41,406 --> 02:58:44,390
is actually contending for
residency inside of your GPU

3634
02:58:44,390 --> 02:58:46,760
cache, which means the more
of these separate layers

3635
02:58:46,760 --> 02:58:49,480
that you've actually promoted,
the slower your website is

3636
02:58:49,480 --> 02:58:50,170
going to be.

3637
02:58:50,170 --> 02:58:52,060
So you can get an
inverse effect with it,

3638
02:58:52,060 --> 02:58:54,270
because, basically, your
GPU is getting overtaxed.

3639
02:58:54,270 --> 02:58:56,352
More tiles are being
evicted from your cache,

3640
02:58:56,352 --> 02:58:58,310
because more things are
fighting for residency.

3641
02:58:58,310 --> 02:59:00,101
It's actually going to
slow down your site,

3642
02:59:00,101 --> 02:59:01,750
because your CPU is
spinning out more.

3643
02:59:01,750 --> 02:59:03,540
Anyhow, enough with
the desktop stuff.

3644
02:59:03,540 --> 02:59:04,280
Desktop is dead.

3645
02:59:04,280 --> 02:59:05,870
No one wants desktop.

3646
02:59:05,870 --> 02:59:06,370
OK.

3647
02:59:06,370 --> 02:59:07,953
Let's go back over
here to this thing,

3648
02:59:07,953 --> 02:59:10,782
because the mobile web is sexy.

3649
02:59:10,782 --> 02:59:11,740
What was I showing off?

3650
02:59:11,740 --> 02:59:12,240
Yeah.

3651
02:59:12,240 --> 02:59:14,980
So this qz site, this
is actually a little bit

3652
02:59:14,980 --> 02:59:21,670
interesting, because we see
mostly that as we're scrolling,

3653
02:59:21,670 --> 02:59:25,571
notice the big red spots
that keep popping up.

3654
02:59:25,571 --> 02:59:29,380
Let me see if I can get
it to do that again.

3655
02:59:29,380 --> 02:59:30,210
See it?

3656
02:59:30,210 --> 02:59:31,910
So something's going on.

3657
02:59:31,910 --> 02:59:33,380
I'll spare you the
punchline here.

3658
02:59:33,380 --> 02:59:35,437
What's actually occurring
is that these guys

3659
02:59:35,437 --> 02:59:37,520
are doing something with
a scroll handler in here,

3660
02:59:37,520 --> 02:59:39,450
where they're actually trying
to catch what I'm doing.

3661
02:59:39,450 --> 02:59:40,670
They're trying to
catch my little scroll.

3662
02:59:40,670 --> 02:59:42,170
They're trying to
reposition things.

3663
02:59:42,170 --> 02:59:44,820
And we soon as
they touch the DOM,

3664
02:59:44,820 --> 02:59:46,590
the whole DOM has
to be recalculated.

3665
02:59:46,590 --> 02:59:48,590
As soon as the whole DOM
has to be recalculated,

3666
02:59:48,590 --> 02:59:50,560
all of the tiles
have to be redrawn.

3667
02:59:50,560 --> 02:59:53,230
So as soon as they try to
touch what I'm scrolling

3668
02:59:53,230 --> 02:59:55,490
and reposition things
manually, they're actually

3669
02:59:55,490 --> 02:59:58,010
invalidating the
hardware compositing

3670
02:59:58,010 --> 03:00:01,680
and the GPU scrolling that we're
trying to do on their behalf

3671
03:00:01,680 --> 03:00:03,970
and actually messing up
their entire frame rate.

3672
03:00:03,970 --> 03:00:06,520
How many of your mobile sites
are catching a user input

3673
03:00:06,520 --> 03:00:08,474
like this?

3674
03:00:08,474 --> 03:00:09,310
Yeah.

3675
03:00:09,310 --> 03:00:10,235
I saw that.

3676
03:00:10,235 --> 03:00:11,240
I saw that.

3677
03:00:11,240 --> 03:00:12,580
At least you're honest.

3678
03:00:12,580 --> 03:00:15,260
Forecast.io, they know
what's going on guys.

3679
03:00:15,260 --> 03:00:15,890
I got it right.

3680
03:00:15,890 --> 03:00:16,870
I got it right.

3681
03:00:16,870 --> 03:00:17,470
He didn't.

3682
03:00:17,470 --> 03:00:18,470
No, he still hates me.

3683
03:00:18,470 --> 03:00:19,610
That's OK.

3684
03:00:19,610 --> 03:00:20,110
All right.

3685
03:00:20,110 --> 03:00:21,620
Let's do some other websites.

3686
03:00:21,620 --> 03:00:23,852
Pete, how are we doing on time?

3687
03:00:23,852 --> 03:00:24,800
PETE: 15.

3688
03:00:24,800 --> 03:00:25,920
COLT MCANLIS: 15 minutes?

3689
03:00:25,920 --> 03:00:28,670
I can load all the
websites in 15 minutes.

3690
03:00:28,670 --> 03:00:31,851
So let's look at a
couple other ones here.

3691
03:00:31,851 --> 03:00:32,350
Let's see.

3692
03:00:32,350 --> 03:00:34,079
Let's take a look
at something good,

3693
03:00:34,079 --> 03:00:35,620
so that everyone
walks away from here

3694
03:00:35,620 --> 03:00:37,951
with feelings of
happy bunny times.

3695
03:00:37,951 --> 03:00:38,450
Sorry.

3696
03:00:38,450 --> 03:00:39,408
I just called somebody.

3697
03:00:39,408 --> 03:00:42,720

3698
03:00:42,720 --> 03:00:43,960
So this is meetup.com.

3699
03:00:43,960 --> 03:00:49,121

3700
03:00:49,121 --> 03:00:49,620
OK.

3701
03:00:49,620 --> 03:00:51,157
So we didn't see
a loading spinner.

3702
03:00:51,157 --> 03:00:51,740
That was nice.

3703
03:00:51,740 --> 03:00:54,010
But it did take a
little bit long to load.

3704
03:00:54,010 --> 03:00:56,180
In general though, let's
see how it scrolls.

3705
03:00:56,180 --> 03:00:57,640
That's actually pretty fast.

3706
03:00:57,640 --> 03:01:02,550

3707
03:01:02,550 --> 03:01:05,470
Let's open the DevTools again
and see what kind of red things

3708
03:01:05,470 --> 03:01:07,990
are occurring and what
kind of load times

3709
03:01:07,990 --> 03:01:09,300
we're experiencing here.

3710
03:01:09,300 --> 03:01:10,660
So turn on DevTools.

3711
03:01:10,660 --> 03:01:12,780
Let's hit reload and see
how the network performs.

3712
03:01:12,780 --> 03:01:15,720

3713
03:01:15,720 --> 03:01:16,350
Not that bad.

3714
03:01:16,350 --> 03:01:17,554
Not that bad.

3715
03:01:17,554 --> 03:01:18,970
On the device, I'm
actually seeing

3716
03:01:18,970 --> 03:01:20,420
things starting
to pop up already.

3717
03:01:20,420 --> 03:01:22,170
I notice no WOFFs in the code.

3718
03:01:22,170 --> 03:01:23,022
That's really good.

3719
03:01:23,022 --> 03:01:23,730
Oh, there is one.

3720
03:01:23,730 --> 03:01:24,430
Son of a bitch.

3721
03:01:24,430 --> 03:01:27,010
Where did that come from?

3722
03:01:27,010 --> 03:01:28,450
Oh, bogus.

3723
03:01:28,450 --> 03:01:31,670
Well, maybe they're not using
that on something critical.

3724
03:01:31,670 --> 03:01:34,410
Let's sort by content here.

3725
03:01:34,410 --> 03:01:36,740
This is really cool to see.

3726
03:01:36,740 --> 03:01:40,405
A 44K JavaScript is actually
the biggest part of the page.

3727
03:01:40,405 --> 03:01:43,414
I'm surprised that's
not jQuery at 191K.

3728
03:01:43,414 --> 03:01:44,580
How many of you are using--?

3729
03:01:44,580 --> 03:01:44,910
You know what?

3730
03:01:44,910 --> 03:01:45,490
Never mind.

3731
03:01:45,490 --> 03:01:46,850
Just never mind.

3732
03:01:46,850 --> 03:01:47,350
OK.

3733
03:01:47,350 --> 03:01:48,766
Actually, this
image is popping up

3734
03:01:48,766 --> 03:01:53,110
at the top, 60K
JPEG, 320 by 226.

3735
03:01:53,110 --> 03:01:55,770
That's maybe a little large.

3736
03:01:55,770 --> 03:01:57,170
Another 60K JPEG.

3737
03:01:57,170 --> 03:01:59,630
Another 50K JPEG.

3738
03:01:59,630 --> 03:02:02,910
This is really interesting too,
because we just saw 340 by 226s

3739
03:02:02,910 --> 03:02:06,370
on the previous site
that were about 10K.

3740
03:02:06,370 --> 03:02:10,290
So again, someone's not
optimizing JPEGs the right way.

3741
03:02:10,290 --> 03:02:13,291
In fact, actually on the
article that I put on HTML5rocks

3742
03:02:13,291 --> 03:02:14,790
about image
compression &mdash; let me see

3743
03:02:14,790 --> 03:02:16,373
if I can type over
there really quick.

3744
03:02:16,373 --> 03:02:22,260

3745
03:02:22,260 --> 03:02:24,144
So this article that
I did was actually

3746
03:02:24,144 --> 03:02:25,685
image compression
for web developers.

3747
03:02:25,685 --> 03:02:28,300
The entire point of this article
was to talk to all of you

3748
03:02:28,300 --> 03:02:31,291
in a very frank way and
discuss the back story of where

3749
03:02:31,291 --> 03:02:32,290
image compression works.

3750
03:02:32,290 --> 03:02:34,067
Plus, I'm a real
big fan of parrots.

3751
03:02:34,067 --> 03:02:36,650
They're kind of cool, especially
the digitally pixelated ones.

3752
03:02:36,650 --> 03:02:39,520
Anyhow, there's some
great content down here

3753
03:02:39,520 --> 03:02:41,250
about JPEG information.

3754
03:02:41,250 --> 03:02:44,120
And it actually shows that &mdash;
here it is, right here.

3755
03:02:44,120 --> 03:02:47,400
Let me see if I
can zoom this in.

3756
03:02:47,400 --> 03:02:47,900
Nope.

3757
03:02:47,900 --> 03:02:48,360
Too far.

3758
03:02:48,360 --> 03:02:48,860
OK.

3759
03:02:48,860 --> 03:02:51,480
So I feel it's
important to break away

3760
03:02:51,480 --> 03:02:53,970
from our regular scheduled
bashing of these websites,

3761
03:02:53,970 --> 03:02:55,610
because that's getting a
little depressing, right?

3762
03:02:55,610 --> 03:02:56,860
Everyone is getting depressed.

3763
03:02:56,860 --> 03:02:59,470
So this is actually a test
that an external person

3764
03:02:59,470 --> 03:03:04,050
did on the compression
quality of images

3765
03:03:04,050 --> 03:03:06,880
that are being served by the
top websites of the world.

3766
03:03:06,880 --> 03:03:10,070
And what you're actually seeing
here is that most of them

3767
03:03:10,070 --> 03:03:13,140
actually just use
a standard value.

3768
03:03:13,140 --> 03:03:18,510
So all Window Live background
images are exactly 82.

3769
03:03:18,510 --> 03:03:21,580
Regardless of what the
PSNR is, they choose 82.

3770
03:03:21,580 --> 03:03:23,300
It's hard coded.

3771
03:03:23,300 --> 03:03:26,965
So they might be able on some
of the images to use a level 64

3772
03:03:26,965 --> 03:03:28,590
and actually reduce
the size more.

3773
03:03:28,590 --> 03:03:29,510
But they use 82.

3774
03:03:29,510 --> 03:03:32,560
Wikipedia are all 80 for
every one of their images,

3775
03:03:32,560 --> 03:03:34,660
regardless of the
content quality on it.

3776
03:03:34,660 --> 03:03:36,470
YouTube is about 70 to 82.

3777
03:03:36,470 --> 03:03:36,994
That's good.

3778
03:03:36,994 --> 03:03:39,410
It shows that they're actually
doing some dynamic scaling.

3779
03:03:39,410 --> 03:03:40,675
Although it's unclear
whether or not that

3780
03:03:40,675 --> 03:03:42,930
it's actually manually scaled,
or they have an artist actually

3781
03:03:42,930 --> 03:03:45,346
changing them, or they have
some sort of dynamic solution,

3782
03:03:45,346 --> 03:03:46,160
like I was saying.

3783
03:03:46,160 --> 03:03:48,130
Yahoo, 69 to 91.

3784
03:03:48,130 --> 03:03:50,850
Again, they may have some more
responsive version of that.

3785
03:03:50,850 --> 03:03:52,920
Facebook's are at 85.

3786
03:03:52,920 --> 03:03:55,231
And Google image
thumbnails are about 74.

3787
03:03:55,231 --> 03:03:56,480
Here's the really interesting.

3788
03:03:56,480 --> 03:03:59,375
Twitter user JPEGs are
anywhere between 30 and 100,

3789
03:03:59,375 --> 03:04:00,750
which means that
for some images,

3790
03:04:00,750 --> 03:04:02,830
they're actually doing nothing.

3791
03:04:02,830 --> 03:04:04,580
And some images, they're
doing everything.

3792
03:04:04,580 --> 03:04:07,540
This actually tells me &mdash; no one
is in here from Twitter, right?

3793
03:04:07,540 --> 03:04:09,998
This actually tells me that
they may have something dynamic

3794
03:04:09,998 --> 03:04:12,190
actually testing the noise
ratio of the compression

3795
03:04:12,190 --> 03:04:15,850
there and actually serving
you the most optimized JPEG

3796
03:04:15,850 --> 03:04:17,804
at the best image
quality possible.

3797
03:04:17,804 --> 03:04:18,720
So that's really cool.

3798
03:04:18,720 --> 03:04:20,511
That's really cool to
see that someone's is

3799
03:04:20,511 --> 03:04:22,040
doing that out on the web.

3800
03:04:22,040 --> 03:04:22,540
OK.

3801
03:04:22,540 --> 03:04:25,370
Back to doom and gloom.

3802
03:04:25,370 --> 03:04:26,220
We were over here.

3803
03:04:26,220 --> 03:04:31,180
So these images probably are a
little too large in megabytes.

3804
03:04:31,180 --> 03:04:33,220
They're probably
not optimizing it.

3805
03:04:33,220 --> 03:04:34,310
Nope, that's not an image.

3806
03:04:34,310 --> 03:04:35,770
Chances are they're just
using a standard one.

3807
03:04:35,770 --> 03:04:36,970
So let's hit timeline.

3808
03:04:36,970 --> 03:04:38,050
Let's just hit record.

3809
03:04:38,050 --> 03:04:40,070
Let's see what's
going on with memory.

3810
03:04:40,070 --> 03:04:41,970
I'm not touching anything.

3811
03:04:41,970 --> 03:04:48,290
Memory is increasing,
not too much, 5.5, 5.6.

3812
03:04:48,290 --> 03:04:50,600
Again, we've got these
timers getting fired.

3813
03:04:50,600 --> 03:04:51,310
fine.js.

3814
03:04:51,310 --> 03:04:52,860
I don't even know what this is.

3815
03:04:52,860 --> 03:04:54,767
Meetup script mobile find.

3816
03:04:54,767 --> 03:04:56,850
So apparently, it's trying
to meet me and find me.

3817
03:04:56,850 --> 03:04:59,680
That's kind of creepy.

3818
03:04:59,680 --> 03:05:01,200
Mobile base.

3819
03:05:01,200 --> 03:05:01,980
So that's weird.

3820
03:05:01,980 --> 03:05:03,640
So they've got two
separate timers

3821
03:05:03,640 --> 03:05:06,820
coming from their own website
doing two different things.

3822
03:05:06,820 --> 03:05:09,117
And again, I'm not
touching anything.

3823
03:05:09,117 --> 03:05:09,950
Nothing's happening.

3824
03:05:09,950 --> 03:05:11,080
Nothing is moving.

3825
03:05:11,080 --> 03:05:13,230
But we're at 5.6 megs.

3826
03:05:13,230 --> 03:05:14,630
So this is like a slow leak.

3827
03:05:14,630 --> 03:05:17,895
It looks like there's a slow
closure or something being

3828
03:05:17,895 --> 03:05:18,520
tossed to this.

3829
03:05:18,520 --> 03:05:21,340
So let's take a look at this
and see if we can't drill in.

3830
03:05:21,340 --> 03:05:22,150
Oh, yay.

3831
03:05:22,150 --> 03:05:23,800
It is a jQuery library.

3832
03:05:23,800 --> 03:05:25,750
Summon the power
of pretty print.

3833
03:05:25,750 --> 03:05:26,550
Aha.

3834
03:05:26,550 --> 03:05:28,930
That didn't help.

3835
03:05:28,930 --> 03:05:29,890
I'll try that again.

3836
03:05:29,890 --> 03:05:31,390
There we go.

3837
03:05:31,390 --> 03:05:32,206
Oh, mustache.

3838
03:05:32,206 --> 03:05:34,890

3839
03:05:34,890 --> 03:05:35,790
Interesting.

3840
03:05:35,790 --> 03:05:36,540
Who uses mustache?

3841
03:05:36,540 --> 03:05:39,880
Can anyone explain this
line of code to me?

3842
03:05:39,880 --> 03:05:42,064
AUDIENCE: It's a
JavaScript template.

3843
03:05:42,064 --> 03:05:43,660
[INAUDIBLE] is derived from it.

3844
03:05:43,660 --> 03:05:46,671
COLT MCANLIS: So this is
causing a memory leak.

3845
03:05:46,671 --> 03:05:48,175
Can anyone fix this?

3846
03:05:48,175 --> 03:05:48,770
Not now?

3847
03:05:48,770 --> 03:05:49,270
OK.

3848
03:05:49,270 --> 03:05:49,400
That's cool.

3849
03:05:49,400 --> 03:05:49,960
Take your time.

3850
03:05:49,960 --> 03:05:50,300
That's all right.

3851
03:05:50,300 --> 03:05:51,250
We'll get back to it.

3852
03:05:51,250 --> 03:05:54,400
But basically, we're
seeing again this looks

3853
03:05:54,400 --> 03:05:59,040
like an anonymous function
calling some factory objects,

3854
03:05:59,040 --> 03:06:01,120
testing some object definitions.

3855
03:06:01,120 --> 03:06:03,010
This in and of itself
doesn't look bad.

3856
03:06:03,010 --> 03:06:07,390
Although it is calling another
anonymous function down here.

3857
03:06:07,390 --> 03:06:08,860
Sometimes the
pretty print spacing

3858
03:06:08,860 --> 03:06:09,901
doesn't get it all right.

3859
03:06:09,901 --> 03:06:12,250
This might actually be
a closure in a closure.

3860
03:06:12,250 --> 03:06:16,550
It looks like we've got one
closed there and one open here.

3861
03:06:16,550 --> 03:06:18,580
Something is going on.

3862
03:06:18,580 --> 03:06:20,625
Any of you who are using
third-party libraries,

3863
03:06:20,625 --> 03:06:22,750
it's actually really easy
to fall into these traps,

3864
03:06:22,750 --> 03:06:24,708
where they're allocating
memory and doing stuff

3865
03:06:24,708 --> 03:06:27,110
on your behalf that may
be negatively impacting

3866
03:06:27,110 --> 03:06:27,950
your performance.

3867
03:06:27,950 --> 03:06:30,510
And we sometimes
ignore these faults

3868
03:06:30,510 --> 03:06:32,050
and don't track
these faults down,

3869
03:06:32,050 --> 03:06:34,870
because of the fact that we get
event propagation or something

3870
03:06:34,870 --> 03:06:38,170
else, like oh, I get a call
back when something occurs.

3871
03:06:38,170 --> 03:06:40,540
That code you can actually
write in about 100 lines

3872
03:06:40,540 --> 03:06:43,074
of your own making and actually
keep it memory performant.

3873
03:06:43,074 --> 03:06:44,990
But instead, we pull in
these large libraries.

3874
03:06:44,990 --> 03:06:47,140
So it's important that
you know these trade-offs

3875
03:06:47,140 --> 03:06:49,089
when something like
this is occurring.

3876
03:06:49,089 --> 03:06:50,130
Let's do another website.

3877
03:06:50,130 --> 03:06:51,005
Pete, we've got what?

3878
03:06:51,005 --> 03:06:52,661
10 minutes left?

3879
03:06:52,661 --> 03:06:53,160
Yeah?

3880
03:06:53,160 --> 03:06:53,870
About 10 minutes?

3881
03:06:53,870 --> 03:06:54,410
Let's see.

3882
03:06:54,410 --> 03:06:56,920
What haven't we done here?

3883
03:06:56,920 --> 03:06:58,790
So I have to load
this, because I really

3884
03:06:58,790 --> 03:07:00,470
don't get this website.

3885
03:07:00,470 --> 03:07:02,470
And I really want to talk
about the website more

3886
03:07:02,470 --> 03:07:04,910
than the performance
characteristics.

3887
03:07:04,910 --> 03:07:07,650
So this is called
Game of Phones.

3888
03:07:07,650 --> 03:07:08,465
Is this your site?

3889
03:07:08,465 --> 03:07:09,090
AUDIENCE: Yeah.

3890
03:07:09,090 --> 03:07:09,798
COLT MCANLIS: OK.

3891
03:07:09,798 --> 03:07:11,480
Cool.

3892
03:07:11,480 --> 03:07:14,360
I really don't get this website.

3893
03:07:14,360 --> 03:07:15,262
But it's here.

3894
03:07:15,262 --> 03:07:17,720
So we can take a look at it
from a performance perspective.

3895
03:07:17,720 --> 03:07:21,275
Basically, what happens
is someone will record.

3896
03:07:21,275 --> 03:07:22,650
And from what I
can tell, they're

3897
03:07:22,650 --> 03:07:25,950
very politically
charged, angry arguments.

3898
03:07:25,950 --> 03:07:27,490
And you sign up.

3899
03:07:27,490 --> 03:07:30,890
And someone will call you and
play this recorded message

3900
03:07:30,890 --> 03:07:33,400
that's like, blah, blah,
blah, blah, blah, blah, blah,

3901
03:07:33,400 --> 03:07:35,210
rally, fight the power.

3902
03:07:35,210 --> 03:07:39,080
And then you have to call
someone else on the list

3903
03:07:39,080 --> 03:07:42,130
and try to regurgitate
what you heard.

3904
03:07:42,130 --> 03:07:43,989
And so it's like the
game of telephone

3905
03:07:43,989 --> 03:07:44,905
that you play as kids.

3906
03:07:44,905 --> 03:07:46,340
And you're trying to
get all the way through.

3907
03:07:46,340 --> 03:07:48,410
I have no idea why people
are even doing this.

3908
03:07:48,410 --> 03:07:50,485
I hate getting calls
from my wife, much less

3909
03:07:50,485 --> 03:07:51,860
random strangers
on the internet.

3910
03:07:51,860 --> 03:07:54,920
I'm on the internet because
I don't want you to call me.

3911
03:07:54,920 --> 03:07:56,840
Send me a text or something.

3912
03:07:56,840 --> 03:07:57,590
Anyhow.

3913
03:07:57,590 --> 03:07:58,522
Personal thing.

3914
03:07:58,522 --> 03:07:59,980
I'm sure it works
for your brother.

3915
03:07:59,980 --> 03:08:00,540
I don't get the internet.

3916
03:08:00,540 --> 03:08:01,121
I'm too old.

3917
03:08:01,121 --> 03:08:01,870
That's my problem.

3918
03:08:01,870 --> 03:08:04,433
AUDIENCE: I've had people tell
me it's the only phone calls

3919
03:08:04,433 --> 03:08:05,349
that they will answer.

3920
03:08:05,349 --> 03:08:08,632

3921
03:08:08,632 --> 03:08:09,590
COLT MCANLIS: Oh, dude.

3922
03:08:09,590 --> 03:08:10,430
Game of Phones.

3923
03:08:10,430 --> 03:08:12,682
Awesome.

3924
03:08:12,682 --> 03:08:13,890
You know what you need to do?

3925
03:08:13,890 --> 03:08:16,490
You actually need to get the
voices from "Game of Thrones"

3926
03:08:16,490 --> 03:08:17,490
to actually do the call.

3927
03:08:17,490 --> 03:08:19,531
And then it would just go
through the roof, dude.

3928
03:08:19,531 --> 03:08:20,460
HBO might sue me now.

3929
03:08:20,460 --> 03:08:21,534
Sorry about that.

3930
03:08:21,534 --> 03:08:23,950
Anyhow, let's look at this
from a performance perspective.

3931
03:08:23,950 --> 03:08:25,760
There's really
nothing on this page.

3932
03:08:25,760 --> 03:08:26,692
It's kind of text.

3933
03:08:26,692 --> 03:08:28,400
But we're going to
run through it anyway,

3934
03:08:28,400 --> 03:08:33,080
just so you guys can see the
differences in these things.

3935
03:08:33,080 --> 03:08:35,641
So I'm not here.

3936
03:08:35,641 --> 03:08:37,820
By the way, did you see
actually what showed up?

3937
03:08:37,820 --> 03:08:38,778
Was this on the screen?

3938
03:08:38,778 --> 03:08:39,360
Sorry.

3939
03:08:39,360 --> 03:08:40,840
So this is Game of Phones.

3940
03:08:40,840 --> 03:08:46,120
Again, it's just text and
people calling each other.

3941
03:08:46,120 --> 03:08:48,730
But this is it.

3942
03:08:48,730 --> 03:08:50,740
12 requests.

3943
03:08:50,740 --> 03:08:54,137
The interesting
thing here is 107K.

3944
03:08:54,137 --> 03:08:54,970
That's a little odd.

3945
03:08:54,970 --> 03:08:58,340
We were seeing some other
pages come in below that.

3946
03:08:58,340 --> 03:09:03,730
Mainly, this is coming from &mdash;
Bootstrap is being included.

3947
03:09:03,730 --> 03:09:07,175
I'm not really sure why
this needs Bootstrap.

3948
03:09:07,175 --> 03:09:12,180

3949
03:09:12,180 --> 03:09:14,120
I guess the cool
kids are doing it.

3950
03:09:14,120 --> 03:09:15,245
And here's the funny thing.

3951
03:09:15,245 --> 03:09:21,610
We got Bootstrap.min and then
CSS that replaces Bootstrap.

3952
03:09:21,610 --> 03:09:22,570
So that's a thing.

3953
03:09:22,570 --> 03:09:23,236
And then jQuery.

3954
03:09:23,236 --> 03:09:29,290

3955
03:09:29,290 --> 03:09:30,470
OK.

3956
03:09:30,470 --> 03:09:33,356
And then here's another
Bootstrap again and then

3957
03:09:33,356 --> 03:09:34,980
telephone gram and
then another jQuery.

3958
03:09:34,980 --> 03:09:39,030

3959
03:09:39,030 --> 03:09:41,445
Are you using two jQueries?

3960
03:09:41,445 --> 03:09:43,195
AUDIENCE: I should
mention that I've never

3961
03:09:43,195 --> 03:09:44,590
made a web page before.

3962
03:09:44,590 --> 03:09:47,340
COLT MCANLIS: You're
using two jQueries.

3963
03:09:47,340 --> 03:09:49,004
Do you know you're
using two jQueries?

3964
03:09:49,004 --> 03:09:49,795
AUDIENCE: Now I do.

3965
03:09:49,795 --> 03:09:50,870
COLT MCANLIS: Now you do.

3966
03:09:50,870 --> 03:09:53,200
OK.

3967
03:09:53,200 --> 03:09:56,160
And then I like the GIF.

3968
03:09:56,160 --> 03:09:59,104
It's spritesheeted, I guess.

3969
03:09:59,104 --> 03:10:00,020
Here's the cool thing.

3970
03:10:00,020 --> 03:10:04,680
So a 300 by 120 animated
GIF is only 4.4K.

3971
03:10:04,680 --> 03:10:10,490
Yet we were seeing full JPEGs
that were 9K that were static.

3972
03:10:10,490 --> 03:10:14,890
So I'm not really sure
what else to do with this.

3973
03:10:14,890 --> 03:10:17,679
Let me hit timeline and see
what this is doing here.

3974
03:10:17,679 --> 03:10:18,595
It's a little awkward.

3975
03:10:18,595 --> 03:10:22,830

3976
03:10:22,830 --> 03:10:25,930
So your jQueries
are using memory.

3977
03:10:25,930 --> 03:10:28,310
So this is kind of tell-tale.

3978
03:10:28,310 --> 03:10:29,220
Do you have a timer?

3979
03:10:29,220 --> 03:10:30,935
It looks like you have a timer.

3980
03:10:30,935 --> 03:10:32,810
AUDIENCE: Maybe the
audio player is using it.

3981
03:10:32,810 --> 03:10:34,351
COLT MCANLIS: Maybe
the audio player.

3982
03:10:34,351 --> 03:10:35,090
Yeah.

3983
03:10:35,090 --> 03:10:35,780
Yeah, it does.

3984
03:10:35,780 --> 03:10:37,363
So it looks like
there's a timer here.

3985
03:10:37,363 --> 03:10:39,030
I don't know if you
guys can see this.

3986
03:10:39,030 --> 03:10:40,740
It looks like
there's a timer here.

3987
03:10:40,740 --> 03:10:43,930
And you can see this red square
up here, just the Play button.

3988
03:10:43,930 --> 03:10:48,090
That Play button
has a timer that

3989
03:10:48,090 --> 03:10:52,210
needs jQuery and Bootstrap &mdash;
two jQueries and Bootstrap &mdash;

3990
03:10:52,210 --> 03:10:57,790
and is allocating a meg of
memory over seven seconds.

3991
03:10:57,790 --> 03:10:59,300
So that's a thing.

3992
03:10:59,300 --> 03:11:02,570
Lots of rasterizes occurring
in here, lots of recalculates.

3993
03:11:02,570 --> 03:11:04,420
So not only is it
repainting, it's

3994
03:11:04,420 --> 03:11:07,390
actually updating
the DOM to repaint.

3995
03:11:07,390 --> 03:11:08,700
Let's look at this again.

3996
03:11:08,700 --> 03:11:11,400
That's updating the DOM.

3997
03:11:11,400 --> 03:11:12,142
Don't know why.

3998
03:11:12,142 --> 03:11:13,850
Maybe there's a cool
jitter effect there.

3999
03:11:13,850 --> 03:11:14,970
Maybe I got this wrong.

4000
03:11:14,970 --> 03:11:16,810
Maybe I'm actually
looking at the matrix.

4001
03:11:16,810 --> 03:11:18,175
Am I looking at the matrix?

4002
03:11:18,175 --> 03:11:19,300
That would be kind of cool.

4003
03:11:19,300 --> 03:11:20,370
I'm like analyzing.

4004
03:11:20,370 --> 03:11:21,070
No, sorry.

4005
03:11:21,070 --> 03:11:21,730
I'm having fun.

4006
03:11:21,730 --> 03:11:22,500
It's late.

4007
03:11:22,500 --> 03:11:24,950
And I have to keep you all
awake for another five minutes.

4008
03:11:24,950 --> 03:11:27,340
So anyhow, I don't
like this trend.

4009
03:11:27,340 --> 03:11:29,360
You're actually allocating
more memory faster

4010
03:11:29,360 --> 03:11:30,740
than the other
websites we looked at.

4011
03:11:30,740 --> 03:11:31,840
It's probably because
you have two jQueries.

4012
03:11:31,840 --> 03:11:33,371
But anyhow, let's dig in.

4013
03:11:33,371 --> 03:11:34,370
So let's go to Profiles.

4014
03:11:34,370 --> 03:11:36,570
Again, follow the memory,
find the performance problems.

4015
03:11:36,570 --> 03:11:38,080
So we follow the asset
memory to figure out

4016
03:11:38,080 --> 03:11:39,160
where load problems are.

4017
03:11:39,160 --> 03:11:40,720
We follow the dynamic
memory to figure out

4018
03:11:40,720 --> 03:11:42,678
where compute problems
and render problems are.

4019
03:11:42,678 --> 03:11:44,830
Can I click this button please?

4020
03:11:44,830 --> 03:11:45,860
Clicky.

4021
03:11:45,860 --> 03:11:49,240
You've allocated too much
memory for your site.

4022
03:11:49,240 --> 03:11:50,180
And I can't click.

4023
03:11:50,180 --> 03:11:50,990
Oh, there we go.

4024
03:11:50,990 --> 03:11:51,580
OK.

4025
03:11:51,580 --> 03:11:53,210
So let's do record
heap applications.

4026
03:11:53,210 --> 03:11:53,740
Hit start.

4027
03:11:53,740 --> 03:11:56,430

4028
03:11:56,430 --> 03:11:57,680
So that's kind of interesting.

4029
03:11:57,680 --> 03:11:59,230
Do you guys see this pattern?

4030
03:11:59,230 --> 03:12:01,700
So this is, actually,
really very, very regular

4031
03:12:01,700 --> 03:12:04,130
allocations that are occurring,
two different sets of it.

4032
03:12:04,130 --> 03:12:06,910
But they're almost
deleted immediately,

4033
03:12:06,910 --> 03:12:08,400
except for the
stuff that happened

4034
03:12:08,400 --> 03:12:09,330
in the beginning of the trace.

4035
03:12:09,330 --> 03:12:10,760
So see, we're seeing
the gray lines.

4036
03:12:10,760 --> 03:12:12,676
So the gray lines mean
that what was allocated

4037
03:12:12,676 --> 03:12:14,050
has actually been freed now.

4038
03:12:14,050 --> 03:12:15,910
This is kind of odd.

4039
03:12:15,910 --> 03:12:18,280
I want to see where
this is coming from.

4040
03:12:18,280 --> 03:12:22,070
I like to dig in and
figure out why I'm so bald.

4041
03:12:22,070 --> 03:12:23,195
So we have the whole thing.

4042
03:12:23,195 --> 03:12:24,040
Yada, yada, yada.

4043
03:12:24,040 --> 03:12:26,370
Let's actually just
highlight this guy here.

4044
03:12:26,370 --> 03:12:28,090
So array.

4045
03:12:28,090 --> 03:12:28,990
Transition array.

4046
03:12:28,990 --> 03:12:30,930
So something is going
on inside of V8.

4047
03:12:30,930 --> 03:12:32,660
All these are being deleted.

4048
03:12:32,660 --> 03:12:34,616
Compiled code.

4049
03:12:34,616 --> 03:12:35,420
Is it DOP?

4050
03:12:35,420 --> 03:12:36,310
No, relocation.

4051
03:12:36,310 --> 03:12:40,010
So it looks like there's
just some sort of cases

4052
03:12:40,010 --> 03:12:41,790
where jQuery is executing.

4053
03:12:41,790 --> 03:12:43,374
Again, I see this a
lot with closures.

4054
03:12:43,374 --> 03:12:45,748
Closures, for some reason,
tend to bring up this pattern.

4055
03:12:45,748 --> 03:12:47,380
jQuery is kicking
off a closure that's

4056
03:12:47,380 --> 03:12:53,290
causing a reflow of your
entire page for a five pixel

4057
03:12:53,290 --> 03:12:54,480
by five pixel icon.

4058
03:12:54,480 --> 03:12:57,830
So you still loaded faster
than the other sites.

4059
03:12:57,830 --> 03:12:58,520
Bravo.

4060
03:12:58,520 --> 03:13:00,037
Round of applause for that.

4061
03:13:00,037 --> 03:13:03,241
[APPLAUSE]

4062
03:13:03,241 --> 03:13:04,907
AUDIENCE: [INAUDIBLE]
don't need images.

4063
03:13:04,907 --> 03:13:07,900
COLT MCANLIS: There you go.

4064
03:13:07,900 --> 03:13:09,312
I'm a fan of the text web.

4065
03:13:09,312 --> 03:13:11,770
That requires drinking to get
more information out of that.

4066
03:13:11,770 --> 03:13:13,310
Anyhow, let's load
up another one.

4067
03:13:13,310 --> 03:13:14,210
Pete, how are we doing on time?

4068
03:13:14,210 --> 03:13:15,200
PETE: About five minutes.

4069
03:13:15,200 --> 03:13:15,850
COLT MCANLIS: Five more minutes.

4070
03:13:15,850 --> 03:13:16,040
OK.

4071
03:13:16,040 --> 03:13:18,100
Let's clear up quickly,
because I'm actually

4072
03:13:18,100 --> 03:13:20,640
really interested to try this
Robitussin and whiskey thing.

4073
03:13:20,640 --> 03:13:22,405
I think we may have
something on there.

4074
03:13:22,405 --> 03:13:23,946
ADAM GROSSMAN: I
highly recommend it.

4075
03:13:23,946 --> 03:13:24,690
COLT MCANLIS: OK.

4076
03:13:24,690 --> 03:13:28,860
Let's try this CBN week.

4077
03:13:28,860 --> 03:13:40,460

4078
03:13:40,460 --> 03:13:42,749
And we're done.

4079
03:13:42,749 --> 03:13:44,290
I think at this time
I don't actually

4080
03:13:44,290 --> 03:13:46,081
need to tell you guys
what I'm about to do.

4081
03:13:46,081 --> 03:13:49,570

4082
03:13:49,570 --> 03:13:50,820
No, I don't want to translate.

4083
03:13:50,820 --> 03:13:52,278
I used to be able
to speak Chinese.

4084
03:13:52,278 --> 03:13:53,830
It was a beautiful language.

4085
03:13:53,830 --> 03:13:56,247
So you know what
I'm about to do.

4086
03:13:56,247 --> 03:13:57,580
I'm going to load up networking.

4087
03:13:57,580 --> 03:14:00,120
I'm going to see what images
are too large, what JavaScript

4088
03:14:00,120 --> 03:14:02,660
is too large, what you're using
that you shouldn't be using.

4089
03:14:02,660 --> 03:14:04,600
We're going to try to
call assets and get rid

4090
03:14:04,600 --> 03:14:06,410
of extra network loads.

4091
03:14:06,410 --> 03:14:08,240
I thought the points
about spritesheets

4092
03:14:08,240 --> 03:14:09,074
was perfect earlier.

4093
03:14:09,074 --> 03:14:11,156
By the way, they shouldn't
be called spritesheets.

4094
03:14:11,156 --> 03:14:12,409
They should be called atlases.

4095
03:14:12,409 --> 03:14:14,700
You should actually see my
Udacity course rant on this.

4096
03:14:14,700 --> 03:14:18,690
Everywhere else in the world
and video games and film

4097
03:14:18,690 --> 03:14:20,270
and everything, we
call them atlases.

4098
03:14:20,270 --> 03:14:20,853
You know what?

4099
03:14:20,853 --> 03:14:21,880
Never mind.

4100
03:14:21,880 --> 03:14:23,760
Anyhow, let's see
some scrolling.

4101
03:14:23,760 --> 03:14:26,110
Not that bad.

4102
03:14:26,110 --> 03:14:27,840
Let's head over to DevTools.

4103
03:14:27,840 --> 03:14:29,798
Let's take a look at this
under the microscope.

4104
03:14:29,798 --> 03:14:32,524

4105
03:14:32,524 --> 03:14:33,565
Let's go back to Network.

4106
03:14:33,565 --> 03:14:36,500

4107
03:14:36,500 --> 03:14:37,680
My computer said I'm dumb.

4108
03:14:37,680 --> 03:14:42,985

4109
03:14:42,985 --> 03:14:44,110
This will be the last site.

4110
03:14:44,110 --> 03:14:45,670
And then we'll actually
get to all the questions.

4111
03:14:45,670 --> 03:14:48,164
And I think we're going to
do a group question, right?

4112
03:14:48,164 --> 03:14:49,940
Fantastic.

4113
03:14:49,940 --> 03:14:53,860
So that's interesting.

4114
03:14:53,860 --> 03:14:58,474
So there's already 89
requests, 92 requests, 93, 95.

4115
03:14:58,474 --> 03:15:01,722

4116
03:15:01,722 --> 03:15:05,160
1.5 megs transferred so far.

4117
03:15:05,160 --> 03:15:11,220
1.9, 2 megs, 2.195.

4118
03:15:11,220 --> 03:15:13,870
So here's something
interesting up here.

4119
03:15:13,870 --> 03:15:16,276
So notice this gray
bar right here.

4120
03:15:16,276 --> 03:15:18,650
So in Chrome DevTools, when
you look at this Network tab,

4121
03:15:18,650 --> 03:15:19,900
basically, you see two values.

4122
03:15:19,900 --> 03:15:22,750
You see this semi-transparent
and this opaque portion

4123
03:15:22,750 --> 03:15:23,770
of these items.

4124
03:15:23,770 --> 03:15:25,700
That semi-transparent
value is actually

4125
03:15:25,700 --> 03:15:29,395
how long the browser spent
waiting to receive the asset.

4126
03:15:29,395 --> 03:15:31,770
This is one of the reasons
that spritesheets are actually

4127
03:15:31,770 --> 03:15:34,810
so important for you, because
each browser has a set

4128
03:15:34,810 --> 03:15:36,570
number of limits
of open connections

4129
03:15:36,570 --> 03:15:38,450
that it will allow
to a single server.

4130
03:15:38,450 --> 03:15:41,060
For Chrome, I believe
it's around six,

4131
03:15:41,060 --> 03:15:44,320
which means if you have
six requests in flight,

4132
03:15:44,320 --> 03:15:47,680
it'll block the rest of the
requests until a slot opens up.

4133
03:15:47,680 --> 03:15:49,752
Think of it like a
caching FIFO or whatnot.

4134
03:15:49,752 --> 03:15:52,210
And so Chrome actually shows
you this here on the timeline.

4135
03:15:52,210 --> 03:15:54,430
You can see some of
these actually waited

4136
03:15:54,430 --> 03:15:56,170
a very, very long time.

4137
03:15:56,170 --> 03:16:00,790
In this case, it actually
spent 471 milliseconds waiting.

4138
03:16:00,790 --> 03:16:02,582
It wanted to request
this asset, but it

4139
03:16:02,582 --> 03:16:04,790
couldn't because there were
other things in the pipe.

4140
03:16:04,790 --> 03:16:07,070
And you can see that this
is a function of the fact

4141
03:16:07,070 --> 03:16:10,830
that there's about 100 requests
and 3.6 megs transferred.

4142
03:16:10,830 --> 03:16:13,390
For those of you who don't
know, the average website

4143
03:16:13,390 --> 03:16:15,410
size right now, according
to HTTP archive,

4144
03:16:15,410 --> 03:16:17,352
is about 1.1 megs.

4145
03:16:17,352 --> 03:16:18,310
And that's for desktop.

4146
03:16:18,310 --> 03:16:19,890
They haven't really got into
a lot of the mobile testing

4147
03:16:19,890 --> 03:16:20,670
just yet.

4148
03:16:20,670 --> 03:16:23,840
But obviously, mobile
shouldn't be 1.1 meg, right?

4149
03:16:23,840 --> 03:16:25,881
So obviously, there's
too big a content here.

4150
03:16:25,881 --> 03:16:27,630
So let's see if there's
any big offenders.

4151
03:16:27,630 --> 03:16:29,120
Let's see if images
are a problem.

4152
03:16:29,120 --> 03:16:32,660
Who thinks images are a problem?

4153
03:16:32,660 --> 03:16:39,482
Here's a 300K image,
200K, 197K, 161K, 152K.

4154
03:16:39,482 --> 03:16:42,350

4155
03:16:42,350 --> 03:16:43,275
What is in that image?

4156
03:16:43,275 --> 03:16:46,740

4157
03:16:46,740 --> 03:16:49,990
I think that's bigger than raw.

4158
03:16:49,990 --> 03:16:50,520
Yeah.

4159
03:16:50,520 --> 03:16:51,990
Obviously, these
images are too big.

4160
03:16:51,990 --> 03:16:52,870
They're not being optimized.

4161
03:16:52,870 --> 03:16:53,990
They should be fixed.

4162
03:16:53,990 --> 03:16:55,240
Let's take a look at timeline.

4163
03:16:55,240 --> 03:16:57,430
Let's see if anything is
going on with memory here.

4164
03:16:57,430 --> 03:16:58,054
Anything crazy?

4165
03:16:58,054 --> 03:17:00,840

4166
03:17:00,840 --> 03:17:03,230
Slow, again timer.

4167
03:17:03,230 --> 03:17:04,700
We see this same pattern.

4168
03:17:04,700 --> 03:17:07,560
So we see almost
all of these pages

4169
03:17:07,560 --> 03:17:09,010
are falling into
the same pattern.

4170
03:17:09,010 --> 03:17:11,450
Also, almost all of these
pages and some of them,

4171
03:17:11,450 --> 03:17:15,840
in rare cases, are all using
jQuery or jQuery twice.

4172
03:17:15,840 --> 03:17:18,570
Closures are being passed
off to timers for things

4173
03:17:18,570 --> 03:17:21,430
like ads or analytics
or marquees.

4174
03:17:21,430 --> 03:17:23,180
And this seems to
be a common pattern.

4175
03:17:23,180 --> 03:17:25,640
But this is obviously is
causing a lot of memory

4176
03:17:25,640 --> 03:17:28,360
and a lot of churn and some
other weird things going on.

4177
03:17:28,360 --> 03:17:29,860
I can look at the
frames times here.

4178
03:17:29,860 --> 03:17:31,151
And so let me actually do this.

4179
03:17:31,151 --> 03:17:34,710
I don't know if I showed
you guys this tool.

4180
03:17:34,710 --> 03:17:35,832
Nope.

4181
03:17:35,832 --> 03:17:37,680
Cancel.

4182
03:17:37,680 --> 03:17:41,400
So as I'm scrolling here &mdash;
and it's not picking that up.

4183
03:17:41,400 --> 03:17:41,900
Never mind.

4184
03:17:41,900 --> 03:17:43,200
I won't show you that tool.

4185
03:17:43,200 --> 03:17:46,190
Anyhow, let's be done
with this for the evening

4186
03:17:46,190 --> 03:17:48,590
because I think Pete has
some other stuff he wants

4187
03:17:48,590 --> 03:17:51,720
to talk to you
guys about tonight.

4188
03:17:51,720 --> 03:17:54,310
So thank you for
your time tonight.

4189
03:17:54,310 --> 03:17:55,440
Perfmatters.

4190
03:17:55,440 --> 03:17:57,029
Wait, wait, wait, wait.

4191
03:17:57,029 --> 03:17:58,695
I'll let you start
the clap in a second.

4192
03:17:58,695 --> 03:18:01,420
So here's how you
get a hold of me.

4193
03:18:01,420 --> 03:18:04,051
If anything today was
controversial or something

4194
03:18:04,051 --> 03:18:05,550
worth tweeting or
something you just

4195
03:18:05,550 --> 03:18:07,690
want to ask more questions
about, go ahead and find me.

4196
03:18:07,690 --> 03:18:09,850
Make sure you join the Google+
web performance community.

4197
03:18:09,850 --> 03:18:10,930
There's a lot of
great stuff there.

4198
03:18:10,930 --> 03:18:12,610
Please, for the love of
God, use perfmatters.

4199
03:18:12,610 --> 03:18:13,500
Follow perfmatters.

4200
03:18:13,500 --> 03:18:14,400
It's a brand.

4201
03:18:14,400 --> 03:18:16,910
You should wear this at work.

4202
03:18:16,910 --> 03:18:20,600
Everything you do, you should
be challenging your employees,

4203
03:18:20,600 --> 03:18:23,330
your managers, the
owners of your company,

4204
03:18:23,330 --> 03:18:25,590
perfmatters,
perfmatters, perfmatters.

4205
03:18:25,590 --> 03:18:28,910
It's going to be the thing that
separates the billion dollar

4206
03:18:28,910 --> 03:18:32,480
companies from everybody
else on the mobile web

4207
03:18:32,480 --> 03:18:33,470
within the next year.

4208
03:18:33,470 --> 03:18:34,620
In fact, it already is.

4209
03:18:34,620 --> 03:18:36,010
It's already [INAUDIBLE].

4210
03:18:36,010 --> 03:18:37,040
Challenge everyone.

4211
03:18:37,040 --> 03:18:39,160
Hold them to the
standards of perfmatters.

4212
03:18:39,160 --> 03:18:40,740
Now, you can start the clap.

4213
03:18:40,740 --> 03:18:41,689
Yes.

4214
03:18:41,689 --> 03:18:42,689
Thank you for your time.

4215
03:18:42,689 --> 03:18:46,579
[APPLAUSE]

4216
03:18:46,579 --> 03:18:47,370
PETE: Thanks, Colt.

4217
03:18:47,370 --> 03:18:49,100
That was awesome.

4218
03:18:49,100 --> 03:18:49,610
OK.

4219
03:18:49,610 --> 03:18:51,230
So we know it's late.

4220
03:18:51,230 --> 03:18:56,229
We're going to have a
quick Q&A with speakers.

4221
03:18:56,229 --> 03:18:57,770
If you're ready, we
have some chairs.

4222
03:18:57,770 --> 03:18:59,370
You can come sit down.

4223
03:18:59,370 --> 03:19:01,290
We'll make it
quick, quick, quick.

4224
03:19:01,290 --> 03:19:06,460

4225
03:19:06,460 --> 03:19:07,850
And maybe share a mic.

4226
03:19:07,850 --> 03:19:18,660

4227
03:19:18,660 --> 03:19:20,530
Runner?

4228
03:19:20,530 --> 03:19:21,030
OK.

4229
03:19:21,030 --> 03:19:22,020
Questions, anyone?

4230
03:19:22,020 --> 03:19:32,430

4231
03:19:32,430 --> 03:19:37,427
AUDIENCE: This is directed
to the weather application.

4232
03:19:37,427 --> 03:19:39,010
ADAM GROSSMAN: By
the way, I'm really,

4233
03:19:39,010 --> 03:19:43,090
really glad you didn't look at
Forecast and try to benchmark

4234
03:19:43,090 --> 03:19:43,850
it.

4235
03:19:43,850 --> 03:19:44,535
Really glad.

4236
03:19:44,535 --> 03:19:47,280
AUDIENCE: I just would like
to know what is actually

4237
03:19:47,280 --> 03:19:50,050
keeping you from
putting it to the web?

4238
03:19:50,050 --> 03:19:51,370
And why not?

4239
03:19:51,370 --> 03:19:51,930
And &mdash;

4240
03:19:51,930 --> 03:19:52,590
ADAM GROSSMAN: What do you mean?

4241
03:19:52,590 --> 03:19:53,760
AUDIENCE: Shouldn't
you try harder?

4242
03:19:53,760 --> 03:19:55,490
You say you can't
put it to the web.

4243
03:19:55,490 --> 03:19:57,762
It has to be an application.

4244
03:19:57,762 --> 03:20:00,380
ADAM GROSSMAN: Well,
it doesn't have to be.

4245
03:20:00,380 --> 03:20:03,630
But I don't know
anyone who would

4246
03:20:03,630 --> 03:20:06,930
be willing to check the
weather by going to a website.

4247
03:20:06,930 --> 03:20:08,740
It just takes way too long.

4248
03:20:08,740 --> 03:20:10,850
And there are so many
good apps out there.

4249
03:20:10,850 --> 03:20:12,600
It's just not
something people are

4250
03:20:12,600 --> 03:20:14,940
going to do, at least
not in large numbers.

4251
03:20:14,940 --> 03:20:16,440
People may try at first.

4252
03:20:16,440 --> 03:20:18,202
But I just don't
see that happening.

4253
03:20:18,202 --> 03:20:20,160
And that's definitely
not true for most things.

4254
03:20:20,160 --> 03:20:22,425
I think it's a weird thing
for weather, in particular.

4255
03:20:22,425 --> 03:20:25,140

4256
03:20:25,140 --> 03:20:28,660
If it's so awesome that it's
the best website in the world,

4257
03:20:28,660 --> 03:20:29,610
people would go to it.

4258
03:20:29,610 --> 03:20:34,850
But that's the one thing that
native apps have over the web

4259
03:20:34,850 --> 03:20:36,410
is the ease of accessibility.

4260
03:20:36,410 --> 03:20:38,030
And they load super fast.

4261
03:20:38,030 --> 03:20:41,082

4262
03:20:41,082 --> 03:20:42,790
That doesn't really
answer your question.

4263
03:20:42,790 --> 03:20:43,790
AUDIENCE: I could go on.

4264
03:20:43,790 --> 03:20:46,252
But next question.

4265
03:20:46,252 --> 03:20:47,960
PETE: You had a question
yourself, right?

4266
03:20:47,960 --> 03:20:51,220
ADAM GROSSMAN: I
did have a question.

4267
03:20:51,220 --> 03:20:53,750
Sorry.

4268
03:20:53,750 --> 03:20:55,590
Is Colt short for something?

4269
03:20:55,590 --> 03:20:59,220
Or is your name
just that awesome?

4270
03:20:59,220 --> 03:21:00,820
COLT MCANLIS: Thank
you first off.

4271
03:21:00,820 --> 03:21:02,270
Colt is short for Colton.

4272
03:21:02,270 --> 03:21:05,600
I was actually named
after the 1970s show,

4273
03:21:05,600 --> 03:21:07,460
"The Fall Guy," Colt Seavers.

4274
03:21:07,460 --> 03:21:11,080
It turns out my parents were
geeks before I was a geek.

4275
03:21:11,080 --> 03:21:12,140
By the way, go Colts.

4276
03:21:12,140 --> 03:21:14,744

4277
03:21:14,744 --> 03:21:16,896
PETE: We have another
question from the crowd.

4278
03:21:16,896 --> 03:21:20,420
AUDIENCE: It's a question
for Colt about the PSNR.

4279
03:21:20,420 --> 03:21:21,040
Is that right?

4280
03:21:21,040 --> 03:21:22,292
COLT MCANLIS: Yeah.

4281
03:21:22,292 --> 03:21:24,000
AUDIENCE: Do you know
of any command line

4282
03:21:24,000 --> 03:21:28,080
or open source tools that can do
a little bit of that iteration

4283
03:21:28,080 --> 03:21:31,314
and, as a trade-off of
time versus precision,

4284
03:21:31,314 --> 03:21:32,480
give you a good compression?

4285
03:21:32,480 --> 03:21:33,771
COLT MCANLIS: Yeah, absolutely.

4286
03:21:33,771 --> 03:21:36,755
So pretty much every single
JPEG compressor will do that.

4287
03:21:36,755 --> 03:21:38,380
So the question for
the people at home,

4288
03:21:38,380 --> 03:21:40,290
in case they didn't
hear it is, do you

4289
03:21:40,290 --> 03:21:43,080
know if there's a command
line compressor for JPEG that

4290
03:21:43,080 --> 03:21:45,020
will actually give you
this evaluation of PSNR

4291
03:21:45,020 --> 03:21:47,336
and how much it takes to
get that value and whatnot?

4292
03:21:47,336 --> 03:21:48,460
Pretty much all of them do.

4293
03:21:48,460 --> 03:21:50,670
If you actually
go out and Google,

4294
03:21:50,670 --> 03:21:55,250
"image compressor comparison,"
the first 29 pages you'll see

4295
03:21:55,250 --> 03:21:57,810
are just going to
be charts of PSNR

4296
03:21:57,810 --> 03:22:00,710
against file size
against time to compress.

4297
03:22:00,710 --> 03:22:04,840
So things like
libjpeg, jpeg-turbo.

4298
03:22:04,840 --> 03:22:06,230
These are the top tier.

4299
03:22:06,230 --> 03:22:07,110
And like I said, one
of them is actually

4300
03:22:07,110 --> 03:22:09,230
used inside of Chrome
because of its speed.

4301
03:22:09,230 --> 03:22:11,105
And I think there was
actually a news article

4302
03:22:11,105 --> 03:22:12,870
a couple of weeks
ago of Apple actually

4303
03:22:12,870 --> 03:22:17,590
acquiring a Scottish
company or an Irish company

4304
03:22:17,590 --> 03:22:21,990
that all they did was make a
faster JPEG decoder for the iOS

4305
03:22:21,990 --> 03:22:22,630
platform.

4306
03:22:22,630 --> 03:22:25,840
And so they are now all living
in mansions with waterfalls

4307
03:22:25,840 --> 03:22:27,870
inside of their mansions
because they just

4308
03:22:27,870 --> 03:22:29,699
made a JPEG decoder
that was faster.

4309
03:22:29,699 --> 03:22:31,240
But yeah, definitely
check those out.

4310
03:22:31,240 --> 03:22:37,036

4311
03:22:37,036 --> 03:22:38,450
AUDIENCE: So I do
have a question

4312
03:22:38,450 --> 03:22:42,790
about the special font
files for Colt, the WOFF,

4313
03:22:42,790 --> 03:22:46,500
I guess or whatever,
whoever knows better.

4314
03:22:46,500 --> 03:22:49,240
And a font or some
which some people

4315
03:22:49,240 --> 03:22:53,450
use for icons and whatnot,
what's the suggestion?

4316
03:22:53,450 --> 03:22:54,155
What do you do?

4317
03:22:54,155 --> 03:22:56,488
JAKE ARCHIBALD: In terms of
what you would do for icons?

4318
03:22:56,488 --> 03:22:59,510
AUDIENCE: You don't use them at
all or how to avoid using them

4319
03:22:59,510 --> 03:23:02,470
if the client wants a
specific pretty font?

4320
03:23:02,470 --> 03:23:03,350
What do you do?

4321
03:23:03,350 --> 03:23:04,820
JAKE ARCHIBALD:
So I would always

4322
03:23:04,820 --> 03:23:07,510
avoid using web
fonts for body copy.

4323
03:23:07,510 --> 03:23:10,710
You can almost get away with
it for things like headlines,

4324
03:23:10,710 --> 03:23:14,614
because the chances are the
user has some idea of what

4325
03:23:14,614 --> 03:23:15,780
the headline is going to be.

4326
03:23:15,780 --> 03:23:17,340
They've either clicked
it from the previous page

4327
03:23:17,340 --> 03:23:18,910
or they've clicked it from
search results or something

4328
03:23:18,910 --> 03:23:19,525
like that.

4329
03:23:19,525 --> 03:23:21,400
The problem is when it's
there for body copy,

4330
03:23:21,400 --> 03:23:24,130
because that's when not
only is the user going

4331
03:23:24,130 --> 03:23:25,980
to have to wait for the
CSS to see anything,

4332
03:23:25,980 --> 03:23:28,010
because there are very
few resources that

4333
03:23:28,010 --> 03:23:29,720
are going to block
your first render.

4334
03:23:29,720 --> 03:23:30,440
It's JavaScript.

4335
03:23:30,440 --> 03:23:33,450
If it's done wrong,
it's CSS all the time.

4336
03:23:33,450 --> 03:23:35,362
And it's web fonts.

4337
03:23:35,362 --> 03:23:37,320
And the problem with web
fonts is their loading

4338
03:23:37,320 --> 03:23:39,764
is triggered by the CSS.

4339
03:23:39,764 --> 03:23:41,180
It's going to
happen after layout.

4340
03:23:41,180 --> 03:23:42,940
So your CSS downloads.

4341
03:23:42,940 --> 03:23:43,860
There's a layout done.

4342
03:23:43,860 --> 03:23:46,279
And then it goes, oh, I
need to download a font.

4343
03:23:46,279 --> 03:23:47,070
The font downloads.

4344
03:23:47,070 --> 03:23:48,730
And then it can
render that text.

4345
03:23:48,730 --> 03:23:52,350
I would say avoid for body copy.

4346
03:23:52,350 --> 03:23:54,240
You can use a
WebFont loader, which

4347
03:23:54,240 --> 03:23:56,760
is something developed
by Google and Typekit.

4348
03:23:56,760 --> 03:23:58,280
And what you can
do there is it will

4349
03:23:58,280 --> 03:24:01,000
use JavaScript to
load the web fonts.

4350
03:24:01,000 --> 03:24:04,400
And it will give you special
class names on the HTML or body

4351
03:24:04,400 --> 03:24:06,090
element, I forget
which, that indicate

4352
03:24:06,090 --> 03:24:08,800
the loading states of that font.

4353
03:24:08,800 --> 03:24:11,579
And you can then decide
to use a different font

4354
03:24:11,579 --> 03:24:12,370
while it's loading.

4355
03:24:12,370 --> 03:24:15,100
You can force, kind of what
Internet Explorer does.

4356
03:24:15,100 --> 03:24:17,570
But it means you can tweak
the size of the fallback font

4357
03:24:17,570 --> 03:24:20,429
to more closely match,
change the line height,

4358
03:24:20,429 --> 03:24:21,970
change the size to
more closely match

4359
03:24:21,970 --> 03:24:23,245
the font that will load in.

4360
03:24:23,245 --> 03:24:24,620
So you can do that
with headlines

4361
03:24:24,620 --> 03:24:27,840
because they tend
to be one line.

4362
03:24:27,840 --> 03:24:29,360
You'll struggle
with the body copy,

4363
03:24:29,360 --> 03:24:31,040
because the user will
be reading a bit.

4364
03:24:31,040 --> 03:24:33,180
And then the chances are
things are going to jump.

4365
03:24:33,180 --> 03:24:35,879
And the word is going to
move along the line or worse.

4366
03:24:35,879 --> 03:24:37,170
It's going to wrap differently.

4367
03:24:37,170 --> 03:24:40,092

4368
03:24:40,092 --> 03:24:41,140
PETE: Next question?

4369
03:24:41,140 --> 03:24:44,884

4370
03:24:44,884 --> 03:24:47,870
AUDIENCE: This is
for any and all.

4371
03:24:47,870 --> 03:24:51,690
We saw a lot of examples that
was pretty easy to detect

4372
03:24:51,690 --> 03:24:54,720
performance issues with file
sizes and number of network

4373
03:24:54,720 --> 03:24:55,550
requests.

4374
03:24:55,550 --> 03:24:59,330
Increasingly, we're seeing sites
that the perception of page

4375
03:24:59,330 --> 03:25:02,317
load is just as bad as
the actual throughput.

4376
03:25:02,317 --> 03:25:03,900
So can you talk a
little bit about how

4377
03:25:03,900 --> 03:25:06,450
you would analyze and
test for, basically,

4378
03:25:06,450 --> 03:25:09,290
all the crap that's being
done when DOM is ready

4379
03:25:09,290 --> 03:25:13,380
and people are just loading
stuff after the initial load

4380
03:25:13,380 --> 03:25:16,170
and there's all kinds of junk
happening with JavaScript?

4381
03:25:16,170 --> 03:25:18,254
How would you test and
analyze that kind of thing?

4382
03:25:18,254 --> 03:25:19,711
JAKE ARCHIBALD:
Well, first, I want

4383
03:25:19,711 --> 03:25:21,380
to pick up on
something that Colt

4384
03:25:21,380 --> 03:25:23,560
said, because I think
it's worth saying again.

4385
03:25:23,560 --> 03:25:29,510
If your site has a
loading bar, 99% of cases,

4386
03:25:29,510 --> 03:25:31,550
that's a missed opportunity.

4387
03:25:31,550 --> 03:25:33,290
You're doing it wrong.

4388
03:25:33,290 --> 03:25:35,560
And I include Gmail
in this as well.

4389
03:25:35,560 --> 03:25:38,640
The fact that I have to
watch a loading bar go

4390
03:25:38,640 --> 03:25:43,310
to see a set of email subjects,
which is just a list &mdash; it's

4391
03:25:43,310 --> 03:25:47,630
essentially an HTML list of
a sentence &mdash; is ridiculous.

4392
03:25:47,630 --> 03:25:51,305
And if you compare something
like TweetDeck to Twitter,

4393
03:25:51,305 --> 03:25:52,180
Twitter will do this.

4394
03:25:52,180 --> 03:25:54,550
They serve HTML and CSS.

4395
03:25:54,550 --> 03:25:56,060
You get the content
as it's loading.

4396
03:25:56,060 --> 03:25:57,560
Whereas in something
like TweetDeck,

4397
03:25:57,560 --> 03:25:59,190
you get this loading bar.

4398
03:25:59,190 --> 03:26:03,420
So yeah, it pulls
script out of you.

4399
03:26:03,420 --> 03:26:06,800
Avoid depending on script
for a first render, I think,

4400
03:26:06,800 --> 03:26:07,860
would be the first case.

4401
03:26:07,860 --> 03:26:08,740
But I don't know.

4402
03:26:08,740 --> 03:26:10,239
Do you have anything
in terms of how

4403
03:26:10,239 --> 03:26:12,500
you would test that or
any continuous integration

4404
03:26:12,500 --> 03:26:14,441
for that?

4405
03:26:14,441 --> 03:26:15,585
COLT MCANLIS: Telemetry.

4406
03:26:15,585 --> 03:26:15,890
Yeah.

4407
03:26:15,890 --> 03:26:17,556
So we didn't really
get a chance to talk

4408
03:26:17,556 --> 03:26:19,420
a lot about continuous
integration tonight.

4409
03:26:19,420 --> 03:26:22,890
I think Jake and I both agree
that probably the next big step

4410
03:26:22,890 --> 03:26:26,170
in web performance is getting
a good tool out there to allow

4411
03:26:26,170 --> 03:26:28,640
you to do performance,
continuous integration.

4412
03:26:28,640 --> 03:26:32,010
So you should be able to have
some distributed team checking

4413
03:26:32,010 --> 03:26:36,487
in code changes to some
GitHub or something like that.

4414
03:26:36,487 --> 03:26:39,070
And then some automated system
will actually kick off a build.

4415
03:26:39,070 --> 03:26:39,960
And then once that
build is done,

4416
03:26:39,960 --> 03:26:42,111
it's run across continuous
integration environment

4417
03:26:42,111 --> 03:26:44,485
across different web servers
and different mobile devices

4418
03:26:44,485 --> 03:26:46,750
and actually give you
performance information back,

4419
03:26:46,750 --> 03:26:48,458
not just from the
network side of things,

4420
03:26:48,458 --> 03:26:51,350
but also from the rendering
side of things, the JavaScript

4421
03:26:51,350 --> 03:26:55,752
side of things, post load Ajax
style information as well,

4422
03:26:55,752 --> 03:26:57,460
and be able to give
you that in a report.

4423
03:26:57,460 --> 03:27:00,300
So you can actually go back
and be like, hey, Jake, you

4424
03:27:00,300 --> 03:27:01,940
broke the perf build, dude.

4425
03:27:01,940 --> 03:27:04,240
I think this is
actually the next step

4426
03:27:04,240 --> 03:27:05,250
in tooling for the web.

4427
03:27:05,250 --> 03:27:09,047
And I think we're pretty far
away from it, unfortunately.

4428
03:27:09,047 --> 03:27:10,630
So I hope that there's
a lot of people

4429
03:27:10,630 --> 03:27:12,876
thinking about this problem.

4430
03:27:12,876 --> 03:27:14,970
PETE: Next question?

4431
03:27:14,970 --> 03:27:17,410
AUDIENCE: So the set
timeout, instead of that,

4432
03:27:17,410 --> 03:27:23,301
you should be using [INAUDIBLE]
for polling, for daemons.

4433
03:27:23,301 --> 03:27:27,035
COLT MCANLIS: So set timeout,
in itself, is not a problem.

4434
03:27:27,035 --> 03:27:27,880
I'll say that again.

4435
03:27:27,880 --> 03:27:30,840
Set timeout, in itself,
is not a problem.

4436
03:27:30,840 --> 03:27:34,910
The problem is passing a
closure to set timeout.

4437
03:27:34,910 --> 03:27:38,160
So obviously, if
you're using a closure,

4438
03:27:38,160 --> 03:27:40,140
there's a chance
that you don't know

4439
03:27:40,140 --> 03:27:41,370
why you're using a closure.

4440
03:27:41,370 --> 03:27:42,953
Or you're using a
closure, because you

4441
03:27:42,953 --> 03:27:45,502
think it's a better
coding pattern.

4442
03:27:45,502 --> 03:27:47,710
It seems to be a pretty
standard coding practice when

4443
03:27:47,710 --> 03:27:51,390
you go copy paste
off of the web.

4444
03:27:51,390 --> 03:27:52,354
AUDIENCE: [INAUDIBLE].

4445
03:27:52,354 --> 03:27:56,692

4446
03:27:56,692 --> 03:28:00,480
COLT MCANLIS: Again, the set
interval, not the problem.

4447
03:28:00,480 --> 03:28:02,180
Feel free to use set interval.

4448
03:28:02,180 --> 03:28:03,230
Yay, set interval.

4449
03:28:03,230 --> 03:28:04,240
Woo!

4450
03:28:04,240 --> 03:28:07,080
The problem is set interval
plus incorrect memory

4451
03:28:07,080 --> 03:28:09,759
management or closure is
being passed to set interval.

4452
03:28:09,759 --> 03:28:10,550
That's the problem.

4453
03:28:10,550 --> 03:28:13,052

4454
03:28:13,052 --> 03:28:16,290
JAKE ARCHIBALD: What I would say
is if you're doing animations,

4455
03:28:16,290 --> 03:28:18,910
you've got this,
assuming 60 Hz screen,

4456
03:28:18,910 --> 03:28:21,370
you've got this
16.67 milliseconds

4457
03:28:21,370 --> 03:28:25,275
window in order to produce what
you want to produce and then

4458
03:28:25,275 --> 03:28:27,490
get that on the screen
in the next refresh.

4459
03:28:27,490 --> 03:28:31,120
If something else in the
page is running set interval,

4460
03:28:31,120 --> 03:28:33,400
I'm assuming you're using
RequestAnimationFrame

4461
03:28:33,400 --> 03:28:36,400
for your animations, which you
should be, or CSS animations.

4462
03:28:36,400 --> 03:28:39,030
But if you then have set
interval or something running

4463
03:28:39,030 --> 03:28:41,940
or some other things
using set interval,

4464
03:28:41,940 --> 03:28:44,200
even if that's only going
to take three milliseconds,

4465
03:28:44,200 --> 03:28:45,950
if it happens in the
three milliseconds

4466
03:28:45,950 --> 03:28:48,410
when there's going to be a
new refresh on the screen,

4467
03:28:48,410 --> 03:28:50,909
it's going to block that frame
from happening on the screen.

4468
03:28:50,909 --> 03:28:52,270
And it will drop a frame.

4469
03:28:52,270 --> 03:28:56,130
So if you're doing
a set interval,

4470
03:28:56,130 --> 03:28:58,610
if you're going to do
some work inside that,

4471
03:28:58,610 --> 03:29:01,030
you do your set intervals
for whatever you want,

4472
03:29:01,030 --> 03:29:04,400
like every 300
milliseconds or whatever.

4473
03:29:04,400 --> 03:29:05,920
If you've got some
substantial work

4474
03:29:05,920 --> 03:29:07,560
to do in there or
really any work,

4475
03:29:07,560 --> 03:29:09,020
use RequestAnimationFrame
in there

4476
03:29:09,020 --> 03:29:10,970
as well, because it'll
queue that stuff up

4477
03:29:10,970 --> 03:29:14,515
for right at the
start of the refresh

4478
03:29:14,515 --> 03:29:16,760
and along with,
maybe, other timers

4479
03:29:16,760 --> 03:29:19,782
that just happen to coincide
roughly at the same time.

4480
03:29:19,782 --> 03:29:21,240
COLT MCANLIS: Really
quick on that.

4481
03:29:21,240 --> 03:29:22,754
So there's actually
a design pattern

4482
03:29:22,754 --> 03:29:25,170
that I don't talk about a lot,
because people throw chairs

4483
03:29:25,170 --> 03:29:27,840
at me.

4484
03:29:27,840 --> 03:29:31,110
So a lot of people are
actually handling input

4485
03:29:31,110 --> 03:29:33,440
when the user actually
gives them that event.

4486
03:29:33,440 --> 03:29:34,530
So you click.

4487
03:29:34,530 --> 03:29:35,620
I get the on-click event.

4488
03:29:35,620 --> 03:29:36,760
And you go, cool,
this is an event.

4489
03:29:36,760 --> 03:29:38,200
Let me run some code right now.

4490
03:29:38,200 --> 03:29:39,690
That's actually a
bad idea as well.

4491
03:29:39,690 --> 03:29:40,780
Because, again, you
have to remember

4492
03:29:40,780 --> 03:29:42,530
that the web page
and the browser

4493
03:29:42,530 --> 03:29:44,992
is going to come along
at every 16 milliseconds

4494
03:29:44,992 --> 03:29:46,950
or whatever the refresh
rate of the monitor is.

4495
03:29:46,950 --> 03:29:50,250
And it's going to try to
repaint and refresh the screen.

4496
03:29:50,250 --> 03:29:53,510
But if that JavaScript is in
the middle of executing input

4497
03:29:53,510 --> 03:29:55,490
or set intervals
or anything, it's

4498
03:29:55,490 --> 03:29:57,280
going to block that
from occurring.

4499
03:29:57,280 --> 03:29:59,110
And so there's a
different design pattern

4500
03:29:59,110 --> 03:30:01,180
that we've seen very
successful, and we see it

4501
03:30:01,180 --> 03:30:03,890
with game developers especially,
is that you don't actually

4502
03:30:03,890 --> 03:30:06,730
do any logic in
callback handlers.

4503
03:30:06,730 --> 03:30:09,259
Instead, you actually just
cache that value away.

4504
03:30:09,259 --> 03:30:11,300
And the next time that
your RequestAnimationFrame

4505
03:30:11,300 --> 03:30:13,091
comes around, you
actually respond to that.

4506
03:30:13,091 --> 03:30:17,170
And so if you want to get rid
of this set interval system,

4507
03:30:17,170 --> 03:30:20,060
just put all that logic in
a RequestAnimationFrame.

4508
03:30:20,060 --> 03:30:22,020
The difference is in
whatever your interval

4509
03:30:22,020 --> 03:30:24,670
you think your interval needs
to be in the 16 milliseconds

4510
03:30:24,670 --> 03:30:27,680
that RequestAnimationFrame
comes around, come on.

4511
03:30:27,680 --> 03:30:30,380
We're talking about polling
data or other things.

4512
03:30:30,380 --> 03:30:32,645
So it's a different
mental model.

4513
03:30:32,645 --> 03:30:34,010
PETE: OK.

4514
03:30:34,010 --> 03:30:37,354
So virtually, we're out
of time for questions.

4515
03:30:37,354 --> 03:30:38,520
That's our show for tonight.

4516
03:30:38,520 --> 03:30:44,151

4517
03:30:44,151 --> 03:30:44,650
Yes.

4518
03:30:44,650 --> 03:30:45,150
OK.

4519
03:30:45,150 --> 03:30:46,950
So our next event is
going to our Hack Day.

4520
03:30:46,950 --> 03:30:48,158
It's going to be November 16.

4521
03:30:48,158 --> 03:30:49,380
It's going to be right here.

4522
03:30:49,380 --> 03:30:53,300
@timesopen and @nytdevs to
follow what we're up to.

4523
03:30:53,300 --> 03:30:55,720
@nytdevs is the
main one on Twitter.

4524
03:30:55,720 --> 03:30:58,490
You can also visit our site,
developers@NYTimes.com.

4525
03:30:58,490 --> 03:31:00,410
I wanted to thank our speakers.

4526
03:31:00,410 --> 03:31:06,321
[APPLAUSE]

4527
03:31:06,321 --> 03:31:08,570
PETE: I want to thank the
team that planned the event.

4528
03:31:08,570 --> 03:31:09,986
They're all wearing
purple shirts.

4529
03:31:09,986 --> 03:31:11,676
They can all wave their hands.

4530
03:31:11,676 --> 03:31:14,670
[APPLAUSE]

4531
03:31:14,670 --> 03:31:16,310
PETE: And Pete
LePage from Google,

4532
03:31:16,310 --> 03:31:19,590
who is standing there carefully
looking at his camera.

4533
03:31:19,590 --> 03:31:21,786
A lot of work went into this.

4534
03:31:21,786 --> 03:31:23,770
And we want to thank
you for coming.

4535
03:31:23,770 --> 03:31:25,870
It's been a great night.

4536
03:31:25,870 --> 03:31:27,740
Go make your websites faster.

4537
03:31:27,740 --> 03:31:30,590
We're good?

4538
03:31:30,590 --> 03:31:31,260
Oh, yes.

4539
03:31:31,260 --> 03:31:33,190
One other thing &mdash;

4540
03:31:33,190 --> 03:32:14,588

