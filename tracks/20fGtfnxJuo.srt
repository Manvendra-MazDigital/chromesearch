1
00:00:00,000 --> 00:00:00,150

2
00:00:00,150 --> 00:00:00,941
MALE SPEAKER: Yeah.

3
00:00:00,941 --> 00:00:02,070
Yeah, let's get started.

4
00:00:02,070 --> 00:00:04,760
To open the summit, we're
going to welcome onto the stage

5
00:00:04,760 --> 00:00:07,960
the vice president for
engineering for Chrome.

6
00:00:07,960 --> 00:00:10,890
It's a warm welcome to
Linus Upson, everyone.

7
00:00:10,890 --> 00:00:13,945
[APPLAUSE]

8
00:00:13,945 --> 00:00:14,778
LINUS UPSON: Thanks.

9
00:00:14,778 --> 00:00:18,810

10
00:00:18,810 --> 00:00:21,000
Wow, a lot of people here.

11
00:00:21,000 --> 00:00:24,090
So not surprisingly, I'm
here to talk about the web

12
00:00:24,090 --> 00:00:26,385
and what we're doing
about it in Chrome.

13
00:00:26,385 --> 00:00:28,580
Let's figure out
which button to push.

14
00:00:28,580 --> 00:00:29,650
That looks good.

15
00:00:29,650 --> 00:00:33,310
How many people
here recognize this?

16
00:00:33,310 --> 00:00:36,520
Oh wow, there's a lot
of old people here.

17
00:00:36,520 --> 00:00:38,620
So those of us old
folks will remember,

18
00:00:38,620 --> 00:00:40,370
in the very early
days of the web,

19
00:00:40,370 --> 00:00:42,640
there was this thing called
the NCSA What's New page.

20
00:00:42,640 --> 00:00:45,610
NCSA was where Mosaic was
developed, the first really

21
00:00:45,610 --> 00:00:47,290
popular web browser.

22
00:00:47,290 --> 00:00:51,650
And back in those days, the
way you found things on the web

23
00:00:51,650 --> 00:00:54,110
is you went here.

24
00:00:54,110 --> 00:00:56,096
And it had a list of all
the sites on the web.

25
00:00:56,096 --> 00:00:57,720
And so when you stood
up a new website,

26
00:00:57,720 --> 00:00:59,970
you sent an email saying,
hey, I've got a new website.

27
00:00:59,970 --> 00:01:02,360
Could you please link to
me on the What's New page?

28
00:01:02,360 --> 00:01:05,011
And they would go do that and
have a link to your website

29
00:01:05,011 --> 00:01:05,510
there.

30
00:01:05,510 --> 00:01:10,210
And you can see here
in June 27, 1993,

31
00:01:10,210 --> 00:01:12,300
we had one, two,
three, four, five

32
00:01:12,300 --> 00:01:13,870
websites that launched that day.

33
00:01:13,870 --> 00:01:14,829
Nothing on the 26th.

34
00:01:14,829 --> 00:01:15,870
It was probably a Sunday.

35
00:01:15,870 --> 00:01:18,950

36
00:01:18,950 --> 00:01:21,995
Needless to say,
this didn't scale.

37
00:01:21,995 --> 00:01:25,020

38
00:01:25,020 --> 00:01:28,080
So then the next popular way for
finding things was directories.

39
00:01:28,080 --> 00:01:28,670
Yahoo!

40
00:01:28,670 --> 00:01:30,900
was the most successful of them.

41
00:01:30,900 --> 00:01:33,384
And many conferences
were held about how

42
00:01:33,384 --> 00:01:34,550
the web should be organized.

43
00:01:34,550 --> 00:01:37,320
People talked about ontologies,
and they came up with ways

44
00:01:37,320 --> 00:01:38,830
to categorize
everything on the web.

45
00:01:38,830 --> 00:01:39,970
And when you wanted
to find something,

46
00:01:39,970 --> 00:01:42,136
you'd go to Yahoo! or one
of these other directories

47
00:01:42,136 --> 00:01:44,230
and click on Games
or Entertainment.

48
00:01:44,230 --> 00:01:46,290
And eventually you'd
find a group of websites

49
00:01:46,290 --> 00:01:49,300
that you could look down and
pick which one you wanted,

50
00:01:49,300 --> 00:01:52,320
or try a few of them
to see if that's

51
00:01:52,320 --> 00:01:53,840
what you were looking for.

52
00:01:53,840 --> 00:01:57,480
And Yahoo!, at the peak of
popularity, had about 3/4

53
00:01:57,480 --> 00:02:00,050
of a million sites
in their directory.

54
00:02:00,050 --> 00:02:03,790
And I think they peaked at about
a million and a half sites.

55
00:02:03,790 --> 00:02:06,350
So needless to
say, this approach

56
00:02:06,350 --> 00:02:09,539
didn't scale for
the web, either.

57
00:02:09,539 --> 00:02:12,653
Then came search
engines, Google being one

58
00:02:12,653 --> 00:02:15,010
of the more successful ones.

59
00:02:15,010 --> 00:02:17,880
The really clever thing
that Larry and Sergey

60
00:02:17,880 --> 00:02:19,850
did at the very
beginning of Google

61
00:02:19,850 --> 00:02:25,840
was they figured out that
just the text on the web pages

62
00:02:25,840 --> 00:02:27,460
told you a lot about the web.

63
00:02:27,460 --> 00:02:29,550
But the links
between those pages

64
00:02:29,550 --> 00:02:31,012
were also really important.

65
00:02:31,012 --> 00:02:32,970
And in fact, this chaotic
structure of the web,

66
00:02:32,970 --> 00:02:35,410
with everyone linking
to everyone else,

67
00:02:35,410 --> 00:02:37,440
actually told you a lot
about what was important

68
00:02:37,440 --> 00:02:39,148
and what wasn't so
that you could deliver

69
00:02:39,148 --> 00:02:41,440
really great search
results for people.

70
00:02:41,440 --> 00:02:45,110
And so far, this is still
scaled with the web.

71
00:02:45,110 --> 00:02:48,290
And when you think about
it, it's pretty amazing.

72
00:02:48,290 --> 00:02:50,750
Because there are billions
and billions of web pages

73
00:02:50,750 --> 00:02:53,050
out there.

74
00:02:53,050 --> 00:02:56,430
Hundreds of millions
coming and going every day.

75
00:02:56,430 --> 00:02:58,280
Billions of users.

76
00:02:58,280 --> 00:03:01,820
And for many of us,
on any given day,

77
00:03:01,820 --> 00:03:04,200
we'll consume tens,
if not hundreds,

78
00:03:04,200 --> 00:03:07,240
of different sources of
information, content, services,

79
00:03:07,240 --> 00:03:10,260
applications, communicate
with people, all just

80
00:03:10,260 --> 00:03:12,930
by doing a search and
clicking on a link.

81
00:03:12,930 --> 00:03:17,220
And so we've been thinking
a lot on the Chrome team

82
00:03:17,220 --> 00:03:20,570
about what has made
the web successful.

83
00:03:20,570 --> 00:03:24,970
And what are the areas that
it really needs to improve?

84
00:03:24,970 --> 00:03:26,770
And so first, let's
talk about what's

85
00:03:26,770 --> 00:03:28,700
made the web really successful.

86
00:03:28,700 --> 00:03:33,280
And this first thing
is the HT of HTML.

87
00:03:33,280 --> 00:03:34,750
Everything is a link.

88
00:03:34,750 --> 00:03:38,760
So you can get to anywhere on
the web by typing in a URL,

89
00:03:38,760 --> 00:03:40,090
clicking on a link.

90
00:03:40,090 --> 00:03:44,771
These links can be spoken to
people, just try domain name.

91
00:03:44,771 --> 00:03:46,270
They can be written
down on napkins.

92
00:03:46,270 --> 00:03:51,530
They can be emailed, IMed, and
so they spread very freely.

93
00:03:51,530 --> 00:03:53,830
And it makes it really
easy to try something

94
00:03:53,830 --> 00:03:57,320
because all I have to do is
click on a link to do it.

95
00:03:57,320 --> 00:04:00,042
The other important part of
that is it's also ephemeral.

96
00:04:00,042 --> 00:04:02,000
In other words, there
should be no side effects

97
00:04:02,000 --> 00:04:03,420
to clicking on links.

98
00:04:03,420 --> 00:04:04,960
I don't have to
install software.

99
00:04:04,960 --> 00:04:07,180
I don't have to update software.

100
00:04:07,180 --> 00:04:09,740
I can just run any piece
of software-- untrusted,

101
00:04:09,740 --> 00:04:11,660
third party code-- by
clicking on a link.

102
00:04:11,660 --> 00:04:13,310
And then when I go
away, my browser

103
00:04:13,310 --> 00:04:15,400
may end up caching it
for a period of time,

104
00:04:15,400 --> 00:04:17,620
or something like
that, but I, as a user,

105
00:04:17,620 --> 00:04:20,649
don't have to worry about that.

106
00:04:20,649 --> 00:04:22,840
The next thing is indexable.

107
00:04:22,840 --> 00:04:27,220
So web pages show you all
of their text by default.

108
00:04:27,220 --> 00:04:29,220
You don't necessarily
have to write it that way,

109
00:04:29,220 --> 00:04:32,290
but the easiest way to write
a web page makes it indexable.

110
00:04:32,290 --> 00:04:34,357
And so this allows
search engines to appear.

111
00:04:34,357 --> 00:04:36,190
And even though search
engines didn't really

112
00:04:36,190 --> 00:04:38,180
exist at the very
beginning of the web,

113
00:04:38,180 --> 00:04:40,190
the fact that the
web had this property

114
00:04:40,190 --> 00:04:42,410
allowed it to scale
to this massive size

115
00:04:42,410 --> 00:04:43,890
with all of these
different pages,

116
00:04:43,890 --> 00:04:45,486
and yet you can
still find things.

117
00:04:45,486 --> 00:04:46,860
And you don't have
to go manually

118
00:04:46,860 --> 00:04:51,340
organize them into directories
and things like that.

119
00:04:51,340 --> 00:04:54,094
The next thing--
composability-- was not

120
00:04:54,094 --> 00:04:55,260
at the beginning of the web.

121
00:04:55,260 --> 00:04:58,190
But not long after that,
iframes were invented.

122
00:04:58,190 --> 00:05:01,580
And it made it possible
to take multiple sites

123
00:05:01,580 --> 00:05:03,560
and mash them up
into one web page.

124
00:05:03,560 --> 00:05:06,020
And so this allowed you to
do things like embed YouTube

125
00:05:06,020 --> 00:05:08,270
videos in a page, or
put a map in a page,

126
00:05:08,270 --> 00:05:11,040
or, very importantly
for many publications,

127
00:05:11,040 --> 00:05:13,250
to be able to put
an ad in a page.

128
00:05:13,250 --> 00:05:16,840
And the composability also had
some very important properties

129
00:05:16,840 --> 00:05:20,870
that the page containing
the other page

130
00:05:20,870 --> 00:05:24,080
couldn't muck with what's inside
it, and the thing inside of it

131
00:05:24,080 --> 00:05:26,660
couldn't muck with the
outer containing page.

132
00:05:26,660 --> 00:05:28,680
And so this allowed
it to very safely

133
00:05:28,680 --> 00:05:31,736
be able to aggregate content
from lots of different places

134
00:05:31,736 --> 00:05:33,610
and make much richer
applications than if you

135
00:05:33,610 --> 00:05:35,920
had to go get code and
import it from someplace else

136
00:05:35,920 --> 00:05:38,680
onto your website.

137
00:05:38,680 --> 00:05:41,140
And that also brings me to
the last point, which is safe.

138
00:05:41,140 --> 00:05:43,940
If you're going to run arbitrary
code by clicking on links,

139
00:05:43,940 --> 00:05:45,310
it had better be safe.

140
00:05:45,310 --> 00:05:48,920
And so one of our most important
jobs as browser vendors

141
00:05:48,920 --> 00:05:52,340
is to make it so that it's
safe to click on links.

142
00:05:52,340 --> 00:05:55,680
It should be impossible for a
bad guy to lure you to a site

143
00:05:55,680 --> 00:05:58,040
and then install malicious
software on your computer,

144
00:05:58,040 --> 00:06:00,740
or steal your credentials,
or do anything like that.

145
00:06:00,740 --> 00:06:03,880
And so this set of
properties is what

146
00:06:03,880 --> 00:06:05,800
we think has really
made the web successful.

147
00:06:05,800 --> 00:06:07,674
Because you saw from
those early screenshots,

148
00:06:07,674 --> 00:06:09,890
the web was pretty
ugly in the early days.

149
00:06:09,890 --> 00:06:11,040
Everything was gray.

150
00:06:11,040 --> 00:06:13,140
Someday gray will be a
popular background page

151
00:06:13,140 --> 00:06:18,180
color again, but probably
not any time soon.

152
00:06:18,180 --> 00:06:21,160
But even though the web was
kind of slow, kind of ugly,

153
00:06:21,160 --> 00:06:23,400
the fact that it had these
really nice properties

154
00:06:23,400 --> 00:06:24,980
caused it to just take off.

155
00:06:24,980 --> 00:06:28,880
And for the better
part of 15 years or so,

156
00:06:28,880 --> 00:06:31,200
most of the innovation that
happened in the technology

157
00:06:31,200 --> 00:06:33,840
industry happened on
the web because of all

158
00:06:33,840 --> 00:06:37,425
of these advantages it gave you.

159
00:06:37,425 --> 00:06:41,820
Then in 2007 came the
iPhone, and shortly

160
00:06:41,820 --> 00:06:44,430
after that, Android, and a
number of other smartphone

161
00:06:44,430 --> 00:06:44,930
OSes.

162
00:06:44,930 --> 00:06:48,250
And they completely
changed the game.

163
00:06:48,250 --> 00:06:51,980
And they reset user expectations
in a number of important ways.

164
00:06:51,980 --> 00:06:56,630
One of which is everyone now
expects all user interfaces

165
00:06:56,630 --> 00:07:00,120
to have rock solid,
60-frames-a-second animations

166
00:07:00,120 --> 00:07:01,230
and transitions.

167
00:07:01,230 --> 00:07:04,230
This was not something
the web was built to do.

168
00:07:04,230 --> 00:07:08,020
But now everyone expects this
in all of your user interfaces.

169
00:07:08,020 --> 00:07:11,160
Other things it did--
it gave you the ability

170
00:07:11,160 --> 00:07:15,700
to pre-cache a whole
bunch of software and data

171
00:07:15,700 --> 00:07:17,914
when you installed an
application so that it worked

172
00:07:17,914 --> 00:07:19,580
well in flaking
networking environments.

173
00:07:19,580 --> 00:07:22,470
And if any of you remember
the early generation iPhones

174
00:07:22,470 --> 00:07:25,120
or Android phones, everything
was a very flaky network

175
00:07:25,120 --> 00:07:27,510
environment.

176
00:07:27,510 --> 00:07:30,040
I can remember when I got
3G, and I was so excited.

177
00:07:30,040 --> 00:07:32,250
I saw the little 3G on there
like, wow, this is fast.

178
00:07:32,250 --> 00:07:34,860
Now with an LTE phone, every
time I see the 3G, I go, aww.

179
00:07:34,860 --> 00:07:38,080

180
00:07:38,080 --> 00:07:41,420
But being able to cache all
of your application code

181
00:07:41,420 --> 00:07:43,730
and resources upfront
made it work really

182
00:07:43,730 --> 00:07:46,125
well in these flaky
network environments.

183
00:07:46,125 --> 00:07:47,500
Other things it
did-- it gave you

184
00:07:47,500 --> 00:07:50,770
access to a lot more
IO capabilities.

185
00:07:50,770 --> 00:07:52,666
It gave you direct
access to the GPU.

186
00:07:52,666 --> 00:07:54,165
It gave you access
to touch sensors.

187
00:07:54,165 --> 00:07:59,060
It gave you access to
raw network access,

188
00:07:59,060 --> 00:08:03,020
device motion, location,
GPS, a whole bunch of things.

189
00:08:03,020 --> 00:08:06,260
It allowed developers to build
more interesting applications

190
00:08:06,260 --> 00:08:09,560
and ones that were more suited
to the mobile environment.

191
00:08:09,560 --> 00:08:13,740
And it also allowed
you to bring to bear

192
00:08:13,740 --> 00:08:17,050
a whole bunch of different
development tools.

193
00:08:17,050 --> 00:08:19,390
You weren't stuck
programming in one language

194
00:08:19,390 --> 00:08:21,480
or one environment.

195
00:08:21,480 --> 00:08:23,810
Even Apple-- I don't know
if you guys remember this,

196
00:08:23,810 --> 00:08:25,840
but a few years ago,
they tried to make it

197
00:08:25,840 --> 00:08:27,700
so that everyone
building apps for iPhone

198
00:08:27,700 --> 00:08:29,180
had to write in
Objective-C. They

199
00:08:29,180 --> 00:08:30,930
tried to ban other languages.

200
00:08:30,930 --> 00:08:33,059
And developers rioted.

201
00:08:33,059 --> 00:08:34,750
And this is Apple.

202
00:08:34,750 --> 00:08:38,929
The Apple development community
more easily follows direction

203
00:08:38,929 --> 00:08:41,559
and is more homogeneous
than any other development

204
00:08:41,559 --> 00:08:43,659
community I've seen,
and even they rioted.

205
00:08:43,659 --> 00:08:45,320
The game developer's
like, we need Lua.

206
00:08:45,320 --> 00:08:48,150
And they were like, I need
to write C++ GL games.

207
00:08:48,150 --> 00:08:50,730
And so even Apple had
to back off there.

208
00:08:50,730 --> 00:08:54,580
So the importance for developers
to use whatever languages

209
00:08:54,580 --> 00:08:56,170
and tool sets and
libraries they want

210
00:08:56,170 --> 00:08:57,450
to use to build
their applications

211
00:08:57,450 --> 00:08:58,491
is also really important.

212
00:08:58,491 --> 00:09:01,420

213
00:09:01,420 --> 00:09:04,470
So these are all
the places where

214
00:09:04,470 --> 00:09:06,120
mobile applications excel.

215
00:09:06,120 --> 00:09:08,180
And these are all
places where we really

216
00:09:08,180 --> 00:09:09,907
need to close that
gap on the web

217
00:09:09,907 --> 00:09:11,990
so that you can do all of
these things on the web,

218
00:09:11,990 --> 00:09:14,890
so you retain all the advantages
that web applications have

219
00:09:14,890 --> 00:09:17,430
that native applications lack.

220
00:09:17,430 --> 00:09:19,120
But one of our goals
on the Chrome team

221
00:09:19,120 --> 00:09:21,630
is to really close that gap.

222
00:09:21,630 --> 00:09:25,637
So the first thing on the
list is rendering performance.

223
00:09:25,637 --> 00:09:27,220
So I mentioned before
the expectations

224
00:09:27,220 --> 00:09:29,180
around mobile devices
now are everything

225
00:09:29,180 --> 00:09:30,980
is 60 frames a second.

226
00:09:30,980 --> 00:09:33,864
And so when the web
was originally created,

227
00:09:33,864 --> 00:09:35,530
people really weren't
thinking about how

228
00:09:35,530 --> 00:09:40,410
to do rendering using GPUs, how
to make it so that you don't

229
00:09:40,410 --> 00:09:44,220
have stutters and
frame rates, and all

230
00:09:44,220 --> 00:09:45,220
of these kind of things.

231
00:09:45,220 --> 00:09:47,178
So there's a bunch of
projects we have underway

232
00:09:47,178 --> 00:09:49,570
in Chrome to do
this, some of which

233
00:09:49,570 --> 00:09:53,030
involve new web standards
like web animations

234
00:09:53,030 --> 00:09:56,040
so that you can specify
declaratively what animation

235
00:09:56,040 --> 00:09:57,770
or transition you
want to have happen.

236
00:09:57,770 --> 00:10:01,910
And then Chrome, or the
browser, can then automatically

237
00:10:01,910 --> 00:10:04,680
make that happen for you so that
you don't have to write code

238
00:10:04,680 --> 00:10:06,830
to handle every single
frame of the animation.

239
00:10:06,830 --> 00:10:08,720
And that allows the
system as a whole

240
00:10:08,720 --> 00:10:11,415
to schedule activity to
maintain that frame rate so

241
00:10:11,415 --> 00:10:13,440
that you don't get glitches.

242
00:10:13,440 --> 00:10:15,070
Other things we're
doing are things

243
00:10:15,070 --> 00:10:17,740
like reducing garbage
collection pause time.

244
00:10:17,740 --> 00:10:20,594
So if you have to do
work to produce a frame,

245
00:10:20,594 --> 00:10:22,010
you want to make
sure that you can

246
00:10:22,010 --> 00:10:23,650
maintain that
constant frame rate.

247
00:10:23,650 --> 00:10:25,890
It really sucks if you're
trying to produce a frame

248
00:10:25,890 --> 00:10:30,300
and a GC comes, and you go
away for 60 milliseconds,

249
00:10:30,300 --> 00:10:32,500
and you drop four frames.

250
00:10:32,500 --> 00:10:36,470
And so we're working very hard
to both measure and improve

251
00:10:36,470 --> 00:10:39,380
garbage collection and other
VM latencies that exist.

252
00:10:39,380 --> 00:10:42,670
Because in complex VMs like
V8, they do clever things like,

253
00:10:42,670 --> 00:10:44,670
oh, I notice you're running
this function a lot.

254
00:10:44,670 --> 00:10:46,450
Let me optimize it for you.

255
00:10:46,450 --> 00:10:48,110
And even the process
of doing that,

256
00:10:48,110 --> 00:10:50,350
that could cause you to
miss an animation frame.

257
00:10:50,350 --> 00:10:52,141
And so we're working
very hard to make sure

258
00:10:52,141 --> 00:10:53,150
that that never happens.

259
00:10:53,150 --> 00:10:56,000
And there's a bunch of
work under way to do that.

260
00:10:56,000 --> 00:10:58,640
And it's particularly tricky,
both for garbage collection

261
00:10:58,640 --> 00:11:01,430
as well as [? compilation ?]
pauses and things like that,

262
00:11:01,430 --> 00:11:03,444
because even if you
have multi-core--

263
00:11:03,444 --> 00:11:04,860
and we work hard
to take advantage

264
00:11:04,860 --> 00:11:06,693
of all the different
multi-core processors--

265
00:11:06,693 --> 00:11:08,830
your application might also
be competing for cores.

266
00:11:08,830 --> 00:11:10,480
Or even if you're not
competing for cores,

267
00:11:10,480 --> 00:11:12,938
very often you may be competing
with the garbage collector,

268
00:11:12,938 --> 00:11:15,390
the compiler, for memory
bandwidth or cache

269
00:11:15,390 --> 00:11:17,190
pressure, things like that.

270
00:11:17,190 --> 00:11:19,470
So it's a very
challenging problem.

271
00:11:19,470 --> 00:11:23,230
But we've made a lot
of progress on that.

272
00:11:23,230 --> 00:11:26,890
So here's some examples of
the improvements we've made.

273
00:11:26,890 --> 00:11:29,530
So this was one of our
performance dashboards

274
00:11:29,530 --> 00:11:31,960
that tracks JSGameBench.

275
00:11:31,960 --> 00:11:33,440
And you see some
changes were made

276
00:11:33,440 --> 00:11:35,990
that dramatically
improve performance.

277
00:11:35,990 --> 00:11:39,490
Now, we also look for
performance regressions.

278
00:11:39,490 --> 00:11:42,670
And we have a lot of
performance dashboards.

279
00:11:42,670 --> 00:11:44,839
If any of you have crawled
around the Chromium site

280
00:11:44,839 --> 00:11:47,130
and tried to look at all of
the performance dashboards,

281
00:11:47,130 --> 00:11:48,505
I think there are
so many of them

282
00:11:48,505 --> 00:11:50,780
now that no human can
keep track of them all.

283
00:11:50,780 --> 00:11:52,600
And in fact, about
a year and a half

284
00:11:52,600 --> 00:11:55,780
ago, we had a massive
regression on one of them.

285
00:11:55,780 --> 00:11:57,210
And nobody noticed.

286
00:11:57,210 --> 00:12:01,410
Because there were just too many
for people to keep track of.

287
00:12:01,410 --> 00:12:04,022
And so that spurred
the team to think

288
00:12:04,022 --> 00:12:05,480
like, how do we
solve this problem?

289
00:12:05,480 --> 00:12:08,480
And so since the thing we know
how to do is build software,

290
00:12:08,480 --> 00:12:11,000
we actually built software to
watch all of the performance

291
00:12:11,000 --> 00:12:13,480
dashboards for us.

292
00:12:13,480 --> 00:12:16,300
They actually found this
really cool anomaly detection

293
00:12:16,300 --> 00:12:18,522
framework that was developed
elsewhere in Google

294
00:12:18,522 --> 00:12:20,730
and trained it to look at
the performance dashboards.

295
00:12:20,730 --> 00:12:23,550
Because as you know,
sometimes it's hard to tell,

296
00:12:23,550 --> 00:12:27,740
is it slowly getting slower, or
was there temporary regression?

297
00:12:27,740 --> 00:12:31,110
Was the bot just
having a bad day?

298
00:12:31,110 --> 00:12:33,610
And so now, we've
got this system

299
00:12:33,610 --> 00:12:36,737
where I get email
alerts when performance

300
00:12:36,737 --> 00:12:38,070
regresses in any of these areas.

301
00:12:38,070 --> 00:12:42,200
And we have a team of sheriffs
that go and look at the results

302
00:12:42,200 --> 00:12:43,700
from all of this,
and then go figure

303
00:12:43,700 --> 00:12:45,350
out what change
caused the regression,

304
00:12:45,350 --> 00:12:48,690
and go nag the developer who
does that to revert the change

305
00:12:48,690 --> 00:12:51,650
or make a fix so that we
get the performance back.

306
00:12:51,650 --> 00:12:54,890
And so now, even though we
continue to add capabilities

307
00:12:54,890 --> 00:12:57,780
to Chrome, and the code
keeps getting bigger,

308
00:12:57,780 --> 00:12:59,430
it's actually, in
almost every area

309
00:12:59,430 --> 00:13:02,420
that we can measure,
faster, and uses less memory

310
00:13:02,420 --> 00:13:03,910
today than the day
we launched five

311
00:13:03,910 --> 00:13:06,637
years ago because of this
continual measurement

312
00:13:06,637 --> 00:13:07,220
of everything.

313
00:13:07,220 --> 00:13:09,770
Basically for places we regress,
they're usually in areas

314
00:13:09,770 --> 00:13:11,070
that we failed to measure.

315
00:13:11,070 --> 00:13:13,570
And then when we find them, we
add a new measurement for it,

316
00:13:13,570 --> 00:13:16,070
and we work hard to
never regress on them.

317
00:13:16,070 --> 00:13:20,150
We're not perfect, but we're
getting better and better.

318
00:13:20,150 --> 00:13:23,730
Another area we've improved a
lot is JavaScript performance.

319
00:13:23,730 --> 00:13:31,810
We've improved on mobile about
50% in the last year or so.

320
00:13:31,810 --> 00:13:37,269
And this is an area that is,
of course, very important to us

321
00:13:37,269 --> 00:13:38,810
because most of the
code that you run

322
00:13:38,810 --> 00:13:40,018
is all written in JavaScript.

323
00:13:40,018 --> 00:13:45,090
And so this goes directly to how
fast your applications can be.

324
00:13:45,090 --> 00:13:46,700
In addition, we
launched a new version

325
00:13:46,700 --> 00:13:48,230
of the Octane benchmark.

326
00:13:48,230 --> 00:13:53,417
So Octane is the benchmark
we use to tune V8 against.

327
00:13:53,417 --> 00:13:56,000
Because we basically try to put
things in Octane that we think

328
00:13:56,000 --> 00:13:58,020
are important to make go fast.

329
00:13:58,020 --> 00:14:00,020
And then we work really
hard to make it go fast.

330
00:14:00,020 --> 00:14:03,030
And in Octane 2.0,
the changes we

331
00:14:03,030 --> 00:14:06,727
made there were
primarily around latency.

332
00:14:06,727 --> 00:14:08,810
For the first time, we
have a JavaScript benchmark

333
00:14:08,810 --> 00:14:10,860
that actually
measures latency so

334
00:14:10,860 --> 00:14:14,140
that if you have long GC
pauses or frequent GC pauses

335
00:14:14,140 --> 00:14:17,340
or things like that, you'll
score poorly on the benchmark.

336
00:14:17,340 --> 00:14:22,740
We also brought in a bunch
of code from Emscripten.

337
00:14:22,740 --> 00:14:26,710
So basically, we have a zlib
compiled down to JavaScript

338
00:14:26,710 --> 00:14:28,030
with Emscripten.

339
00:14:28,030 --> 00:14:33,200
So we're using asm.js-style
JavaScript and include that

340
00:14:33,200 --> 00:14:34,490
in the benchmark as well.

341
00:14:34,490 --> 00:14:38,470
And we don't implement a special
compiler or anything like that.

342
00:14:38,470 --> 00:14:41,380
But we're just trying to
make generic V8 work well

343
00:14:41,380 --> 00:14:44,610
on all kinds of JavaScript, even
machine-generated JavaScript,

344
00:14:44,610 --> 00:14:47,690
like the stuff that
comes out of Emscripten.

345
00:14:47,690 --> 00:14:52,520
And then we also added some
other large programs in there

346
00:14:52,520 --> 00:14:56,645
to really test parse time,
compilation time, and latency,

347
00:14:56,645 --> 00:14:57,520
and things like that.

348
00:14:57,520 --> 00:14:59,511
So large code
bases of JavaScript

349
00:14:59,511 --> 00:15:01,510
so that those things get
benchmarked and tested,

350
00:15:01,510 --> 00:15:02,010
as well.

351
00:15:02,010 --> 00:15:05,050

352
00:15:05,050 --> 00:15:08,250
So another area-- and we
talked about working well

353
00:15:08,250 --> 00:15:10,510
in flaky networks and
network performance.

354
00:15:10,510 --> 00:15:13,200
One of the things we've
done to make the web more

355
00:15:13,200 --> 00:15:14,940
usable on mobile
devices is we've

356
00:15:14,940 --> 00:15:17,670
introduced this mobile
data compression proxy.

357
00:15:17,670 --> 00:15:22,550
And it gives you a 50% savings
on the data transmitted.

358
00:15:22,550 --> 00:15:26,580
Right now, we're really
focused mostly on saving data.

359
00:15:26,580 --> 00:15:29,160
Because a lot of people's
usage of their mobile device

360
00:15:29,160 --> 00:15:31,810
is limited by
paying for the bits

361
00:15:31,810 --> 00:15:33,540
that they get over the air.

362
00:15:33,540 --> 00:15:37,765
And so we're really focused on
shipping fewer bits to them.

363
00:15:37,765 --> 00:15:40,390
But also, there's opportunities
to get performance improvements

364
00:15:40,390 --> 00:15:41,070
here, as well.

365
00:15:41,070 --> 00:15:45,980

366
00:15:45,980 --> 00:15:48,430
In addition to
building proxies--

367
00:15:48,430 --> 00:15:50,800
and one of the biggest
things that the mobile data

368
00:15:50,800 --> 00:15:55,300
compression proxy does is it
converts JPEGs to webp images,

369
00:15:55,300 --> 00:16:00,890
which are about 25% smaller for
the same quality level as JPEG.

370
00:16:00,890 --> 00:16:03,550
But also, by making that image
format available on the web

371
00:16:03,550 --> 00:16:06,680
generally, a lot
of sites at Google

372
00:16:06,680 --> 00:16:10,590
have converted to using webp
if the browser supports it.

373
00:16:10,590 --> 00:16:14,460
And a number of sites at Google
have seen latency reductions

374
00:16:14,460 --> 00:16:18,300
on the order of 30%, 40% because
a large portion of that page

375
00:16:18,300 --> 00:16:20,576
load time is just transferring
data down to the user.

376
00:16:20,576 --> 00:16:21,950
So if you can
transfer less data,

377
00:16:21,950 --> 00:16:24,030
you can make the
web much faster.

378
00:16:24,030 --> 00:16:25,670
And the same is true on video.

379
00:16:25,670 --> 00:16:30,360
Going from VP8, which is about
comparable to H264 in terms

380
00:16:30,360 --> 00:16:33,950
of quality per bit,
and moving to VP9,

381
00:16:33,950 --> 00:16:36,582
we're getting a 50%
savings in the data rate.

382
00:16:36,582 --> 00:16:38,540
And so there's a number
of properties at Google

383
00:16:38,540 --> 00:16:42,760
that are moving to
use VP9 inside of webm

384
00:16:42,760 --> 00:16:44,950
to transfer less
data down to users.

385
00:16:44,950 --> 00:16:46,460
And this, of course,
is particularly

386
00:16:46,460 --> 00:16:47,630
important on mobile devices.

387
00:16:47,630 --> 00:16:50,670

388
00:16:50,670 --> 00:16:55,270
So some of you may know-- how
many of you have met app cache?

389
00:16:55,270 --> 00:16:58,090

390
00:16:58,090 --> 00:17:01,030
How many of you have typed
"app cache" into Google,

391
00:17:01,030 --> 00:17:04,079
but not hit Return to see
what the suggestions are?

392
00:17:04,079 --> 00:17:07,290
[LAUGHTER]

393
00:17:07,290 --> 00:17:09,510
LINUS UPSON: So
ServiceWorker is an attempt

394
00:17:09,510 --> 00:17:12,500
to repent for those sins.

395
00:17:12,500 --> 00:17:15,329
We want web applications to
be able to work really, really

396
00:17:15,329 --> 00:17:18,099
well, even in flaky
network connections,

397
00:17:18,099 --> 00:17:20,119
or even when you're
completely offline.

398
00:17:20,119 --> 00:17:21,619
And so we're putting
a lot of effort

399
00:17:21,619 --> 00:17:24,710
into ServiceWorker to make
that much easier to program

400
00:17:24,710 --> 00:17:29,150
and much more reliable to
program in that kind of model.

401
00:17:29,150 --> 00:17:32,460
And we're also
doing a lot to add

402
00:17:32,460 --> 00:17:35,780
APIs to access all of
the different hardware

403
00:17:35,780 --> 00:17:38,560
capabilities of both
desktops, laptops,

404
00:17:38,560 --> 00:17:40,160
as well as mobile devices.

405
00:17:40,160 --> 00:17:43,610
We've already got parts of
the device motion API in.

406
00:17:43,610 --> 00:17:46,490
We already have a location.

407
00:17:46,490 --> 00:17:49,320
And a bunch of additional
things are underway.

408
00:17:49,320 --> 00:17:52,820

409
00:17:52,820 --> 00:17:54,870
Three other big things
have landed recently.

410
00:17:54,870 --> 00:18:01,680
We've got WebGL,
WebRTC, and Web Audio.

411
00:18:01,680 --> 00:18:04,910
And so this allows you to do
much more interesting graphics

412
00:18:04,910 --> 00:18:06,550
on the web than you
could do before.

413
00:18:06,550 --> 00:18:08,515
Allows you to do very
interesting multimedia,

414
00:18:08,515 --> 00:18:10,390
both video and audio.

415
00:18:10,390 --> 00:18:13,140
And WebRTC, in
particular, I think

416
00:18:13,140 --> 00:18:15,640
is really going to
revolutionize communications.

417
00:18:15,640 --> 00:18:17,960
Because now, you can really--
when you think about it,

418
00:18:17,960 --> 00:18:20,740
web is really about
communicating with people.

419
00:18:20,740 --> 00:18:24,580
And it's a shame that we've
gone all this time without you

420
00:18:24,580 --> 00:18:28,510
actually being able to
communicate with people.

421
00:18:28,510 --> 00:18:31,180
And WebRTC is going to enable
this for the first time.

422
00:18:31,180 --> 00:18:33,620
It's very cool.

423
00:18:33,620 --> 00:18:39,960
I talked about some of the APIs
that have come in recently.

424
00:18:39,960 --> 00:18:43,760
The other thing that
mobile applications

425
00:18:43,760 --> 00:18:48,950
have gotten to take advantage
of is new UI toolkits and new UI

426
00:18:48,950 --> 00:18:51,300
paradigms.

427
00:18:51,300 --> 00:18:53,790
So we're working on
a number of things

428
00:18:53,790 --> 00:18:57,180
here to make it much easier
to build really beautiful user

429
00:18:57,180 --> 00:19:01,240
interfaces and to make them
work well in touch environments

430
00:19:01,240 --> 00:19:04,390
and in different screen sizes.

431
00:19:04,390 --> 00:19:08,970
So one of the things that's
obvious about mobile is typing

432
00:19:08,970 --> 00:19:10,250
is a lot harder.

433
00:19:10,250 --> 00:19:13,150
And so we've recently
introduced something

434
00:19:13,150 --> 00:19:14,900
called request autocomplete.

435
00:19:14,900 --> 00:19:18,110
And what this does is
it allows the browser

436
00:19:18,110 --> 00:19:21,810
to remember sets of information,
the most important of which

437
00:19:21,810 --> 00:19:22,750
is payment.

438
00:19:22,750 --> 00:19:24,990
Because if you want to
buy something on the web,

439
00:19:24,990 --> 00:19:26,670
having to type in
credit card number,

440
00:19:26,670 --> 00:19:28,470
shipping address,
mailing address, all

441
00:19:28,470 --> 00:19:31,770
of those kinds of
things, it's a real pain.

442
00:19:31,770 --> 00:19:33,860
And so this allows
you to do that once,

443
00:19:33,860 --> 00:19:35,660
either on a mobile
device or on a desktop,

444
00:19:35,660 --> 00:19:37,950
and then Chrome syncs it across
all of the different platforms.

445
00:19:37,950 --> 00:19:40,187
And then when you want to
go check out on a website,

446
00:19:40,187 --> 00:19:41,770
it can just call
request autocomplete.

447
00:19:41,770 --> 00:19:44,100
It shows you a dialogue with all
of your information filled out,

448
00:19:44,100 --> 00:19:45,740
and say, hey, do you want
to send this to the website?

449
00:19:45,740 --> 00:19:47,698
You can look at it and
say, yeah, that's great,

450
00:19:47,698 --> 00:19:48,862
and click OK.

451
00:19:48,862 --> 00:19:50,570
If you need to change
something, you can.

452
00:19:50,570 --> 00:19:52,790
You can select a different
shipping address, for example,

453
00:19:52,790 --> 00:19:54,350
or select a different
credit card.

454
00:19:54,350 --> 00:19:56,950
But for most cases,
this really just brings

455
00:19:56,950 --> 00:20:00,259
really, really simple checkout
flows to mobile devices.

456
00:20:00,259 --> 00:20:01,800
And there's some
other things we have

457
00:20:01,800 --> 00:20:05,290
in the pipeline along
this line, as well.

458
00:20:05,290 --> 00:20:07,400
Another big thing
we're doing is Polymer.

459
00:20:07,400 --> 00:20:09,450
How many people here
have heard of Polymer?

460
00:20:09,450 --> 00:20:10,530
OK.

461
00:20:10,530 --> 00:20:14,290
It's really exciting
on two levels.

462
00:20:14,290 --> 00:20:19,510
One, and this may seem obvious,
but in most programming

463
00:20:19,510 --> 00:20:21,730
environments, you
can write a function

464
00:20:21,730 --> 00:20:24,560
in terms of other functions.

465
00:20:24,560 --> 00:20:27,370
With web components that
Polymer's built on top of,

466
00:20:27,370 --> 00:20:28,970
for the first time
on the web, you

467
00:20:28,970 --> 00:20:34,010
can actually write HTML tags
in terms of other HTML tags

468
00:20:34,010 --> 00:20:35,934
and bundle the appropriate
CSS and JavaScript

469
00:20:35,934 --> 00:20:37,100
with it and things, as well.

470
00:20:37,100 --> 00:20:39,810
So you can build real
first class components

471
00:20:39,810 --> 00:20:41,730
and have structured
programming on the web,

472
00:20:41,730 --> 00:20:43,860
and not just
cut-and-paste programming.

473
00:20:43,860 --> 00:20:45,950
And so this is huge.

474
00:20:45,950 --> 00:20:50,440
And Polymer is a toolkit that
was designed from the beginning

475
00:20:50,440 --> 00:20:52,530
to live on top of
web components.

476
00:20:52,530 --> 00:20:56,130
And it brings both the
structure of the application,

477
00:20:56,130 --> 00:20:59,730
to make it much easier to build
your app, as well as a user

478
00:20:59,730 --> 00:21:03,670
interface layer so that you
can have really beautiful 60

479
00:21:03,670 --> 00:21:05,131
hertz animations
and transitions.

480
00:21:05,131 --> 00:21:07,380
It knows what all of the
fast paths are in the browser

481
00:21:07,380 --> 00:21:08,610
and tries to stay on them.

482
00:21:08,610 --> 00:21:11,230
In fact, by definition,
there's this constant feedback

483
00:21:11,230 --> 00:21:13,672
loop going between the Polymer
team and the Blink team

484
00:21:13,672 --> 00:21:16,130
so that every time the Polymer
team needs to make something

485
00:21:16,130 --> 00:21:18,100
fast, the Blink team
goes and makes that fast.

486
00:21:18,100 --> 00:21:20,920
And so by using this toolkit,
it's one of the easiest ways

487
00:21:20,920 --> 00:21:23,750
to stay on all of the fast
paths inside of Chrome.

488
00:21:23,750 --> 00:21:25,657
And it's also got
polyfills for all

489
00:21:25,657 --> 00:21:27,240
of the other modern
browsers, as well.

490
00:21:27,240 --> 00:21:29,190
So you can write your
application once and deploy it

491
00:21:29,190 --> 00:21:30,731
across all of the
different browsers.

492
00:21:30,731 --> 00:21:36,000

493
00:21:36,000 --> 00:21:38,500
So what else is this one?

494
00:21:38,500 --> 00:21:40,896
I forgot what's on this slide.

495
00:21:40,896 --> 00:21:42,300
AUDIENCE: Add to homescreen.

496
00:21:42,300 --> 00:21:42,800
LINUS UPSON: This is what?

497
00:21:42,800 --> 00:21:43,966
AUDIENCE: Add to homescreen.

498
00:21:43,966 --> 00:21:46,450
LINUS UPSON: Add to
homescreen, right.

499
00:21:46,450 --> 00:21:49,430
So in the latest
version of Chrome,

500
00:21:49,430 --> 00:21:52,610
you can now be browsing
around in Chrome on Android,

501
00:21:52,610 --> 00:21:54,340
and you can take a
web page and add it

502
00:21:54,340 --> 00:21:56,700
to the homescreen of Android.

503
00:21:56,700 --> 00:21:59,870
So something really
simple, but it

504
00:21:59,870 --> 00:22:02,400
makes it a lot easier for
people to go back and get

505
00:22:02,400 --> 00:22:05,290
to websites again.

506
00:22:05,290 --> 00:22:13,090
And of course, we're working on
making handling the source set,

507
00:22:13,090 --> 00:22:16,240
or what's the other one called?

508
00:22:16,240 --> 00:22:17,347
Set In?

509
00:22:17,347 --> 00:22:18,180
AUDIENCE: Source In.

510
00:22:18,180 --> 00:22:20,084
LINUS UPSON: Source In, yes.

511
00:22:20,084 --> 00:22:22,500
So that you can handle multiple
image resolutions, as well

512
00:22:22,500 --> 00:22:26,376
as handling composition and art
direction and things like that,

513
00:22:26,376 --> 00:22:27,750
which is really
important-- being

514
00:22:27,750 --> 00:22:30,660
able to work across lots
of different screens.

515
00:22:30,660 --> 00:22:33,297
And also very
importantly, we care

516
00:22:33,297 --> 00:22:34,755
a lot about developer
productivity.

517
00:22:34,755 --> 00:22:37,660
So we've invested a lot
in Chrome's dev tools.

518
00:22:37,660 --> 00:22:39,711
How many people
here have used them?

519
00:22:39,711 --> 00:22:40,210
Everyone.

520
00:22:40,210 --> 00:22:41,584
OK, so you're
familiar with them.

521
00:22:41,584 --> 00:22:43,910

522
00:22:43,910 --> 00:22:49,726
So if you can't easily
develop debug applications,

523
00:22:49,726 --> 00:22:51,350
you're not going to
be very productive.

524
00:22:51,350 --> 00:22:54,180
And so we really want to
make this better and better.

525
00:22:54,180 --> 00:22:56,980
So a lot of things
have shipped recently.

526
00:22:56,980 --> 00:23:00,360
And let me take a look here.

527
00:23:00,360 --> 00:23:01,860
See if I remember all of them.

528
00:23:01,860 --> 00:23:06,460

529
00:23:06,460 --> 00:23:10,540
We have-- let's see,
there's projecting.

530
00:23:10,540 --> 00:23:12,485
There's remote
debugging to mobile.

531
00:23:12,485 --> 00:23:17,440
And I think there's also--
what was the other one?

532
00:23:17,440 --> 00:23:18,410
Screencasting?

533
00:23:18,410 --> 00:23:19,850
AUDIENCE: The Layers panel.

534
00:23:19,850 --> 00:23:21,484
LINUS UPSON: The
Layers panel, yes.

535
00:23:21,484 --> 00:23:23,400
And in addition to that,
there's a whole bunch

536
00:23:23,400 --> 00:23:27,020
of tools we've developed for
debugging GPU performance.

537
00:23:27,020 --> 00:23:28,744
Because it's very
hard, sometimes--

538
00:23:28,744 --> 00:23:30,160
when you're writing
something, you

539
00:23:30,160 --> 00:23:32,610
see a little screen stutter--
to figure out what happened.

540
00:23:32,610 --> 00:23:34,485
And being able to go
into the developer tools

541
00:23:34,485 --> 00:23:36,930
and see a timeline, and
watch exactly, like, ah.

542
00:23:36,930 --> 00:23:38,690
This bit of code was
running right here,

543
00:23:38,690 --> 00:23:40,273
and that's why I
dropped those frames.

544
00:23:40,273 --> 00:23:43,220

545
00:23:43,220 --> 00:23:45,080
We also want to make
it possible for people

546
00:23:45,080 --> 00:23:47,340
to use whatever languages
or tools they want,

547
00:23:47,340 --> 00:23:49,620
and still be able to
deploy on the web.

548
00:23:49,620 --> 00:23:52,510
So we want to make Emscripten
code run really fast so that

549
00:23:52,510 --> 00:23:56,190
you take C or C++ code and be
able to deploy that on the web.

550
00:23:56,190 --> 00:24:00,240
We want people to be able to
write more structured programs

551
00:24:00,240 --> 00:24:02,950
than you can in
JavaScript with Dart.

552
00:24:02,950 --> 00:24:05,190
We want that to be able to
run across all browsers.

553
00:24:05,190 --> 00:24:08,530
We just released Dart
1.0 a few days ago.

554
00:24:08,530 --> 00:24:11,090
And with Dart to JS, you
can deploy it everywhere.

555
00:24:11,090 --> 00:24:14,070
There's even a number of
cases where the Dart to JS

556
00:24:14,070 --> 00:24:17,280
will actually produce faster
code than idiomatic JavaScript.

557
00:24:17,280 --> 00:24:19,140
Because, I mean,
a lot of you here

558
00:24:19,140 --> 00:24:20,660
are very good
JavaScript developers.

559
00:24:20,660 --> 00:24:22,530
But for many
JavaScript developers,

560
00:24:22,530 --> 00:24:25,310
it's very easy to accidentally
shoot yourself in the foot.

561
00:24:25,310 --> 00:24:27,770
And by having a more structured
language compiled down

562
00:24:27,770 --> 00:24:30,540
to JavaScript, you can often
get much better performance out

563
00:24:30,540 --> 00:24:33,650
of it for most programmers.

564
00:24:33,650 --> 00:24:36,870
In addition, we have portable
Native Client inside of Chrome

565
00:24:36,870 --> 00:24:40,730
so that you can run native code
even faster than Emscripten

566
00:24:40,730 --> 00:24:44,580
or asm.js-style code.

567
00:24:44,580 --> 00:24:46,490
But you can also take
that code and run it

568
00:24:46,490 --> 00:24:48,247
in other browsers
with pepper.js.

569
00:24:48,247 --> 00:24:49,830
So you can take all
of the pepper APIs

570
00:24:49,830 --> 00:24:53,209
and emulate them
on other browsers.

571
00:24:53,209 --> 00:24:55,500
And as I said earlier, the
V8 team is working very hard

572
00:24:55,500 --> 00:24:58,280
to take asm.js-style code
and make it run really,

573
00:24:58,280 --> 00:25:00,922
really fast in V8.

574
00:25:00,922 --> 00:25:05,015
Lastly, I talked a lot
about the advantages

575
00:25:05,015 --> 00:25:07,550
of the web-- of
this linkability,

576
00:25:07,550 --> 00:25:11,680
ephemerality,
composability, being safe,

577
00:25:11,680 --> 00:25:14,090
and it being indexable.

578
00:25:14,090 --> 00:25:15,890
And these are not things
that you typically

579
00:25:15,890 --> 00:25:20,090
get with native
mobile applications.

580
00:25:20,090 --> 00:25:22,220
But we realized that
some people might

581
00:25:22,220 --> 00:25:25,490
want to be able to ship a native
app but use web technologies.

582
00:25:25,490 --> 00:25:29,110
So we've invested a lot in
contributing to Cordova, which

583
00:25:29,110 --> 00:25:31,310
is the open source
project behind PhoneGap,

584
00:25:31,310 --> 00:25:33,765
so that you can take what
you've built on the web

585
00:25:33,765 --> 00:25:36,140
and package it up and deliver
it as a mobile application.

586
00:25:36,140 --> 00:25:40,330
You don't get those core
capabilities and advantages

587
00:25:40,330 --> 00:25:43,180
you get by being on the
web, but at least it

588
00:25:43,180 --> 00:25:44,940
allows you to leverage
the same technology

589
00:25:44,940 --> 00:25:47,330
stack for developing
across different platforms,

590
00:25:47,330 --> 00:25:50,080
including the web.

591
00:25:50,080 --> 00:25:54,270
So lastly, I would like to
thank you all for coming here.

592
00:25:54,270 --> 00:25:57,760
There's a lot of exciting talks
over the next couple of days.

593
00:25:57,760 --> 00:25:59,260
And so this is a
great opportunity

594
00:25:59,260 --> 00:26:01,510
to connect not only with all
the other developers here

595
00:26:01,510 --> 00:26:04,340
in the room, but with a lot
of the Chrome developers

596
00:26:04,340 --> 00:26:04,950
from Google.

597
00:26:04,950 --> 00:26:07,275
And we look forward to
hearing back from a lot of you

598
00:26:07,275 --> 00:26:08,733
over the course of
this conference.

599
00:26:08,733 --> 00:26:11,220
We'll be following along on G+.

600
00:26:11,220 --> 00:26:13,530
And so let us have it.

601
00:26:13,530 --> 00:26:14,130
Thanks.

602
00:26:14,130 --> 00:26:20,395
[APPLAUSE]

