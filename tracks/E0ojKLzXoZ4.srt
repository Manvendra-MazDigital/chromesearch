1
00:00:00,000 --> 00:00:00,497

2
00:00:00,497 --> 00:00:02,080
ALICE BOXHALL: Hi,
my name is Boxhall.

3
00:00:02,080 --> 00:00:04,910
I'm a developer on the
Chrome accessibility team.

4
00:00:04,910 --> 00:00:06,990
I have a bit of a cold,
so I'm sorry if I'm

5
00:00:06,990 --> 00:00:07,926
a little hoarse here.

6
00:00:07,926 --> 00:00:12,390

7
00:00:12,390 --> 00:00:12,910
That's cool.

8
00:00:12,910 --> 00:00:14,201
I didn't need to use my slides.

9
00:00:14,201 --> 00:00:17,340

10
00:00:17,340 --> 00:00:19,820
So I'll get into the guts
of my talk in a second,

11
00:00:19,820 --> 00:00:22,870
but I just really like this
definition of accessibility

12
00:00:22,870 --> 00:00:25,850
that you can find on
good old Wikipedia.

13
00:00:25,850 --> 00:00:28,540
Accessibility is the degree
to which a product, device,

14
00:00:28,540 --> 00:00:31,640
service, or environment is
available to as many people as

15
00:00:31,640 --> 00:00:32,682
possible.

16
00:00:32,682 --> 00:00:35,140
And what I like about this is
it doesn't make any reference

17
00:00:35,140 --> 00:00:36,950
to ability or disability.

18
00:00:36,950 --> 00:00:39,600
It includes people
who are in a hurry.

19
00:00:39,600 --> 00:00:42,230
It includes people who
are using a mobile device.

20
00:00:42,230 --> 00:00:44,610
It includes people who find
small click targets really,

21
00:00:44,610 --> 00:00:45,360
really irritating.

22
00:00:45,360 --> 00:00:48,740

23
00:00:48,740 --> 00:00:51,020
And to make it more
explicit, I think

24
00:00:51,020 --> 00:00:53,350
that accessibility actually
implies multi-device

25
00:00:53,350 --> 00:00:56,550
because you're making your
product accessible to people

26
00:00:56,550 --> 00:00:59,480
in a wide variety of situations
and for a wide variety

27
00:00:59,480 --> 00:01:01,510
of backgrounds.

28
00:01:01,510 --> 00:01:05,160
So today I'm going to talk
about what inaccessibility looks

29
00:01:05,160 --> 00:01:08,830
like, so the types of
patterns and things

30
00:01:08,830 --> 00:01:11,680
that are going to make your site
inaccessible to various groups

31
00:01:11,680 --> 00:01:12,830
of people.

32
00:01:12,830 --> 00:01:14,930
I'm going to introduce
screen readers.

33
00:01:14,930 --> 00:01:17,750
If anyone has never
experienced a screen reader,

34
00:01:17,750 --> 00:01:20,220
I'm going to give
a demo and explain

35
00:01:20,220 --> 00:01:22,650
how you can try out a
screen reader yourself.

36
00:01:22,650 --> 00:01:24,400
I'll talk about what
you can do to improve

37
00:01:24,400 --> 00:01:27,000
the accessibility
of your site, how

38
00:01:27,000 --> 00:01:29,400
to assess the
accessibility of your site,

39
00:01:29,400 --> 00:01:31,990
and then I'll have some links
at the end for more information.

40
00:01:31,990 --> 00:01:34,520

41
00:01:34,520 --> 00:01:36,240
So what does
inaccessibility look like?

42
00:01:36,240 --> 00:01:38,420
What constitutes
inaccessibility?

43
00:01:38,420 --> 00:01:41,720
Well, here's a good example.

44
00:01:41,720 --> 00:01:46,030
Anyone seen this on a mobile
device or even their computer?

45
00:01:46,030 --> 00:01:47,122
Yeah?

46
00:01:47,122 --> 00:01:48,900
It sucks, right?

47
00:01:48,900 --> 00:01:54,800
So this is what it's like when
you cannot access something.

48
00:01:54,800 --> 00:01:57,560
So different users are going
to require different things,

49
00:01:57,560 --> 00:01:58,850
obviously.

50
00:01:58,850 --> 00:02:00,730
So we have a bunch
of different groups

51
00:02:00,730 --> 00:02:03,360
that we need to
consider, low vision,

52
00:02:03,360 --> 00:02:06,500
hearing impaired or deaf,
low motor abilities.

53
00:02:06,500 --> 00:02:10,560
So this is someone &mdash; it can
range from having a tremor

54
00:02:10,560 --> 00:02:13,480
or having poor
motor control, right

55
00:02:13,480 --> 00:02:16,430
through to having no use
of your hands at all.

56
00:02:16,430 --> 00:02:18,560
Screen reader or
braille display user.

57
00:02:18,560 --> 00:02:21,050
So this could &mdash; I'll get
more into that later.

58
00:02:21,050 --> 00:02:22,390
And voice control user.

59
00:02:22,390 --> 00:02:26,130
So this is the extreme end
of lack of motor ability.

60
00:02:26,130 --> 00:02:28,370
And in almost all
cases, accommodating

61
00:02:28,370 --> 00:02:32,020
these needs improves the
experience for everybody.

62
00:02:32,020 --> 00:02:35,480
So who are the users that
we're addressing here?

63
00:02:35,480 --> 00:02:39,490
So 9.2% of the adult
population of the US &mdash;

64
00:02:39,490 --> 00:02:42,770
more in developing countries &mdash;
have some vision trouble.

65
00:02:42,770 --> 00:02:46,900
So the way that you address
this is very simple.

66
00:02:46,900 --> 00:02:49,860
Avoid low contrast
text because really,

67
00:02:49,860 --> 00:02:52,140
who likes reading low
contrast text anyway?

68
00:02:52,140 --> 00:02:55,630
Avoid relying on color
alone for communication.

69
00:02:55,630 --> 00:02:57,420
Make sure that the
text is resizable.

70
00:02:57,420 --> 00:02:59,780
And as you saw in the
mobile talk earlier,

71
00:02:59,780 --> 00:03:02,860
that's really useful anyway.

72
00:03:02,860 --> 00:03:04,732
Provide text alternatives
to visual media.

73
00:03:04,732 --> 00:03:06,440
And again, this is
really useful if, say,

74
00:03:06,440 --> 00:03:09,000
you don't want to watch a video
to get the only documentation

75
00:03:09,000 --> 00:03:12,800
for that dev tool you'd
really like to use.

76
00:03:12,800 --> 00:03:16,280
So 36.4 million adults in
the US have at least one

77
00:03:16,280 --> 00:03:17,870
complex activity limitation.

78
00:03:17,870 --> 00:03:20,440
So this is motor control.

79
00:03:20,440 --> 00:03:22,190
This type of person
may not be able to use

80
00:03:22,190 --> 00:03:25,600
a mouse, for example, or
may have significant trouble

81
00:03:25,600 --> 00:03:27,570
accessing small click targets.

82
00:03:27,570 --> 00:03:29,570
So provide large click targets.

83
00:03:29,570 --> 00:03:30,769
Label your radio buttons.

84
00:03:30,769 --> 00:03:33,310
If I need to use one more form
where the radio buttons aren't

85
00:03:33,310 --> 00:03:35,880
labeled, and I have to click
on that tiny, tiny circle,

86
00:03:35,880 --> 00:03:38,444
I may actually flip my table.

87
00:03:38,444 --> 00:03:40,610
Ensure your site can be
used with the keyboard only.

88
00:03:40,610 --> 00:03:42,110
And this is something
that I'm going

89
00:03:42,110 --> 00:03:45,630
to return to time and time
again because this will actually

90
00:03:45,630 --> 00:03:47,652
get you a really
long way to making

91
00:03:47,652 --> 00:03:49,860
your site accessible for
the broadest range of users.

92
00:03:49,860 --> 00:03:52,970

93
00:03:52,970 --> 00:03:54,390
So screen reader
and braille users

94
00:03:54,390 --> 00:03:56,552
are a much smaller number.

95
00:03:56,552 --> 00:03:58,260
From the point of view
of the web author,

96
00:03:58,260 --> 00:04:01,120
you guys, these groups are
largely interchangeable,

97
00:04:01,120 --> 00:04:02,960
even though the way
they access the page

98
00:04:02,960 --> 00:04:05,682
is going to be slightly
different, especially

99
00:04:05,682 --> 00:04:07,140
in the case of
screen reader users.

100
00:04:07,140 --> 00:04:10,090
They may or may not
actually be blind.

101
00:04:10,090 --> 00:04:13,560
They may have another impairment
such as dyslexia or a learning

102
00:04:13,560 --> 00:04:14,592
disability.

103
00:04:14,592 --> 00:04:15,800
They may not be able to read.

104
00:04:15,800 --> 00:04:18,269
They may not be able to
read the target language.

105
00:04:18,269 --> 00:04:20,190
They may be temporarily
unable to read,

106
00:04:20,190 --> 00:04:23,270
such as recovering from laser
surgery, such as getting

107
00:04:23,270 --> 00:04:25,457
motion sick, that kind of thing.

108
00:04:25,457 --> 00:04:27,790
But by and large, the thing
to remember with these users

109
00:04:27,790 --> 00:04:29,600
is without assisted
technology, they're

110
00:04:29,600 --> 00:04:31,660
not going to be able to
access the site at all.

111
00:04:31,660 --> 00:04:34,420
So this is the Flash situation.

112
00:04:34,420 --> 00:04:34,920
All right.

113
00:04:34,920 --> 00:04:38,530
So screen readers.

114
00:04:38,530 --> 00:04:40,595
The way that a user
with a screen reader

115
00:04:40,595 --> 00:04:44,730
is going to be interacting with
a device &mdash; the screen reader

116
00:04:44,730 --> 00:04:48,100
or braille display
is going to translate

117
00:04:48,100 --> 00:04:54,680
the interface of a site
into text or speech.

118
00:04:54,680 --> 00:04:58,365
So in this case, we can
imagine the interface has

119
00:04:58,365 --> 00:04:59,740
a Cancel button
and an OK button.

120
00:04:59,740 --> 00:05:02,480
It's going to read
out, Cancel button.

121
00:05:02,480 --> 00:05:06,791
The user is going to then
hit a keyboard shortcut.

122
00:05:06,791 --> 00:05:10,500
And so with desktop
screen readers,

123
00:05:10,500 --> 00:05:13,230
there are literally hundreds
of keyboard shortcuts

124
00:05:13,230 --> 00:05:15,800
to make navigating
really, really efficient.

125
00:05:15,800 --> 00:05:17,680
So they're going to go
to the next control.

126
00:05:17,680 --> 00:05:19,066
It reads out, OK button.

127
00:05:19,066 --> 00:05:20,690
Then they hit another
keyboard shortcut

128
00:05:20,690 --> 00:05:22,177
to send a click command.

129
00:05:22,177 --> 00:05:23,760
So instead of using
the mouse, they're

130
00:05:23,760 --> 00:05:26,397
going to be interacting
by the screen reader.

131
00:05:26,397 --> 00:05:28,730
And then it's going to tell
them that the button's being

132
00:05:28,730 --> 00:05:29,230
clicked.

133
00:05:29,230 --> 00:05:31,550

134
00:05:31,550 --> 00:05:32,050
All right.

135
00:05:32,050 --> 00:05:36,270
So I have &mdash; this is a
demo of ChromeVox, which

136
00:05:36,270 --> 00:05:38,760
is a screen reader for
Chrome and Chrome OS.

137
00:05:38,760 --> 00:05:40,940
It's built into
Chrome OS, and I'll

138
00:05:40,940 --> 00:05:42,320
get to how to use
it in a minute.

139
00:05:42,320 --> 00:05:43,736
But I'll just show
you this first.

140
00:05:43,736 --> 00:05:48,197

141
00:05:48,197 --> 00:05:49,200
[VIDEO PLAYBACK]

142
00:05:49,200 --> 00:05:50,900
-Home, list item.

143
00:05:50,900 --> 00:05:52,880
Sessions, link list item.

144
00:05:52,880 --> 00:05:55,770
Schedule, link
visited list item.

145
00:05:55,770 --> 00:05:56,540
Clicked.

146
00:05:56,540 --> 00:05:59,650
Chrome Dev Summit
2013 navigation list

147
00:05:59,650 --> 00:06:00,800
with three items.

148
00:06:00,800 --> 00:06:02,340
Find in page, enter.

149
00:06:02,340 --> 00:06:05,500

150
00:06:05,500 --> 00:06:08,550
Multi-device
accessibility link visit.

151
00:06:08,550 --> 00:06:10,640
Press Enter to accept or exit.

152
00:06:10,640 --> 00:06:12,260
Find in page.

153
00:06:12,260 --> 00:06:15,285
Chrome Dev Summit 2013 tab.

154
00:06:15,285 --> 00:06:16,118
[END VIDEO PLAYBACK]

155
00:06:16,118 --> 00:06:17,159
ALICE BOXHALL: All right.

156
00:06:17,159 --> 00:06:19,525
So that was just me going
through the Chrome Dev Summit

157
00:06:19,525 --> 00:06:21,816
site earlier with ChromeVox
and finding my orientation.

158
00:06:21,816 --> 00:06:29,752

159
00:06:29,752 --> 00:06:31,250
All right.

160
00:06:31,250 --> 00:06:34,570
So ChromeVox is built
specifically for the web.

161
00:06:34,570 --> 00:06:35,750
It's built in on Chrome OS.

162
00:06:35,750 --> 00:06:38,530
You can activate it
any time on Chrome OS.

163
00:06:38,530 --> 00:06:40,235
And the really
nice feature of it

164
00:06:40,235 --> 00:06:42,580
is that it's really easy
to use for sighted users.

165
00:06:42,580 --> 00:06:45,690
A lot of screen readers
that are dedicated

166
00:06:45,690 --> 00:06:47,570
for use by blind
people don't have

167
00:06:47,570 --> 00:06:48,870
any kind of visual feedback.

168
00:06:48,870 --> 00:06:50,740
They're really difficult to
learn the keyboard shortcuts

169
00:06:50,740 --> 00:06:51,240
for.

170
00:06:51,240 --> 00:06:52,900
You really need a
lot of training.

171
00:06:52,900 --> 00:06:54,840
But ChromeVox can be
picked up by a beginner

172
00:06:54,840 --> 00:06:57,310
in about a minute.

173
00:06:57,310 --> 00:06:57,920
All right.

174
00:06:57,920 --> 00:06:59,220
So my estimate is 30 seconds.

175
00:06:59,220 --> 00:07:02,840
There's probably a
bit of [INAUDIBLE].

176
00:07:02,840 --> 00:07:05,390
So as I said, keyboard shortcuts
really drive screen readers.

177
00:07:05,390 --> 00:07:12,000
So we have a set of modifier
keys we can refer to as cvox.

178
00:07:12,000 --> 00:07:13,030
You can configure it.

179
00:07:13,030 --> 00:07:15,800
It defaults to Control
Alt on Windows an Linux,

180
00:07:15,800 --> 00:07:19,940
Control Command on OS X, and
Search Shift on Chrome OS.

181
00:07:19,940 --> 00:07:22,280
And in Chrome OS, you can
turn it on at any time

182
00:07:22,280 --> 00:07:27,395
or turn it off with Control
Alt Z. Z And ChromeVox A,

183
00:07:27,395 --> 00:07:31,620
A will temporarily turn the
ChromeVox feedback on or off

184
00:07:31,620 --> 00:07:35,170
if you have the extension
installed in Chrome.

185
00:07:35,170 --> 00:07:37,270
So the way you
actually use it &mdash; this

186
00:07:37,270 --> 00:07:39,420
is the way I will test
things for accessibility

187
00:07:39,420 --> 00:07:42,580
as an extremely novice
screen reader user.

188
00:07:42,580 --> 00:07:45,170
So use the ChromeVox
keys and up and down

189
00:07:45,170 --> 00:07:46,750
to navigate through the page.

190
00:07:46,750 --> 00:07:49,580
So this is what I was doing
in the demo a minute ago.

191
00:07:49,580 --> 00:07:51,650
ChromeVox Space
will force a click,

192
00:07:51,650 --> 00:07:53,660
so that this is how
you click things

193
00:07:53,660 --> 00:07:55,030
when you don't have a mouse.

194
00:07:55,030 --> 00:07:57,919
Control by itself will make
ChromeVox stop talking.

195
00:07:57,919 --> 00:08:00,210
And if anyone's curious what
the search command I used,

196
00:08:00,210 --> 00:08:01,793
it's actually ChromeVox
forward slash.

197
00:08:01,793 --> 00:08:04,630

198
00:08:04,630 --> 00:08:07,260
So on mobile devices, the
story's a little bit different.

199
00:08:07,260 --> 00:08:08,730
Obviously, you're not
going to have a keyboard.

200
00:08:08,730 --> 00:08:11,021
You're not going to have all
these hundreds of keyboard

201
00:08:11,021 --> 00:08:11,660
shortcuts.

202
00:08:11,660 --> 00:08:14,250
But what you do have
is a touch screen.

203
00:08:14,250 --> 00:08:18,690
So what they will do
is use their finger

204
00:08:18,690 --> 00:08:20,440
to touch the screen
and explore &mdash;

205
00:08:20,440 --> 00:08:21,740
[DING]

206
00:08:21,740 --> 00:08:23,270
OK.

207
00:08:23,270 --> 00:08:25,120
Explore the screen,
and it will read out

208
00:08:25,120 --> 00:08:27,080
whatever they have touched.

209
00:08:27,080 --> 00:08:29,287
So in this case, we
can imagine a user

210
00:08:29,287 --> 00:08:30,495
exploring the same interface.

211
00:08:30,495 --> 00:08:31,643
[DING]

212
00:08:31,643 --> 00:08:33,059
I really don't
know that sound is.

213
00:08:33,059 --> 00:08:33,559
Sorry.

214
00:08:33,559 --> 00:08:36,890

215
00:08:36,890 --> 00:08:39,187
Exploring the interface,
finding a button, an OK button

216
00:08:39,187 --> 00:08:40,020
and a Cancel button.

217
00:08:40,020 --> 00:08:44,100
And this time, they've
clicked the Cancel button.

218
00:08:44,100 --> 00:08:47,647
So TalkBack is built in
on all Android devices.

219
00:08:47,647 --> 00:08:49,730
You can turn it on from
the accessibility settings

220
00:08:49,730 --> 00:08:52,990
if you want to try it out.

221
00:08:52,990 --> 00:08:56,042
So then you'll get
a short tutorial

222
00:08:56,042 --> 00:08:57,500
on how to use the
touch exploration

223
00:08:57,500 --> 00:08:59,083
feature like I was
just talking about.

224
00:08:59,083 --> 00:09:02,241

225
00:09:02,241 --> 00:09:02,740
So yeah.

226
00:09:02,740 --> 00:09:04,920
And in this case,
double tapping will

227
00:09:04,920 --> 00:09:07,310
send &mdash; I think it's
actually a click event,

228
00:09:07,310 --> 00:09:11,190
but it may as well
be a touch event.

229
00:09:11,190 --> 00:09:16,370
And that'll allow the user to
actually interact with things.

230
00:09:16,370 --> 00:09:18,370
On Android, you also
have BrailleBack.

231
00:09:18,370 --> 00:09:20,490
This needs to be installed
from the Play store.

232
00:09:20,490 --> 00:09:22,840
But that will allow
the Android device

233
00:09:22,840 --> 00:09:24,960
to pair with a braille device.

234
00:09:24,960 --> 00:09:26,960
So what I've shown
here is looking

235
00:09:26,960 --> 00:09:29,740
at the Chrome Dev Summit
site using BrailleBack

236
00:09:29,740 --> 00:09:32,030
and with the on
screen braille display

237
00:09:32,030 --> 00:09:37,030
to simulate what the
braille device will display.

238
00:09:37,030 --> 00:09:40,534
So you can see that it's pretty
similar to the spoken feedback,

239
00:09:40,534 --> 00:09:42,950
except it will have all these
abbreviations so that it can

240
00:09:42,950 --> 00:09:47,760
fit more information
into a shorter space.

241
00:09:47,760 --> 00:09:48,450
All right.

242
00:09:48,450 --> 00:09:50,130
So what can you
actually do to improve

243
00:09:50,130 --> 00:09:53,340
the accessibility of your site?

244
00:09:53,340 --> 00:09:55,760
Start off with the design.

245
00:09:55,760 --> 00:09:57,860
Design with diverse
users in mind.

246
00:09:57,860 --> 00:10:01,780
So when you're looking at how
to create your interactions,

247
00:10:01,780 --> 00:10:03,280
think about how a
keyboard only user

248
00:10:03,280 --> 00:10:04,310
will interact with your app.

249
00:10:04,310 --> 00:10:05,684
Don't assume that
someone's going

250
00:10:05,684 --> 00:10:07,720
to be able to perform
a hover interaction.

251
00:10:07,720 --> 00:10:09,840
And in fact, someone on
a phone is probably not

252
00:10:09,840 --> 00:10:12,446
going to be able to perform
a hover interaction either.

253
00:10:12,446 --> 00:10:13,820
How is a screen
reader user going

254
00:10:13,820 --> 00:10:15,210
to interact with your site?

255
00:10:15,210 --> 00:10:18,530
So this means you need to
think about what the text

256
00:10:18,530 --> 00:10:20,740
alternative, what the
label is for everything.

257
00:10:20,740 --> 00:10:22,400
What's going to be
read out when you

258
00:10:22,400 --> 00:10:23,810
focused on a particular element?

259
00:10:23,810 --> 00:10:25,274
Is it just going to say, div?

260
00:10:25,274 --> 00:10:26,940
Do you have images
will all of the text?

261
00:10:26,940 --> 00:10:28,270
That kind of thing.

262
00:10:28,270 --> 00:10:30,470
And finally, how adaptable
is your interface?

263
00:10:30,470 --> 00:10:34,020
If something is viewed via
some kind of assistive device

264
00:10:34,020 --> 00:10:37,680
or viewed maybe by a text only
device, is it going to work?

265
00:10:37,680 --> 00:10:41,320
Or is it just going
to fail horribly?

266
00:10:41,320 --> 00:10:44,380
So again, ensure that you
have a good keyboard only user

267
00:10:44,380 --> 00:10:45,360
experience.

268
00:10:45,360 --> 00:10:47,440
And what does this
actually look like?

269
00:10:47,440 --> 00:10:49,630
Firstly, I shouldn't
need to say this.

270
00:10:49,630 --> 00:10:52,110
But use standard widgets
wherever possible.

271
00:10:52,110 --> 00:10:58,544
They come with built
in keyboard handling.

272
00:10:58,544 --> 00:11:00,210
So the Polymer talk
yesterday went a bit

273
00:11:00,210 --> 00:11:04,980
into what you get for free
with standard elements.

274
00:11:04,980 --> 00:11:06,660
Use or extend good
custom elements

275
00:11:06,660 --> 00:11:08,620
with built in keyboard controls.

276
00:11:08,620 --> 00:11:11,110
So when you can't
use standard widgets,

277
00:11:11,110 --> 00:11:13,300
or you want something
that looks a bit different

278
00:11:13,300 --> 00:11:16,610
or behaves a bit differently,
use good custom elements

279
00:11:16,610 --> 00:11:18,240
or write your own
good custom elements

280
00:11:18,240 --> 00:11:19,380
with keyboard handling.

281
00:11:19,380 --> 00:11:21,000
So I'll get into
what you need to do

282
00:11:21,000 --> 00:11:23,710
to rollout yourself in a minute.

283
00:11:23,710 --> 00:11:25,060
All right.

284
00:11:25,060 --> 00:11:27,781
So if you're writing
your own elements,

285
00:11:27,781 --> 00:11:29,280
whether you're using
custom elements

286
00:11:29,280 --> 00:11:32,660
or whether you're just writing
something from scratch,

287
00:11:32,660 --> 00:11:34,400
use tabindex.

288
00:11:34,400 --> 00:11:36,150
That'll make things focusable.

289
00:11:36,150 --> 00:11:38,360
So if you have something
which is a click target

290
00:11:38,360 --> 00:11:41,300
but isn't focusable,
screen reader

291
00:11:41,300 --> 00:11:44,135
may actually have
difficulties using it.

292
00:11:44,135 --> 00:11:45,510
Plus, someone
who's keyboard only

293
00:11:45,510 --> 00:11:46,718
will never be able to use it.

294
00:11:46,718 --> 00:11:48,570
I assume you all know
how to use tabindex,

295
00:11:48,570 --> 00:11:50,980
so I won't get into that.

296
00:11:50,980 --> 00:11:52,940
And handle keyboard
events wherever

297
00:11:52,940 --> 00:11:55,580
you handle click
or touch events.

298
00:11:55,580 --> 00:12:00,100
And if you want to know
which keys to listen for,

299
00:12:00,100 --> 00:12:01,921
follow established user
experience patterns

300
00:12:01,921 --> 00:12:03,545
for the platform that
you're targeting.

301
00:12:03,545 --> 00:12:06,590

302
00:12:06,590 --> 00:12:07,470
All right.

303
00:12:07,470 --> 00:12:09,640
This is something we may
not necessarily think of,

304
00:12:09,640 --> 00:12:11,280
but it's actually
really irritating

305
00:12:11,280 --> 00:12:13,720
if you're trying to use
an app keyboard only.

306
00:12:13,720 --> 00:12:14,890
Manage focus.

307
00:12:14,890 --> 00:12:17,110
So make sure that focus
is in a sensible order

308
00:12:17,110 --> 00:12:18,990
with the tabindex property.

309
00:12:18,990 --> 00:12:20,650
Make focus visible.

310
00:12:20,650 --> 00:12:23,450
So don't make your user play
find-the-focused-element.

311
00:12:23,450 --> 00:12:25,220
So what does that
game look like?

312
00:12:25,220 --> 00:12:26,249
It looks like this.

313
00:12:26,249 --> 00:12:27,540
And I'm sorry to pick on Gmail.

314
00:12:27,540 --> 00:12:29,206
It's just that I use
Gmail all the time,

315
00:12:29,206 --> 00:12:30,810
and this really bugs me.

316
00:12:30,810 --> 00:12:32,940
Where's the focus here?

317
00:12:32,940 --> 00:12:34,970
You can see it if
you really squint.

318
00:12:34,970 --> 00:12:38,750
It's actually right there.

319
00:12:38,750 --> 00:12:41,800
If you're showing a pop up
or a modal dialog and so on,

320
00:12:41,800 --> 00:12:44,840
move focus within the
pop up when your open it.

321
00:12:44,840 --> 00:12:47,100
So call focus from JavaScript.

322
00:12:47,100 --> 00:12:48,550
And move focus
back to the element

323
00:12:48,550 --> 00:12:52,070
that triggered the
pop up on close.

324
00:12:52,070 --> 00:12:54,605
So I've clicked my focused
element, or I pressed Enter.

325
00:12:54,605 --> 00:12:55,625
And it showed a pop up.

326
00:12:55,625 --> 00:12:56,250
So that's good.

327
00:12:56,250 --> 00:12:58,581
It had keyboard handling.

328
00:12:58,581 --> 00:12:59,497
Now where's the focus?

329
00:12:59,497 --> 00:13:02,360

330
00:13:02,360 --> 00:13:03,570
It is actually in the pop up.

331
00:13:03,570 --> 00:13:04,690
So that's cool.

332
00:13:04,690 --> 00:13:06,250
However, now when
I close the pop up,

333
00:13:06,250 --> 00:13:07,880
it goes to a random
location in Gmail

334
00:13:07,880 --> 00:13:11,070
that I haven't actually figured
out what the logic is yet.

335
00:13:11,070 --> 00:13:12,690
OK.

336
00:13:12,690 --> 00:13:15,830
Next step, express the
semantics of your interface.

337
00:13:15,830 --> 00:13:17,716
So as I keep saying,
use standard widgets

338
00:13:17,716 --> 00:13:19,090
wherever possible
because they're

339
00:13:19,090 --> 00:13:21,400
going to have the
semantics built in.

340
00:13:21,400 --> 00:13:23,090
Or use well written
custom elements

341
00:13:23,090 --> 00:13:25,140
which are handling this for you.

342
00:13:25,140 --> 00:13:27,390
And again, if you're writing
your own custom elements,

343
00:13:27,390 --> 00:13:29,060
or you're writing
things from scratch,

344
00:13:29,060 --> 00:13:30,905
use ARIA to express
the semantics.

345
00:13:30,905 --> 00:13:33,450

346
00:13:33,450 --> 00:13:33,950
All right.

347
00:13:33,950 --> 00:13:37,210
So this is a
non-semantic interface.

348
00:13:37,210 --> 00:13:40,770
It's a div that has
an onclick alert,

349
00:13:40,770 --> 00:13:44,060
onclick F This is much better.

350
00:13:44,060 --> 00:13:45,390
It's a bottom.

351
00:13:45,390 --> 00:13:49,150
It still has an
onclick listener.

352
00:13:49,150 --> 00:13:52,530
But it's going to actually
have a tabindex now.

353
00:13:52,530 --> 00:13:55,990
It's going to respond
to keyboard events.

354
00:13:55,990 --> 00:13:59,830
And we have a custom
element, sort of,

355
00:13:59,830 --> 00:14:01,200
that we've given an ARIA role.

356
00:14:01,200 --> 00:14:03,783
So that is now going to also be
presented to the screen reader

357
00:14:03,783 --> 00:14:04,750
as a button.

358
00:14:04,750 --> 00:14:07,520
But that's not really
the whole story.

359
00:14:07,520 --> 00:14:10,080
You still need to make
it focusable and handle

360
00:14:10,080 --> 00:14:12,034
key events.

361
00:14:12,034 --> 00:14:14,450
So what's ARIA, this ARIA thing
that I keep talking about?

362
00:14:14,450 --> 00:14:17,610
It stands for Accessible
Rich Internet Applications.

363
00:14:17,610 --> 00:14:20,490
It's a W3C standard.

364
00:14:20,490 --> 00:14:23,510
And it allows you to express
roles, states, and properties

365
00:14:23,510 --> 00:14:26,820
for elements via
HTML attributes.

366
00:14:26,820 --> 00:14:32,100
So we saw this role attribute,
that's an ARIA attribute.

367
00:14:32,100 --> 00:14:35,770
So what that does &mdash; the reason
I keep going on about semantics

368
00:14:35,770 --> 00:14:40,410
is that screen readers
are all about semantics.

369
00:14:40,410 --> 00:14:44,200
It's going to view a
modified version of the DOM

370
00:14:44,200 --> 00:14:47,212
that just tells it
what the role and what

371
00:14:47,212 --> 00:14:48,420
the text is for each element.

372
00:14:48,420 --> 00:14:49,690
It's not interested in images.

373
00:14:49,690 --> 00:14:52,700
It's not interested in layout.

374
00:14:52,700 --> 00:14:55,350
And so we see here is
we've applied a role

375
00:14:55,350 --> 00:15:00,460
to this div and an ARIA label,
which is an ARIA property.

376
00:15:00,460 --> 00:15:02,765
And that gets rendered
to the screen reader

377
00:15:02,765 --> 00:15:04,900
as an actual button
and allows the user

378
00:15:04,900 --> 00:15:07,690
to interact with this as
if it was an actual button.

379
00:15:07,690 --> 00:15:10,868

380
00:15:10,868 --> 00:15:12,356
OK.

381
00:15:12,356 --> 00:15:13,105
Thanks, Presently.

382
00:15:13,105 --> 00:15:16,610

383
00:15:16,610 --> 00:15:19,390
We have a native button.

384
00:15:19,390 --> 00:15:22,690
And as we saw in the
Polymer talk yesterday,

385
00:15:22,690 --> 00:15:24,390
this comes out
looking like a button.

386
00:15:24,390 --> 00:15:27,810
And it comes out
indirect with a &mdash; sorry,

387
00:15:27,810 --> 00:15:30,430
with a JavaScript
DOM object, which

388
00:15:30,430 --> 00:15:32,170
allows you access all
the attributes you

389
00:15:32,170 --> 00:15:34,950
would expect for a button.

390
00:15:34,950 --> 00:15:37,540
It also comes out with
an accessibility tree,

391
00:15:37,540 --> 00:15:41,860
which is mangled
because reasons.

392
00:15:41,860 --> 00:15:44,360
That tells the screen reader
that there's a button.

393
00:15:44,360 --> 00:15:49,079
And it has a press state, an
on press state, and so on.

394
00:15:49,079 --> 00:15:51,370
For custom elements, you need
to do a little more work.

395
00:15:51,370 --> 00:15:55,150
So in this case, the
custom element author

396
00:15:55,150 --> 00:15:59,600
has made it so that the custom
element will write these ARIA

397
00:15:59,600 --> 00:16:02,910
role and attribute
when the custom

398
00:16:02,910 --> 00:16:04,850
element is rendered to the page.

399
00:16:04,850 --> 00:16:07,040
So then we end up with
a similar situation

400
00:16:07,040 --> 00:16:09,580
as we do for native
elements, where

401
00:16:09,580 --> 00:16:10,770
we have a visual rendering.

402
00:16:10,770 --> 00:16:13,010
We have a DOM
object that lets us

403
00:16:13,010 --> 00:16:16,730
access the attributes that we
want and interact with them

404
00:16:16,730 --> 00:16:19,790
and get a good
developer experience

405
00:16:19,790 --> 00:16:23,030
but also have an accessibility
tree, which makes sense

406
00:16:23,030 --> 00:16:26,120
to a screen reader or
braille display user.

407
00:16:26,120 --> 00:16:26,620
OK.

408
00:16:26,620 --> 00:16:33,410
So how can you actually assess
the accessibility of your site?

409
00:16:33,410 --> 00:16:35,250
Firstly, try it without a mouse.

410
00:16:35,250 --> 00:16:36,900
Try it without a track pad.

411
00:16:36,900 --> 00:16:39,720
I saw this great tweet
from someone saying,

412
00:16:39,720 --> 00:16:44,200
the track pad on my MacBook
Air broke, and I'm on a plane.

413
00:16:44,200 --> 00:16:46,340
To all site
developers everywhere,

414
00:16:46,340 --> 00:16:49,380
please fix your accessibility.

415
00:16:49,380 --> 00:16:51,870
Try out a screen reader.

416
00:16:51,870 --> 00:16:53,920
The way you use a
screen reader will not

417
00:16:53,920 --> 00:16:56,750
be the same as the way an
experienced screen reader user

418
00:16:56,750 --> 00:16:57,550
uses it.

419
00:16:57,550 --> 00:17:00,510
But it will give you an idea
of what things are labeled,

420
00:17:00,510 --> 00:17:03,220
what things are accessible
via the screen reader,

421
00:17:03,220 --> 00:17:05,650
when focus has gone horribly
wrong, that kind of thing.

422
00:17:05,650 --> 00:17:09,210
It's worth just trying it out.

423
00:17:09,210 --> 00:17:13,300
And you can also do
automated testing.

424
00:17:13,300 --> 00:17:15,950
So there's this
extension for Chrome

425
00:17:15,950 --> 00:17:18,640
called Accessibility
Developer Tools.

426
00:17:18,640 --> 00:17:20,109
And it's also a
JavaScript library,

427
00:17:20,109 --> 00:17:22,839
so you can use it in
your continuous testing.

428
00:17:22,839 --> 00:17:26,970
And I'll give you a
demonstration of that.

429
00:17:26,970 --> 00:17:28,690
All right.

430
00:17:28,690 --> 00:17:31,280
It comes up in the Audits tab.

431
00:17:31,280 --> 00:17:31,850
Yup.

432
00:17:31,850 --> 00:17:35,680
It comes up in the Audits
tab of the developer tools.

433
00:17:35,680 --> 00:17:37,480
So it just comes up here.

434
00:17:37,480 --> 00:17:40,120
I've run it already on
this page obviously.

435
00:17:40,120 --> 00:17:43,100
And it's come up with
a couple of &mdash; well,

436
00:17:43,100 --> 00:17:47,460
many errors for this page, a
couple I'd like to highlight.

437
00:17:47,460 --> 00:17:48,370
So we have this here.

438
00:17:48,370 --> 00:17:50,890
It says &mdash; it's unfortunately
cropped by the page.

439
00:17:50,890 --> 00:17:54,270
But it says, these elements are
focusable but either invisible

440
00:17:54,270 --> 00:17:56,430
or obscured by another element.

441
00:17:56,430 --> 00:18:00,390
So what's happened here is we
have focusable elements that

442
00:18:00,390 --> 00:18:04,609
are behind this modal dialogue,
which for a screen reader user

443
00:18:04,609 --> 00:18:06,400
are going to come up
as completely visible,

444
00:18:06,400 --> 00:18:09,612
even though to a sighted user
they're obviously inaccessible.

445
00:18:09,612 --> 00:18:11,570
It's going to be a really
confusing experience.

446
00:18:11,570 --> 00:18:13,240
And what we want
to do is make sure

447
00:18:13,240 --> 00:18:15,364
that everything that is
hidden behind this dialogue

448
00:18:15,364 --> 00:18:17,630
has an ARIA attribute,
which will hide it

449
00:18:17,630 --> 00:18:18,960
from a screen reader.

450
00:18:18,960 --> 00:18:22,080
You possibly also want to set
the tabindex to negative 1

451
00:18:22,080 --> 00:18:25,010
to make sure that it's
not part of the tab order.

452
00:18:25,010 --> 00:18:30,020
And then here we have &mdash; it
says text elements should

453
00:18:30,020 --> 00:18:32,000
have a reasonable
contrast ratio.

454
00:18:32,000 --> 00:18:34,240
So when I was talking
earlier about users

455
00:18:34,240 --> 00:18:37,170
with low vision or
even just anyone

456
00:18:37,170 --> 00:18:39,950
using a mobile device
in bright sunlight,

457
00:18:39,950 --> 00:18:42,510
low contrast text
is a real pain.

458
00:18:42,510 --> 00:18:46,109
And so I'll just demonstrate
a neat feature that it has,

459
00:18:46,109 --> 00:18:48,400
which is that I can look at
this in the Elements panel.

460
00:18:48,400 --> 00:18:50,430
And it'll actually come
up with suggestions

461
00:18:50,430 --> 00:18:52,710
for colors I could use instead.

462
00:18:52,710 --> 00:18:55,670
So yeah, slightly
darker and much darker.

463
00:18:55,670 --> 00:18:58,600

464
00:18:58,600 --> 00:19:03,536
And finally, so here &mdash;
one thing that's

465
00:19:03,536 --> 00:19:04,910
always bugged me
about using ARIA

466
00:19:04,910 --> 00:19:07,664
is that when you
write incorrect HTML5,

467
00:19:07,664 --> 00:19:09,080
the DevTools is
going to tell you.

468
00:19:09,080 --> 00:19:11,320
And it's going to
come up as an error.

469
00:19:11,320 --> 00:19:13,690
When you write incorrect
ARIA, you really

470
00:19:13,690 --> 00:19:16,330
have no feedback until you try
using it with a screen reader

471
00:19:16,330 --> 00:19:18,060
and discover that
it doesn't work.

472
00:19:18,060 --> 00:19:20,959
So here we have a progress bar.

473
00:19:20,959 --> 00:19:22,750
And I'll show you what's
actually happened.

474
00:19:22,750 --> 00:19:25,380

475
00:19:25,380 --> 00:19:29,359
So I've tried to set
the value to 80%,

476
00:19:29,359 --> 00:19:30,900
but it turns out
ARIA value now takes

477
00:19:30,900 --> 00:19:33,140
a number instead of a string.

478
00:19:33,140 --> 00:19:38,010
So when I try and view that
with ChromeVox &mdash; actually, no.

479
00:19:38,010 --> 00:19:39,091
I can't do that.

480
00:19:39,091 --> 00:19:41,090
Anyway, when I try and
view that with ChromeVox,

481
00:19:41,090 --> 00:19:43,690
it actually says,
progress not a number

482
00:19:43,690 --> 00:19:45,870
percent, which is
really embarrassing.

483
00:19:45,870 --> 00:19:48,180
So I can actually fix that.

484
00:19:48,180 --> 00:19:50,656

485
00:19:50,656 --> 00:19:52,405
And now it's telling
me that it's correct.

486
00:19:52,405 --> 00:19:58,780

487
00:19:58,780 --> 00:19:59,280
All right.

488
00:19:59,280 --> 00:20:03,000
So just to sum up,
improving accessibility

489
00:20:03,000 --> 00:20:06,020
will almost always improve
the experience for everyone.

490
00:20:06,020 --> 00:20:08,394
Even when you're looking at
screen reader accessibility,

491
00:20:08,394 --> 00:20:10,310
what you're doing is
expressing your interface

492
00:20:10,310 --> 00:20:13,450
more semantically, which will
improve the maintainability

493
00:20:13,450 --> 00:20:14,740
and testability of your code.

494
00:20:14,740 --> 00:20:16,281
There are testing
tools that actually

495
00:20:16,281 --> 00:20:18,490
look at the accessibility
tree in order

496
00:20:18,490 --> 00:20:22,380
to create interaction tests.

497
00:20:22,380 --> 00:20:25,290
Keep diverse users in mind
at all stages of development.

498
00:20:25,290 --> 00:20:27,940
So when you're designing, when
you're building your interface,

499
00:20:27,940 --> 00:20:29,880
when you're testing,
make sure that you're

500
00:20:29,880 --> 00:20:33,840
testing the interactions
that anyone would use.

501
00:20:33,840 --> 00:20:35,330
Have a good keyboard only story.

502
00:20:35,330 --> 00:20:38,994
If you do one thing,
please do that.

503
00:20:38,994 --> 00:20:40,910
Express your interface
semantically as well as

504
00:20:40,910 --> 00:20:41,520
visually.

505
00:20:41,520 --> 00:20:43,280
I think I've covered that.

506
00:20:43,280 --> 00:20:46,760
Use automated and manual
accessibility testing.

507
00:20:46,760 --> 00:20:49,700
So I demonstrated a bit of
how to do both of those.

508
00:20:49,700 --> 00:20:51,540
And finally, listen
to your users.

509
00:20:51,540 --> 00:20:54,000
If you have users filing
accessibility bugs,

510
00:20:54,000 --> 00:20:55,180
follow up with them.

511
00:20:55,180 --> 00:20:58,540
Figure out what's going wrong.

512
00:20:58,540 --> 00:20:59,940
And finally, we have some links.

513
00:20:59,940 --> 00:21:02,000
So a bunch of screen
readers that you can try.

514
00:21:02,000 --> 00:21:03,670
I demonstrated ChromeVox.

515
00:21:03,670 --> 00:21:08,230
There's also a screen
reader built into &mdash; I

516
00:21:08,230 --> 00:21:10,290
showed you some
screenshots of TalkBack.

517
00:21:10,290 --> 00:21:14,210
There are screen readers built
into every Mac desktop and iOS

518
00:21:14,210 --> 00:21:15,500
device, which is VoiceOver.

519
00:21:15,500 --> 00:21:18,040
So you can use that as
well and a few other ones.

520
00:21:18,040 --> 00:21:18,990
So these are all free.

521
00:21:18,990 --> 00:21:21,760
A bunch of them are open source.

522
00:21:21,760 --> 00:21:25,890
And so as much as we were
writing on the Web Content

523
00:21:25,890 --> 00:21:30,220
Accessibility Guidelines,
actually worth a read.

524
00:21:30,220 --> 00:21:33,160
The WAI-ARIA spec is there.

525
00:21:33,160 --> 00:21:36,430
The accessibility developer
tools extension and library

526
00:21:36,430 --> 00:21:36,930
are there.

527
00:21:36,930 --> 00:21:38,555
You can also search
for them on Google.

528
00:21:38,555 --> 00:21:40,630
They're pretty high up
in the search results.

529
00:21:40,630 --> 00:21:42,390
And that's all I have.

530
00:21:42,390 --> 00:21:43,620
Thanks a lot.

531
00:21:43,620 --> 00:21:50,370
[APPLAUSE]

