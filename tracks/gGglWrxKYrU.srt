1
00:00:00,000 --> 00:00:01,820

2
00:00:01,820 --> 00:00:03,440
RYAN BOYD: So I'm going to
start off by giving an

3
00:00:03,440 --> 00:00:05,020
introduction to the
cloud platform.

4
00:00:05,020 --> 00:00:09,020
Like I mentioned, this is in a
general sense how the cloud

5
00:00:09,020 --> 00:00:11,860
platform works, how the
pieces fit together.

6
00:00:11,860 --> 00:00:15,270
And we're also going to invite
the folks up from Leanplum

7
00:00:15,270 --> 00:00:17,790
towards the end of this session
to talk about how they

8
00:00:17,790 --> 00:00:21,950
do A/B testing to do mobile app
optimization and how they

9
00:00:21,950 --> 00:00:24,620
build that all on top of
the cloud platform.

10
00:00:24,620 --> 00:00:27,820
Although we have some
third-party presenters coming

11
00:00:27,820 --> 00:00:30,310
up here, game developers,
they're talking a little bit

12
00:00:30,310 --> 00:00:31,190
about their products.

13
00:00:31,190 --> 00:00:33,200
But they're also going to really
dive into and give you

14
00:00:33,200 --> 00:00:35,610
some best practices
around how you can

15
00:00:35,610 --> 00:00:37,600
build apps on the platform.

16
00:00:37,600 --> 00:00:39,300
If you have any questions, we're
going to save some time

17
00:00:39,300 --> 00:00:41,100
for Q&A at the end.

18
00:00:41,100 --> 00:00:43,110
But you can also reach
out to us online.

19
00:00:43,110 --> 00:00:46,820
There is my Google+ handle, as
well as my Twitter handle.

20
00:00:46,820 --> 00:00:48,930
And feel free to ask
me any questions.

21
00:00:48,930 --> 00:00:51,340
We'll also be here throughout
the day and available at lunch

22
00:00:51,340 --> 00:00:54,330
and that sort of thing.

23
00:00:54,330 --> 00:00:55,910
So the Google Cloud Platform--

24
00:00:55,910 --> 00:00:59,070
the Google Cloud Platform is
all about using Google's

25
00:00:59,070 --> 00:01:01,300
underlying infrastructure.

26
00:01:01,300 --> 00:01:03,240
Google's underlying
infrastructure is really the

27
00:01:03,240 --> 00:01:05,920
backbone which makes
Google great.

28
00:01:05,920 --> 00:01:09,650
We've put a lot of time invested
into how do we build

29
00:01:09,650 --> 00:01:13,490
better data centers, how do we
build faster computers, how we

30
00:01:13,490 --> 00:01:17,810
can push computer science
further than it's gone before.

31
00:01:17,810 --> 00:01:20,200
We've spent the last 14 years
doing this and building up

32
00:01:20,200 --> 00:01:22,410
data center footprints around
the world and building up a

33
00:01:22,410 --> 00:01:25,620
lot of expertise into how to
run those data centers.

34
00:01:25,620 --> 00:01:28,290
And not only are those data
centers fast, efficient,

35
00:01:28,290 --> 00:01:29,790
secure, and things like that.

36
00:01:29,790 --> 00:01:33,080
But they're also quite pretty,
as you can see here.

37
00:01:33,080 --> 00:01:34,820
These are pictures taken--

38
00:01:34,820 --> 00:01:38,410
there's a "Wired" article you
can look up for Wired Google

39
00:01:38,410 --> 00:01:39,510
data centers.

40
00:01:39,510 --> 00:01:41,610
There's a lot of great insights
into how our data

41
00:01:41,610 --> 00:01:45,640
centers work in that article and
some more pretty pictures.

42
00:01:45,640 --> 00:01:46,890
Well that was very nice of it.

43
00:01:46,890 --> 00:01:50,380

44
00:01:50,380 --> 00:01:52,746
Let's see if we can--

45
00:01:52,746 --> 00:01:55,330
I have to remember to disable
Software Update here.

46
00:01:55,330 --> 00:02:05,960

47
00:02:05,960 --> 00:02:08,560
There we go.

48
00:02:08,560 --> 00:02:09,660
So there's a "Wired" article.

49
00:02:09,660 --> 00:02:12,910
Check it out, read up about our
data centers, but we have

50
00:02:12,910 --> 00:02:15,750
built up a lot of expertise over
the last 14 years with

51
00:02:15,750 --> 00:02:16,800
these data centers.

52
00:02:16,800 --> 00:02:19,890
And not only have we built up
expertise in the hardware and

53
00:02:19,890 --> 00:02:22,120
the infrastructure that it
requires to run these data

54
00:02:22,120 --> 00:02:25,100
centers, we've also built up
expertise in the software--

55
00:02:25,100 --> 00:02:28,850
how we can create highly
scalable and reliable software

56
00:02:28,850 --> 00:02:32,380
that really uses the power
of Google's data centers.

57
00:02:32,380 --> 00:02:36,200
We've released a lot of that
software as academic white

58
00:02:36,200 --> 00:02:38,790
papers and open-source
projects.

59
00:02:38,790 --> 00:02:42,810
As well as commercial products
have actually implemented

60
00:02:42,810 --> 00:02:45,340
these academic white papers.

61
00:02:45,340 --> 00:02:50,100
But we've also then taken that
knowledge and made this

62
00:02:50,100 --> 00:02:52,800
software available to
you as services.

63
00:02:52,800 --> 00:02:55,150
And these services are
what the Google Cloud

64
00:02:55,150 --> 00:02:57,550
Platform is all about.

65
00:02:57,550 --> 00:03:00,270
So I've broken up the services
on the cloud platform in three

66
00:03:00,270 --> 00:03:02,080
different blocks here.

67
00:03:02,080 --> 00:03:04,930
So we have compute, we have
storage, and then other types

68
00:03:04,930 --> 00:03:06,330
of services.

69
00:03:06,330 --> 00:03:08,950
On the compute side, this is
really where you can run your

70
00:03:08,950 --> 00:03:12,250
own software, where you can
develop software that runs on

71
00:03:12,250 --> 00:03:14,450
Google's infrastructure and
takes advantage of that

72
00:03:14,450 --> 00:03:15,590
experience.

73
00:03:15,590 --> 00:03:17,900
And we have two different
types here.

74
00:03:17,900 --> 00:03:20,390
The first that you'll see
mentioned is Compute Engine.

75
00:03:20,390 --> 00:03:22,860
Compute Engine is virtual
machines.

76
00:03:22,860 --> 00:03:24,950
So you can run any type
of software you want.

77
00:03:24,950 --> 00:03:26,710
You have the ultimate
in flexibility.

78
00:03:26,710 --> 00:03:29,460
You have Linux-based
virtual machines.

79
00:03:29,460 --> 00:03:31,670
If you have legacy software, if
you're building new things

80
00:03:31,670 --> 00:03:34,690
that require a lot of
specialized development,

81
00:03:34,690 --> 00:03:37,060
Compute Engine is
where it's at.

82
00:03:37,060 --> 00:03:38,760
But we've also developed
App Engine.

83
00:03:38,760 --> 00:03:41,790
And App Engine is our platform
as a service environment that

84
00:03:41,790 --> 00:03:43,970
allows you to build applications
without having to

85
00:03:43,970 --> 00:03:46,950
worry about the system
administration side, without

86
00:03:46,950 --> 00:03:49,300
having to worry about
maintaining the servers and

87
00:03:49,300 --> 00:03:51,660
dealing with downtime or
anything like that.

88
00:03:51,660 --> 00:03:55,450
All you have to worry about is
writing the application logic

89
00:03:55,450 --> 00:03:58,560
that makes your game
or business great.

90
00:03:58,560 --> 00:04:00,880
You can concentrate on
that while Google

91
00:04:00,880 --> 00:04:02,120
concentrates on the rest.

92
00:04:02,120 --> 00:04:04,370
And we're going to be talking
about that and the different

93
00:04:04,370 --> 00:04:06,180
services that are available
to you as part of

94
00:04:06,180 --> 00:04:08,590
App Engine here shortly.

95
00:04:08,590 --> 00:04:11,910
Then of course, storage is
key to most applications.

96
00:04:11,910 --> 00:04:14,550
Most applications just don't
need the business logic.

97
00:04:14,550 --> 00:04:19,019
They need storage to store
underlying user data or other

98
00:04:19,019 --> 00:04:19,810
types of data.

99
00:04:19,810 --> 00:04:22,240
And we have three different
types of storage offerings

100
00:04:22,240 --> 00:04:23,540
that I've pictured here.

101
00:04:23,540 --> 00:04:24,850
First is cloud storage.

102
00:04:24,850 --> 00:04:27,430
Objects-- if you have image
assets, video assets, things

103
00:04:27,430 --> 00:04:30,440
like that, that you need to
serve to your users, you can

104
00:04:30,440 --> 00:04:33,980
store them as objects
and have them

105
00:04:33,980 --> 00:04:36,440
available around the world.

106
00:04:36,440 --> 00:04:39,840
You can also do a relational
database on top of the Google

107
00:04:39,840 --> 00:04:40,540
Cloud Platform.

108
00:04:40,540 --> 00:04:42,330
That's what Cloud
SQL is about.

109
00:04:42,330 --> 00:04:46,250
It's a MySQL-based relational
database that gives you high

110
00:04:46,250 --> 00:04:48,900
availability of your relational
database.

111
00:04:48,900 --> 00:04:51,510
But if you truly want to
scale, that's what the

112
00:04:51,510 --> 00:04:52,730
datastore is all about.

113
00:04:52,730 --> 00:04:55,800
It's a NoSQL database that
scales really, really well for

114
00:04:55,800 --> 00:05:01,080
applications that need to handle
lots of user traffic.

115
00:05:01,080 --> 00:05:03,780
And then in the services bucket
here, we have a variety

116
00:05:03,780 --> 00:05:06,070
of other services that
Google offers.

117
00:05:06,070 --> 00:05:09,220
Our goal is to really make
lives easier for you as

118
00:05:09,220 --> 00:05:10,120
developers.

119
00:05:10,120 --> 00:05:12,340
We wanted to make it faster
for you to build your

120
00:05:12,340 --> 00:05:15,800
applications, allow you to
concentrate on the core

121
00:05:15,800 --> 00:05:18,440
technology that makes your
applications great.

122
00:05:18,440 --> 00:05:21,760
And so these services handle a
lot of the common tasks, as

123
00:05:21,760 --> 00:05:24,610
well as those tasks that would
be difficult for developers to

124
00:05:24,610 --> 00:05:25,400
build on their own.

125
00:05:25,400 --> 00:05:30,940
So BigQuery allows you to crunch
terabytes of data for

126
00:05:30,940 --> 00:05:32,250
your application.

127
00:05:32,250 --> 00:05:35,050
Cloud Endpoints allows you
to build APIs on Google's

128
00:05:35,050 --> 00:05:38,410
infrastructure using the same
API infrastructure that we use

129
00:05:38,410 --> 00:05:42,190
for things like Google Drive
and YouTube and Google+.

130
00:05:42,190 --> 00:05:44,430
And then you have other things,
lower-level services,

131
00:05:44,430 --> 00:05:45,750
like caching and queuing.

132
00:05:45,750 --> 00:05:48,020
And we're going to talk about
some more here later.

133
00:05:48,020 --> 00:05:50,520
And then of course, the cloud
platform gives you access to a

134
00:05:50,520 --> 00:05:53,310
whole wide variety of other
Google services that you see

135
00:05:53,310 --> 00:05:55,040
pictured at the top right.

136
00:05:55,040 --> 00:05:58,880
And all of this is hosted on top
of Google's infrastructure

137
00:05:58,880 --> 00:06:01,580
and gives you the same sort of
reliability and security that

138
00:06:01,580 --> 00:06:03,530
Google expects for
its own services.

139
00:06:03,530 --> 00:06:07,020

140
00:06:07,020 --> 00:06:09,210
So I'm going to step through
each of these individual

141
00:06:09,210 --> 00:06:11,750
services now and talk to you
in a little bit more detail

142
00:06:11,750 --> 00:06:13,650
about these services.

143
00:06:13,650 --> 00:06:15,750
This is still an overview
presentation.

144
00:06:15,750 --> 00:06:18,950
You'll get more and more detail
later in the other

145
00:06:18,950 --> 00:06:21,790
sessions, as people go into how
to build games on these

146
00:06:21,790 --> 00:06:22,550
applications.

147
00:06:22,550 --> 00:06:25,600
But the first service I want to
talk to you about here is

148
00:06:25,600 --> 00:06:27,340
Google App Engine.

149
00:06:27,340 --> 00:06:29,400
Google App Engine is that
platform as a service

150
00:06:29,400 --> 00:06:29,725
environment.

151
00:06:29,725 --> 00:06:32,470
It's an opinionated framework
that allows you to build

152
00:06:32,470 --> 00:06:35,010
applications, while worrying
just about your application

153
00:06:35,010 --> 00:06:37,330
code and not worrying about
system administration and

154
00:06:37,330 --> 00:06:38,890
things like that.

155
00:06:38,890 --> 00:06:42,920
So our goal with App Engine is
make it easy for you to build,

156
00:06:42,920 --> 00:06:44,863
scale, and maintain
your applications.

157
00:06:44,863 --> 00:06:47,540

158
00:06:47,540 --> 00:06:51,630
On the easy to build side, we
have SDKs in a variety of

159
00:06:51,630 --> 00:06:53,310
different programming
languages.

160
00:06:53,310 --> 00:06:57,470
We have SDKs available in
Python, Java, and Go.

161
00:06:57,470 --> 00:06:59,460
And it provides a local
development server.

162
00:06:59,460 --> 00:07:02,220
That's one of the key things
that we decided was really

163
00:07:02,220 --> 00:07:05,270
important when we launched App
Engine was allow you to

164
00:07:05,270 --> 00:07:08,150
develop and iterate quickly
in your local environment.

165
00:07:08,150 --> 00:07:11,470
So you can run up a local
development server in Eclipse

166
00:07:11,470 --> 00:07:14,680
and do almost all the same
things that you can do if your

167
00:07:14,680 --> 00:07:17,120
application is deployed.

168
00:07:17,120 --> 00:07:20,310
And then of course, in making
it easy to build, it also

169
00:07:20,310 --> 00:07:22,900
means that we have to make it
easy for you to manage and

170
00:07:22,900 --> 00:07:24,870
understand what's going on
in your application.

171
00:07:24,870 --> 00:07:27,280
So there's great easy management
with the App Engine

172
00:07:27,280 --> 00:07:30,350
console and logs that really
provide you access to all the

173
00:07:30,350 --> 00:07:32,160
things that's going
on underneath the

174
00:07:32,160 --> 00:07:33,350
covers in App Engine.

175
00:07:33,350 --> 00:07:35,170
When exceptions are thrown,
you can easily dive

176
00:07:35,170 --> 00:07:36,420
into them, et cetera.

177
00:07:36,420 --> 00:07:38,790

178
00:07:38,790 --> 00:07:41,640
So the services, though, is
really what it's about when it

179
00:07:41,640 --> 00:07:44,410
comes to a platform
as a service.

180
00:07:44,410 --> 00:07:46,780
If you have to write every
line of code for your

181
00:07:46,780 --> 00:07:49,680
application, or use a lot of
the common libraries out

182
00:07:49,680 --> 00:07:53,770
there, but still run all the
services that your application

183
00:07:53,770 --> 00:07:56,480
requires, that means that
you have to spend a

184
00:07:56,480 --> 00:07:57,860
lot of extra time--

185
00:07:57,860 --> 00:07:59,930
a lot of extra time maintaining
those services.

186
00:07:59,930 --> 00:08:01,600
So things like Memcache--

187
00:08:01,600 --> 00:08:05,320
Memcache is something that you
can easily run yourself.

188
00:08:05,320 --> 00:08:08,940
But it's easy to run yourself
in a way to get it up and

189
00:08:08,940 --> 00:08:12,330
running, but it's not easy to
run day to day in a production

190
00:08:12,330 --> 00:08:13,390
environment.

191
00:08:13,390 --> 00:08:15,870
So we actually provide a
Memcache Service for you that

192
00:08:15,870 --> 00:08:19,710
allows you to optimize your
applications for performance.

193
00:08:19,710 --> 00:08:21,770
And we maintain all
those servers

194
00:08:21,770 --> 00:08:23,020
necessary for this to happen.

195
00:08:23,020 --> 00:08:25,420
You just have to write a handful
of lines of code.

196
00:08:25,420 --> 00:08:27,820
We also provide other things
like email support--

197
00:08:27,820 --> 00:08:29,530
makes it easy to send email.

198
00:08:29,530 --> 00:08:30,060
Images--

199
00:08:30,060 --> 00:08:32,730
if you want to scale or rotate
images and things like that,

200
00:08:32,730 --> 00:08:34,600
you can use the same
infrastructure that Google

201
00:08:34,600 --> 00:08:36,419
uses for that.

202
00:08:36,419 --> 00:08:39,740
The datastore we talked about--
there's XMPP support.

203
00:08:39,740 --> 00:08:42,650
Task queues is one of the
commonly used things.

204
00:08:42,650 --> 00:08:46,870
So if you have logic that you
want to run, but it doesn't

205
00:08:46,870 --> 00:08:49,680
necessarily need to run right
away, it can run later.

206
00:08:49,680 --> 00:08:53,120
There's task queues both in
a push and a pull fashion.

207
00:08:53,120 --> 00:08:55,490
So a lot of different types of
services that you can take

208
00:08:55,490 --> 00:08:58,830
advantage of that Google has
built for our own purposes and

209
00:08:58,830 --> 00:09:02,290
now we're opening up for you.

210
00:09:02,290 --> 00:09:05,320
Cloud Endpoints is probably one
of my favorite services

211
00:09:05,320 --> 00:09:06,780
that we're opening up.

212
00:09:06,780 --> 00:09:10,170
Cloud Endpoints takes advantage
of our internal API

213
00:09:10,170 --> 00:09:11,820
infrastructure.

214
00:09:11,820 --> 00:09:14,180
So when I started at Google
about six years ago, we had

215
00:09:14,180 --> 00:09:17,630
API infrastructure where it was
basically a common set of

216
00:09:17,630 --> 00:09:21,400
libraries for all the APIs to
build their APIs on top of.

217
00:09:21,400 --> 00:09:25,140
So the calendar API or the
contacts API were built on top

218
00:09:25,140 --> 00:09:27,210
of a common set of libraries.

219
00:09:27,210 --> 00:09:30,430
More recently, we've made it a
common service that all the

220
00:09:30,430 --> 00:09:32,950
Google product teams can
take advantage of.

221
00:09:32,950 --> 00:09:35,550
So when they build their APIs,
we have central API servers

222
00:09:35,550 --> 00:09:37,590
that manage all that
environment, make sure the

223
00:09:37,590 --> 00:09:40,850
protocol is the same, make sure
it's easy for developers,

224
00:09:40,850 --> 00:09:43,110
internally, to build
these APIs.

225
00:09:43,110 --> 00:09:45,780
But more recently, we've made
this same infrastructure

226
00:09:45,780 --> 00:09:46,650
available to you.

227
00:09:46,650 --> 00:09:50,960
So you can build Google-style
APIs on our infrastructure and

228
00:09:50,960 --> 00:09:53,570
take advantage of all that
knowledge that we've learned

229
00:09:53,570 --> 00:09:55,820
creating dozens and dozens
of APIs on the same

230
00:09:55,820 --> 00:09:58,010
infrastructure.

231
00:09:58,010 --> 00:10:00,850
So you can write your business
logic in Google App Engine.

232
00:10:00,850 --> 00:10:06,580
And then you can have clients in
Android or iOS or in Chrome

233
00:10:06,580 --> 00:10:08,680
and any browser, for
that matter.

234
00:10:08,680 --> 00:10:12,310
And those clients can access
your APIs that you've built

235
00:10:12,310 --> 00:10:16,970
with simple business logic
provided by App Engine.

236
00:10:16,970 --> 00:10:19,900
So here's what that business
logic requires.

237
00:10:19,900 --> 00:10:21,730
And this is why I included
this in the

238
00:10:21,730 --> 00:10:23,570
easy to build category.

239
00:10:23,570 --> 00:10:27,460
Because all you really need to
do to launch an API on Google,

240
00:10:27,460 --> 00:10:30,830
using Cloud Endpoints, is
annotate some of your code.

241
00:10:30,830 --> 00:10:33,640
You annotate your code to
say, hey this is an API.

242
00:10:33,640 --> 00:10:36,380
You can see here this
tic-tac-toe API.

243
00:10:36,380 --> 00:10:39,000
We're defining it as an
API named tictactoe.

244
00:10:39,000 --> 00:10:42,090
We have versioning support,
description, et cetera.

245
00:10:42,090 --> 00:10:44,850
And then you're just annotating
your method to say,

246
00:10:44,850 --> 00:10:46,300
this method called board.

247
00:10:46,300 --> 00:10:50,120
board.getmove is the RPC-style
way of calling it.

248
00:10:50,120 --> 00:10:53,070
And that's what you do
to build an API on

249
00:10:53,070 --> 00:10:55,080
top of Cloud Endpoints.

250
00:10:55,080 --> 00:10:57,320
So Dan will get into this a
lot more, in a lot more

251
00:10:57,320 --> 00:10:58,300
detail, here later.

252
00:10:58,300 --> 00:11:01,260
But this is really awesome that
you're able to use all of

253
00:11:01,260 --> 00:11:06,480
our API serving infrastructure
to build your own APIs and

254
00:11:06,480 --> 00:11:08,310
have clients from mobile
apps or web

255
00:11:08,310 --> 00:11:09,600
applications accessing them.

256
00:11:09,600 --> 00:11:12,430

257
00:11:12,430 --> 00:11:15,320
Now, App Engine has really been
optimized for scaling

258
00:11:15,320 --> 00:11:18,670
your application for front-end
type requests, a lot of web

259
00:11:18,670 --> 00:11:21,560
requests that are really
quick to respond to.

260
00:11:21,560 --> 00:11:25,580
But we've also heard the need
for more and more back-end

261
00:11:25,580 --> 00:11:26,670
processing.

262
00:11:26,670 --> 00:11:29,420
And that's actually why we
released App Engine Backends,

263
00:11:29,420 --> 00:11:32,110
which allows you to run
continuous tasks in the

264
00:11:32,110 --> 00:11:34,680
background without any sort of
deadlines for how long those

265
00:11:34,680 --> 00:11:37,170
requests can take and
that sort of thing.

266
00:11:37,170 --> 00:11:41,500
So if we go in a progression
here, App Engine provides

267
00:11:41,500 --> 00:11:44,700
great front-end web services,
with their front ends.

268
00:11:44,700 --> 00:11:47,720
The Backends allows you a little
bit more flexibility by

269
00:11:47,720 --> 00:11:49,760
keeping things longer running.

270
00:11:49,760 --> 00:11:51,660
And then later, I'm going to
talk about Compute Engine,

271
00:11:51,660 --> 00:11:55,570
which allows you the ultimate in
flexibility by controlling

272
00:11:55,570 --> 00:11:57,190
your code at the VM level.

273
00:11:57,190 --> 00:11:59,720

274
00:11:59,720 --> 00:12:02,150
So App Engine's development
stack--

275
00:12:02,150 --> 00:12:04,400
the Eclipse plugin I
mentioned already.

276
00:12:04,400 --> 00:12:06,490
But we've also worked with a
variety of other companies and

277
00:12:06,490 --> 00:12:08,530
technologies to make a
development stack that's

278
00:12:08,530 --> 00:12:11,580
really easy for you
understand.

279
00:12:11,580 --> 00:12:14,730
And even as we move towards the
future here, and we decide

280
00:12:14,730 --> 00:12:18,120
that we don't want to actually
have to have an ID installed

281
00:12:18,120 --> 00:12:18,745
on all our computers.

282
00:12:18,745 --> 00:12:22,050
We want to just be able to
open up your Chromebook.

283
00:12:22,050 --> 00:12:24,250
We actually have, I think, a
Pixel around here somewhere.

284
00:12:24,250 --> 00:12:26,600
But if you want to just open up
your Chromebook and want to

285
00:12:26,600 --> 00:12:30,540
write some code, we've worked
with Codenvy to build

286
00:12:30,540 --> 00:12:33,640
integration with App Engine
into Codenvy so that right

287
00:12:33,640 --> 00:12:36,490
within a browser, you can both
write your code and deploy

288
00:12:36,490 --> 00:12:38,170
your code onto Google
App Engine.

289
00:12:38,170 --> 00:12:40,900

290
00:12:40,900 --> 00:12:43,100
This is an awesome quote here.
"With Google App Engine, we

291
00:12:43,100 --> 00:12:45,300
don't need a system
administrator or anyone

292
00:12:45,300 --> 00:12:48,920
dedicated to deploying our app,
so 99% of our time is

293
00:12:48,920 --> 00:12:52,070
spent working on our
application." This is from Ben

294
00:12:52,070 --> 00:12:53,480
Kamens on Khan Academy.

295
00:12:53,480 --> 00:12:55,210
Khan Academy became
pretty wildly

296
00:12:55,210 --> 00:12:57,740
successful for online learning.

297
00:12:57,740 --> 00:13:01,220
And they really don't actually
hire system administrators.

298
00:13:01,220 --> 00:13:03,560
They just hire the people
that write their code.

299
00:13:03,560 --> 00:13:06,820
App Engine does the system
administration for them.

300
00:13:06,820 --> 00:13:09,740
They can concentrate on writing
their code and making

301
00:13:09,740 --> 00:13:12,190
online learning really
powerful for

302
00:13:12,190 --> 00:13:15,070
people to get new skills.

303
00:13:15,070 --> 00:13:18,910
So Ben is a really awesome
developer, as well.

304
00:13:18,910 --> 00:13:21,550
If you ever get a chance to meet
him, tell him that the

305
00:13:21,550 --> 00:13:22,800
App Engine team says hi.

306
00:13:22,800 --> 00:13:25,940

307
00:13:25,940 --> 00:13:29,720
So making your application easy
to build isn't just about

308
00:13:29,720 --> 00:13:31,090
dealing with the code.

309
00:13:31,090 --> 00:13:33,720
Making your application easy to
build is also about dealing

310
00:13:33,720 --> 00:13:35,730
with some of the policy stuff
and all that you have to deal

311
00:13:35,730 --> 00:13:38,390
with as application developers,
specifically when

312
00:13:38,390 --> 00:13:40,975
it comes to storing
user information.

313
00:13:40,975 --> 00:13:43,330
The EU has a lot of regulations
about that.

314
00:13:43,330 --> 00:13:46,510
And one thing we've done
recently is actually open up

315
00:13:46,510 --> 00:13:51,000
European data centers and allow
you to specify that your

316
00:13:51,000 --> 00:13:55,580
code runs only in those data
centers and your data at rest

317
00:13:55,580 --> 00:13:57,920
is only in those data centers.

318
00:13:57,920 --> 00:14:00,630
So this makes it a lot easier
for you to comply with the

319
00:14:00,630 --> 00:14:04,180
applicable regulations for
storing user data and is very

320
00:14:04,180 --> 00:14:05,830
important for a lot of
European developers.

321
00:14:05,830 --> 00:14:09,330

322
00:14:09,330 --> 00:14:10,960
So we've talked about how it's
easy to build on the

323
00:14:10,960 --> 00:14:13,500
technology side, on a little
bit of the policy side.

324
00:14:13,500 --> 00:14:15,610
Now let's talk about how
it's easy to scale your

325
00:14:15,610 --> 00:14:17,600
applications with App Engine.

326
00:14:17,600 --> 00:14:20,180
You might not think scaling
is that important.

327
00:14:20,180 --> 00:14:22,870
If you're building your
application, you might not

328
00:14:22,870 --> 00:14:24,590
think initially you're going
to get a lot of users.

329
00:14:24,590 --> 00:14:27,060
You might build your application
such that you can

330
00:14:27,060 --> 00:14:29,410
say, well, I'll deal with
scaling later, when I get a

331
00:14:29,410 --> 00:14:30,840
bunch of traffic.

332
00:14:30,840 --> 00:14:33,090
But I'm going to give you
a couple use cases where

333
00:14:33,090 --> 00:14:36,000
developers have decided
that they did

334
00:14:36,000 --> 00:14:37,690
need to build to scale.

335
00:14:37,690 --> 00:14:41,180
And it's worked out really
well for them.

336
00:14:41,180 --> 00:14:43,780
So you probably have traffic
charts that look

337
00:14:43,780 --> 00:14:44,630
something like this.

338
00:14:44,630 --> 00:14:47,760
You have spikes, whether it be
advertising campaigns, whether

339
00:14:47,760 --> 00:14:50,310
it be a new release, or
things like that.

340
00:14:50,310 --> 00:14:52,290
You have spikes in
your traffic.

341
00:14:52,290 --> 00:14:54,320
And you have to decide,
hey, do you need to

342
00:14:54,320 --> 00:14:55,770
have a couple servers?

343
00:14:55,770 --> 00:14:57,960
Do you need to have a couple
spare servers sitting around,

344
00:14:57,960 --> 00:14:59,410
a bunch of replicas?

345
00:14:59,410 --> 00:15:03,590
How many servers do you need,
in case of surges?

346
00:15:03,590 --> 00:15:06,660
And oftentimes, what that ends
up being is you're either

347
00:15:06,660 --> 00:15:07,740
over-provisioned or

348
00:15:07,740 --> 00:15:10,100
under-provisioned for your traffic.

349
00:15:10,100 --> 00:15:13,320
And App Engine is really about
getting around this problem

350
00:15:13,320 --> 00:15:16,850
and allowing you to scale to the
level of traffic that your

351
00:15:16,850 --> 00:15:18,170
application needs to scale.

352
00:15:18,170 --> 00:15:20,570
So we're constantly just
launching new instances as

353
00:15:20,570 --> 00:15:23,340
your application gets more and
more traffic and making sure

354
00:15:23,340 --> 00:15:25,110
your application can handle
that traffic.

355
00:15:25,110 --> 00:15:27,020
And that's one of the beautiful

356
00:15:27,020 --> 00:15:28,270
things about App Engine.

357
00:15:28,270 --> 00:15:32,050

358
00:15:32,050 --> 00:15:33,340
So Getaround--

359
00:15:33,340 --> 00:15:36,540
Getaround is a car-sharing
company.

360
00:15:36,540 --> 00:15:39,450
I think they initially started
off with this model where you

361
00:15:39,450 --> 00:15:42,530
rent cars from other people
in your neighborhood.

362
00:15:42,530 --> 00:15:45,700
And I actually just passed one
this morning, the first time I

363
00:15:45,700 --> 00:15:48,080
saw one near my house.

364
00:15:48,080 --> 00:15:50,470
It appears that they've also
moved into a model where they

365
00:15:50,470 --> 00:15:52,700
maintain some of the
cars, as well.

366
00:15:52,700 --> 00:15:54,420
But Getaround built
their application,

367
00:15:54,420 --> 00:15:56,290
at first, in a hackathon.

368
00:15:56,290 --> 00:15:58,560
They had two days to build
an application.

369
00:15:58,560 --> 00:16:01,250
They built a mobile app, and
they built their backend, on

370
00:16:01,250 --> 00:16:03,380
App Engine, in those two days.

371
00:16:03,380 --> 00:16:08,200
And that application was already
ready for scaling.

372
00:16:08,200 --> 00:16:11,240
They built using App Engine as
that opinionated framework to

373
00:16:11,240 --> 00:16:13,180
get the scale that
they needed.

374
00:16:13,180 --> 00:16:15,420
And then when it came around
to the TechCrunch Disrupt

375
00:16:15,420 --> 00:16:20,160
Contest, they had a 30x increase
in traffic, when they

376
00:16:20,160 --> 00:16:22,470
won the TechCrunch
Disrupt Contest.

377
00:16:22,470 --> 00:16:23,660
And there was a lot of

378
00:16:23,660 --> 00:16:25,170
celebration, a lot of partying.

379
00:16:25,170 --> 00:16:27,840
You can see here they're popping
champagne on stage.

380
00:16:27,840 --> 00:16:30,560
With that 30x increase in
traffic, they were able to

381
00:16:30,560 --> 00:16:33,160
drink their champagne and
not have to worry

382
00:16:33,160 --> 00:16:33,940
about getting paged.

383
00:16:33,940 --> 00:16:37,290
They didn't get paged once
during this, because App

384
00:16:37,290 --> 00:16:39,300
Engine automatically
handled scaling out

385
00:16:39,300 --> 00:16:41,130
their traffic for them.

386
00:16:41,130 --> 00:16:43,400
And that's really the beautiful
thing about the

387
00:16:43,400 --> 00:16:47,210
scaling with App Engine, is you
can drink champagne and

388
00:16:47,210 --> 00:16:49,460
not worry about answering
your pages.

389
00:16:49,460 --> 00:16:51,550
So everyone that's carrying
a pager around

390
00:16:51,550 --> 00:16:52,800
here, think about that.

391
00:16:52,800 --> 00:16:56,520

392
00:16:56,520 --> 00:16:59,290
So if it's easy to build,
it's easy to scale.

393
00:16:59,290 --> 00:17:03,150
Now let's talk about maintaining
your application.

394
00:17:03,150 --> 00:17:06,010
So one of the key things you
have to do when you maintain

395
00:17:06,010 --> 00:17:08,780
your application is actually
understand where your

396
00:17:08,780 --> 00:17:12,290
performance bottlenecks are,
understand what is taking up

397
00:17:12,290 --> 00:17:14,400
the most time in your
application.

398
00:17:14,400 --> 00:17:16,859
And that's what AppStats is all
about-- being able to dive

399
00:17:16,859 --> 00:17:20,880
in to all your different
requests and figure out which

400
00:17:20,880 --> 00:17:23,069
are the bottlenecks in your
application and then figure

401
00:17:23,069 --> 00:17:25,089
out how to improve those.

402
00:17:25,089 --> 00:17:26,030
So AppStats--

403
00:17:26,030 --> 00:17:27,890
there's a quote here at the
top right. "I used to be

404
00:17:27,890 --> 00:17:30,860
blind, but now I can see." And
that's really what we want

405
00:17:30,860 --> 00:17:32,430
developers to be able to do.

406
00:17:32,430 --> 00:17:34,560
Although it's an opinionated
framework, and Google deals

407
00:17:34,560 --> 00:17:37,500
with a lot of these things for
you, there's ways that you can

408
00:17:37,500 --> 00:17:39,560
build your application that
aren't the most highly

409
00:17:39,560 --> 00:17:40,110
performant.

410
00:17:40,110 --> 00:17:43,260
And AppStats allows you to see
when you're doing that and

411
00:17:43,260 --> 00:17:46,550
really fix those problems.

412
00:17:46,550 --> 00:17:50,630
We've also worked in the
deployment space here of

413
00:17:50,630 --> 00:17:53,600
making it easy to deploy
your application

414
00:17:53,600 --> 00:17:56,030
with CloudBees Jenkins.

415
00:17:56,030 --> 00:17:57,010
So we've worked with them.

416
00:17:57,010 --> 00:18:01,720
And if you want to auto build
and deploy your application,

417
00:18:01,720 --> 00:18:04,760
these guys can handle it.

418
00:18:04,760 --> 00:18:07,880
And overall, developers
are loving App Engine.

419
00:18:07,880 --> 00:18:09,800
We're getting a lot of
increase in traffic.

420
00:18:09,800 --> 00:18:11,290
We'll show that to you here.

421
00:18:11,290 --> 00:18:14,100
As we've released more and more
features on App Engine,

422
00:18:14,100 --> 00:18:16,980
over time you can see the graph
of our traffic goes up

423
00:18:16,980 --> 00:18:17,650
and up and up.

424
00:18:17,650 --> 00:18:20,570
As we initially started off with
just Python run times,

425
00:18:20,570 --> 00:18:23,360
and then we added Java and Go
support, added all these

426
00:18:23,360 --> 00:18:25,860
different services which make it
easy for you to build your

427
00:18:25,860 --> 00:18:26,910
application.

428
00:18:26,910 --> 00:18:31,770
We're now up to the point of 7
and 1/2 billion hits a day.

429
00:18:31,770 --> 00:18:34,540
And if you think about a month
in the world of App Engine,

430
00:18:34,540 --> 00:18:37,120
over 1 million active
applications, 2 trillion

431
00:18:37,120 --> 00:18:40,340
datastore operations, half
of the world's active IP

432
00:18:40,340 --> 00:18:43,390
addresses, touch App Engine
in any given month.

433
00:18:43,390 --> 00:18:45,360
And you can see here we have
companies everywhere from

434
00:18:45,360 --> 00:18:50,230
small businesses and startups to
big enterprises to consumer

435
00:18:50,230 --> 00:18:51,480
good companies.

436
00:18:51,480 --> 00:18:55,930

437
00:18:55,930 --> 00:18:58,080
So that's how you can build
on a platform as a service

438
00:18:58,080 --> 00:19:01,450
environment where Google is
handling a lot of the scaling

439
00:19:01,450 --> 00:19:03,630
for you, Google is handling
a lot of the system

440
00:19:03,630 --> 00:19:04,860
administration for you.

441
00:19:04,860 --> 00:19:08,190
But sometimes you need ultimate
flexibility, having

442
00:19:08,190 --> 00:19:10,410
raw access to virtual
machines.

443
00:19:10,410 --> 00:19:13,390
And that's what Compute
Engine is all about.

444
00:19:13,390 --> 00:19:15,760
So at a high level, Compute
Engine is an infrastructure as

445
00:19:15,760 --> 00:19:16,995
a service offering.

446
00:19:16,995 --> 00:19:20,060
It allows you to run virtual
machines directly on Google's

447
00:19:20,060 --> 00:19:21,200
infrastructure.

448
00:19:21,200 --> 00:19:24,970
And we consider Compute Engine
really great for things like

449
00:19:24,970 --> 00:19:27,720
large scale analysis,
batch processing, or

450
00:19:27,720 --> 00:19:29,160
variable size workloads.

451
00:19:29,160 --> 00:19:31,000
And variable size workloads
can be a lot

452
00:19:31,000 --> 00:19:31,630
of different things.

453
00:19:31,630 --> 00:19:33,990
It could be game backends,
for instance.

454
00:19:33,990 --> 00:19:36,850
But we think of the users of
Compute Engine as those that

455
00:19:36,850 --> 00:19:40,430
want to really take advantage
of all of our expertise that

456
00:19:40,430 --> 00:19:42,990
we've built up in building out
infrastructure, in building

457
00:19:42,990 --> 00:19:47,010
out the ability to do super fast
networking and I/O, and

458
00:19:47,010 --> 00:19:47,830
that sort of thing.

459
00:19:47,830 --> 00:19:52,460
And so Compute Engine is built
for that, but it's also built

460
00:19:52,460 --> 00:19:54,420
for ease of use.

461
00:19:54,420 --> 00:19:59,370
And this is a high-level diagram
of Compute Engine,

462
00:19:59,370 --> 00:20:03,950
where we have the overview, or
container, is our project.

463
00:20:03,950 --> 00:20:05,650
And this is a project
that you get with

464
00:20:05,650 --> 00:20:07,200
the Google APIs consoles.

465
00:20:07,200 --> 00:20:09,860
So if you've ever built
applications on top of Google,

466
00:20:09,860 --> 00:20:12,150
you go to the APIs console,
and you set up a project.

467
00:20:12,150 --> 00:20:15,320
And you turn on what APIs you
want to have access to.

468
00:20:15,320 --> 00:20:17,240
And that's the same
container that we

469
00:20:17,240 --> 00:20:18,330
have for Compute Engine.

470
00:20:18,330 --> 00:20:21,790
So any given project has a set
of VMs associated with that

471
00:20:21,790 --> 00:20:24,520
project, has disks,
has network.

472
00:20:24,520 --> 00:20:27,570
And all of that is controlled
for access using standard

473
00:20:27,570 --> 00:20:28,740
Google accounts.

474
00:20:28,740 --> 00:20:29,420
So you can go in.

475
00:20:29,420 --> 00:20:31,030
And you can set which
Google accounts

476
00:20:31,030 --> 00:20:32,300
or groups have access.

477
00:20:32,300 --> 00:20:34,630
And you can do this either using
regular Google accounts

478
00:20:34,630 --> 00:20:36,880
or even Google Apps accounts.

479
00:20:36,880 --> 00:20:38,250
And as soon as I add--

480
00:20:38,250 --> 00:20:41,920
if I added one of you guys, over
there, to my project that

481
00:20:41,920 --> 00:20:44,020
has virtual machines associated
with it, you could

482
00:20:44,020 --> 00:20:46,430
immediately SSH into those
virtual machines.

483
00:20:46,430 --> 00:20:48,120
There's no more work
that's required.

484
00:20:48,120 --> 00:20:49,830
We automatically handle
the key generation

485
00:20:49,830 --> 00:20:51,710
and things like that.

486
00:20:51,710 --> 00:20:54,050
And then of course, we have a
standard set of APIs, using

487
00:20:54,050 --> 00:20:56,800
the same API infrastructure I
was talking about earlier,

488
00:20:56,800 --> 00:20:59,210
that allows you to control your
instances, allows you to

489
00:20:59,210 --> 00:21:00,880
control your network,
and allows you to

490
00:21:00,880 --> 00:21:02,650
control your storage.

491
00:21:02,650 --> 00:21:05,220
But at its heart, this is really
just virtual machines.

492
00:21:05,220 --> 00:21:08,550
Later, we're going to go into
some more detail about how

493
00:21:08,550 --> 00:21:11,140
people have used these virtual
machines in order to build

494
00:21:11,140 --> 00:21:13,460
things that are unique and
some quotes from some

495
00:21:13,460 --> 00:21:17,230
customers about how they can
scale and perform faster than

496
00:21:17,230 --> 00:21:19,830
other virtual machine
technologies they've used.

497
00:21:19,830 --> 00:21:21,530
But I won't go into much
more detail here.

498
00:21:21,530 --> 00:21:23,000
Because it's virtual machines.

499
00:21:23,000 --> 00:21:26,220
You guys get access to the
same underlying virtual

500
00:21:26,220 --> 00:21:28,270
machine infrastructure
that Google uses.

501
00:21:28,270 --> 00:21:30,506
There's actually a question
in the audience, here.

502
00:21:30,506 --> 00:21:32,490
AUDIENCE: Yeah, on the
networking layer, how granular

503
00:21:32,490 --> 00:21:33,978
can you go [INAUDIBLE]?

504
00:21:33,978 --> 00:21:36,960

505
00:21:36,960 --> 00:21:41,310
RYAN BOYD: Right now, there's
not too granular access to

506
00:21:41,310 --> 00:21:41,930
control that.

507
00:21:41,930 --> 00:21:45,364
But it is definitely something
that we're looking at.

508
00:21:45,364 --> 00:21:46,750
AUDIENCE: Thanks.

509
00:21:46,750 --> 00:21:47,900
RYAN BOYD: Yep.

510
00:21:47,900 --> 00:21:50,140
So you may wonder, can you get
access to Compute Engine?

511
00:21:50,140 --> 00:21:52,810
Compute Engine is in a limited
preview state right now.

512
00:21:52,810 --> 00:21:55,590
We are providing SLA and
support for commercial

513
00:21:55,590 --> 00:21:57,740
customers during this
limited preview.

514
00:21:57,740 --> 00:21:59,630
And you can apply
for access here.

515
00:21:59,630 --> 00:22:03,720
But your best way is come and
talk to us later today, tell

516
00:22:03,720 --> 00:22:06,990
us what your use case is,
and apply online.

517
00:22:06,990 --> 00:22:10,930
And we'll see if it's a good
fit for Compute Engine.

518
00:22:10,930 --> 00:22:13,510
But we're getting more and more
customers every day onto

519
00:22:13,510 --> 00:22:14,320
Compute Engine.

520
00:22:14,320 --> 00:22:15,570
And they're loving it.

521
00:22:15,570 --> 00:22:18,780

522
00:22:18,780 --> 00:22:21,580
So we talked about how you
can run your code.

523
00:22:21,580 --> 00:22:22,940
The next thing, if
we [? followed ?]

524
00:22:22,940 --> 00:22:25,110
the progression from the
original diagram, is talking

525
00:22:25,110 --> 00:22:27,930
about how you deal with data
on the cloud platform.

526
00:22:27,930 --> 00:22:29,190
And we have a bunch
of services for

527
00:22:29,190 --> 00:22:30,440
dealing with this.

528
00:22:30,440 --> 00:22:33,100
So first is your standard
databases.

529
00:22:33,100 --> 00:22:35,570
So there's a NoSQL datastore.

530
00:22:35,570 --> 00:22:38,260
The NoSQL datastore
is available

531
00:22:38,260 --> 00:22:39,860
directly from App Engine.

532
00:22:39,860 --> 00:22:43,470
And this allows you to get the
super high level of scale that

533
00:22:43,470 --> 00:22:45,920
many types of applications want
to achieve when they're

534
00:22:45,920 --> 00:22:49,220
launching on App Engine.

535
00:22:49,220 --> 00:22:51,230
But we've learned that a
number of folks don't

536
00:22:51,230 --> 00:22:53,420
understand or don't
want to understand

537
00:22:53,420 --> 00:22:55,040
the whole NoSQL paradigm.

538
00:22:55,040 --> 00:22:57,850
They want to think in terms
of regular SQL.

539
00:22:57,850 --> 00:23:00,090
They want to do relational
databases.

540
00:23:00,090 --> 00:23:02,320
And that's why we launched
Cloud SQL.

541
00:23:02,320 --> 00:23:05,390
Cloud SQL is essentially a
hosted MySQL offering.

542
00:23:05,390 --> 00:23:08,130
It provides high availability
that Google expects for its

543
00:23:08,130 --> 00:23:08,960
own services.

544
00:23:08,960 --> 00:23:11,070
And it's fully managed for you,
so you don't have to deal

545
00:23:11,070 --> 00:23:13,900
with how to configure your MySQL
servers and replication

546
00:23:13,900 --> 00:23:15,990
and things like that.

547
00:23:15,990 --> 00:23:19,610
But basically, both of these are
accessible from the cloud

548
00:23:19,610 --> 00:23:26,200
platform and provide the way you
want to access your data.

549
00:23:26,200 --> 00:23:28,390
And then of course, there's
the object storage that I

550
00:23:28,390 --> 00:23:29,090
talked about.

551
00:23:29,090 --> 00:23:32,380
And this is Google Cloud
Storage, allows you to store

552
00:23:32,380 --> 00:23:34,820
arbitrary numbers of objects--

553
00:23:34,820 --> 00:23:36,970
very large objects, very
small objects--

554
00:23:36,970 --> 00:23:39,430
allows you to store it and have
it accessible through

555
00:23:39,430 --> 00:23:41,000
Google's network and
[? throughoutside ?]

556
00:23:41,000 --> 00:23:42,700
of the internet from
around the world.

557
00:23:42,700 --> 00:23:47,720
And this cloud storage uses
the same sort of paradigms

558
00:23:47,720 --> 00:23:50,850
that we talked about earlier
with how we manage our

559
00:23:50,850 --> 00:23:53,100
projects with the
APIs console.

560
00:23:53,100 --> 00:23:55,930
And it also allows you to
configure your access control

561
00:23:55,930 --> 00:23:59,100
lists and things like that
really easily to any Google

562
00:23:59,100 --> 00:24:01,760
account or even service account,
so applications can

563
00:24:01,760 --> 00:24:04,540
have access directly to cloud
storage on behalf of the

564
00:24:04,540 --> 00:24:05,790
application.

565
00:24:05,790 --> 00:24:08,390

566
00:24:08,390 --> 00:24:12,420
So you're storing data
for your application.

567
00:24:12,420 --> 00:24:16,300
You then maybe get a little bit
more data, and more data,

568
00:24:16,300 --> 00:24:17,000
and more data.

569
00:24:17,000 --> 00:24:19,860
And you want to be able to
analyze large amounts of data.

570
00:24:19,860 --> 00:24:22,030
You want to be able to analyze
big data on the

571
00:24:22,030 --> 00:24:23,190
Google Cloud Platform.

572
00:24:23,190 --> 00:24:26,470
And that's what BigQuery
is all about--

573
00:24:26,470 --> 00:24:29,490
more and more data, more
and more data.

574
00:24:29,490 --> 00:24:32,900
And big data at Google-- what
does it mean to us?

575
00:24:32,900 --> 00:24:35,600
The theme of this is a lot of
the technologies that Google

576
00:24:35,600 --> 00:24:37,370
has built, we're making
available to you.

577
00:24:37,370 --> 00:24:40,350
So let's talk about what big
data means to Google.

578
00:24:40,350 --> 00:24:42,490
Every minute there
are 72 hours of

579
00:24:42,490 --> 00:24:44,280
video uploaded to YouTube.

580
00:24:44,280 --> 00:24:45,380
Think about that for a moment.

581
00:24:45,380 --> 00:24:49,330
That's a lot of video-- a lot of
cat videos, in particular.

582
00:24:49,330 --> 00:24:50,910
There are 100 million
gigabytes in the

583
00:24:50,910 --> 00:24:51,940
Google search index.

584
00:24:51,940 --> 00:24:54,160
And that was back in 2010.

585
00:24:54,160 --> 00:24:59,130
And there are 425 million
users of Gmail.

586
00:24:59,130 --> 00:25:01,740
And all of these products,
we want to iterate on.

587
00:25:01,740 --> 00:25:04,900
We want to take this data and
turn it into meaning.

588
00:25:04,900 --> 00:25:08,160
We want to allow our product
managers and our engineers

589
00:25:08,160 --> 00:25:11,870
easy access to understand how
the products are being used

590
00:25:11,870 --> 00:25:14,750
and iterate on them-- much the
same as you want to do when

591
00:25:14,750 --> 00:25:16,790
building your games.

592
00:25:16,790 --> 00:25:19,820
And so a lot of our product
managers and engineers have

593
00:25:19,820 --> 00:25:22,220
familiarity with SQL.

594
00:25:22,220 --> 00:25:25,280
So they want to be able to run
familiar types of SQL queries

595
00:25:25,280 --> 00:25:27,810
on their data to understand
what's happening with their

596
00:25:27,810 --> 00:25:30,890
products and improve them.

597
00:25:30,890 --> 00:25:33,340
But they need to be able
to run it fast.

598
00:25:33,340 --> 00:25:36,250
They need to be able to crunch
data at Google scale.

599
00:25:36,250 --> 00:25:38,310
It's not your typical
database.

600
00:25:38,310 --> 00:25:40,630
They need to be able to
sit here, scan 100

601
00:25:40,630 --> 00:25:42,680
gigabytes in 10 seconds.

602
00:25:42,680 --> 00:25:46,770
And we'll show you even
better here shortly.

603
00:25:46,770 --> 00:25:50,470
So what they do here, what
originally people would do if

604
00:25:50,470 --> 00:25:53,150
they're trying to run queries
across their data, is run them

605
00:25:53,150 --> 00:25:54,550
in a single server.

606
00:25:54,550 --> 00:25:55,850
But Google said,
you know what?

607
00:25:55,850 --> 00:25:57,410
We don't just have
a single server.

608
00:25:57,410 --> 00:25:58,950
We have tons of servers.

609
00:25:58,950 --> 00:26:02,360
We have hundreds, thousands of
servers around the world.

610
00:26:02,360 --> 00:26:04,950
And we want our queries to be
able to run on all of those.

611
00:26:04,950 --> 00:26:07,350
And that's what BigQuery is
about-- being able to scale

612
00:26:07,350 --> 00:26:10,380
and parallelize queries to
be able to run on lots of

613
00:26:10,380 --> 00:26:12,820
different machines.

614
00:26:12,820 --> 00:26:15,180
So BigQuery gives you
the same power.

615
00:26:15,180 --> 00:26:18,610
We use that underlying
technology, called Dremel,

616
00:26:18,610 --> 00:26:19,460
internally.

617
00:26:19,460 --> 00:26:22,680
But now we're opening it up to
you as BigQuery, to store your

618
00:26:22,680 --> 00:26:25,080
data with the reliability,
redundancy, and consistency

619
00:26:25,080 --> 00:26:28,200
that you expect and Google
expects for its own data, to

620
00:26:28,200 --> 00:26:32,400
go from data to meaning,
at scale, quickly.

621
00:26:32,400 --> 00:26:36,330
And let me actually show you
what at scale quickly means in

622
00:26:36,330 --> 00:26:37,830
the context of BigQuery here.

623
00:26:37,830 --> 00:26:41,220

624
00:26:41,220 --> 00:26:45,000
So Wikipedia is kind enough
to provide access

625
00:26:45,000 --> 00:26:47,640
to their log files.

626
00:26:47,640 --> 00:26:51,360
So when you visit a Wikipedia
page, it records something in

627
00:26:51,360 --> 00:26:52,640
their log files.

628
00:26:52,640 --> 00:26:55,590
And they provide these log files
for people to download

629
00:26:55,590 --> 00:26:56,510
and analyze.

630
00:26:56,510 --> 00:26:59,400
I think it's about 5 or 6
terabytes of total data.

631
00:26:59,400 --> 00:27:02,220
And I put these log files
into BigQuery.

632
00:27:02,220 --> 00:27:05,480
And what this query is that
you're seeing here is looking

633
00:27:05,480 --> 00:27:08,270
at about a year of those logs--
actually, 13 months of

634
00:27:08,270 --> 00:27:09,360
those logs.

635
00:27:09,360 --> 00:27:13,700
It's 1 terabyte of table data.

636
00:27:13,700 --> 00:27:16,730
And in that 1 terabyte of data,
what I'm looking for is

637
00:27:16,730 --> 00:27:18,360
some particular columns.

638
00:27:18,360 --> 00:27:22,050
And I want to do a regular
expression match on the title

639
00:27:22,050 --> 00:27:26,130
of the Wikipedia pages to find
all those pages that start

640
00:27:26,130 --> 00:27:28,900
with a capital G, have a
lowercase O, and end with a

641
00:27:28,900 --> 00:27:31,170
lowercase E.

642
00:27:31,170 --> 00:27:33,750
And I want to do that query and
figure out what are the

643
00:27:33,750 --> 00:27:34,730
number of page views.

644
00:27:34,730 --> 00:27:36,800
What are the top viewed
pages where the title

645
00:27:36,800 --> 00:27:39,120
matches that pattern?

646
00:27:39,120 --> 00:27:41,285
So it's a typical, standard
SQL query

647
00:27:41,285 --> 00:27:42,700
that I'm running here--

648
00:27:42,700 --> 00:27:44,590
grouping by the title.

649
00:27:44,590 --> 00:27:48,990
And I'm running this query
across these tables.

650
00:27:48,990 --> 00:27:53,630
In these tables, there are 15.7
billion rows of data.

651
00:27:53,630 --> 00:27:57,090
I am running 15.7 billion
regular expressions.

652
00:27:57,090 --> 00:27:58,470
There's no indexes here.

653
00:27:58,470 --> 00:28:01,010
We're reading off that
data off of disk.

654
00:28:01,010 --> 00:28:04,160
Because I'm only accessing some
of the columns here, we

655
00:28:04,160 --> 00:28:07,140
don't have to read all 1
terabyte of data off of disk.

656
00:28:07,140 --> 00:28:08,060
We're only reading--

657
00:28:08,060 --> 00:28:12,140
and "only" is important here--
only reading 665 gigabytes of

658
00:28:12,140 --> 00:28:13,620
data off of disk.

659
00:28:13,620 --> 00:28:16,550
And we did that all
in 12.2 seconds.

660
00:28:16,550 --> 00:28:20,520
16 billion regular expressions,
12.2 seconds,

661
00:28:20,520 --> 00:28:23,030
reading 665 gigabytes
of data off of disk.

662
00:28:23,030 --> 00:28:24,540
Isn't that impressive?

663
00:28:24,540 --> 00:28:26,680
That's really what Google's
infrastructure is all about.

664
00:28:26,680 --> 00:28:28,120
How many of you could imagine
doing that in

665
00:28:28,120 --> 00:28:29,710
your relational database?

666
00:28:29,710 --> 00:28:31,560
Anyone?

667
00:28:31,560 --> 00:28:34,420
If you can, I'm curious
to talk with you.

668
00:28:34,420 --> 00:28:35,460
What's that?

669
00:28:35,460 --> 00:28:36,710
AUDIENCE: [INAUDIBLE]?

670
00:28:36,710 --> 00:28:38,680

671
00:28:38,680 --> 00:28:41,490
RYAN BOYD: Yeah, certainly if
you're doing queries at this

672
00:28:41,490 --> 00:28:44,920
scale, it does use
a lot of money.

673
00:28:44,920 --> 00:28:47,310
Because it uses a lot
of infrastructure.

674
00:28:47,310 --> 00:28:49,550
But it's important that you have
the power to be able to

675
00:28:49,550 --> 00:28:52,220
do interactive queries like
this, if you do have a year's

676
00:28:52,220 --> 00:28:55,300
worth of data to crunch.

677
00:28:55,300 --> 00:28:59,460
And so 12.2 seconds, 15.7
billion rows of data.

678
00:28:59,460 --> 00:29:03,060

679
00:29:03,060 --> 00:29:04,310
Let's see.

680
00:29:04,310 --> 00:29:09,920

681
00:29:09,920 --> 00:29:11,170
Let me get back to this.

682
00:29:11,170 --> 00:29:17,650

683
00:29:17,650 --> 00:29:20,130
So developers are using this
technology for a lot of

684
00:29:20,130 --> 00:29:22,280
different things-- game and
social media analytics,

685
00:29:22,280 --> 00:29:24,410
infrastructure monitoring,
advertising campaign

686
00:29:24,410 --> 00:29:26,800
optimization, sensor
data analysis.

687
00:29:26,800 --> 00:29:29,770
A lot of the same types of use
cases where Google uses this

688
00:29:29,770 --> 00:29:32,290
technology internally, we've
found developers

689
00:29:32,290 --> 00:29:33,540
using it, as well.

690
00:29:33,540 --> 00:29:36,210

691
00:29:36,210 --> 00:29:38,580
BigQuery, at its heart,
is a RESTful API.

692
00:29:38,580 --> 00:29:41,130
I just showed you the web
interface for how to access

693
00:29:41,130 --> 00:29:44,030
BigQuery, but that's actually
not what we're building.

694
00:29:44,030 --> 00:29:47,182
We're not building a web
interface for users to be able

695
00:29:47,182 --> 00:29:48,490
to access their data.

696
00:29:48,490 --> 00:29:50,280
We're building a
developer tool.

697
00:29:50,280 --> 00:29:52,200
And this developer tool
is a RESTful API.

698
00:29:52,200 --> 00:29:54,750
So you can build this same
technology into your own

699
00:29:54,750 --> 00:29:55,950
applications.

700
00:29:55,950 --> 00:29:58,430
And the folks from Leanplum are
going to talk about how

701
00:29:58,430 --> 00:30:01,000
they've used BigQuery in their
application here in a second.

702
00:30:01,000 --> 00:30:03,790

703
00:30:03,790 --> 00:30:06,410
Underneath this, basically,
it's a REST API.

704
00:30:06,410 --> 00:30:08,620
You're uploading your data
to Google Cloud Storage.

705
00:30:08,620 --> 00:30:11,370
You're making an API call to
BigQuery and telling BigQuery

706
00:30:11,370 --> 00:30:13,990
to load in that data off
of cloud storage.

707
00:30:13,990 --> 00:30:16,280
Your data can be in a
standard CSV format.

708
00:30:16,280 --> 00:30:18,570
Or it also can be in a JSON
format with nested and

709
00:30:18,570 --> 00:30:20,320
repeated data--

710
00:30:20,320 --> 00:30:21,720
flexibility there.

711
00:30:21,720 --> 00:30:24,140
But as soon as you load your
data into BigQuery, there's no

712
00:30:24,140 --> 00:30:26,470
indexes or anything we
have to perform.

713
00:30:26,470 --> 00:30:28,360
Your data is immediately
accessible.

714
00:30:28,360 --> 00:30:33,340
So I've loaded many terabytes
of data into BigQuery, once

715
00:30:33,340 --> 00:30:36,540
it's already on cloud storage,
in a half hour.

716
00:30:36,540 --> 00:30:39,540
And that makes it super
flexible that you can

717
00:30:39,540 --> 00:30:41,730
instantly start running your
queries and not have to wait

718
00:30:41,730 --> 00:30:44,790
days for indexes to build.

719
00:30:44,790 --> 00:30:46,430
There's also libraries in
a variety of different

720
00:30:46,430 --> 00:30:48,040
programming languages.

721
00:30:48,040 --> 00:30:50,700
So if you recognize your
favorite programming language

722
00:30:50,700 --> 00:30:54,120
here, there's libraries already
available for you.

723
00:30:54,120 --> 00:30:56,280
But of course, there's the
RESTful API if you want to

724
00:30:56,280 --> 00:30:57,970
integrate directly.

725
00:30:57,970 --> 00:31:00,540
Now I'm going to invite up
Momchil and Andrew from

726
00:31:00,540 --> 00:31:05,080
Leanplum to talk about how
they've integrated with the

727
00:31:05,080 --> 00:31:06,960
Google Cloud Platform-- in
particular, how they've

728
00:31:06,960 --> 00:31:09,275
integrated with App Engine
and BigQuery.

729
00:31:09,275 --> 00:31:10,525
[? Switch over. ?]

730
00:31:10,525 --> 00:31:49,370

731
00:31:49,370 --> 00:31:50,360
MOMCHIL KYURKCHIEV:
Hi, everyone.

732
00:31:50,360 --> 00:31:51,350
My name is Momchil.

733
00:31:51,350 --> 00:31:53,825
I'm a founder and
CEO of Leanplum.

734
00:31:53,825 --> 00:31:56,050
And I'm here today with
my co-founder, Andrew.

735
00:31:56,050 --> 00:31:58,380
And we're building a platform
to enable mobile game

736
00:31:58,380 --> 00:32:01,270
companies to understand and
monetize their users better

737
00:32:01,270 --> 00:32:03,420
through A/B testing.

738
00:32:03,420 --> 00:32:05,120
And in this talk today, we'll
show you how we're

739
00:32:05,120 --> 00:32:08,880
transforming the way companies
optimize their mobile games.

740
00:32:08,880 --> 00:32:11,305
But we'll also crack the door
open slightly to show you how

741
00:32:11,305 --> 00:32:15,070
we built all of this on the
Google Cloud Platform.

742
00:32:15,070 --> 00:32:16,350
But before I start, let
me tell you a little

743
00:32:16,350 --> 00:32:18,340
bit about our team.

744
00:32:18,340 --> 00:32:21,150
Both Andrew and I have a
technical background, with

745
00:32:21,150 --> 00:32:23,030
several years of experience
actually optimizing

746
00:32:23,030 --> 00:32:24,660
video ads at Google.

747
00:32:24,660 --> 00:32:27,980
And our third co-founder, Joel,
on the left side there--

748
00:32:27,980 --> 00:32:29,600
he's a former VC at Redpoint.

749
00:32:29,600 --> 00:32:32,400
And he heads our sales
and [? biz dev. ?]

750
00:32:32,400 --> 00:32:35,040
And our domain expertise is
A/B testing and building

751
00:32:35,040 --> 00:32:37,930
scalable infrastructure.

752
00:32:37,930 --> 00:32:39,600
So all of you are familiar
with the

753
00:32:39,600 --> 00:32:41,070
concept of A/B testing.

754
00:32:41,070 --> 00:32:44,310
And the idea is that you split
your users in two groups--

755
00:32:44,310 --> 00:32:46,850
group A and group B. You give
each group a different

756
00:32:46,850 --> 00:32:48,920
product, or a different version
of your product.

757
00:32:48,920 --> 00:32:50,570
And then you measure
the result.

758
00:32:50,570 --> 00:32:53,310
And while A/B testing is a very
popular concept on the

759
00:32:53,310 --> 00:32:55,920
web, we realized that this is
not the case on mobile.

760
00:32:55,920 --> 00:32:58,230
And so we wanted to understand
why that's the case.

761
00:32:58,230 --> 00:33:01,430
And so here's the problem.

762
00:33:01,430 --> 00:33:04,670
Imagine you're a product
manager for a game.

763
00:33:04,670 --> 00:33:07,150
Every day, you're faced with
decisions that affect the

764
00:33:07,150 --> 00:33:08,850
revenue of your product.

765
00:33:08,850 --> 00:33:11,420
But to test what works the best,
first you need to talk

766
00:33:11,420 --> 00:33:13,720
to your developers to get them
to make the changes for you,

767
00:33:13,720 --> 00:33:14,940
which is, of course,
complicated

768
00:33:14,940 --> 00:33:16,810
and takes some time.

769
00:33:16,810 --> 00:33:18,920
And then you get the
changes done.

770
00:33:18,920 --> 00:33:21,330
And you still need to wait for
two weeks to submit your app

771
00:33:21,330 --> 00:33:22,890
to the app store.

772
00:33:22,890 --> 00:33:25,440
And then finally, you run your
tests, get the results back,

773
00:33:25,440 --> 00:33:28,110
and you need to analyze them to
figure out if the results

774
00:33:28,110 --> 00:33:30,480
are statistically significant.

775
00:33:30,480 --> 00:33:32,600
And with Leanplum, we solved
these three problems.

776
00:33:32,600 --> 00:33:36,720
We enabled product managers to
run tests in real time, right

777
00:33:36,720 --> 00:33:37,560
from our dashboard.

778
00:33:37,560 --> 00:33:40,220
And we interpret the
results for them.

779
00:33:40,220 --> 00:33:42,160
And so let me show you
how this works.

780
00:33:42,160 --> 00:33:43,860
Let's say you've got a game
with in app purchases, and

781
00:33:43,860 --> 00:33:46,280
you're interested in optimizing
your revenue.

782
00:33:46,280 --> 00:33:49,650
One thing you can decide to
change, or test, is to try

783
00:33:49,650 --> 00:33:53,200
different prices and colors for
the items in your store.

784
00:33:53,200 --> 00:33:55,310
You can see that it's very easy
to choose what percentage

785
00:33:55,310 --> 00:33:57,440
of users will see
each version.

786
00:33:57,440 --> 00:33:59,540
Now, you can make changes right
from our dashboard.

787
00:33:59,540 --> 00:34:02,630
You don't have to talk to your
developers or wait for Apple

788
00:34:02,630 --> 00:34:04,140
to approve your changes.

789
00:34:04,140 --> 00:34:06,860
And all of this happens
in real time.

790
00:34:06,860 --> 00:34:10,429
You type in the new price, and
it goes live automatically.

791
00:34:10,429 --> 00:34:13,560
And the same thing happens for
the color of the particular

792
00:34:13,560 --> 00:34:16,380
energy [? recharge ?] you're
trying to change.

793
00:34:16,380 --> 00:34:19,139
And when the test is done,
you'll get a report showing

794
00:34:19,139 --> 00:34:22,320
which metrics have changed and
with what confidence interval.

795
00:34:22,320 --> 00:34:24,800
And a change like this can
actually increase your revenue

796
00:34:24,800 --> 00:34:26,850
by as much as 20%.

797
00:34:26,850 --> 00:34:29,159
And we've rethought the way
analytics should be done with

798
00:34:29,159 --> 00:34:30,719
optimization at the core.

799
00:34:30,719 --> 00:34:32,530
It starts with the technology
we've built in our backend.

800
00:34:32,530 --> 00:34:35,409
And again, Andrew will cover
that more in detail.

801
00:34:35,409 --> 00:34:38,590
But we allow very flexible
queries, in real time.

802
00:34:38,590 --> 00:34:43,340
And all this package is
presented into a delightful

803
00:34:43,340 --> 00:34:45,400
product that's oriented
around the needs

804
00:34:45,400 --> 00:34:48,380
of the product manager.

805
00:34:48,380 --> 00:34:50,770
And now you can optimize things
like game dynamics,

806
00:34:50,770 --> 00:34:53,670
artwork, messaging,
and economies.

807
00:34:53,670 --> 00:34:56,110
And you can set up hundreds of
these tests all in real time.

808
00:34:56,110 --> 00:34:58,820

809
00:34:58,820 --> 00:34:59,950
Now, this shouldn't
be news to you.

810
00:34:59,950 --> 00:35:02,210
But mobile is becoming a
lot more competitive.

811
00:35:02,210 --> 00:35:05,330
And there is more than 200,000
games on the market.

812
00:35:05,330 --> 00:35:07,580
And the winners are going to be
separated from the losers,

813
00:35:07,580 --> 00:35:10,530
based on who can optimize
their games the best.

814
00:35:10,530 --> 00:35:14,540
In addition to that, we have
a revenue model shift here

815
00:35:14,540 --> 00:35:17,010
that's from paid apps
to free to play.

816
00:35:17,010 --> 00:35:19,120
And optimization is the
key to unlocking

817
00:35:19,120 --> 00:35:21,860
this new revenue source.

818
00:35:21,860 --> 00:35:23,720
So how are we doing so far?

819
00:35:23,720 --> 00:35:26,160
We're currently working with
several companies as part of

820
00:35:26,160 --> 00:35:27,110
our private beta.

821
00:35:27,110 --> 00:35:29,420
And they range from the hundreds
of companies who

822
00:35:29,420 --> 00:35:32,543
signed up on our website to
marquee customers such as Big

823
00:35:32,543 --> 00:35:33,793
Fish Games.

824
00:35:33,793 --> 00:35:35,180

825
00:35:35,180 --> 00:35:37,530
Today, we are announcing
the availability

826
00:35:37,530 --> 00:35:39,270
of our Android SDK.

827
00:35:39,270 --> 00:35:43,920
And we're also extending an
offer to companies here at GDC

828
00:35:43,920 --> 00:35:47,000
to join our beta, which is
still a private beta.

829
00:35:47,000 --> 00:35:52,060
You can sign up at our URL
here, leanplum.com/gdc.

830
00:35:52,060 --> 00:35:55,110
And we'll be happy to set up
some one on one time with you,

831
00:35:55,110 --> 00:35:58,560
walk through your use case and
also show you a demo and get

832
00:35:58,560 --> 00:36:00,320
you access.

833
00:36:00,320 --> 00:36:02,682
And with that, I'd like to
hand over to Andrew.

834
00:36:02,682 --> 00:36:06,290

835
00:36:06,290 --> 00:36:07,540
Actually, I'll sit over here.

836
00:36:07,540 --> 00:36:12,340

837
00:36:12,340 --> 00:36:12,610
ANDREW FIRST: Hi, everyone.

838
00:36:12,610 --> 00:36:13,520
I'm Andrew.

839
00:36:13,520 --> 00:36:15,960
I'm one of the co-founders
of Leanplum.

840
00:36:15,960 --> 00:36:17,990
So we're going to switch gears a
little bit and tell you more

841
00:36:17,990 --> 00:36:21,200
about how we built our system
using some of Google's cloud

842
00:36:21,200 --> 00:36:24,680
services and share some our
learnings along the way.

843
00:36:24,680 --> 00:36:26,670
So when we initially considered
what technologies

844
00:36:26,670 --> 00:36:28,050
to use for Leanplum, we had the

845
00:36:28,050 --> 00:36:30,960
following criteria in mind.

846
00:36:30,960 --> 00:36:32,820
So first, it should
be easy to build a

847
00:36:32,820 --> 00:36:34,490
minimum viable product.

848
00:36:34,490 --> 00:36:36,380
It should have a low
upfront cost.

849
00:36:36,380 --> 00:36:38,290
It should be easy to use.

850
00:36:38,290 --> 00:36:41,180
And it should scale well, as
we were anticipating having

851
00:36:41,180 --> 00:36:45,280
massive traffic spikes as we
signed up new customers into

852
00:36:45,280 --> 00:36:47,170
our service.

853
00:36:47,170 --> 00:36:50,950
So as we were out evaluating
technologies, we found that

854
00:36:50,950 --> 00:36:53,600
App Engine filled all
these requirements.

855
00:36:53,600 --> 00:36:56,650
So it was easy to set up, had
zero upfront costs, and it

856
00:36:56,650 --> 00:36:58,910
handled scaling automatically.

857
00:36:58,910 --> 00:37:00,610
And additionally, we were
already familiar with the

858
00:37:00,610 --> 00:37:04,590
technology, because we were
working at Google beforehand.

859
00:37:04,590 --> 00:37:07,580
But it's also a pretty familiar
Django [? stack ?] to

860
00:37:07,580 --> 00:37:09,505
anyone who's built Python
apps before.

861
00:37:09,505 --> 00:37:13,320

862
00:37:13,320 --> 00:37:15,670
So now let me walk you through
how we ended up building our

863
00:37:15,670 --> 00:37:20,180
service using some of
Google's services.

864
00:37:20,180 --> 00:37:22,550
So first, we started with a
simple website that needed a

865
00:37:22,550 --> 00:37:24,090
login system.

866
00:37:24,090 --> 00:37:27,290
And App Engine already provided
an easy to use login

867
00:37:27,290 --> 00:37:29,570
system using the user's API.

868
00:37:29,570 --> 00:37:34,410
That used a Google account
authentication system, so we

869
00:37:34,410 --> 00:37:37,770
didn't have to build out account
creation or deal with

870
00:37:37,770 --> 00:37:40,150
users who ended up forgetting
their passwords.

871
00:37:40,150 --> 00:37:43,330
So it was very simple
to get set up.

872
00:37:43,330 --> 00:37:45,960
And then next, we needed a way
to serve content into the app,

873
00:37:45,960 --> 00:37:48,540
as people needed to
make changes to

874
00:37:48,540 --> 00:37:49,840
their app on the fly.

875
00:37:49,840 --> 00:37:53,060
And so we needed a way to
serve files at scale.

876
00:37:53,060 --> 00:37:55,470
And the Blobstore API
was really good

877
00:37:55,470 --> 00:37:56,720
at doing just that.

878
00:37:56,720 --> 00:37:59,420

879
00:37:59,420 --> 00:38:02,350
Then next, we needed a way to
keep track of the different

880
00:38:02,350 --> 00:38:06,860
metrics in the app that would
ultimately be optimized.

881
00:38:06,860 --> 00:38:10,340
So for example, when a new
session started, it would need

882
00:38:10,340 --> 00:38:13,990
to write the session object and
then increment a counter.

883
00:38:13,990 --> 00:38:17,560
And so for that, we used the
Datastore API that Ryan talked

884
00:38:17,560 --> 00:38:20,330
about earlier-- the datastore's
built on Google's

885
00:38:20,330 --> 00:38:23,280
BigTable, internally.

886
00:38:23,280 --> 00:38:24,460
But there was a problem.

887
00:38:24,460 --> 00:38:29,220
The datastore is really great at
key value storage, but not

888
00:38:29,220 --> 00:38:31,730
so great for incrementing
counters.

889
00:38:31,730 --> 00:38:33,522
So every time you need to
increment a counter, you need

890
00:38:33,522 --> 00:38:36,000
to create a transaction where
first, you retrieve the

891
00:38:36,000 --> 00:38:37,440
existing value of the counter.

892
00:38:37,440 --> 00:38:41,390
And then you have to update the
new value simultaneously.

893
00:38:41,390 --> 00:38:44,030
And unfortunately, because of
that, there's a limit on the

894
00:38:44,030 --> 00:38:46,310
number of transactions you
can run per second

895
00:38:46,310 --> 00:38:49,620
on any given object.

896
00:38:49,620 --> 00:38:53,160
So to get around that, we
used the Memcache API.

897
00:38:53,160 --> 00:38:58,680
So Memcache provides an atomic
way to do increments.

898
00:38:58,680 --> 00:39:00,900
So for increment encounters,
we used Memcache.

899
00:39:00,900 --> 00:39:04,310
And then we took the values from
Memcache and then updated

900
00:39:04,310 --> 00:39:05,930
the datastore counters.

901
00:39:05,930 --> 00:39:08,540
So we got around the transaction
limit that way.

902
00:39:08,540 --> 00:39:11,110

903
00:39:11,110 --> 00:39:13,840
And then to run a report, we
would essentially run a query

904
00:39:13,840 --> 00:39:17,250
over the different counters
in the datastore.

905
00:39:17,250 --> 00:39:19,820
The datastore already provides
built-in indexing

906
00:39:19,820 --> 00:39:23,000
and querying support.

907
00:39:23,000 --> 00:39:26,500
But you can only query on the
fields that you index.

908
00:39:26,500 --> 00:39:29,520
So if you want to run arbitrary
queries on an

909
00:39:29,520 --> 00:39:31,880
arbitrary set of fields,
then you would need an

910
00:39:31,880 --> 00:39:32,970
index for each one.

911
00:39:32,970 --> 00:39:36,010
And so you would need hundreds
and hundreds of indexes, which

912
00:39:36,010 --> 00:39:38,500
would be very expensive
to maintain.

913
00:39:38,500 --> 00:39:41,400
So we needed, essentially, a
data warehouse system, where

914
00:39:41,400 --> 00:39:47,340
we could run these arbitrary
queries in near real time.

915
00:39:47,340 --> 00:39:52,000
And so for that, we used the
MapReduce API, which comes

916
00:39:52,000 --> 00:39:55,080
with App Engine, to collect all
the sessions and then feed

917
00:39:55,080 --> 00:39:57,290
that data into Google
BigQuery.

918
00:39:57,290 --> 00:40:00,260
Which as Ryan talked about
earlier, BigQuery allows you

919
00:40:00,260 --> 00:40:04,105
to run custom queries on your
data very, very fast.

920
00:40:04,105 --> 00:40:07,160

921
00:40:07,160 --> 00:40:10,380
Next we needed to make
our front end more

922
00:40:10,380 --> 00:40:11,670
interactive, as well.

923
00:40:11,670 --> 00:40:14,880
And so for that, we used the
Channels API, which allows you

924
00:40:14,880 --> 00:40:18,220
to communicate from your
backend to the front

925
00:40:18,220 --> 00:40:19,510
end, in real time.

926
00:40:19,510 --> 00:40:22,180
So as people are testing out
events on their devices, they

927
00:40:22,180 --> 00:40:24,633
can see the graphs actually
update instantaneously.

928
00:40:24,633 --> 00:40:28,360

929
00:40:28,360 --> 00:40:33,940
Then next, we needed a way to
encrypt our traffic, as

930
00:40:33,940 --> 00:40:36,260
companies were worried about
people cheating in their game.

931
00:40:36,260 --> 00:40:38,820
It was very easy
to set up SSL.

932
00:40:38,820 --> 00:40:40,670
Because App Engine is all
managed, we didn't have to

933
00:40:40,670 --> 00:40:43,330
write extra code or install
anything on our servers to get

934
00:40:43,330 --> 00:40:45,140
that to work.

935
00:40:45,140 --> 00:40:49,130
And then finally, we needed
a way to email our users.

936
00:40:49,130 --> 00:40:51,410
For example, when a user got
added to a team, they needed

937
00:40:51,410 --> 00:40:54,280
to be notified how to sign in.

938
00:40:54,280 --> 00:40:58,060
And so the Mail API provides
you an easy way to send

939
00:40:58,060 --> 00:40:59,310
emails, at scale.

940
00:40:59,310 --> 00:41:02,890

941
00:41:02,890 --> 00:41:06,240
So now that we had the basics
down, we needed to further

942
00:41:06,240 --> 00:41:09,830
optimize our service
to improve latency

943
00:41:09,830 --> 00:41:12,610
and reduce the costs.

944
00:41:12,610 --> 00:41:15,180
So here, I'm going to share some
of the discoveries that

945
00:41:15,180 --> 00:41:19,500
we made as we were developing
on Google App Engine.

946
00:41:19,500 --> 00:41:20,980
So first, App Engine
provides a really

947
00:41:20,980 --> 00:41:22,640
great way to do logging.

948
00:41:22,640 --> 00:41:25,560
It logs every single request and
all the logging statements

949
00:41:25,560 --> 00:41:27,080
in your app, so you can
see it all on the

950
00:41:27,080 --> 00:41:28,950
dashboard in one place.

951
00:41:28,950 --> 00:41:30,620
Then you can go and filter it.

952
00:41:30,620 --> 00:41:33,250
And you can also just view it--
view just the errors to

953
00:41:33,250 --> 00:41:38,060
see what might have gone
wrong in your app.

954
00:41:38,060 --> 00:41:41,360
It also provides something
called AppStats, which Ryan

955
00:41:41,360 --> 00:41:44,620
showed earlier, which allows you
to break down the requests

956
00:41:44,620 --> 00:41:48,360
that you make in your app by
every individual API call

957
00:41:48,360 --> 00:41:49,430
along a timeline.

958
00:41:49,430 --> 00:41:51,800
So you can see which calls take
the longest, which ones

959
00:41:51,800 --> 00:41:53,190
cost the most.

960
00:41:53,190 --> 00:41:56,540
So you can find the bottlenecks
and optimize those

961
00:41:56,540 --> 00:41:57,980
in your backend.

962
00:41:57,980 --> 00:42:01,850
And after using the AppStats
tool, we actually discovered

963
00:42:01,850 --> 00:42:07,570
that a lot of the time spent was
on waiting for datastore

964
00:42:07,570 --> 00:42:09,390
objects to be written.

965
00:42:09,390 --> 00:42:11,730
And that actually didn't need
to be on the critical path.

966
00:42:11,730 --> 00:42:13,790
So for example, when a new
session started, we didn't

967
00:42:13,790 --> 00:42:16,310
actually need the user to
wait for the session

968
00:42:16,310 --> 00:42:18,060
object to get written.

969
00:42:18,060 --> 00:42:21,540
So we actually used the task
queue to defer some of that

970
00:42:21,540 --> 00:42:23,200
work until later.

971
00:42:23,200 --> 00:42:25,630
And so that moved it off
the critical path.

972
00:42:25,630 --> 00:42:28,280
And we significantly cut
down on latency.

973
00:42:28,280 --> 00:42:31,130

974
00:42:31,130 --> 00:42:35,410
And some other tips for
optimizing your app-- one, if

975
00:42:35,410 --> 00:42:38,190
you don't need every field to be
indexed in your datastore,

976
00:42:38,190 --> 00:42:41,210
you can choose for those fields
not to get indexed.

977
00:42:41,210 --> 00:42:44,460
And then you can save a lot of
money on datastore writes.

978
00:42:44,460 --> 00:42:47,600
Because it won't need to write
those indexes every time.

979
00:42:47,600 --> 00:42:50,700
Second, if you can anticipate
how many front end instance

980
00:42:50,700 --> 00:42:53,420
hours you're going to be
using, you can actually

981
00:42:53,420 --> 00:42:54,980
reserve those up front.

982
00:42:54,980 --> 00:42:57,650
So you can get a discount
on the cost of

983
00:42:57,650 --> 00:42:59,880
the front end instances.

984
00:42:59,880 --> 00:43:03,800
And then finally, if you're
tending to read the same

985
00:43:03,800 --> 00:43:06,290
object over and over, you should
use the Memcache, which

986
00:43:06,290 --> 00:43:11,470
is a lower latency from the
datastore, and it's also free.

987
00:43:11,470 --> 00:43:13,640
And so what's next for us?

988
00:43:13,640 --> 00:43:16,570
Well, as we build out more
sophisticated features and

989
00:43:16,570 --> 00:43:19,510
more complex data processing,
we're looking into using

990
00:43:19,510 --> 00:43:21,250
Google Compute Engine
for that.

991
00:43:21,250 --> 00:43:25,160
It provides a lot more powerful
instances compared to

992
00:43:25,160 --> 00:43:26,890
the App Engine front
end instances.

993
00:43:26,890 --> 00:43:29,680
So it's really great for
complex computations.

994
00:43:29,680 --> 00:43:32,200

995
00:43:32,200 --> 00:43:34,800
And so that's Leanplum, and
that's how we took advantage

996
00:43:34,800 --> 00:43:36,530
of Google's Cloud Platform.

997
00:43:36,530 --> 00:43:39,040
As Momchil mentioned earlier,
we're looking to expand our

998
00:43:39,040 --> 00:43:40,680
early adopter program.

999
00:43:40,680 --> 00:43:43,740
So if you've got a mobile app,
and you're interested in A/B

1000
00:43:43,740 --> 00:43:48,160
testing and optimization, then
come and reach out to us.

1001
00:43:48,160 --> 00:43:50,856
Here's out email address,
founders@leanplum.com.

1002
00:43:50,856 --> 00:43:54,322
Or you can visit our website.

1003
00:43:54,322 --> 00:43:55,572
Thanks.

1004
00:43:55,572 --> 00:44:08,430

1005
00:44:08,430 --> 00:44:11,330
RYAN BOYD: OK, to wrap up this
first session here, I want to

1006
00:44:11,330 --> 00:44:12,670
talk about--

1007
00:44:12,670 --> 00:44:15,580
we have plenty of partners
that we're working on the

1008
00:44:15,580 --> 00:44:17,200
cloud platform with--

1009
00:44:17,200 --> 00:44:20,330
everything from technology
partners, who are building

1010
00:44:20,330 --> 00:44:22,630
Google Cloud Platform into their
software, as you saw a

1011
00:44:22,630 --> 00:44:25,410
little bit earlier, making it
easy for people to use the

1012
00:44:25,410 --> 00:44:28,570
Google Cloud Platform along
with their software, to

1013
00:44:28,570 --> 00:44:31,990
service partners that are
helping people integrate the

1014
00:44:31,990 --> 00:44:34,910
Google Cloud Platform into their
existing infrastructure.

1015
00:44:34,910 --> 00:44:37,820
So there's plenty of partners
that are helping us with this.

1016
00:44:37,820 --> 00:44:40,450
If you have any questions about
those partners, we do

1017
00:44:40,450 --> 00:44:42,950
actually have some folks from
our team available today that

1018
00:44:42,950 --> 00:44:44,320
can answer some of
those questions.

1019
00:44:44,320 --> 00:44:48,260
But rest assured that the cloud
platform is going to be

1020
00:44:48,260 --> 00:44:51,826
integrated into many of the
software packages which you

1021
00:44:51,826 --> 00:44:54,530
already use, as well as many
of the companies that you

1022
00:44:54,530 --> 00:44:58,005
already rely upon to handle
your services are learning

1023
00:44:58,005 --> 00:45:03,180
about and integrating the cloud
platform for customers.

1024
00:45:03,180 --> 00:45:04,830
I also want to talk to you
about the App Engine for

1025
00:45:04,830 --> 00:45:06,250
Startups Program.

1026
00:45:06,250 --> 00:45:11,460
This is a program that we
actually give credits for App

1027
00:45:11,460 --> 00:45:14,135
Engine to startups that
were building on top

1028
00:45:14,135 --> 00:45:15,420
of Google App Engine.

1029
00:45:15,420 --> 00:45:19,610
So during this month, there's
only a couple days left, but

1030
00:45:19,610 --> 00:45:23,120
you can apply for a $1,000
credit on App Engine.

1031
00:45:23,120 --> 00:45:24,730
So you can visit the URL here.

1032
00:45:24,730 --> 00:45:26,910
There's a special code we've
created for GDC.

1033
00:45:26,910 --> 00:45:30,550
Anyone that's attending GDC and
this session is welcome to

1034
00:45:30,550 --> 00:45:34,320
apply there if they want a
$1,000 credit to get going on

1035
00:45:34,320 --> 00:45:35,210
App Engine.

1036
00:45:35,210 --> 00:45:38,990
Now App Engine is free to start
for everyone, overall.

1037
00:45:38,990 --> 00:45:41,120
But there's a limit on the
number of requests and things

1038
00:45:41,120 --> 00:45:42,950
like that for free
applications.

1039
00:45:42,950 --> 00:45:46,520
So if you want to dive a little
bit deeper and want to

1040
00:45:46,520 --> 00:45:49,390
get a $1,000 credit, please
definitely fill out that form

1041
00:45:49,390 --> 00:45:54,290
and apply with the
code GDC-01.

1042
00:45:54,290 --> 00:45:55,605
Just wait a second there
if anyone wants to

1043
00:45:55,605 --> 00:45:56,980
write any of that down.

1044
00:45:56,980 --> 00:45:58,410
But next, we're going
to really go into

1045
00:45:58,410 --> 00:45:59,230
question and answer.

1046
00:45:59,230 --> 00:46:00,510
So we're happy--

1047
00:46:00,510 --> 00:46:02,090
Andrew, Momchil, and myself--

1048
00:46:02,090 --> 00:46:04,040
we're happy to take any
questions you have about the

1049
00:46:04,040 --> 00:46:06,770
cloud platform, about Leanplum,
or how Leanplum has

1050
00:46:06,770 --> 00:46:11,250
integrated with the Google
Cloud Platform.

1051
00:46:11,250 --> 00:46:12,610
Any questions?

1052
00:46:12,610 --> 00:46:15,130
And there's actually a mic here
in the center for you

1053
00:46:15,130 --> 00:46:16,680
guys to come up to if
you have questions.

1054
00:46:16,680 --> 00:46:24,780

1055
00:46:24,780 --> 00:46:26,810
AUDIENCE: So I actually
had a question about

1056
00:46:26,810 --> 00:46:29,050
your support in China.

1057
00:46:29,050 --> 00:46:30,980
RYAN BOYD: OK, I may not
be able to answer it.

1058
00:46:30,980 --> 00:46:32,020
But we can try.

1059
00:46:32,020 --> 00:46:34,940
AUDIENCE: Well, just
where are you at--

1060
00:46:34,940 --> 00:46:37,142
we run [? Dragonvale ?] servers
and people can't

1061
00:46:37,142 --> 00:46:39,630
access them from China.

1062
00:46:39,630 --> 00:46:43,960
Is there any sort of
planned support for

1063
00:46:43,960 --> 00:46:44,890
actually making that work?

1064
00:46:44,890 --> 00:46:47,215
Or do we have to proxy
around it?

1065
00:46:47,215 --> 00:46:48,620
What's the recommended
workaround?

1066
00:46:48,620 --> 00:46:50,490
RYAN BOYD: Actually, I don't
have an answer to give you

1067
00:46:50,490 --> 00:46:51,800
right now on that.

1068
00:46:51,800 --> 00:46:53,410
But I'm happy-- if you chat with
me later, I can give you

1069
00:46:53,410 --> 00:46:54,660
my email address.

1070
00:46:54,660 --> 00:46:56,506
And we can take that offline.

1071
00:46:56,506 --> 00:46:57,880
Sorry.

1072
00:46:57,880 --> 00:46:59,500
Thanks.

1073
00:46:59,500 --> 00:47:00,360
Any other questions?

1074
00:47:00,360 --> 00:47:02,200
Yeah, I mean you can scream it
out, and I'll repeat it.

1075
00:47:02,200 --> 00:47:03,230
Or you can go up there.

1076
00:47:03,230 --> 00:47:04,106
Either way.

1077
00:47:04,106 --> 00:47:06,050
AUDIENCE: Why don't you
repeat the question?

1078
00:47:06,050 --> 00:47:07,240
RYAN BOYD: Oh, sorry.

1079
00:47:07,240 --> 00:47:10,800
So he was asking about our
support for users in China and

1080
00:47:10,800 --> 00:47:13,150
cloud platform being accessible
to users in China.

1081
00:47:13,150 --> 00:47:15,480
And I don't know the details
around that, so I have to

1082
00:47:15,480 --> 00:47:18,360
follow up later.

1083
00:47:18,360 --> 00:47:20,266
Any other questions?

1084
00:47:20,266 --> 00:47:22,180
AUDIENCE: [INAUDIBLE].

1085
00:47:22,180 --> 00:47:24,428
RYAN BOYD: Sure.

1086
00:47:24,428 --> 00:47:28,892
AUDIENCE: So is there any
support for running C

1087
00:47:28,892 --> 00:47:31,868
extensions, Python extension,
in App Engine?

1088
00:47:31,868 --> 00:47:33,852
Or is that just [? hopeless ?]

1089
00:47:33,852 --> 00:47:35,350
[INAUDIBLE]?

1090
00:47:35,350 --> 00:47:36,890
RYAN BOYD: So the question is,
is there any support for

1091
00:47:36,890 --> 00:47:41,550
running C extensions within
Python on App Engine?

1092
00:47:41,550 --> 00:47:43,720
And basically, we have
a set of extensions

1093
00:47:43,720 --> 00:47:44,760
that we've made available.

1094
00:47:44,760 --> 00:47:47,160
And we deal with the
sandboxing of those

1095
00:47:47,160 --> 00:47:48,020
extensions.

1096
00:47:48,020 --> 00:47:50,040
It's a multi-tenant environment,
so we need to

1097
00:47:50,040 --> 00:47:52,960
make sure it's sandboxed
appropriately for security.

1098
00:47:52,960 --> 00:47:56,300
If it's not in that list, no, we
don't currently provide the

1099
00:47:56,300 --> 00:47:58,610
direct way for you to run
it on App Engine.

1100
00:47:58,610 --> 00:48:00,870
But that's where you can think
about having Compute Engine,

1101
00:48:00,870 --> 00:48:03,760
Backends handling some of your
traffic if there's particular

1102
00:48:03,760 --> 00:48:07,750
parts of your application
which would need that.

1103
00:48:07,750 --> 00:48:09,000
Any other questions?

1104
00:48:09,000 --> 00:48:11,640

1105
00:48:11,640 --> 00:48:12,870
All right, well, thank
you, everyone, for

1106
00:48:12,870 --> 00:48:15,120
coming to this part.

1107
00:48:15,120 --> 00:48:16,490
And I'll put up the slide
here with the rest.

1108
00:48:16,490 --> 00:48:18,040
[APPLAUSE]

