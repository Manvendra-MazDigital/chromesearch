1
00:00:00,000 --> 00:00:00,500

2
00:00:00,500 --> 00:00:03,090
PAUL IRISH: We have Tom
Wiltzius and Nat Duca.

3
00:00:03,090 --> 00:00:07,470
They are on the Chrome
Graphics team and hack all day

4
00:00:07,470 --> 00:00:08,630
on the graphic stack.

5
00:00:08,630 --> 00:00:13,061
They're dedicated to making
you as a developer understand

6
00:00:13,061 --> 00:00:15,560
what's going on so that you can
make sure that your apps are

7
00:00:15,560 --> 00:00:19,500
fast, fluid, and awesome and
then simultaneously dedicated

8
00:00:19,500 --> 00:00:22,290
to improving that platform
so that you don't have

9
00:00:22,290 --> 00:00:25,200
to work so hard to do that,
and you just get it for free.

10
00:00:25,200 --> 00:00:28,410
I'm really excited, and
please put your hands together

11
00:00:28,410 --> 00:00:30,188
for Nat and Tom.

12
00:00:30,188 --> 00:00:34,544
[APPLAUSE]

13
00:00:34,544 --> 00:00:38,340

14
00:00:38,340 --> 00:00:39,590
TOM WILTZIUS: Hello, everyone.

15
00:00:39,590 --> 00:00:41,580
My name's Tom
Wiltzius, as Paul said.

16
00:00:41,580 --> 00:00:43,350
NAT DUCA: I'm Nat Duca.

17
00:00:43,350 --> 00:00:44,880
Nice to see everybody here.

18
00:00:44,880 --> 00:00:45,671
TOM WILTZIUS: Yeah.

19
00:00:45,671 --> 00:00:47,550
And we're from the
Chrome Graphics team.

20
00:00:47,550 --> 00:00:51,470
I'm going to use the laptop
instead of the clicker

21
00:00:51,470 --> 00:00:53,250
so we can play videos.

22
00:00:53,250 --> 00:00:55,811
We're here today to talk
about rendering performance.

23
00:00:55,811 --> 00:00:57,560
And we want to start
off with a few basics

24
00:00:57,560 --> 00:00:59,435
that we're not going to
cover in much detail,

25
00:00:59,435 --> 00:01:02,590
because there is a ton of great
content available on the web

26
00:01:02,590 --> 00:01:04,000
about this stuff already.

27
00:01:04,000 --> 00:01:05,310
We've talked about it before.

28
00:01:05,310 --> 00:01:08,220
Other folks on our
Developer Relations team

29
00:01:08,220 --> 00:01:10,720
have talked about it before.

30
00:01:10,720 --> 00:01:13,391
But we want to make sure
we're all on the same page.

31
00:01:13,391 --> 00:01:15,390
NAT DUCA: So the pages
that we want you to be on

32
00:01:15,390 --> 00:01:18,260
are the following, right?

33
00:01:18,260 --> 00:01:20,630
You got the screens
here, lots of them.

34
00:01:20,630 --> 00:01:23,350
They're all running at about
60 hertz, but maybe not.

35
00:01:23,350 --> 00:01:26,300
16 milliseconds is a number that
you want to keep in your mind.

36
00:01:26,300 --> 00:01:28,540
We heard [? Elia ?] talking
about numbers much bigger

37
00:01:28,540 --> 00:01:31,527
than 16 milliseconds, so this
is a much smaller time frame.

38
00:01:31,527 --> 00:01:34,110
But it's super, super important
that if you want to be smooth,

39
00:01:34,110 --> 00:01:35,510
you've got to hit that budget.

40
00:01:35,510 --> 00:01:35,810
TOM WILTZIUS: That's right.

41
00:01:35,810 --> 00:01:37,200
And there's a lot
of stuff that needs

42
00:01:37,200 --> 00:01:38,540
to go into that 16 milliseconds.

43
00:01:38,540 --> 00:01:40,520
The rendering system's
really complicated.

44
00:01:40,520 --> 00:01:43,210
We're going to walk through the
various stages in the rendering

45
00:01:43,210 --> 00:01:44,900
pipeline in this talk.

46
00:01:44,900 --> 00:01:47,330
But it's challenging
to fit everything

47
00:01:47,330 --> 00:01:48,790
into 16 milliseconds.

48
00:01:48,790 --> 00:01:51,100
And this means that
you should be working

49
00:01:51,100 --> 00:01:53,367
with the browser
whenever possible.

50
00:01:53,367 --> 00:01:55,450
This means using things
like requestAnimationFrame

51
00:01:55,450 --> 00:01:58,420
rather than a timer
to run animations.

52
00:01:58,420 --> 00:02:01,480
This means using things like
CSS animations, when possible,

53
00:02:01,480 --> 00:02:05,240
rather than doing everything
yourself in JavaScript.

54
00:02:05,240 --> 00:02:07,609
And yeah, just
trying to play nice.

55
00:02:07,609 --> 00:02:08,650
NAT DUCA: Please be nice.

56
00:02:08,650 --> 00:02:10,483
TOM WILTZIUS: There's
more content available

57
00:02:10,483 --> 00:02:11,393
at those links.

58
00:02:11,393 --> 00:02:12,080
NAT DUCA: Yeah.

59
00:02:12,080 --> 00:02:14,940
So we all know, and we've
known for many years,

60
00:02:14,940 --> 00:02:18,460
that if you have good
load times for your pages,

61
00:02:18,460 --> 00:02:21,110
your user engagement will
be much better than if you

62
00:02:21,110 --> 00:02:22,259
have bad load times.

63
00:02:22,259 --> 00:02:23,800
There's another part
of this business

64
00:02:23,800 --> 00:02:25,258
that we don't talk
about but that's

65
00:02:25,258 --> 00:02:28,700
obvious to mobile developers,
which is your responsiveness,

66
00:02:28,700 --> 00:02:29,480
right?

67
00:02:29,480 --> 00:02:31,510
We've got two videos
here going that are

68
00:02:31,510 --> 00:02:35,907
a good responsive page that is
smooth, and one that's janky.

69
00:02:35,907 --> 00:02:37,740
You've got to think of
this as a first order

70
00:02:37,740 --> 00:02:40,070
part of your business
as creating a web app.

71
00:02:40,070 --> 00:02:41,340
I think most of you know this.

72
00:02:41,340 --> 00:02:43,540
But it's really worth hammering
that home up to the bosses

73
00:02:43,540 --> 00:02:45,540
that this is something
you don't fix at the end,

74
00:02:45,540 --> 00:02:47,406
you think about
throughout the life cycle

75
00:02:47,406 --> 00:02:49,030
of whatever it is
that you're building.

76
00:02:49,030 --> 00:02:50,155
TOM WILTZIUS: That's right.

77
00:02:50,155 --> 00:02:54,650
And especially, we're going to
talk a lot today about things

78
00:02:54,650 --> 00:02:57,450
that impact mobile
devices more than they

79
00:02:57,450 --> 00:02:59,460
impact, say, this laptop.

80
00:02:59,460 --> 00:03:02,560
And this kind of
difference, this difference

81
00:03:02,560 --> 00:03:05,020
in responsiveness,
the difference

82
00:03:05,020 --> 00:03:07,912
comes out much more on
said mobile devices, right?

83
00:03:07,912 --> 00:03:09,370
This is one of the
key distinctions

84
00:03:09,370 --> 00:03:11,120
between native
application development

85
00:03:11,120 --> 00:03:14,670
platforms on Android or
iOS and the mobile web

86
00:03:14,670 --> 00:03:18,390
is that things feel webby when
they lag, when they're slow,

87
00:03:18,390 --> 00:03:19,430
when they're jittery.

88
00:03:19,430 --> 00:03:21,350
And your users are going to
notice the difference, even

89
00:03:21,350 --> 00:03:22,641
if they're not conscious of it.

90
00:03:22,641 --> 00:03:24,100
It doesn't feel as nice.

91
00:03:24,100 --> 00:03:28,150
It's one of the tells, so
to speak, of a web app.

92
00:03:28,150 --> 00:03:30,840
And that's unfortunate, and
that's what we want to avoid.

93
00:03:30,840 --> 00:03:31,550
NAT DUCA: So we've been nice.

94
00:03:31,550 --> 00:03:32,660
And now let's talk tech.

95
00:03:32,660 --> 00:03:33,784
TOM WILTZIUS: That's right.

96
00:03:33,784 --> 00:03:37,340
So if any of you have
seen us talk before,

97
00:03:37,340 --> 00:03:40,270
we're going to go
through some content that

98
00:03:40,270 --> 00:03:43,430
should be fairly familiar about
how the painting system works,

99
00:03:43,430 --> 00:03:45,030
how the compositing
system works.

100
00:03:45,030 --> 00:03:45,960
And then we're going to
talk about some stuff

101
00:03:45,960 --> 00:03:47,730
that we haven't
talked about before.

102
00:03:47,730 --> 00:03:50,340
So with that in mind, we're
going to kind of fast,

103
00:03:50,340 --> 00:03:52,720
but bear with us.

104
00:03:52,720 --> 00:03:56,360
If you think about
how pixels get

105
00:03:56,360 --> 00:03:58,720
on the screen of,
say, a mobile phone,

106
00:03:58,720 --> 00:04:00,940
there's a whole slew of
stuff that needs to happen.

107
00:04:00,940 --> 00:04:02,430
From the perspective
of JavaScript,

108
00:04:02,430 --> 00:04:03,600
it's all of this stuff.

109
00:04:03,600 --> 00:04:04,225
NAT DUCA: Yeah.

110
00:04:04,225 --> 00:04:07,002
So this sort of thing makes
the actual Chrome engineers

111
00:04:07,002 --> 00:04:08,960
try to kill themselves,
because it's all a lie.

112
00:04:08,960 --> 00:04:10,820
But from the point of
view of the web developer,

113
00:04:10,820 --> 00:04:12,510
there are these
various pipeline stages

114
00:04:12,510 --> 00:04:14,020
that your content goes through.

115
00:04:14,020 --> 00:04:16,000
You start off with
your JS and your DOM.

116
00:04:16,000 --> 00:04:17,279
It has to be styled.

117
00:04:17,279 --> 00:04:21,130
That has sort of two big
steps-- layout and recalc style.

118
00:04:21,130 --> 00:04:23,640
The first part is where you're
taking all your CSS selectors

119
00:04:23,640 --> 00:04:25,230
and figuring out
which apply to what.

120
00:04:25,230 --> 00:04:28,870
Second part is figuring out
where things are positionally.

121
00:04:28,870 --> 00:04:30,620
Eventually you've got
all that stuff done.

122
00:04:30,620 --> 00:04:31,536
You're still not done.

123
00:04:31,536 --> 00:04:33,950
You've got to basically take
all of that computed stuff

124
00:04:33,950 --> 00:04:38,110
and turn it in to actual pixels,
RGB values, in memory somewhere

125
00:04:38,110 --> 00:04:39,240
or on a GPU.

126
00:04:39,240 --> 00:04:41,200
And we do that in
two parts right now.

127
00:04:41,200 --> 00:04:43,800
First we paint, which is
where we take all of the lines

128
00:04:43,800 --> 00:04:45,090
and we rasterize them.

129
00:04:45,090 --> 00:04:48,350
And the second part is we take
all those textures that we made

130
00:04:48,350 --> 00:04:50,120
and we smash them
together on the screen

131
00:04:50,120 --> 00:04:51,370
using the compositor.

132
00:04:51,370 --> 00:04:53,790
And that's the stage where
you hear layers come about.

133
00:04:53,790 --> 00:04:54,915
TOM WILTZIUS: That's right.

134
00:04:54,915 --> 00:04:58,060
And so you can actually see this
pipeline in action in DevTools.

135
00:04:58,060 --> 00:05:00,350
We really, really like
the DevTools timeline view

136
00:05:00,350 --> 00:05:04,320
because it not only shows you
each of these pipeline stages

137
00:05:04,320 --> 00:05:07,749
happening, but it also shows
you how long each stage took.

138
00:05:07,749 --> 00:05:10,165
Which means that you have some
sense of where the time may

139
00:05:10,165 --> 00:05:14,880
be eaten up if you have some
janky interaction on your page.

140
00:05:14,880 --> 00:05:17,900
And usually the
first thing I do when

141
00:05:17,900 --> 00:05:21,230
I'm trying to debug some
slow site for whatever reason

142
00:05:21,230 --> 00:05:24,565
is I open it up and I take a
timeline recording of whatever

143
00:05:24,565 --> 00:05:25,440
it was that was slow.

144
00:05:25,440 --> 00:05:29,680
And I start to get some sense
of the breakdown of where

145
00:05:29,680 --> 00:05:32,730
that time is going and what it
is that's causing a lot of time

146
00:05:32,730 --> 00:05:33,230
to be eaten.

147
00:05:33,230 --> 00:05:35,105
NAT DUCA: This is your
first line of defense,

148
00:05:35,105 --> 00:05:36,706
really, when it comes
to jank busting.

149
00:05:36,706 --> 00:05:37,830
TOM WILTZIUS: That's right.

150
00:05:37,830 --> 00:05:40,050
And if you think
about what properties

151
00:05:40,050 --> 00:05:43,670
you can animate in CSS, you
know CSS will let you animate

152
00:05:43,670 --> 00:05:44,910
whatever you want, right?

153
00:05:44,910 --> 00:05:48,270
But it's important to realize
that not all of these things

154
00:05:48,270 --> 00:05:49,640
are created equal.

155
00:05:49,640 --> 00:05:55,150
If you change something like the
opacity value on some element,

156
00:05:55,150 --> 00:05:59,320
then all we need to do behind
the scenes is recomposite.

157
00:05:59,320 --> 00:06:01,090
Turns out compositing
is fairly cheap.

158
00:06:01,090 --> 00:06:03,360
We can do it on the GPU.

159
00:06:03,360 --> 00:06:06,180
And we can composite
every frame, no problem.

160
00:06:06,180 --> 00:06:08,330
In fact, Chrome needs to
composite every frame just

161
00:06:08,330 --> 00:06:10,060
to make a new screen image.

162
00:06:10,060 --> 00:06:13,500
But then you compare that to
something like width or top.

163
00:06:13,500 --> 00:06:17,210
And all of a sudden, you modify
the width property and maybe

164
00:06:17,210 --> 00:06:18,650
some text [? tree ?] flows.

165
00:06:18,650 --> 00:06:21,460
We need to do a
lot of re-layout.

166
00:06:21,460 --> 00:06:23,060
And everything that
got re-layed out,

167
00:06:23,060 --> 00:06:25,607
and maybe more stuff around
it, needs to be repainted.

168
00:06:25,607 --> 00:06:27,190
And then everything
that got repainted

169
00:06:27,190 --> 00:06:28,580
needs to be recomposited.

170
00:06:28,580 --> 00:06:30,670
And all of a sudden,
this whole pipeline

171
00:06:30,670 --> 00:06:33,030
is kind of in action,
which is very difficult

172
00:06:33,030 --> 00:06:34,152
to fit in 16 milliseconds.

173
00:06:34,152 --> 00:06:35,860
NAT DUCA: You're now
in danger territory.

174
00:06:35,860 --> 00:06:37,443
The more left you
go in this pipeline,

175
00:06:37,443 --> 00:06:39,160
the more you're risking jank.

176
00:06:39,160 --> 00:06:39,951
TOM WILTZIUS: Yeah.

177
00:06:39,951 --> 00:06:41,890
But it's not just the
more left, there's

178
00:06:41,890 --> 00:06:46,520
kind of a big cliff
right about there.

179
00:06:46,520 --> 00:06:48,420
One of these things is
not like the others.

180
00:06:48,420 --> 00:06:50,420
Painting is really slow.

181
00:06:50,420 --> 00:06:52,500
NAT DUCA: It's
like, really slow.

182
00:06:52,500 --> 00:06:54,300
And we wanted to
share some numbers.

183
00:06:54,300 --> 00:06:55,133
TOM WILTZIUS: Right.

184
00:06:55,133 --> 00:06:57,730
So this is data from
Chrome Perf, which

185
00:06:57,730 --> 00:07:03,460
is the dashboard that was
mentioned earlier this morning.

186
00:07:03,460 --> 00:07:06,100
We have a rasterization
time metric.

187
00:07:06,100 --> 00:07:08,187
And if you look at
a Nexus 10 and you

188
00:07:08,187 --> 00:07:09,770
take a site like the
"New York Times,"

189
00:07:09,770 --> 00:07:12,830
takes 10 milliseconds
to raster just

190
00:07:12,830 --> 00:07:14,730
the content that's
currently visible, say,

191
00:07:14,730 --> 00:07:15,900
during the page load.

192
00:07:15,900 --> 00:07:17,025
NAT DUCA: So that's better.

193
00:07:17,025 --> 00:07:19,810
I mean 10 is not--
OK, sure, fine.

194
00:07:19,810 --> 00:07:21,990
Like, eh, why are
you on about this?

195
00:07:21,990 --> 00:07:23,560
TOM WILTZIUS: Because then you
go to a site like The Verge,

196
00:07:23,560 --> 00:07:25,935
and all of a sudden, it takes
107 milliseconds to raster.

197
00:07:25,935 --> 00:07:27,300
NAT DUCA: This is not fast.

198
00:07:27,300 --> 00:07:27,580
TOM WILTZIUS: Right.

199
00:07:27,580 --> 00:07:29,200
And then you go
to Cute Overload,

200
00:07:29,200 --> 00:07:31,730
and it takes 214 milliseconds
to raster, right?

201
00:07:31,730 --> 00:07:35,160
NAT DUCA: Which is a
lovely site, right?

202
00:07:35,160 --> 00:07:36,254
TOM WILTZIUS: Right.

203
00:07:36,254 --> 00:07:37,920
I'm not pooh-poohing
any of these sites.

204
00:07:37,920 --> 00:07:40,140
I'm just saying, there
is an incredible amount

205
00:07:40,140 --> 00:07:43,060
of unpredictability in how
long things take to paint.

206
00:07:43,060 --> 00:07:46,360
And if you think about this
in terms of frames, which

207
00:07:46,360 --> 00:07:49,800
is kind of a good
logical unit to consider,

208
00:07:49,800 --> 00:07:51,460
then all of a
sudden, you can see

209
00:07:51,460 --> 00:07:55,795
that 214 milliseconds,
that's 13 frames at 16

210
00:07:55,795 --> 00:07:56,670
milliseconds a frame.

211
00:07:56,670 --> 00:07:58,770
That means that you
end up in this position

212
00:07:58,770 --> 00:08:00,850
where if you really
want to be repainting

213
00:08:00,850 --> 00:08:04,344
all that content every frame,
there's just no way, right?

214
00:08:04,344 --> 00:08:05,510
NAT DUCA: Seconds per frame.

215
00:08:05,510 --> 00:08:07,790
TOM WILTZIUS: This means
that your frames per second

216
00:08:07,790 --> 00:08:08,975
goes way, way, way down.

217
00:08:08,975 --> 00:08:09,933
You're nowhere near 60.

218
00:08:09,933 --> 00:08:10,720
NAT DUCA: Four.

219
00:08:10,720 --> 00:08:12,270
Is that smooth?

220
00:08:12,270 --> 00:08:14,630
TOM WILTZIUS: Right.

221
00:08:14,630 --> 00:08:19,610
And this is exacerbated
when, as I kind of alluded

222
00:08:19,610 --> 00:08:21,840
on the last slide, you end
up in this position where

223
00:08:21,840 --> 00:08:24,770
you need to paint things
on a per frame basis.

224
00:08:24,770 --> 00:08:27,757
So we call this a paint storm.

225
00:08:27,757 --> 00:08:30,340
If you go into DevTools and you
turn on Show Paint Rectangles,

226
00:08:30,340 --> 00:08:33,409
you'll get a red flash on
the part of the screen that

227
00:08:33,409 --> 00:08:35,724
repaints every time it repaints.

228
00:08:35,724 --> 00:08:38,140
This is cool because it means
that you can see that during

229
00:08:38,140 --> 00:08:41,690
this interaction-- this is Nat's
fat finger moving up and down

230
00:08:41,690 --> 00:08:42,190
on--

231
00:08:42,190 --> 00:08:43,159
NAT DUCA: It's a fine
finger, isn't it?

232
00:08:43,159 --> 00:08:44,880
TOM WILTZIUS: --a demo he made.

233
00:08:44,880 --> 00:08:47,837
You can see that there are
key points in that interaction

234
00:08:47,837 --> 00:08:50,170
where, all of a sudden, there
are these red flashes that

235
00:08:50,170 --> 00:08:51,711
show up and cover the screen.

236
00:08:51,711 --> 00:08:52,960
And this is really bad, right?

237
00:08:52,960 --> 00:08:55,418
Because that means that every
time one of those red flashes

238
00:08:55,418 --> 00:08:58,290
shows up, then we're paying a
lot of this significant paint

239
00:08:58,290 --> 00:08:59,100
cost, right?

240
00:08:59,100 --> 00:09:02,194
And if you were to show sort
of like a timeline view of this

241
00:09:02,194 --> 00:09:04,360
in Developer Tools, you'd
be able to see exactly how

242
00:09:04,360 --> 00:09:06,350
long each of those
paints were taking.

243
00:09:06,350 --> 00:09:07,535
NAT DUCA: Yeah.

244
00:09:07,535 --> 00:09:10,170
And we see a lot of sites
that basically get pretty far

245
00:09:10,170 --> 00:09:13,410
along in their lifetime before
they even look at paint rects.

246
00:09:13,410 --> 00:09:16,260
And at that point, you've added
so much complexity to your DOM.

247
00:09:16,260 --> 00:09:19,040
You've got 73 different
things all going on.

248
00:09:19,040 --> 00:09:20,940
You no longer know
which is the one that's

249
00:09:20,940 --> 00:09:22,670
causing the storm,
what's going wrong.

250
00:09:22,670 --> 00:09:24,860
And so you want to
keep your eye out

251
00:09:24,860 --> 00:09:27,630
for this from the
beginning of your content

252
00:09:27,630 --> 00:09:31,260
through its lifetime in
order to defend against this.

253
00:09:31,260 --> 00:09:32,190
Now the defense.

254
00:09:32,190 --> 00:09:34,460
You know, the first line
of defense in this space

255
00:09:34,460 --> 00:09:35,217
is layers, right?

256
00:09:35,217 --> 00:09:36,050
We've alluded to it.

257
00:09:36,050 --> 00:09:38,046
We've talked a lot
about it on Jank Free.

258
00:09:38,046 --> 00:09:40,420
You can look at that demo and
think about it in your head

259
00:09:40,420 --> 00:09:41,280
and go, well, yeah.

260
00:09:41,280 --> 00:09:43,560
They're these pieces, and
they're just moving around.

261
00:09:43,560 --> 00:09:45,720
So what we can do to
make this smoother

262
00:09:45,720 --> 00:09:47,940
is keep each one
of those in a layer

263
00:09:47,940 --> 00:09:49,770
and add them all together.

264
00:09:49,770 --> 00:09:52,360
And if you sort of think about,
then, the movement from frame

265
00:09:52,360 --> 00:09:55,400
to frame to frame is us just
moving these layers around

266
00:09:55,400 --> 00:09:58,074
on the screen, no
repainting is necessary.

267
00:09:58,074 --> 00:09:59,490
So that means we
don't have to get

268
00:09:59,490 --> 00:10:02,000
those left parts of the
pipeline running that are slow,

269
00:10:02,000 --> 00:10:04,630
the purples and the greens.

270
00:10:04,630 --> 00:10:07,610
And so in theory, this
is smoother, right?

271
00:10:07,610 --> 00:10:09,950
And so this is
just the same thing

272
00:10:09,950 --> 00:10:15,250
but redone to be no
repaints, or very few.

273
00:10:15,250 --> 00:10:16,919
And so it's a lot smoother.

274
00:10:16,919 --> 00:10:17,710
TOM WILTZIUS: Yeah.

275
00:10:17,710 --> 00:10:19,490
And actually, you can
see-- it's probably

276
00:10:19,490 --> 00:10:20,948
pretty small on
the screen, but you

277
00:10:20,948 --> 00:10:23,480
can see that there are some
red flashes still happening

278
00:10:23,480 --> 00:10:26,212
along the far right side of
the mobile device screen.

279
00:10:26,212 --> 00:10:28,420
That's just us repainting
the scroll bar, which we do

280
00:10:28,420 --> 00:10:28,620
[INAUDIBLE].

281
00:10:28,620 --> 00:10:28,770
NAT DUCA: Scroll bars.

282
00:10:28,770 --> 00:10:29,355
We haven't optimized them.

283
00:10:29,355 --> 00:10:30,060
They're small.

284
00:10:30,060 --> 00:10:31,550
TOM WILTZIUS: But you can
see that other than that,

285
00:10:31,550 --> 00:10:32,920
there are no red flashes.

286
00:10:32,920 --> 00:10:33,320
NAT DUCA: So that's better.

287
00:10:33,320 --> 00:10:34,445
TOM WILTZIUS: This is good.

288
00:10:34,445 --> 00:10:36,330
The point here is
that you want to try

289
00:10:36,330 --> 00:10:38,900
to decompose the
structure of your page

290
00:10:38,900 --> 00:10:42,890
into logical units that
map well to layers.

291
00:10:42,890 --> 00:10:45,390
And these logical units should
be things that move together,

292
00:10:45,390 --> 00:10:48,830
that fade together, or that,
maybe, stretch together.

293
00:10:48,830 --> 00:10:51,020
These are things that
are easy to express

294
00:10:51,020 --> 00:10:53,726
in terms of the
layering triggers

295
00:10:53,726 --> 00:10:55,350
that we have on the
web platform today.

296
00:10:55,350 --> 00:10:57,475
NAT DUCA: We should make
a postcard that says that.

297
00:10:57,475 --> 00:10:59,099
Like move together,
stretch together.

298
00:10:59,099 --> 00:11:01,140
TOM WILTZIUS: And basically,
this maps to the set

299
00:11:01,140 --> 00:11:01,639
of things--

300
00:11:01,639 --> 00:11:02,510
NAT DUCA: Anybody?

301
00:11:02,510 --> 00:11:03,926
TOM WILTZIUS: This
maps to the set

302
00:11:03,926 --> 00:11:05,560
of things that GPUs are good at.

303
00:11:05,560 --> 00:11:09,632
Like GPUs are OK at the
kind of rasterization

304
00:11:09,632 --> 00:11:11,090
that Nat was talking
about earlier.

305
00:11:11,090 --> 00:11:14,025
But they're really good at
these bulk pixel operations.

306
00:11:14,025 --> 00:11:14,650
NAT DUCA: Yeah.

307
00:11:14,650 --> 00:11:16,200
So think in terms of layers.

308
00:11:16,200 --> 00:11:19,580
It's really, really that
key building block right now

309
00:11:19,580 --> 00:11:21,230
for getting speed on mobile.

310
00:11:21,230 --> 00:11:22,545
But that having been said--

311
00:11:22,545 --> 00:11:23,670
TOM WILTZIUS: Great, right?

312
00:11:23,670 --> 00:11:24,540
What sucks about this?

313
00:11:24,540 --> 00:11:24,730
NAT DUCA: The fine print.

314
00:11:24,730 --> 00:11:26,950
TOM WILTZIUS: Lots of
things suck about this.

315
00:11:26,950 --> 00:11:28,900
We try to make
layers automatically,

316
00:11:28,900 --> 00:11:30,500
but we can't always do it.

317
00:11:30,500 --> 00:11:34,470
Like one of the common questions
we get is always, OK, so great,

318
00:11:34,470 --> 00:11:36,412
I see how you guys
are explaining

319
00:11:36,412 --> 00:11:37,620
the rendering system working.

320
00:11:37,620 --> 00:11:39,860
Why can't the browser do
all of this on my behalf?

321
00:11:39,860 --> 00:11:42,720
And believe me, we are trying.

322
00:11:42,720 --> 00:11:45,870
But there are some
fundamental limitations

323
00:11:45,870 --> 00:11:48,215
that we more or
less can't get over.

324
00:11:48,215 --> 00:11:53,820
The most mundane of these, in
my mind, is text antialiasing.

325
00:11:53,820 --> 00:11:58,499
You'll drop from subpixel, like
LCD screen text antialiasing,

326
00:11:58,499 --> 00:11:59,790
to grayscale text antialiasing.

327
00:11:59,790 --> 00:12:01,164
NAT DUCA: This is
like ClearType.

328
00:12:01,164 --> 00:12:02,130
TOM WILTZIUS: Yeah.

329
00:12:02,130 --> 00:12:03,350
If you're on a
composited layer that

330
00:12:03,350 --> 00:12:04,933
doesn't have a solid
color background.

331
00:12:04,933 --> 00:12:07,700
So if you're concerned
about text quality

332
00:12:07,700 --> 00:12:10,955
and you maybe manually
promoted something to a layer,

333
00:12:10,955 --> 00:12:12,580
try to make it a
solid color background

334
00:12:12,580 --> 00:12:13,913
and you won't have that problem.

335
00:12:13,913 --> 00:12:16,320
This is the same reason that
we have different criteria

336
00:12:16,320 --> 00:12:19,060
for automatically promoting
certain content to layers

337
00:12:19,060 --> 00:12:21,630
on high DPI versus
low DPI devices

338
00:12:21,630 --> 00:12:23,040
and on Android versus desktop.

339
00:12:23,040 --> 00:12:25,120
So you need to be testing
all of these places.

340
00:12:25,120 --> 00:12:26,144
This sucks--

341
00:12:26,144 --> 00:12:28,060
NAT DUCA: This is the
reality that we live in.

342
00:12:28,060 --> 00:12:29,300
TOM WILTZIUS: --but there's
not a lot we can do about it.

343
00:12:29,300 --> 00:12:30,450
NAT DUCA: There are
other things, too.

344
00:12:30,450 --> 00:12:32,290
So for example,
position sticky is

345
00:12:32,290 --> 00:12:33,810
one of the looks du jour, right?

346
00:12:33,810 --> 00:12:36,340
And understandably so.

347
00:12:36,340 --> 00:12:37,890
When you try to
emulate that, a lot

348
00:12:37,890 --> 00:12:39,400
of the times what you
end up having is you

349
00:12:39,400 --> 00:12:41,150
have a div that you're
moving up and down.

350
00:12:41,150 --> 00:12:44,520
And inside it, you want
a position fixed child

351
00:12:44,520 --> 00:12:46,570
of that div that's
your sticky element.

352
00:12:46,570 --> 00:12:49,320
Unfortunately, when you
put translateZ(0) on that,

353
00:12:49,320 --> 00:12:52,620
that redefines at
the spec level what

354
00:12:52,620 --> 00:12:54,730
the position fixed
is relative to.

355
00:12:54,730 --> 00:12:56,780
If you go and do a little
JS fiddle on your own,

356
00:12:56,780 --> 00:12:59,090
you'll find that position
fixed on something

357
00:12:59,090 --> 00:13:02,630
that is a layer
through translateZ(0)

358
00:13:02,630 --> 00:13:04,390
is relative to the actual layer.

359
00:13:04,390 --> 00:13:06,380
So then you can't do
sticky, because you

360
00:13:06,380 --> 00:13:08,540
want sticky to stick
to the viewport.

361
00:13:08,540 --> 00:13:10,540
If you use this nasty
little dirty trick,

362
00:13:10,540 --> 00:13:12,019
you might have more headway.

363
00:13:12,019 --> 00:13:14,060
And we're going to leave
it at that, because this

364
00:13:14,060 --> 00:13:19,100
is unblessed, but the reality
of the world we live in.

365
00:13:19,100 --> 00:13:21,080
And this is, in fact,
the reality, right?

366
00:13:21,080 --> 00:13:22,621
TOM WILTZIUS: This
is the web, right?

367
00:13:22,621 --> 00:13:25,460
NAT DUCA: And here's another
little unfortunate reality.

368
00:13:25,460 --> 00:13:26,830
Web pages are tall, right?

369
00:13:26,830 --> 00:13:28,660
You've got lots
of things in them.

370
00:13:28,660 --> 00:13:32,360
10,000, 20,000 pixels
tall is not unusual.

371
00:13:32,360 --> 00:13:34,930
Chrome's rendering
system uses layers

372
00:13:34,930 --> 00:13:36,350
in order to warm things up.

373
00:13:36,350 --> 00:13:38,790
So we are looking at
all layers assuming

374
00:13:38,790 --> 00:13:42,410
that they might come on
the screen imminently.

375
00:13:42,410 --> 00:13:44,610
Has anybody ever done
a trick in their app

376
00:13:44,610 --> 00:13:47,430
where they put something
at negative 10,000 pixels

377
00:13:47,430 --> 00:13:49,890
and then they fly it
in with an animation?

378
00:13:49,890 --> 00:13:50,470
Right?

379
00:13:50,470 --> 00:13:52,290
It looks really pretty.

380
00:13:52,290 --> 00:13:54,090
But the problem with
that is we, Chrome,

381
00:13:54,090 --> 00:13:57,010
have no idea if something
is negative 10,000 pixels

382
00:13:57,010 --> 00:14:00,540
from the viewport and can't
become visible next frame,

383
00:14:00,540 --> 00:14:02,530
versus it's negative
10,000 pixels

384
00:14:02,530 --> 00:14:04,530
and the user can't get there.

385
00:14:04,530 --> 00:14:07,330
So this is a thing where we
don't have that understanding.

386
00:14:07,330 --> 00:14:10,150
So if you hide stuff that the
user can't get to any time

387
00:14:10,150 --> 00:14:12,640
soon, that gives
us less work to do.

388
00:14:12,640 --> 00:14:16,190
We use less CPU, and
you're less janky.

389
00:14:16,190 --> 00:14:17,001
TOM WILTZIUS: Yeah.

390
00:14:17,001 --> 00:14:17,500
And that's--

391
00:14:17,500 --> 00:14:17,900
NAT DUCA: That's a good thing.

392
00:14:17,900 --> 00:14:19,140
TOM WILTZIUS: --all really good.

393
00:14:19,140 --> 00:14:19,640
OK.

394
00:14:19,640 --> 00:14:22,320
This is a lot of content
that we just blew through.

395
00:14:22,320 --> 00:14:25,400
And we didn't do any kind
of live demos the way

396
00:14:25,400 --> 00:14:26,040
we usually do.

397
00:14:26,040 --> 00:14:29,750
But I want to break this down
into simple takeaway messages,

398
00:14:29,750 --> 00:14:32,302
which is that, you want to be
looking for these paint storms.

399
00:14:32,302 --> 00:14:33,760
You can find them
with DevTools and

400
00:14:33,760 --> 00:14:35,840
the showPaintRects function.

401
00:14:35,840 --> 00:14:38,370
If you find these
paint storms, you

402
00:14:38,370 --> 00:14:41,520
want to try to avoid them
through implicit or explicit

403
00:14:41,520 --> 00:14:43,480
layer creation, if
at all possible.

404
00:14:43,480 --> 00:14:46,685
You can see the layer
borders really nicely

405
00:14:46,685 --> 00:14:49,060
if you go into DevTools and
turn on Show Composited Layer

406
00:14:49,060 --> 00:14:49,730
Borders.

407
00:14:49,730 --> 00:14:52,740
This is a very nice
visual aid to help you

408
00:14:52,740 --> 00:14:55,350
with this sort of layer
decomposition process.

409
00:14:55,350 --> 00:14:58,180
And if you're doing
everything right

410
00:14:58,180 --> 00:15:01,000
and you're still finding that
you have these paint storms

411
00:15:01,000 --> 00:15:04,270
and you just can't figure out
why it's repainting, because it

412
00:15:04,270 --> 00:15:08,990
doesn't seem like anything
needs to, you may be right.

413
00:15:08,990 --> 00:15:10,465
NAT DUCA: Chrome isn't perfect.

414
00:15:10,465 --> 00:15:13,289
We've spent a lot of time
making this just work.

415
00:15:13,289 --> 00:15:15,330
There are cases where
Chrome's tiny little brain,

416
00:15:15,330 --> 00:15:17,230
or Blink's tiny little
brain, gets confused,

417
00:15:17,230 --> 00:15:18,550
and it repaints the universe.

418
00:15:18,550 --> 00:15:20,520
If you're hitting that,
try to reduce it down,

419
00:15:20,520 --> 00:15:23,315
pare it down, and email
Tom or I or file a bug.

420
00:15:23,315 --> 00:15:24,690
We'll try to get
that sorted out.

421
00:15:24,690 --> 00:15:26,148
TOM WILTZIUS: We've
been, recently,

422
00:15:26,148 --> 00:15:30,160
on a spree of stamping out
what we call spurious paint

423
00:15:30,160 --> 00:15:33,662
invalidations, and we
would love to have more.

424
00:15:33,662 --> 00:15:34,620
NAT DUCA: Bugs welcome.

425
00:15:34,620 --> 00:15:36,100
TOM WILTZIUS: That's right.

426
00:15:36,100 --> 00:15:38,560
OK, so that's
rendering performance

427
00:15:38,560 --> 00:15:40,880
from the perspective
of JavaScript, right?

428
00:15:40,880 --> 00:15:43,030
But if what we really
want to talk about

429
00:15:43,030 --> 00:15:46,200
is responsiveness on
a touch based device,

430
00:15:46,200 --> 00:15:49,880
like a mobile phone,
there's another component

431
00:15:49,880 --> 00:15:51,680
to the entire story
that we haven't really

432
00:15:51,680 --> 00:15:53,100
talked about yet.

433
00:15:53,100 --> 00:15:55,146
And that's the input, right?

434
00:15:55,146 --> 00:15:58,030
Particularly on a
touch device, latency

435
00:15:58,030 --> 00:16:00,094
can be absolutely killer.

436
00:16:00,094 --> 00:16:02,510
And Nat's going to walk through
a couple examples of that.

437
00:16:02,510 --> 00:16:04,900
NAT DUCA: We've got two videos
going here, a good and a bad,

438
00:16:04,900 --> 00:16:05,400
right?

439
00:16:05,400 --> 00:16:07,250
This should jump
right out at you.

440
00:16:07,250 --> 00:16:09,870
If you drag something
around with your finger,

441
00:16:09,870 --> 00:16:11,810
you want it to stick
to your finger.

442
00:16:11,810 --> 00:16:14,800
And on the left, you've got
something that's definitely not

443
00:16:14,800 --> 00:16:17,586
sticky, feels a little laggy
if you're doing this yourself.

444
00:16:17,586 --> 00:16:19,960
On the right is sort of a
little closer to what you want.

445
00:16:19,960 --> 00:16:24,490
And ideally you get even
closer, as much as you can.

446
00:16:24,490 --> 00:16:27,600
Now getting there
on the web, that's

447
00:16:27,600 --> 00:16:30,970
the leading edge of innovation
for both Chrome and really

448
00:16:30,970 --> 00:16:31,870
everyone.

449
00:16:31,870 --> 00:16:33,480
This is a hard problem.

450
00:16:33,480 --> 00:16:35,790
But we'd like to share what
we know about it today.

451
00:16:35,790 --> 00:16:36,410
TOM WILTZIUS: Right,
and a little bit

452
00:16:36,410 --> 00:16:38,280
about what we've been doing.

453
00:16:38,280 --> 00:16:41,720
So if you're trying to get the
page to stick to your finger,

454
00:16:41,720 --> 00:16:43,579
or say, maybe you
have a slider widget

455
00:16:43,579 --> 00:16:45,120
and you really want
the slider widget

456
00:16:45,120 --> 00:16:47,680
to stay under your finger when
you slide the widget around,

457
00:16:47,680 --> 00:16:49,960
then you've kind
of got two options.

458
00:16:49,960 --> 00:16:53,080
Option A is you
get lucky and you

459
00:16:53,080 --> 00:16:55,860
happen to have an effect
that can be expressed

460
00:16:55,860 --> 00:16:57,360
in terms of the
fast scroll path.

461
00:16:57,360 --> 00:17:00,394

462
00:17:00,394 --> 00:17:01,810
If you're on this
fast scroll path

463
00:17:01,810 --> 00:17:04,589
and the browser is sort of
doing the scrolling for you,

464
00:17:04,589 --> 00:17:09,660
then you just happen to get
all of the best possible touch

465
00:17:09,660 --> 00:17:10,720
input latency.

466
00:17:10,720 --> 00:17:12,729
Because we built
that part, and we

467
00:17:12,729 --> 00:17:14,270
tried to make it as
good as possible.

468
00:17:14,270 --> 00:17:15,845
NAT DUCA: But the
option B happens

469
00:17:15,845 --> 00:17:17,470
when you're in a
situation where you've

470
00:17:17,470 --> 00:17:19,280
got to implement a
drawer or a slider

471
00:17:19,280 --> 00:17:21,200
where the actual
thing-- or a drawing

472
00:17:21,200 --> 00:17:23,780
app-- the actual
thing that happens

473
00:17:23,780 --> 00:17:26,710
in response to that input
is necessarily programmatic.

474
00:17:26,710 --> 00:17:27,936
That is not a scroll.

475
00:17:27,936 --> 00:17:29,310
You need to handle
that yourself.

476
00:17:29,310 --> 00:17:31,660
There's a different set of
rules for making that fast.

477
00:17:31,660 --> 00:17:32,785
TOM WILTZIUS: That's right.

478
00:17:32,785 --> 00:17:34,440
So let's say you
go with option A.

479
00:17:34,440 --> 00:17:35,400
NAT DUCA: Because
that's fun, right?

480
00:17:35,400 --> 00:17:36,233
TOM WILTZIUS: Right.

481
00:17:36,233 --> 00:17:37,760
And often, that totally works.

482
00:17:37,760 --> 00:17:39,920
Depending on your
content, like scrolling,

483
00:17:39,920 --> 00:17:42,190
the reason we have done all
this work about scrolling

484
00:17:42,190 --> 00:17:43,690
is that scrolling
is one of the most

485
00:17:43,690 --> 00:17:46,160
common operations
on the web, right?

486
00:17:46,160 --> 00:17:48,970
And even on mobile devices.

487
00:17:48,970 --> 00:17:51,010
So if you're going
to go this route,

488
00:17:51,010 --> 00:17:53,840
you want to make sure
that the layers you expect

489
00:17:53,840 --> 00:17:56,040
to have gotten created
were, in fact, created.

490
00:17:56,040 --> 00:17:57,790
And that they're
working as intended.

491
00:17:57,790 --> 00:18:00,700
So this means that whatever
the kind of content area that

492
00:18:00,700 --> 00:18:04,184
is scrolling should
be in its own layer.

493
00:18:04,184 --> 00:18:05,600
And when it scrolls,
you shouldn't

494
00:18:05,600 --> 00:18:07,570
see it all repainting, right?

495
00:18:07,570 --> 00:18:11,350
And again, the same couple
of basic DevTools features

496
00:18:11,350 --> 00:18:13,300
will let you very
easily visualize

497
00:18:13,300 --> 00:18:14,470
this, along with timeline.

498
00:18:14,470 --> 00:18:16,386
NAT DUCA: We're just
hitting this point again,

499
00:18:16,386 --> 00:18:18,240
which is layers are
good, but they're

500
00:18:18,240 --> 00:18:20,700
very hard to persuade to exist.

501
00:18:20,700 --> 00:18:24,320
And so you have to be
constant vigilance here

502
00:18:24,320 --> 00:18:25,894
in order to catch
that fast path.

503
00:18:25,894 --> 00:18:26,810
TOM WILTZIUS: Exactly.

504
00:18:26,810 --> 00:18:28,393
And a lot of that
vigilance comes down

505
00:18:28,393 --> 00:18:30,550
to testing the right places.

506
00:18:30,550 --> 00:18:34,760
So it is very tempting
as a developer

507
00:18:34,760 --> 00:18:37,460
to do everything on
your laptop, right?

508
00:18:37,460 --> 00:18:38,680
Or on your work station.

509
00:18:38,680 --> 00:18:42,050
But the unfortunate reality
is it's basically impossible

510
00:18:42,050 --> 00:18:45,390
to emulate the performance
characteristics of an Android

511
00:18:45,390 --> 00:18:48,520
device on, say,
this nice laptop.

512
00:18:48,520 --> 00:18:51,430
That's not just to do with CPU
versus GPU speed, et cetera.

513
00:18:51,430 --> 00:18:52,930
But it has a lot
to do with the fact

514
00:18:52,930 --> 00:18:56,210
that Chrome actually will behave
slightly differently on Android

515
00:18:56,210 --> 00:18:57,210
than it does on desktop.

516
00:18:57,210 --> 00:18:58,770
The DPI matters.

517
00:18:58,770 --> 00:19:01,660
And all of this is subtle,
and that's unfortunate,

518
00:19:01,660 --> 00:19:04,860
but the reality is building
high performance rendering

519
00:19:04,860 --> 00:19:05,925
systems is complicated.

520
00:19:05,925 --> 00:19:07,870
And you need to test
on the target devices.

521
00:19:07,870 --> 00:19:09,010
NAT DUCA: So if you
do hit the fast path,

522
00:19:09,010 --> 00:19:09,970
you're in a good position.

523
00:19:09,970 --> 00:19:12,340
We're doing a lot of work to
make that feel less laggy.

524
00:19:12,340 --> 00:19:15,480
Chrome has been particularly
kind of not good at that.

525
00:19:15,480 --> 00:19:18,039
Notice I didn't say bad.

526
00:19:18,039 --> 00:19:19,830
TOM WILTZIUS: And it's
gotten a lot better.

527
00:19:19,830 --> 00:19:21,560
NAT DUCA: We're working
hard to make that better.

528
00:19:21,560 --> 00:19:23,310
But that is the case
for native scrolling.

529
00:19:23,310 --> 00:19:24,143
TOM WILTZIUS: Right.

530
00:19:24,143 --> 00:19:25,130
So what about option B?

531
00:19:25,130 --> 00:19:26,671
NAT DUCA: So OK,
I'm going to attempt

532
00:19:26,671 --> 00:19:28,150
to do a little bit
of footwork here

533
00:19:28,150 --> 00:19:30,810
to try to say how you
can make this work.

534
00:19:30,810 --> 00:19:32,890
This is really bleeding edge.

535
00:19:32,890 --> 00:19:36,380
If you want to do something with
a touch listener and be smooth,

536
00:19:36,380 --> 00:19:38,410
you have to do these
two things-- you

537
00:19:38,410 --> 00:19:41,280
got to keep all of your
costs, all of them,

538
00:19:41,280 --> 00:19:43,780
to less than seven
milliseconds, and you

539
00:19:43,780 --> 00:19:45,360
have to avoid foot guns.

540
00:19:45,360 --> 00:19:47,980
Push stack on the foot guns and
talk about why I said seven.

541
00:19:47,980 --> 00:19:49,271
TOM WILTZIUS: Yeah, why not 16?

542
00:19:49,271 --> 00:19:51,080
NAT DUCA: Because I
felt like it, really.

543
00:19:51,080 --> 00:19:54,490
OK, we have Chrome running
and then we have your code.

544
00:19:54,490 --> 00:19:56,810
And we're sort of
sharing that system.

545
00:19:56,810 --> 00:19:59,880
In order to get zero
latency, we have

546
00:19:59,880 --> 00:20:01,700
to run your stuff,
then our stuff, all

547
00:20:01,700 --> 00:20:03,490
in that 16 millisecond budget.

548
00:20:03,490 --> 00:20:05,220
And oh, by the way,
the operating system

549
00:20:05,220 --> 00:20:06,304
also is there doing stuff.

550
00:20:06,304 --> 00:20:08,095
TOM WILTZIUS: And this
is the kind of thing

551
00:20:08,095 --> 00:20:10,750
that you don't generally
worry about on, say, a laptop,

552
00:20:10,750 --> 00:20:13,130
because there's enough
performance overhead that you

553
00:20:13,130 --> 00:20:14,380
don't really worry
about what Windows

554
00:20:14,380 --> 00:20:15,540
is doing in the background.

555
00:20:15,540 --> 00:20:20,220
But in fact, on most
modern mobile phones,

556
00:20:20,220 --> 00:20:23,000
even, they're so
resource constrained

557
00:20:23,000 --> 00:20:26,490
that, actually, some system
thing coming in and running

558
00:20:26,490 --> 00:20:28,620
can deschedule all of
the browser's threads,

559
00:20:28,620 --> 00:20:30,009
and then that crap.

560
00:20:30,009 --> 00:20:30,800
NAT DUCA: So seven.

561
00:20:30,800 --> 00:20:31,490
Keep that in mind.

562
00:20:31,490 --> 00:20:32,160
Keep your stuff.

563
00:20:32,160 --> 00:20:34,860
So this essentially means
don't paint at the moment.

564
00:20:34,860 --> 00:20:35,670
Don't paint.

565
00:20:35,670 --> 00:20:36,910
Don't do heavy JS.

566
00:20:36,910 --> 00:20:39,790
Do as minimal JS as you can.

567
00:20:39,790 --> 00:20:41,770
If you've got a
layout, be very careful

568
00:20:41,770 --> 00:20:44,470
and avoid recalc style
if at all possible.

569
00:20:44,470 --> 00:20:45,760
OK, foot guns.

570
00:20:45,760 --> 00:20:48,882
So this is another one of
those laundry slides of,

571
00:20:48,882 --> 00:20:50,590
like, there's that
nice theoretical world

572
00:20:50,590 --> 00:20:51,530
that we talk about.

573
00:20:51,530 --> 00:20:53,580
TOM WILTZIUS: And then
here's all the caveats.

574
00:20:53,580 --> 00:20:56,130
The first one is
probably the craziest.

575
00:20:56,130 --> 00:20:58,530
If you want to do
this, if you want

576
00:20:58,530 --> 00:21:00,610
to handle touch events
yourself in JavaScript,

577
00:21:00,610 --> 00:21:02,710
that means you need touch
event listeners, right?

578
00:21:02,710 --> 00:21:05,180
If you're going to have
touch event listeners,

579
00:21:05,180 --> 00:21:07,910
be judicious about when
and where you install them.

580
00:21:07,910 --> 00:21:12,330
Particularly, be wary of
installing touch listeners

581
00:21:12,330 --> 00:21:14,620
during the page
load, or you will

582
00:21:14,620 --> 00:21:18,280
risk scrolling jank and
unpredictable delivery

583
00:21:18,280 --> 00:21:19,742
of those touch events.

584
00:21:19,742 --> 00:21:21,950
NAT DUCA: So we're simplifying
a very complex message

585
00:21:21,950 --> 00:21:23,470
with this general rule.

586
00:21:23,470 --> 00:21:26,040
And we'll come back to it
later about the details of it.

587
00:21:26,040 --> 00:21:27,700
But just keep this in mind.

588
00:21:27,700 --> 00:21:29,710
Big listeners, touch
listeners, in general,

589
00:21:29,710 --> 00:21:30,850
have a lot of scary.

590
00:21:30,850 --> 00:21:32,550
TOM WILTZIUS: Yeah.

591
00:21:32,550 --> 00:21:33,220
Touchends.

592
00:21:33,220 --> 00:21:35,042
I'm going to let you explain
because this is complicated,

593
00:21:35,042 --> 00:21:35,170
too.

594
00:21:35,170 --> 00:21:35,470
NAT DUCA: You want me
to talk about touchends?

595
00:21:35,470 --> 00:21:37,620
This is also complicated.

596
00:21:37,620 --> 00:21:39,720
So if you drag your
finger off a screen,

597
00:21:39,720 --> 00:21:42,489
do you get a touchend
or a touchcancel?

598
00:21:42,489 --> 00:21:43,280
TOM WILTZIUS: What?

599
00:21:43,280 --> 00:21:43,700
NAT DUCA: Yeah.

600
00:21:43,700 --> 00:21:45,430
So there's this
common set of problems

601
00:21:45,430 --> 00:21:47,150
where people forget to
listen to touchcancel,

602
00:21:47,150 --> 00:21:49,420
and so they get basically really
weird behavior in the field.

603
00:21:49,420 --> 00:21:51,100
And they can't figure
out what's going on.

604
00:21:51,100 --> 00:21:52,641
They forgot to listen
to touchcancel.

605
00:21:52,641 --> 00:21:54,530
It's a minor point,
but very important

606
00:21:54,530 --> 00:21:56,940
because people will say
that you're being janked.

607
00:21:56,940 --> 00:21:59,620
And the reality is you just
forgot to get that one event.

608
00:21:59,620 --> 00:22:02,430
We're so trained to think, mouse
down, mouse move, mouse up.

609
00:22:02,430 --> 00:22:05,590
All of us grew up like that, so
this is a bit of an adaptation.

610
00:22:05,590 --> 00:22:06,700
TOM WILTZIUS: Yeah.

611
00:22:06,700 --> 00:22:08,290
The 300 millisecond
tap delay has

612
00:22:08,290 --> 00:22:11,870
been mentioned in other talks
and will be pounded on more.

613
00:22:11,870 --> 00:22:16,190
This is to disambiguate between
double tap to zoom and a click.

614
00:22:16,190 --> 00:22:17,870
And yes, this is crappy.

615
00:22:17,870 --> 00:22:19,740
And yes, the
browser tries to not

616
00:22:19,740 --> 00:22:23,270
wait if it can determine
it's impossible to zoom.

617
00:22:23,270 --> 00:22:25,020
NAT DUCA: Set your
viewport tag correctly

618
00:22:25,020 --> 00:22:26,350
if you don't care
about [? the page. ?]

619
00:22:26,350 --> 00:22:27,330
TOM WILTZIUS: Yeah,
just be careful.

620
00:22:27,330 --> 00:22:29,496
There's a lot of good content
online about this one,

621
00:22:29,496 --> 00:22:31,110
so we won't talk
about it too much.

622
00:22:31,110 --> 00:22:33,402
And lastly, mouse wheels.

623
00:22:33,402 --> 00:22:34,860
Mouse wheels,
obviously not so much

624
00:22:34,860 --> 00:22:37,420
relevant on mobile, more
relevant on desktop platforms.

625
00:22:37,420 --> 00:22:39,840
But mouse wheel listeners have
a lot of the same problems

626
00:22:39,840 --> 00:22:42,010
that touch listeners do.

627
00:22:42,010 --> 00:22:45,570
So lest you think that this
is sort of limited to touch.

628
00:22:45,570 --> 00:22:49,046
In fact, you can shoot yourself
in the foot with mouse wheel

629
00:22:49,046 --> 00:22:49,670
listeners, too.

630
00:22:49,670 --> 00:22:50,680
NAT DUCA: And there's
some major websites

631
00:22:50,680 --> 00:22:52,500
that actually have
touch listeners.

632
00:22:52,500 --> 00:22:55,840
And so they technically could
hit all these fast paths

633
00:22:55,840 --> 00:22:57,540
we've been talking
about about latency,

634
00:22:57,540 --> 00:22:58,890
except they have a
mouse wheel listener.

635
00:22:58,890 --> 00:23:00,190
They don't do anything
[INAUDIBLE], ironically.

636
00:23:00,190 --> 00:23:00,505
TOM WILTZIUS: Nope.

637
00:23:00,505 --> 00:23:01,630
Except blog about
how slow Chrome is.

638
00:23:01,630 --> 00:23:03,713
NAT DUCA: But they've shot
themselves in the foot,

639
00:23:03,713 --> 00:23:05,520
and there's nothing
we can do about.

640
00:23:05,520 --> 00:23:09,030
TOM WILTZIUS: This is
all specced or de facto

641
00:23:09,030 --> 00:23:12,390
standard behavior, which
means that this is not

642
00:23:12,390 --> 00:23:13,120
going to change.

643
00:23:13,120 --> 00:23:14,570
NAT DUCA: It's a
wild world out there.

644
00:23:14,570 --> 00:23:15,403
TOM WILTZIUS: It is.

645
00:23:15,403 --> 00:23:16,370
NAT DUCA: Yeah.

646
00:23:16,370 --> 00:23:19,669
So remember we started off
with a video of a janky finger

647
00:23:19,669 --> 00:23:20,710
moving this thing around.

648
00:23:20,710 --> 00:23:23,610
So imagine your
PM is like, hey, I

649
00:23:23,610 --> 00:23:27,057
want you to make that logo thing
draggable because I'm your boss

650
00:23:27,057 --> 00:23:28,390
and I'm going to make you do it.

651
00:23:28,390 --> 00:23:30,806
So you're a good [? dooby ?]
and you go code it up, right?

652
00:23:30,806 --> 00:23:33,610
You document .addEventListener
and touchbegin

653
00:23:33,610 --> 00:23:35,050
and addEventListener touchmove.

654
00:23:35,050 --> 00:23:36,420
And you're like, look, it works.

655
00:23:36,420 --> 00:23:36,986
It's awesome.

656
00:23:36,986 --> 00:23:38,860
And then you get these
reports from the field

657
00:23:38,860 --> 00:23:41,760
and they're like, yo,
this is really janky.

658
00:23:41,760 --> 00:23:44,050
Like, I can't use my page.

659
00:23:44,050 --> 00:23:47,220
I love that thing, but like,
you destroyed your page.

660
00:23:47,220 --> 00:23:48,940
You go to these
options in DevTools

661
00:23:48,940 --> 00:23:50,520
and you show scroll bottlenecks.

662
00:23:50,520 --> 00:23:53,710
This is what you'll see on the
left with a global document

663
00:23:53,710 --> 00:23:54,560
listener.

664
00:23:54,560 --> 00:23:56,660
What's happened is
you've told Chrome

665
00:23:56,660 --> 00:24:00,870
that your JavaScript wishes
to preempt any input received

666
00:24:00,870 --> 00:24:04,600
by the user right into
JavaScript all the time.

667
00:24:04,600 --> 00:24:07,550
We cannot think about doing
anything with your input,

668
00:24:07,550 --> 00:24:10,280
do any sort of fanciness
that we can do,

669
00:24:10,280 --> 00:24:12,080
until you say yes or no.

670
00:24:12,080 --> 00:24:13,660
Specifically you
say prevent default

671
00:24:13,660 --> 00:24:16,240
or fail to prevent
default that event.

672
00:24:16,240 --> 00:24:19,870
And so if you're going
to listen to touch,

673
00:24:19,870 --> 00:24:23,080
you need to do it on the most
specific thing you can do.

674
00:24:23,080 --> 00:24:25,460
And because of this whole
prevent defaulting thing,

675
00:24:25,460 --> 00:24:27,251
remember the thing we
pushed onto the stack

676
00:24:27,251 --> 00:24:31,050
earlier about that mysterious
don't add touch before load?

677
00:24:31,050 --> 00:24:32,290
It's the same thing.

678
00:24:32,290 --> 00:24:35,940
If you have an input handler
and you've told Chrome

679
00:24:35,940 --> 00:24:40,280
that, then any time you touch
the thing that has the handler,

680
00:24:40,280 --> 00:24:43,430
you get automatic preempt
over anything we can do.

681
00:24:43,430 --> 00:24:46,650
Which means that if the
browser is busy doing something

682
00:24:46,650 --> 00:24:49,830
like recalc style, we can't
do anything in response

683
00:24:49,830 --> 00:24:50,740
to user input.

684
00:24:50,740 --> 00:24:51,975
And so you get a jank.

685
00:24:51,975 --> 00:24:54,350
TOM WILTZIUS: That means we
can't scroll until your touch

686
00:24:54,350 --> 00:24:56,534
listener runs or we
timeout and we give up.

687
00:24:56,534 --> 00:24:57,950
NAT DUCA: So be
very, very careful

688
00:24:57,950 --> 00:25:00,390
about when and where you
install these listeners.

689
00:25:00,390 --> 00:25:01,181
TOM WILTZIUS: Yeah.

690
00:25:01,181 --> 00:25:01,700
Not good.

691
00:25:01,700 --> 00:25:03,600
OK, we've only got
five minutes left,

692
00:25:03,600 --> 00:25:07,530
and we want to talk through
a little bit of where we've

693
00:25:07,530 --> 00:25:09,280
come from in terms of
the Chrome rendering

694
00:25:09,280 --> 00:25:12,730
stack and more importantly,
where we're going.

695
00:25:12,730 --> 00:25:14,280
If you've seen us
give talks before,

696
00:25:14,280 --> 00:25:16,920
you've probably heard
us kind of caveat

697
00:25:16,920 --> 00:25:19,000
some of the differences
between desktop platforms

698
00:25:19,000 --> 00:25:20,750
and Android, et cetera.

699
00:25:20,750 --> 00:25:23,530
And there are still differences,
as we mentioned before.

700
00:25:23,530 --> 00:25:26,997
But these days, that's
more about the actual power

701
00:25:26,997 --> 00:25:29,330
of the device and less about
the rendering architecture.

702
00:25:29,330 --> 00:25:31,550
This is really good
because it makes

703
00:25:31,550 --> 00:25:33,260
your lives easier as developers.

704
00:25:33,260 --> 00:25:35,530
It makes our lives
easier building Chrome.

705
00:25:35,530 --> 00:25:38,790
And the pace of that catch
up of other platforms

706
00:25:38,790 --> 00:25:40,540
has accelerated in
the last year or so.

707
00:25:40,540 --> 00:25:42,790
NAT DUCA: But we have a lot
of really fancy technology

708
00:25:42,790 --> 00:25:44,940
that enables us to run
smoothly on Android.

709
00:25:44,940 --> 00:25:47,380
And it's unevenly
deployed right now.

710
00:25:47,380 --> 00:25:48,990
It's a lot better in Chrome 32.

711
00:25:48,990 --> 00:25:50,830
Hugely better, but
it's still not there.

712
00:25:50,830 --> 00:25:53,230
So this is why we continue
to recommend testing

713
00:25:53,230 --> 00:25:56,080
on all the platforms you intend
to support, at least for now.

714
00:25:56,080 --> 00:25:58,140
At least in terms
of jank, because

715
00:25:58,140 --> 00:25:59,607
of these nonuniformities.

716
00:25:59,607 --> 00:26:00,690
It's the world we live in.

717
00:26:00,690 --> 00:26:01,980
TOM WILTZIUS: Yeah.

718
00:26:01,980 --> 00:26:03,620
The Android WebView,
though, is new

719
00:26:03,620 --> 00:26:05,947
and is further bringing
everything in line.

720
00:26:05,947 --> 00:26:08,280
NAT DUCA: We wish, though,
to share some things with you

721
00:26:08,280 --> 00:26:10,055
because it's not
also caveat free.

722
00:26:10,055 --> 00:26:11,596
TOM WILTZIUS: List
of caveats, right.

723
00:26:11,596 --> 00:26:14,030
NAT DUCA: Sorry.

724
00:26:14,030 --> 00:26:17,160
There is a rich tradition
on the Android WebView

725
00:26:17,160 --> 00:26:19,440
to disable hardware
acceleration.

726
00:26:19,440 --> 00:26:22,490
There were good reasons for
this in Android WebView.

727
00:26:22,490 --> 00:26:23,980
There still are
some good reasons

728
00:26:23,980 --> 00:26:26,040
to do this with the
Chrome-based WebView

729
00:26:26,040 --> 00:26:28,650
but fewer and different.

730
00:26:28,650 --> 00:26:31,850
We're not going to explain
that sort of curvature space

731
00:26:31,850 --> 00:26:33,570
directly, but the
thing is, please,

732
00:26:33,570 --> 00:26:37,424
if you were, in the past,
disabling acceleration

733
00:26:37,424 --> 00:26:39,340
on your WebView, please
revisit that decision.

734
00:26:39,340 --> 00:26:41,760
Check your content
out in Chrome WebView.

735
00:26:41,760 --> 00:26:44,120
See if it's better.

736
00:26:44,120 --> 00:26:46,600
If it is, Chrome will
reward you in scores.

737
00:26:46,600 --> 00:26:48,840
The hardware-based rendering
is really, really good

738
00:26:48,840 --> 00:26:50,790
compared to the software one.

739
00:26:50,790 --> 00:26:52,980
TOM WILTZIUS: Another
important caveat, there

740
00:26:52,980 --> 00:26:55,080
are differences
between Chrome itself

741
00:26:55,080 --> 00:26:56,600
on Android and the WebView.

742
00:26:56,600 --> 00:26:59,310
One of the most significant
is that the DOM size

743
00:26:59,310 --> 00:27:01,110
matters a lot more.

744
00:27:01,110 --> 00:27:03,300
Chrome tries to be smart
about culling stuff

745
00:27:03,300 --> 00:27:05,370
that's way away
from the viewport.

746
00:27:05,370 --> 00:27:07,370
But this gets a lot easier
if the developer just

747
00:27:07,370 --> 00:27:11,147
says, no, this is
right out invisible.

748
00:27:11,147 --> 00:27:12,980
This is particularly
relevant to the WebView

749
00:27:12,980 --> 00:27:15,740
because part of the
WebView API contract

750
00:27:15,740 --> 00:27:18,140
is you can ask for
the whole document.

751
00:27:18,140 --> 00:27:19,920
Which means that
every time we go

752
00:27:19,920 --> 00:27:22,052
to record things
to paint later, we

753
00:27:22,052 --> 00:27:23,510
have to record the
entire document.

754
00:27:23,510 --> 00:27:25,180
We can't do any of the
smartness around culling

755
00:27:25,180 --> 00:27:26,290
that we're trying to do.

756
00:27:26,290 --> 00:27:28,762
This means that we
incur a lot more memory,

757
00:27:28,762 --> 00:27:30,470
and so you need to be
careful about this.

758
00:27:30,470 --> 00:27:32,070
So you want to try to
do your own viewporting,

759
00:27:32,070 --> 00:27:33,130
if at all possible.

760
00:27:33,130 --> 00:27:33,755
NAT DUCA: Yeah.

761
00:27:33,755 --> 00:27:35,540
And this is just
that basic thing.

762
00:27:35,540 --> 00:27:37,066
Maybe someday
we'll revisit that,

763
00:27:37,066 --> 00:27:38,190
but please keep it in mind.

764
00:27:38,190 --> 00:27:40,580
And just sort of a
more broad thing,

765
00:27:40,580 --> 00:27:44,400
jank busting in a WebView
Android sort of combined app

766
00:27:44,400 --> 00:27:47,470
means keeping the UI thread
free for both components.

767
00:27:47,470 --> 00:27:49,290
They're sharing the same thread.

768
00:27:49,290 --> 00:27:53,330
You've got great tooling to
show which one's eating time,

769
00:27:53,330 --> 00:27:54,880
but you got to keep
an eye on both.

770
00:27:54,880 --> 00:27:56,880
There's nothing that we've
got that protects you

771
00:27:56,880 --> 00:27:58,005
against janking each other.

772
00:27:58,005 --> 00:27:59,270
TOM WILTZIUS: That's right.

773
00:27:59,270 --> 00:28:01,600
So where are we going next?

774
00:28:01,600 --> 00:28:04,294
There are these fast paths, but
it's hard to get on to them,

775
00:28:04,294 --> 00:28:05,710
and it's easy to
fall off of them.

776
00:28:05,710 --> 00:28:08,220
We think this sucks just
as much as you guys do.

777
00:28:08,220 --> 00:28:10,360
And we want to make it
better through a combination

778
00:28:10,360 --> 00:28:13,930
of improving Chrome and
improving Chrome's tooling.

779
00:28:13,930 --> 00:28:14,805
So about tooling--

780
00:28:14,805 --> 00:28:15,430
NAT DUCA: Yeah.

781
00:28:15,430 --> 00:28:17,388
I mean, so you've seen
a couple little pictures

782
00:28:17,388 --> 00:28:19,950
like this where we tilt
the web page to the side.

783
00:28:19,950 --> 00:28:22,530
We think that these
things, these questions,

784
00:28:22,530 --> 00:28:25,690
need to be easily and without
a lot of thought answerable

785
00:28:25,690 --> 00:28:28,150
for you all to be
more productive.

786
00:28:28,150 --> 00:28:29,910
It should be possible
to see the layers.

787
00:28:29,910 --> 00:28:32,760
It should be possible to see why
something became a layer, why

788
00:28:32,760 --> 00:28:34,165
something didn't become a layer.

789
00:28:34,165 --> 00:28:35,790
You should see your
scroll bottlenecks.

790
00:28:35,790 --> 00:28:38,010
None of this should be
so hard as it is now.

791
00:28:38,010 --> 00:28:41,390
And it certainly shouldn't
be a soup of check boxes.

792
00:28:41,390 --> 00:28:42,230
This is coming.

793
00:28:42,230 --> 00:28:43,180
TOM WILTZIUS: It's difficult
to visually inspect this.

794
00:28:43,180 --> 00:28:44,020
So we need Richard [INAUDIBLE].

795
00:28:44,020 --> 00:28:45,570
NAT DUCA: Mr. Paul
Irish is going

796
00:28:45,570 --> 00:28:48,916
to be talking about this
in more detail tomorrow.

797
00:28:48,916 --> 00:28:50,040
TOM WILTZIUS: That's right.

798
00:28:50,040 --> 00:28:52,522
Meanwhile, there's a lot that
we can do behind the scenes

799
00:28:52,522 --> 00:28:53,730
to keep making Chrome faster.

800
00:28:53,730 --> 00:28:56,370
And there's a lot of
people working on this.

801
00:28:56,370 --> 00:28:58,840
We're trying to fix a
lot of the issues that

802
00:28:58,840 --> 00:29:01,900
make the slow stages in
the pipeline so slow.

803
00:29:01,900 --> 00:29:03,660
So if you can't just
express yourself

804
00:29:03,660 --> 00:29:05,657
in terms of
compositing operations,

805
00:29:05,657 --> 00:29:07,240
there are some basic
changes to layout

806
00:29:07,240 --> 00:29:08,960
that actually should
be very cheap, right?

807
00:29:08,960 --> 00:29:10,880
Why can't you move something
around with [? top ?]

808
00:29:10,880 --> 00:29:12,588
if it's absolutely
positioned and doesn't

809
00:29:12,588 --> 00:29:13,990
affect anything else?

810
00:29:13,990 --> 00:29:15,460
In theory, this should work.

811
00:29:15,460 --> 00:29:17,150
But Blink is just
not that smart.

812
00:29:17,150 --> 00:29:20,370
And so we're trying to
sort of improve that.

813
00:29:20,370 --> 00:29:22,710
And there's a slew of
things along those lines

814
00:29:22,710 --> 00:29:23,960
that are just under optimized.

815
00:29:23,960 --> 00:29:26,168
NAT DUCA: And so we're going
to start thinking about.

816
00:29:26,168 --> 00:29:27,790
But in parallel with
that, we're also

817
00:29:27,790 --> 00:29:31,459
starting to get out
of the monofocus

818
00:29:31,459 --> 00:29:33,000
that we've had for
the last two years

819
00:29:33,000 --> 00:29:35,170
to try to just survive
the transition to mobile.

820
00:29:35,170 --> 00:29:37,420
We've been just trying to
scroll a web page basically,

821
00:29:37,420 --> 00:29:39,100
and that was hard.

822
00:29:39,100 --> 00:29:41,742
Surprisingly hard.

823
00:29:41,742 --> 00:29:43,200
We are now getting
to a point where

824
00:29:43,200 --> 00:29:47,200
we can contemplate what should
the mobile web really be

825
00:29:47,200 --> 00:29:48,230
from a jank perspective.

826
00:29:48,230 --> 00:29:53,650
How do you all want to express
your intent to the browser

827
00:29:53,650 --> 00:29:56,350
so that we do the right
thing from the beginning?

828
00:29:56,350 --> 00:30:00,490
We put up a list of
intentionally provocative ideas

829
00:30:00,490 --> 00:30:02,860
here, just to whet
your appetite.

830
00:30:02,860 --> 00:30:06,109
If anybody has other
ideas, if you've

831
00:30:06,109 --> 00:30:08,400
got strong opinions about
one of these, if one of these

832
00:30:08,400 --> 00:30:09,730
makes you want to
storm out of the room,

833
00:30:09,730 --> 00:30:11,730
stay and storm out of the
room after you tell me

834
00:30:11,730 --> 00:30:12,520
why you hated it.

835
00:30:12,520 --> 00:30:12,905
TOM WILTZIUS: Yeah.

836
00:30:12,905 --> 00:30:13,290
We'd love to talk about this.

837
00:30:13,290 --> 00:30:15,770
NAT DUCA: But we want
to make this better.

838
00:30:15,770 --> 00:30:19,630
And the reason is, we know
that it's not good enough.

839
00:30:19,630 --> 00:30:21,570
And we know that,
now that we've got

840
00:30:21,570 --> 00:30:23,410
scrolling sort of
figured out, we

841
00:30:23,410 --> 00:30:25,960
need to go and make
the tools better,

842
00:30:25,960 --> 00:30:27,870
we need to make this
more accessible, we need

843
00:30:27,870 --> 00:30:31,800
to make just jank on the web
sort of a solved you don't

844
00:30:31,800 --> 00:30:33,096
think about it problem.

845
00:30:33,096 --> 00:30:34,220
TOM WILTZIUS: That's right.

846
00:30:34,220 --> 00:30:35,830
So with that, we're
going to wrap up.

847
00:30:35,830 --> 00:30:37,910
Thank you very much for
your time and attention.

848
00:30:37,910 --> 00:30:39,020
I'm Tom, and this is Nat.

849
00:30:39,020 --> 00:30:39,772
And thanks again.

850
00:30:39,772 --> 00:30:40,480
NAT DUCA: Cheers.

851
00:30:40,480 --> 00:30:43,895
[APPLAUSE]

