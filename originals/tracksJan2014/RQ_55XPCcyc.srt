1
00:00:00,000 --> 00:00:09,450

2
00:00:09,450 --> 00:00:12,610
IDO GREEN: Hello, and welcome to
another episode of GDL-IL,

3
00:00:12,610 --> 00:00:13,470
GDL-Israel.

4
00:00:13,470 --> 00:00:16,850
Today, we're going to speak
about NodeJS and Chrome, and

5
00:00:16,850 --> 00:00:21,550
how you could leverage the
powerful DevTools that we have

6
00:00:21,550 --> 00:00:26,800
today and Chrome and Chromium
in order to debug NodeJS

7
00:00:26,800 --> 00:00:28,180
applications.

8
00:00:28,180 --> 00:00:33,080
Now, it's true that you could
debug your NodeJS with

9
00:00:33,080 --> 00:00:36,080
WebStorm, there are some other
options out there.

10
00:00:36,080 --> 00:00:41,750
But I really like to focus on
Chrome and the open-source

11
00:00:41,750 --> 00:00:45,920
project Chromium, because not
only it's giving you the

12
00:00:45,920 --> 00:00:49,450
ability to it without any money,
which is nice, it's

13
00:00:49,450 --> 00:00:53,200
actually a quite efficient way
to get insight of what your

14
00:00:53,200 --> 00:00:58,540
application is doing and be more
productive when you are

15
00:00:58,540 --> 00:01:01,220
building larger and larger
applications.

16
00:01:01,220 --> 00:01:04,769
So without further ado, let me
just share my screen with you.

17
00:01:04,769 --> 00:01:08,470
And we'll do it quite
quickly today.

18
00:01:08,470 --> 00:01:12,410
So we'll start, and actually,
I'll put all those links in

19
00:01:12,410 --> 00:01:14,200
show footnotes.

20
00:01:14,200 --> 00:01:17,240
It's a blog post that I wrote
and published yesterday.

21
00:01:17,240 --> 00:01:20,370
And basically, we
see that today--

22
00:01:20,370 --> 00:01:22,480
and I see it more and
more in Node--

23
00:01:22,480 --> 00:01:24,720
you're starting with a small
script, and then quite

24
00:01:24,720 --> 00:01:27,020
quickly, you're getting to a
larger, larger app that you

25
00:01:27,020 --> 00:01:30,220
want to get insight and see how
productive you could fix

26
00:01:30,220 --> 00:01:35,090
things and understand what is
going on behind the scenes.

27
00:01:35,090 --> 00:01:39,710
When we we're going to use it
today, we're go, basically, to

28
00:01:39,710 --> 00:01:43,220
get what Blink is giving us,
so the DevTools that are

29
00:01:43,220 --> 00:01:44,690
sitting inside it.

30
00:01:44,690 --> 00:01:47,560
And you'll see that they are
quite similar to the DevTools

31
00:01:47,560 --> 00:01:49,240
that we get in Chrome itself.

32
00:01:49,240 --> 00:01:52,440
So if I open them quite quickly,
as you saw here,

33
00:01:52,440 --> 00:01:56,580
we're getting quite a lot of
tabs over here at the top.

34
00:01:56,580 --> 00:02:01,030
In our case, when we're going
to debug NodeJS, we only get

35
00:02:01,030 --> 00:02:04,900
to the source stub and
the console one.

36
00:02:04,900 --> 00:02:08,610
And I'll show you in a minute
what does it mean.

37
00:02:08,610 --> 00:02:11,720
And let me just make
it even larger.

38
00:02:11,720 --> 00:02:14,250
So the first step, in order to
install it, is of course,

39
00:02:14,250 --> 00:02:16,570
first and foremost,
we install Node.

40
00:02:16,570 --> 00:02:19,740
And after you install Node,
you'll just run this command

41
00:02:19,740 --> 00:02:20,960
of installing the

42
00:02:20,960 --> 00:02:24,850
node-inspector, which is a model.

43
00:02:24,850 --> 00:02:29,910
Luckily for us, npm, the ability
to manage models

44
00:02:29,910 --> 00:02:33,060
inside Node is already coming
when you're installing Node.

45
00:02:33,060 --> 00:02:42,930
So if we just come here and make
this one a bit bigger,

46
00:02:42,930 --> 00:02:45,350
what you could see here
is that I'm just

47
00:02:45,350 --> 00:02:47,390
going to install it.

48
00:02:47,390 --> 00:02:51,560
And I could see here that it
quite quickly will let me know

49
00:02:51,560 --> 00:02:53,880
that I already have it.

50
00:02:53,880 --> 00:02:57,730

51
00:02:57,730 --> 00:02:59,860
I need just to do
it with a sudo.

52
00:02:59,860 --> 00:03:10,590
And since I already have it,
again, hopefully this time it

53
00:03:10,590 --> 00:03:13,006
will run without any problem.

54
00:03:13,006 --> 00:03:18,470

55
00:03:18,470 --> 00:03:18,970
Of course.

56
00:03:18,970 --> 00:03:21,220
I wrote it with a mistake.

57
00:03:21,220 --> 00:03:23,480
Let's take it again,
hopefully this

58
00:03:23,480 --> 00:03:24,730
time without any mistakes.

59
00:03:24,730 --> 00:03:29,470

60
00:03:29,470 --> 00:03:32,550
And hopefully when you're typing
it without mistakes

61
00:03:32,550 --> 00:03:39,490
like what I did, it will run
fluently and much quickly.

62
00:03:39,490 --> 00:03:43,680
After installing this model,
and we have the ability, we

63
00:03:43,680 --> 00:03:46,690
need, basically, just to attach
it to the script that

64
00:03:46,690 --> 00:03:51,020
we are going to work on.

65
00:03:51,020 --> 00:03:55,000
So here it's just fetching
a bunch of stuff.

66
00:03:55,000 --> 00:04:00,810
And at the end of the day, we
just have this ability.

67
00:04:00,810 --> 00:04:08,630
Now if we'll go and, let's
say, run a specific Node

68
00:04:08,630 --> 00:04:11,440
script, like in this case, it's
a Monte Carlo simulation

69
00:04:11,440 --> 00:04:15,550
that I showed you four weeks
ago-- and again, I'll put a

70
00:04:15,550 --> 00:04:19,100
link to it so if you want to
see how to run Monte Carlo

71
00:04:19,100 --> 00:04:22,560
simulations inside NodeJS,
you'd be able to do so.

72
00:04:22,560 --> 00:04:24,790
Actually, in that episode, in
the last episode, we did it

73
00:04:24,790 --> 00:04:28,550
inside Google Cloud, basically,
Compute Engine.

74
00:04:28,550 --> 00:04:32,660
And it's a quite powerful tool
to run NodeJS applications.

75
00:04:32,660 --> 00:04:35,740
Here, the only main difference,
as you can see, is

76
00:04:35,740 --> 00:04:40,150
just putting this dash,
dash debug break.

77
00:04:40,150 --> 00:04:44,220
So our script will just stop
at the first line.

78
00:04:44,220 --> 00:04:46,980
And when I'm doing it, I'm
getting now the response of,

79
00:04:46,980 --> 00:04:52,010
OK, the debugger now is
listening on port 58.

80
00:04:52,010 --> 00:04:57,080
Here, you could see here that
I already started the

81
00:04:57,080 --> 00:04:58,050
node-inspector.

82
00:04:58,050 --> 00:05:03,920
So I'm getting the ability to
just go and [INAUDIBLE]

83
00:05:03,920 --> 00:05:06,860
copy this dislocation.

84
00:05:06,860 --> 00:05:09,730
And [INAUDIBLE]

85
00:05:09,730 --> 00:05:12,760
just another Chrome tab
we could pass it,

86
00:05:12,760 --> 00:05:14,550
just refresh the page.

87
00:05:14,550 --> 00:05:17,200
And now what's happening behind
the scene is that it's

88
00:05:17,200 --> 00:05:21,390
connecting to our script.

89
00:05:21,390 --> 00:05:26,836
And when we just let it run,
right now it's detached.

90
00:05:26,836 --> 00:05:28,086
But if I try it again--

91
00:05:28,086 --> 00:05:30,750

92
00:05:30,750 --> 00:05:32,090
Yeah, it's not working.

93
00:05:32,090 --> 00:05:34,850
Let's try it again.

94
00:05:34,850 --> 00:05:36,380
We're running it.

95
00:05:36,380 --> 00:05:40,050
And now let's try to call it.

96
00:05:40,050 --> 00:05:49,350

97
00:05:49,350 --> 00:05:54,230
We'll just have the running
script in the background.

98
00:05:54,230 --> 00:05:59,100
But now that we do have it, if
we'll just run, you could see

99
00:05:59,100 --> 00:06:00,330
immediately see that
it's going.

100
00:06:00,330 --> 00:06:01,880
It's connecting to it.

101
00:06:01,880 --> 00:06:06,980
And I have it with a breakpoint
at the beginning.

102
00:06:06,980 --> 00:06:08,920
What they could do is
go in and do much

103
00:06:08,920 --> 00:06:10,020
more interesting stuff.

104
00:06:10,020 --> 00:06:13,080
It's just going to my code.

105
00:06:13,080 --> 00:06:15,300
And let's say that I'm putting a
breakpoint at the beginning.

106
00:06:15,300 --> 00:06:18,230
And now I'm just running
to do is breakpoints.

107
00:06:18,230 --> 00:06:20,370
Some powerful things could
be achieved here.

108
00:06:20,370 --> 00:06:23,710
So first, I just could inspect
what's going on with each and

109
00:06:23,710 --> 00:06:24,720
every variable.

110
00:06:24,720 --> 00:06:26,710
And as you could see here,
it's undefined.

111
00:06:26,710 --> 00:06:29,530
But after I'm passing it, I
see exactly what is the

112
00:06:29,530 --> 00:06:31,020
variable that I got here.

113
00:06:31,020 --> 00:06:32,370
That's quite trivial.

114
00:06:32,370 --> 00:06:36,320
I could do more sophisticated
stuff, as you all know, just

115
00:06:36,320 --> 00:06:40,440
setting out a breakpoint, and
running to it quite quickly.

116
00:06:40,440 --> 00:06:44,210
And then, of course, I could
dive into the function itself,

117
00:06:44,210 --> 00:06:46,100
run scenario blending.

118
00:06:46,100 --> 00:06:49,030
But if I just want to see what's
going on after the

119
00:06:49,030 --> 00:06:52,480
function has returned, I could
now go to the expression

120
00:06:52,480 --> 00:06:54,350
itself, see that
it's containing

121
00:06:54,350 --> 00:06:56,820
some interesting values.

122
00:06:56,820 --> 00:06:58,770
I could do local modification.

123
00:06:58,770 --> 00:07:00,330
I could get edit to the watch.

124
00:07:00,330 --> 00:07:03,060
And as you can see here, now
I have it permanently.

125
00:07:03,060 --> 00:07:07,220
So I could do some nice things
[INAUDIBLE] see exactly what's

126
00:07:07,220 --> 00:07:08,630
going on here.

127
00:07:08,630 --> 00:07:11,505
I could also, of course,
click Escape and get

128
00:07:11,505 --> 00:07:12,940
in the console here.

129
00:07:12,940 --> 00:07:16,660
And in the console, the great
benefits that you already have

130
00:07:16,660 --> 00:07:22,680
in Node, like doing nice things
like autocompletes on

131
00:07:22,680 --> 00:07:25,450
the variables that you have in
your scripts, and then diving

132
00:07:25,450 --> 00:07:29,220
into a certain object to see
what's going on there, and

133
00:07:29,220 --> 00:07:31,590
lots of other things,
of course.

134
00:07:31,590 --> 00:07:34,590
You have the call stack, so you
could see exactly what's

135
00:07:34,590 --> 00:07:38,560
going on and how the application
path, in terms of

136
00:07:38,560 --> 00:07:40,380
the function calls went.

137
00:07:40,380 --> 00:07:43,950
And the scope, of course, of the
variables, what's going on

138
00:07:43,950 --> 00:07:45,800
in each and every one of them.

139
00:07:45,800 --> 00:07:47,960
And, of course, breakpoints.

140
00:07:47,960 --> 00:07:50,790
So if you want to see where
you set the breakpoints.

141
00:07:50,790 --> 00:07:52,880
In our case, it was at the
beginning of the script, and

142
00:07:52,880 --> 00:07:54,720
then a bit later on.

143
00:07:54,720 --> 00:07:57,110
And lots of others
possibilities.

144
00:07:57,110 --> 00:08:01,690
Of course, when you are just
releasing the lock of the

145
00:08:01,690 --> 00:08:04,890
breakpoints, and you could see
here in this window that the

146
00:08:04,890 --> 00:08:06,900
script will continue to run.

147
00:08:06,900 --> 00:08:09,490
And let me try to adjust that.

148
00:08:09,490 --> 00:08:13,570
So of course, since we are
breaking a point inside

149
00:08:13,570 --> 00:08:16,650
function, that's inside a loop,
we continue to do so.

150
00:08:16,650 --> 00:08:19,110
But now that I removed it, and
I could move this one, as

151
00:08:19,110 --> 00:08:21,280
well, I could just run it.

152
00:08:21,280 --> 00:08:24,210
And as you can see here, quite
nicely, it's all running in

153
00:08:24,210 --> 00:08:24,890
the background.

154
00:08:24,890 --> 00:08:31,480
We actually ran 10,000
trials, and got the

155
00:08:31,480 --> 00:08:33,919
response quite quickly.

156
00:08:33,919 --> 00:08:36,360
Actually it took us this amount
of time because we

157
00:08:36,360 --> 00:08:37,870
showed how to do things.

158
00:08:37,870 --> 00:08:41,960
But if we run it without
breaking, to just let me show

159
00:08:41,960 --> 00:08:46,600
you the powerful node, in terms
of performance, how

160
00:08:46,600 --> 00:08:48,350
quickly doing things.

161
00:08:48,350 --> 00:08:52,890
So we got 10,000 trials
in 357 milliseconds,

162
00:08:52,890 --> 00:08:55,350
which is quite nice.

163
00:08:55,350 --> 00:08:57,340
So that's basically
what we got.

164
00:08:57,340 --> 00:09:00,300
The node-inspector's giving
you the powerful DevTools

165
00:09:00,300 --> 00:09:05,310
under your arm when you're going
and want to check and

166
00:09:05,310 --> 00:09:07,780
verify and debug your scripts.

167
00:09:07,780 --> 00:09:09,860
Hopefully in the near future,
we'll have here other

168
00:09:09,860 --> 00:09:13,250
thoughts, like the profiler, the
audit, and more and more.

169
00:09:13,250 --> 00:09:20,700
And all the links for how to do
it and what are the steps,

170
00:09:20,700 --> 00:09:22,400
as you can see here, will be

171
00:09:22,400 --> 00:09:24,520
published in the show footnotes.

172
00:09:24,520 --> 00:09:28,190
So feel free to just go and
try it on yourselves.

173
00:09:28,190 --> 00:09:32,190
If you want to have questions or
comments, please feel free

174
00:09:32,190 --> 00:09:37,440
to reach out to me on greenido
at Twitter or greenido in G+.

175
00:09:37,440 --> 00:09:41,870
So until next time, thank you
very much and be strong.

176
00:09:41,870 --> 00:09:42,190
Thank you.

177
00:09:42,190 --> 00:09:43,440
Bye bye.

178
00:09:43,440 --> 00:09:51,807

