1
00:00:00,000 --> 00:00:01,784

2
00:00:01,784 --> 00:00:02,450
I'm Paul Kinlan.

3
00:00:02,450 --> 00:00:04,870
I'm a developer advocate
on the Chrome team.

4
00:00:04,870 --> 00:00:07,610
And I'm working on trying
to make the mobile web

5
00:00:07,610 --> 00:00:10,690
platform better for developers
and trying to educate people

6
00:00:10,690 --> 00:00:13,190
on how we think mobile
web development should

7
00:00:13,190 --> 00:00:15,910
be kind of doing, I suppose.

8
00:00:15,910 --> 00:00:17,660
I was going to start
this off by saying

9
00:00:17,660 --> 00:00:19,364
that I think everyone
in California

10
00:00:19,364 --> 00:00:21,280
is a little bit too
cheery, especially because

11
00:00:21,280 --> 00:00:22,988
of the sunny weather
and everything else.

12
00:00:22,988 --> 00:00:25,110
So I decided to bring all
the wet weather with me

13
00:00:25,110 --> 00:00:27,884
from London, just so
everyone kind of experiences

14
00:00:27,884 --> 00:00:29,050
what it feels like to be me.

15
00:00:29,050 --> 00:00:32,080

16
00:00:32,080 --> 00:00:34,180
So I suppose the first
question everyone has,

17
00:00:34,180 --> 00:00:36,640
why mobile web UX at a
developer conference,

18
00:00:36,640 --> 00:00:41,540
and why someone like me is
talking about mobile web UX?

19
00:00:41,540 --> 00:00:43,892
Well, I always used to
have this impression of--

20
00:00:43,892 --> 00:00:47,410
is anyone actually a UX designer
or an interaction designer?

21
00:00:47,410 --> 00:00:49,580
OK, I'll be careful.

22
00:00:49,580 --> 00:00:51,860
I always used to think
UX or interaction design

23
00:00:51,860 --> 00:00:55,670
was for people who wore
turtleneck sweaters and berets.

24
00:00:55,670 --> 00:00:57,720
But it actually
turned out that UX

25
00:00:57,720 --> 00:00:59,360
is critically important
for everything

26
00:00:59,360 --> 00:01:02,320
that we do when we're
building applications.

27
00:01:02,320 --> 00:01:04,629
And if you're a
developer, and you're not

28
00:01:04,629 --> 00:01:07,650
skilled in the arts of
user experience like me,

29
00:01:07,650 --> 00:01:08,930
what do you do?

30
00:01:08,930 --> 00:01:12,040
So it's critically important
as well for the mobile context

31
00:01:12,040 --> 00:01:14,400
because-- I don't need to
tell you guys all about this.

32
00:01:14,400 --> 00:01:16,240
But we know mobile
is big, right?

33
00:01:16,240 --> 00:01:18,260
Unit sales are kind
of skyrocketing.

34
00:01:18,260 --> 00:01:21,470
OK, there's an existing
desktop presence out there.

35
00:01:21,470 --> 00:01:23,640
But every single one of
these devices that gets sold

36
00:01:23,640 --> 00:01:26,200
has a really capable
mobile browser on there.

37
00:01:26,200 --> 00:01:28,000
And if you look at
some of the work

38
00:01:28,000 --> 00:01:29,855
that the Apps team
have been doing

39
00:01:29,855 --> 00:01:31,480
over the past couple
of months, they've

40
00:01:31,480 --> 00:01:33,620
been doing research
on what people

41
00:01:33,620 --> 00:01:36,750
like about mobile, what people
think about mobile websites.

42
00:01:36,750 --> 00:01:39,130
And pretty much everyone likes
a mobile-based experience.

43
00:01:39,130 --> 00:01:42,480
They hate desktop
experiences on the web.

44
00:01:42,480 --> 00:01:43,930
So we know mobile's huge.

45
00:01:43,930 --> 00:01:47,520
And if we're developers, how
do we deal with this context

46
00:01:47,520 --> 00:01:50,670
where we need to define and
build for the mobile web?

47
00:01:50,670 --> 00:01:53,286
Well, if you look at kind of
the way mobile native is going,

48
00:01:53,286 --> 00:01:54,910
they're kind of really
pushing forwards

49
00:01:54,910 --> 00:01:58,550
on what it means to be a native
developer and a native kind

50
00:01:58,550 --> 00:02:00,440
of UX or native experiences.

51
00:02:00,440 --> 00:02:01,880
And they're trying
to push forward

52
00:02:01,880 --> 00:02:03,671
these kind of different
interaction styles.

53
00:02:03,671 --> 00:02:06,380
So we have, obviously,
voice interaction.

54
00:02:06,380 --> 00:02:08,060
That's a big thing
on native platforms

55
00:02:08,060 --> 00:02:11,270
now, whether it's Google Now or
Siri and these types of things.

56
00:02:11,270 --> 00:02:13,840
We also have card-based
interfaces and gestures,

57
00:02:13,840 --> 00:02:18,340
and all these things that
didn't really exist maybe one,

58
00:02:18,340 --> 00:02:19,522
two years ago.

59
00:02:19,522 --> 00:02:20,980
And if you compare
that to the web,

60
00:02:20,980 --> 00:02:23,438
we are actually doing pretty
well on the web at the moment,

61
00:02:23,438 --> 00:02:25,280
in the sense of we
are starting to get

62
00:02:25,280 --> 00:02:27,780
some great mobile-based
experiences out there.

63
00:02:27,780 --> 00:02:29,950
We've got Forecast,
the BBC, Yahoo.

64
00:02:29,950 --> 00:02:31,915
Everyone is building
these kind of-- everyone

65
00:02:31,915 --> 00:02:33,680
who knows and gets
that mobile is

66
00:02:33,680 --> 00:02:36,640
critical is starting to build
mobile-based experiences.

67
00:02:36,640 --> 00:02:39,920
But they don't take
advantage of as much

68
00:02:39,920 --> 00:02:42,740
of the hardware capabilities
and interaction patterns

69
00:02:42,740 --> 00:02:46,000
that native applications
are starting to do.

70
00:02:46,000 --> 00:02:47,710
So my talk was going
to be about how

71
00:02:47,710 --> 00:02:49,990
we could bridge that
gap, how we could start

72
00:02:49,990 --> 00:02:51,430
to use voice
interactions, how we

73
00:02:51,430 --> 00:02:52,820
could start to
use swipe gestures

74
00:02:52,820 --> 00:02:54,590
and card-based interfaces.

75
00:02:54,590 --> 00:02:58,370
But I look at the-- well, the
top 1,000 sites, originally.

76
00:02:58,370 --> 00:03:01,540
And I was trying to assess what
the common patterns are, what

77
00:03:01,540 --> 00:03:03,499
the mobile-ness
of the sites are.

78
00:03:03,499 --> 00:03:05,040
And it was actually
really startling.

79
00:03:05,040 --> 00:03:07,230
We found some really kind
of interesting things

80
00:03:07,230 --> 00:03:10,942
where 53% of sites still
had a desktop experience.

81
00:03:10,942 --> 00:03:12,650
And these are the top
1,000 sites, right?

82
00:03:12,650 --> 00:03:16,130
This is the head of the
mobile web is still desktop.

83
00:03:16,130 --> 00:03:17,880
There's a couple of
really great examples,

84
00:03:17,880 --> 00:03:20,510
Wikipedia and Google,
Yahoo, and a bunch

85
00:03:20,510 --> 00:03:21,890
of others that get mobile.

86
00:03:21,890 --> 00:03:25,156
But everyone else in the
mobile web, it kind of sucks.

87
00:03:25,156 --> 00:03:26,530
They don't actually
seem to think

88
00:03:26,530 --> 00:03:28,470
that the mobile web
is actually important.

89
00:03:28,470 --> 00:03:30,630
And this desktop experience
is actually pretty bad

90
00:03:30,630 --> 00:03:32,934
because, basically, the
way the browser works

91
00:03:32,934 --> 00:03:35,100
is, it goes, well, we know
you've got a desktop web.

92
00:03:35,100 --> 00:03:37,190
The web is for
desktops at the moment.

93
00:03:37,190 --> 00:03:39,560
So we're going to have
to scale everything down

94
00:03:39,560 --> 00:03:41,220
to fit on a mobile device.

95
00:03:41,220 --> 00:03:43,970
And if you look at some of
the stats from Nat's team.

96
00:03:43,970 --> 00:03:45,960
And I'll try and
share a link later on,

97
00:03:45,960 --> 00:03:49,770
where basically
76% of users prefer

98
00:03:49,770 --> 00:03:51,470
optimized mobile experiences.

99
00:03:51,470 --> 00:03:54,267
This was a survey of
1,000 users at the time.

100
00:03:54,267 --> 00:03:55,850
And no one is really
catering for that

101
00:03:55,850 --> 00:03:57,900
at all on the mobile web.

102
00:03:57,900 --> 00:04:00,186
We also found that 25%
of sites, regardless

103
00:04:00,186 --> 00:04:02,060
of whether they were
mobile optimized or not,

104
00:04:02,060 --> 00:04:04,730
their content didn't fit
in the mobile viewport.

105
00:04:04,730 --> 00:04:07,122
And this is an example of
a site where basically you

106
00:04:07,122 --> 00:04:08,330
could scroll around the site.

107
00:04:08,330 --> 00:04:10,010
You couldn't zoom
out from that view.

108
00:04:10,010 --> 00:04:10,676
It was terrible.

109
00:04:10,676 --> 00:04:11,470
You can't zoom out.

110
00:04:11,470 --> 00:04:13,160
You have to pan around
the user interface just

111
00:04:13,160 --> 00:04:13,970
to read some text.

112
00:04:13,970 --> 00:04:15,960
It's not a great
user experience.

113
00:04:15,960 --> 00:04:18,242
And it's quite common
in the top 1,000 sites.

114
00:04:18,242 --> 00:04:20,200
And we found that a whole
bunch of developers--

115
00:04:20,200 --> 00:04:23,090
I think it was actually
65% of users, sorry--

116
00:04:23,090 --> 00:04:25,732
hated the fact that they have
to scroll around the content

117
00:04:25,732 --> 00:04:27,440
to actually find the
piece of information

118
00:04:27,440 --> 00:04:29,840
that they want to
find on the site.

119
00:04:29,840 --> 00:04:31,620
And then we found
that 83% of sites

120
00:04:31,620 --> 00:04:34,480
had hard to touch
areas on the screen.

121
00:04:34,480 --> 00:04:38,054
Now, quite a lot of these sites
were-- just maybe one or two

122
00:04:38,054 --> 00:04:39,720
little buttons were
kind of quite small.

123
00:04:39,720 --> 00:04:41,210
But then you get sites
like Hacker News, which

124
00:04:41,210 --> 00:04:42,320
I know a lot of
people really love,

125
00:04:42,320 --> 00:04:43,730
and I absolutely
love it as well.

126
00:04:43,730 --> 00:04:45,110
But it's completely
not optimized

127
00:04:45,110 --> 00:04:46,080
for the mobile experience.

128
00:04:46,080 --> 00:04:48,079
And then when you actually
try and click a link,

129
00:04:48,079 --> 00:04:49,600
the browser has a
really hard time

130
00:04:49,600 --> 00:04:53,187
trying to figure out what you
actually meant to click on.

131
00:04:53,187 --> 00:04:55,770
This is actually a really hard
problem to solve at the moment,

132
00:04:55,770 --> 00:04:57,410
well, on a desktop
type of experience.

133
00:04:57,410 --> 00:04:59,840
But when you're building
mobile experiences,

134
00:04:59,840 --> 00:05:01,360
it gets a little bit easier.

135
00:05:01,360 --> 00:05:04,380
And this is my
blog from ages ago.

136
00:05:04,380 --> 00:05:05,150
It's horrible.

137
00:05:05,150 --> 00:05:06,660
And as you can see, I'm
not a graphics designer

138
00:05:06,660 --> 00:05:08,284
or an interaction
designer or anything.

139
00:05:08,284 --> 00:05:10,580
But basically, of the top
1,000 sites, 60% of them

140
00:05:10,580 --> 00:05:11,899
had readability issues.

141
00:05:11,899 --> 00:05:13,440
And this actually
comes from the fact

142
00:05:13,440 --> 00:05:17,429
that if you're not
developing a mobile site,

143
00:05:17,429 --> 00:05:19,970
and the site has to get squished
down onto the mobile device,

144
00:05:19,970 --> 00:05:23,770
without zooming in, you have a
real hard time actually reading

145
00:05:23,770 --> 00:05:24,650
the text.

146
00:05:24,650 --> 00:05:25,750
And if you see from
this screen shot,

147
00:05:25,750 --> 00:05:26,990
actually what Chrome
has tried to do

148
00:05:26,990 --> 00:05:29,240
is tried to be clever and
actually boost the font size

149
00:05:29,240 --> 00:05:31,351
as well using the text
auto-size that Greg

150
00:05:31,351 --> 00:05:32,350
talked about earlier on.

151
00:05:32,350 --> 00:05:35,090
And I'm going to kind of briefly
talk about that later on.

152
00:05:35,090 --> 00:05:37,430
But basically, text is not
readable in the mobile web

153
00:05:37,430 --> 00:05:38,710
at the moment, it seems.

154
00:05:38,710 --> 00:05:41,040
And 10% of sites in
the top 1,000 sites

155
00:05:41,040 --> 00:05:42,850
still used plug-ins,
plug-ins that

156
00:05:42,850 --> 00:05:46,000
don't work on the
mobile web, Flash,

157
00:05:46,000 --> 00:05:49,320
Java applets, Silverlight,
Unity 3D, all these things

158
00:05:49,320 --> 00:05:52,494
where we've been building kind
of rich internet applications.

159
00:05:52,494 --> 00:05:54,660
And they've been able to
do some great stuff for us.

160
00:05:54,660 --> 00:05:56,250
But people still
actually have this

161
00:05:56,250 --> 00:05:58,990
deployed on the
modern mobile web.

162
00:05:58,990 --> 00:06:02,410
So actually, this is my
first ever kind of mini

163
00:06:02,410 --> 00:06:04,420
product announcement.

164
00:06:04,420 --> 00:06:05,960
We're trying to
build a tool that

165
00:06:05,960 --> 00:06:08,260
helps you identify and
understand the problems

166
00:06:08,260 --> 00:06:10,450
that you would have
as a web developer.

167
00:06:10,450 --> 00:06:12,690
And this tool is
kind of-- the tool

168
00:06:12,690 --> 00:06:15,390
is kind of focused towards more
of the developers who are not

169
00:06:15,390 --> 00:06:18,170
naturally interaction designers,
just to help you identify all

170
00:06:18,170 --> 00:06:20,270
those issues that we
talked about before.

171
00:06:20,270 --> 00:06:22,430
So I know Bryan mentioned
PageSpeed Insights

172
00:06:22,430 --> 00:06:25,760
a couple of minutes ago,
where it analyzed your network

173
00:06:25,760 --> 00:06:28,442
performance of your site
in the context of mobile.

174
00:06:28,442 --> 00:06:30,150
Well, we're extending
this further today.

175
00:06:30,150 --> 00:06:31,941
And it's in the test
version at the moment.

176
00:06:31,941 --> 00:06:34,480
You're the first guys
to actually see this.

177
00:06:34,480 --> 00:06:36,150
But we're extending
PageSpeed Insights

178
00:06:36,150 --> 00:06:38,420
to also do user
experience analysis.

179
00:06:38,420 --> 00:06:40,470
And we're trying to get
the fundamentals correct.

180
00:06:40,470 --> 00:06:42,775
We're not trying to say,
hey, your navigation

181
00:06:42,775 --> 00:06:43,525
is kind of busted.

182
00:06:43,525 --> 00:06:45,830
Your off-screen menus and
all these types of things

183
00:06:45,830 --> 00:06:46,590
don't work.

184
00:06:46,590 --> 00:06:48,173
We're trying to make
sure you actually

185
00:06:48,173 --> 00:06:49,410
get the fundamentals correct.

186
00:06:49,410 --> 00:06:51,951
And I'm going to go through a
quick demo of this in a minute.

187
00:06:51,951 --> 00:06:56,459
But basically, this tool loads
your site in a mobile context

188
00:06:56,459 --> 00:06:59,000
and then analyzes it to check
for the viewport, the viewpoint

189
00:06:59,000 --> 00:07:01,880
content size, whether the
text is actually readable,

190
00:07:01,880 --> 00:07:04,860
whether the links and buttons
and other areas are clickable.

191
00:07:04,860 --> 00:07:07,150
And it identifies the
uses of legacy plug-ins.

192
00:07:07,150 --> 00:07:09,280
Now, this is very
kind of early stage.

193
00:07:09,280 --> 00:07:11,780
And we really, really,
really want your feedback

194
00:07:11,780 --> 00:07:14,180
on this tool, whether you
think some of the insights

195
00:07:14,180 --> 00:07:16,560
are a little bit too harsh
or critical and other

196
00:07:16,560 --> 00:07:20,370
types of things that you, as
developers, can understand--

197
00:07:20,370 --> 00:07:22,540
features that we could
assess programmatically

198
00:07:22,540 --> 00:07:24,257
by just analyzing the page.

199
00:07:24,257 --> 00:07:25,840
So I'm going to give
you a quick demo.

200
00:07:25,840 --> 00:07:31,407
I will say, if you bump on
ux=1 at the end of PageSpeed

201
00:07:31,407 --> 00:07:33,990
Insights, you'll be able to go
and test this today on your own

202
00:07:33,990 --> 00:07:34,930
sites.

203
00:07:34,930 --> 00:07:36,950
I'm just going to go
and analyze a site which

204
00:07:36,950 --> 00:07:41,750
I know is terrible, and it
fails every single test.

205
00:07:41,750 --> 00:07:42,905
It's actually my site.

206
00:07:42,905 --> 00:07:45,550

207
00:07:45,550 --> 00:07:47,050
So I was actually
looking for sites.

208
00:07:47,050 --> 00:07:50,799
And I was like, I'll try
my old site from 2010.

209
00:07:50,799 --> 00:07:52,090
Yeah, and it failed everything.

210
00:07:52,090 --> 00:07:53,347
It was terrible.

211
00:07:53,347 --> 00:07:54,930
But anyway, as you
can see here, we've

212
00:07:54,930 --> 00:07:56,530
got kind of the mobile side.

213
00:07:56,530 --> 00:07:58,950
This is the rendered view
from a headless WebKit.

214
00:07:58,950 --> 00:08:01,050
It's got all the speed
criteria that Bryan

215
00:08:01,050 --> 00:08:05,320
talked about before to help
you build better mobile network

216
00:08:05,320 --> 00:08:06,350
performance.

217
00:08:06,350 --> 00:08:09,190
But it's also got this whole
area for user experience.

218
00:08:09,190 --> 00:08:13,560
And what it tries to do is say,
hey, we've rendered the page.

219
00:08:13,560 --> 00:08:15,394
We've looked at what
the content looks like.

220
00:08:15,394 --> 00:08:17,185
And we're going to tell
you the areas where

221
00:08:17,185 --> 00:08:18,500
we think you should improve.

222
00:08:18,500 --> 00:08:20,790
And if you've got a
purely desktop experience,

223
00:08:20,790 --> 00:08:23,697
quite often it tells you you
need to improve everything.

224
00:08:23,697 --> 00:08:25,530
But if you've got a
mobile-based experience,

225
00:08:25,530 --> 00:08:28,100
the number of criteria checks
that it kind of fails on

226
00:08:28,100 --> 00:08:29,660
gets a lot smaller.

227
00:08:29,660 --> 00:08:32,284
The first is legible text.

228
00:08:32,284 --> 00:08:33,159
This is kind of cool.

229
00:08:33,159 --> 00:08:35,130
So it basically identifies
every single piece

230
00:08:35,130 --> 00:08:36,620
of text on the web
page-- I'll just

231
00:08:36,620 --> 00:08:40,650
zoom in a little bit-- which
doesn't render clearly,

232
00:08:40,650 --> 00:08:44,817
doesn't meet the minimum,
say, 12-point style font size.

233
00:08:44,817 --> 00:08:45,900
Now, this is kind of cool.

234
00:08:45,900 --> 00:08:46,830
So I've got a whole
load of things.

235
00:08:46,830 --> 00:08:48,496
I used to work for
Switch Media, so that

236
00:08:48,496 --> 00:08:50,810
was the company I
used to work at.

237
00:08:50,810 --> 00:08:52,581
Let's have a look.

238
00:08:52,581 --> 00:08:53,580
"My Dad's Cycling Blog."

239
00:08:53,580 --> 00:08:54,190
OK.

240
00:08:54,190 --> 00:08:56,310
So you can click on a
link, and it highlights it

241
00:08:56,310 --> 00:09:00,210
inside the user
interface exactly where

242
00:09:00,210 --> 00:09:01,770
the identified problem is.

243
00:09:01,770 --> 00:09:02,780
This is really cool
because if you're

244
00:09:02,780 --> 00:09:04,530
trying to find different
areas of the text

245
00:09:04,530 --> 00:09:06,260
on your page which
have got problems,

246
00:09:06,260 --> 00:09:08,880
then you can actually kind of
identify that pretty quickly.

247
00:09:08,880 --> 00:09:12,282
The really nice thing-- and I
think it's there in the API.

248
00:09:12,282 --> 00:09:14,740
But there's an API back end to
this, which you can actually

249
00:09:14,740 --> 00:09:17,198
programmatically run through
your own workflow tools, which

250
00:09:17,198 --> 00:09:20,970
you could then use against your
site, which would analyze UX

251
00:09:20,970 --> 00:09:23,177
problems across your
site automatically.

252
00:09:23,177 --> 00:09:24,010
So it's pretty cool.

253
00:09:24,010 --> 00:09:26,460
We can find all
these different areas

254
00:09:26,460 --> 00:09:28,120
where everything kind of fails.

255
00:09:28,120 --> 00:09:29,799
And because it's a
desktop site, you

256
00:09:29,799 --> 00:09:32,090
can see pretty much everything
is a little bit rubbish.

257
00:09:32,090 --> 00:09:33,820
And it tells you kind
of roughly how tall

258
00:09:33,820 --> 00:09:36,390
it is on the screen
at that time.

259
00:09:36,390 --> 00:09:37,420
So that's legible text.

260
00:09:37,420 --> 00:09:40,540
The other thing
is touch targets.

261
00:09:40,540 --> 00:09:42,560
So we identify all
the areas on the page

262
00:09:42,560 --> 00:09:44,310
where there's
potential for confusion

263
00:09:44,310 --> 00:09:46,560
by the browser or
the user into what

264
00:09:46,560 --> 00:09:48,170
would be clicked, essentially.

265
00:09:48,170 --> 00:09:49,950
So in many cases,
obviously, it's links.

266
00:09:49,950 --> 00:09:52,080
And it's links inside
text, for instance.

267
00:09:52,080 --> 00:09:54,130
But it's also input
elements, form inputs.

268
00:09:54,130 --> 00:09:56,710
Everything that basically
has a click event which

269
00:09:56,710 --> 00:09:58,700
you can listen to,
it will identify,

270
00:09:58,700 --> 00:10:01,620
look at, and inspect to see
whether it's correctly sized.

271
00:10:01,620 --> 00:10:05,260
So as we can see here, the
search box on this page

272
00:10:05,260 --> 00:10:07,410
is too small.

273
00:10:07,410 --> 00:10:10,190
It's actually-- I don't
know whether it was a-- oh.

274
00:10:10,190 --> 00:10:13,310

275
00:10:13,310 --> 00:10:13,990
There we go.

276
00:10:13,990 --> 00:10:16,070
Do it again.

277
00:10:16,070 --> 00:10:18,490
It's actually identified the
fact that it's-- and this is

278
00:10:18,490 --> 00:10:19,740
why it's {beta} at the moment.

279
00:10:19,740 --> 00:10:21,460
So we look at this
radio box, it's

280
00:10:21,460 --> 00:10:23,922
714 micrometers on
a typical device.

281
00:10:23,922 --> 00:10:26,130
I don't know what web
developers go and do with that.

282
00:10:26,130 --> 00:10:28,734
But all we know is
it's really small.

283
00:10:28,734 --> 00:10:30,400
But we've got all
these other areas here

284
00:10:30,400 --> 00:10:32,740
where we're trying to identify
all these potential touch

285
00:10:32,740 --> 00:10:35,689
targets which could
be mis-clicked.

286
00:10:35,689 --> 00:10:36,480
But that's not all.

287
00:10:36,480 --> 00:10:38,410
There's also this area
here at the bottom

288
00:10:38,410 --> 00:10:40,300
which identifies
targets which actually

289
00:10:40,300 --> 00:10:41,620
need additional spacing.

290
00:10:41,620 --> 00:10:43,470
Because the way that
the browsers work is

291
00:10:43,470 --> 00:10:45,580
they try and disambiguate
the clicks in the areas

292
00:10:45,580 --> 00:10:47,762
where the user is
clicking on the page.

293
00:10:47,762 --> 00:10:49,220
And if there are
two elements which

294
00:10:49,220 --> 00:10:51,800
are pretty close or
potentially overlapping,

295
00:10:51,800 --> 00:10:54,550
then that creates the potential
for confusion for users.

296
00:10:54,550 --> 00:10:56,341
And one of the things
that we're doing here

297
00:10:56,341 --> 00:10:58,680
is we're trying to identify
the tap targets which

298
00:10:58,680 --> 00:11:01,030
would potentially be
too close and overlap

299
00:11:01,030 --> 00:11:04,400
and actually provide potentially
the wrong action for the user.

300
00:11:04,400 --> 00:11:06,400
And then some of the basic
things as well, size,

301
00:11:06,400 --> 00:11:07,950
the content for the viewport.

302
00:11:07,950 --> 00:11:11,160
As you can see here, everything
is sized incorrectly.

303
00:11:11,160 --> 00:11:13,140
But what this is
trying to say is--

304
00:11:13,140 --> 00:11:16,080
this is the critical area here--
that the actual physical size

305
00:11:16,080 --> 00:11:19,590
of the page is 1,299 CSS pixels.

306
00:11:19,590 --> 00:11:22,010
And if you've ever done any
mobile web development before,

307
00:11:22,010 --> 00:11:24,301
you'll know that the actual
default size of the browser

308
00:11:24,301 --> 00:11:25,840
is 980 pixels or 960 pixels.

309
00:11:25,840 --> 00:11:28,300
Or no, 980, sorry.

310
00:11:28,300 --> 00:11:30,350
What this basically
means is if the content

311
00:11:30,350 --> 00:11:32,380
busts outside the viewport--
it's too big for the viewport--

312
00:11:32,380 --> 00:11:34,000
rather than scale
it down further,

313
00:11:34,000 --> 00:11:36,780
it forces the user to have to
pan and scroll around the site.

314
00:11:36,780 --> 00:11:40,040
So we're trying to identify
areas where on the page

315
00:11:40,040 --> 00:11:42,450
you've got content
on the page which

316
00:11:42,450 --> 00:11:46,610
will cause the page to bust out
the side of the mobile device,

317
00:11:46,610 --> 00:11:49,510
in theory at least.

318
00:11:49,510 --> 00:11:51,360
And then we have the
configure the viewport.

319
00:11:51,360 --> 00:11:52,820
Now this is a
relatively simple test.

320
00:11:52,820 --> 00:11:54,470
If you haven't got a
viewport, it'll tell you,

321
00:11:54,470 --> 00:11:55,270
you haven't got a viewport.

322
00:11:55,270 --> 00:11:57,644
If you haven't got a viewport,
and then you just drop one

323
00:11:57,644 --> 00:11:59,950
into your site, you're not
going to have a good time.

324
00:11:59,950 --> 00:12:01,390
So you're going to have to
think about actually building

325
00:12:01,390 --> 00:12:03,556
a mobile experience, which
I'm going to try and talk

326
00:12:03,556 --> 00:12:06,210
about for the rest
of this talk now.

327
00:12:06,210 --> 00:12:07,460
So this is PageSpeed Insights.

328
00:12:07,460 --> 00:12:09,126
This is one of the
things that we really

329
00:12:09,126 --> 00:12:11,530
want you to go kind of go
out, play with, give us

330
00:12:11,530 --> 00:12:14,936
a whole bunch of feedback
about whether you think

331
00:12:14,936 --> 00:12:16,560
these checks are
actually good for you,

332
00:12:16,560 --> 00:12:18,180
whether they actually
work on your site as well.

333
00:12:18,180 --> 00:12:19,980
Because we found
instances where there's

334
00:12:19,980 --> 00:12:23,800
bugs for-- tap target
menus across the top

335
00:12:23,800 --> 00:12:25,750
just don't work very well.

336
00:12:25,750 --> 00:12:27,510
But we want as much
feedback as possible.

337
00:12:27,510 --> 00:12:28,968
And if you go to
that page, there's

338
00:12:28,968 --> 00:12:30,880
a feedback link
right at the bottom.

339
00:12:30,880 --> 00:12:34,220
So this talk really is about
mobile web UX building blocks,

340
00:12:34,220 --> 00:12:35,680
getting the basics
right so that we

341
00:12:35,680 --> 00:12:37,350
can build really
compelling experiences

342
00:12:37,350 --> 00:12:39,120
on the top in the
future, whether that's

343
00:12:39,120 --> 00:12:40,980
with Polymer kind
of web components

344
00:12:40,980 --> 00:12:42,410
and a whole load of other stuff.

345
00:12:42,410 --> 00:12:44,240
We want to get to
the point where

346
00:12:44,240 --> 00:12:47,320
you don't have to worry about
everything that the PageSpeed

347
00:12:47,320 --> 00:12:49,380
tool essentially
is checking for.

348
00:12:49,380 --> 00:12:52,900
So I've split this into two
different sections, display

349
00:12:52,900 --> 00:12:54,480
and interactions,
and how they relate

350
00:12:54,480 --> 00:12:57,730
to the kind of
PageSpeed Insights tool.

351
00:12:57,730 --> 00:13:01,490
Display is about how the content
is presented on the device.

352
00:13:01,490 --> 00:13:03,200
And obviously,
interaction is about how

353
00:13:03,200 --> 00:13:05,656
the user manipulates the
screen and manipulates

354
00:13:05,656 --> 00:13:07,280
all the content,
whether it's a sign up

355
00:13:07,280 --> 00:13:10,291
form, whether it's a payment
button and those types

356
00:13:10,291 --> 00:13:10,790
of things.

357
00:13:10,790 --> 00:13:12,790
Because if users can't
interact with your site,

358
00:13:12,790 --> 00:13:13,780
they don't buy things.

359
00:13:13,780 --> 00:13:14,530
They can't log in.

360
00:13:14,530 --> 00:13:16,310
They can't sign up
for your service.

361
00:13:16,310 --> 00:13:18,850
And you have a really
bad time on mobile.

362
00:13:18,850 --> 00:13:20,500
So we look at display.

363
00:13:20,500 --> 00:13:22,890
And I'm going to go through
this pretty quickly.

364
00:13:22,890 --> 00:13:24,550
And I really hate
doing this slide.

365
00:13:24,550 --> 00:13:26,360
But the most important
and critical thing

366
00:13:26,360 --> 00:13:28,640
that you can do for building
a mobile web experience

367
00:13:28,640 --> 00:13:30,181
is make sure that
you use a viewport.

368
00:13:30,181 --> 00:13:32,380
The viewpoint defines
essentially the size

369
00:13:32,380 --> 00:13:34,750
the content should
be on the screen.

370
00:13:34,750 --> 00:13:38,750
And this is all
recommended configuration,

371
00:13:38,750 --> 00:13:41,030
meta name equals
viewport, content width

372
00:13:41,030 --> 00:13:42,510
equals device width.

373
00:13:42,510 --> 00:13:46,350
Because that essentially allows
you to ensure that everything's

374
00:13:46,350 --> 00:13:50,170
sized to whether it's 320
pixels on iPhone up to about 380

375
00:13:50,170 --> 00:13:51,230
on the Nexus 4.

376
00:13:51,230 --> 00:13:52,660
And it basically
means the browser

377
00:13:52,660 --> 00:13:54,243
doesn't have to scale
the content down

378
00:13:54,243 --> 00:13:56,380
from a traditional
desktop experience

379
00:13:56,380 --> 00:13:58,530
into a more mobile experience.

380
00:13:58,530 --> 00:14:02,215
And I think that's a bug
in Chrome at the top.

381
00:14:02,215 --> 00:14:03,090
We'll get from there.

382
00:14:03,090 --> 00:14:04,548
And actually, the
reason why I want

383
00:14:04,548 --> 00:14:06,810
to show why this is
actually kind of critical

384
00:14:06,810 --> 00:14:11,884
is that I've taken the way
that the browser renders

385
00:14:11,884 --> 00:14:13,300
desktop content
on a mobile device

386
00:14:13,300 --> 00:14:15,570
and compared it to
how it's rendered

387
00:14:15,570 --> 00:14:18,560
on a viewport configured page.

388
00:14:18,560 --> 00:14:20,370
And as you see on
the right-- it's

389
00:14:20,370 --> 00:14:21,410
probably a little bit
hard for you guys to see.

390
00:14:21,410 --> 00:14:22,940
But that's a
12-point font, which

391
00:14:22,940 --> 00:14:24,850
means that at arm's
distance, it looks

392
00:14:24,850 --> 00:14:26,880
like a 12-point font
on a page, essentially,

393
00:14:26,880 --> 00:14:28,070
on a normal piece of paper.

394
00:14:28,070 --> 00:14:29,736
If you don't have a
viewport, it roughly

395
00:14:29,736 --> 00:14:31,280
reads like a five-point font.

396
00:14:31,280 --> 00:14:34,410
It looks like the point where
it's nearly kind of unreadable.

397
00:14:34,410 --> 00:14:36,150
OK, we have retina-based
devices which

398
00:14:36,150 --> 00:14:39,170
let us distinguish the layout
of the text a little bit better.

399
00:14:39,170 --> 00:14:42,520
But five points is
really not that readable.

400
00:14:42,520 --> 00:14:43,940
Nexus 5 is the same.

401
00:14:43,940 --> 00:14:45,800
Everything is roughly
a third of the size

402
00:14:45,800 --> 00:14:47,576
of what it's actually
intended to be.

403
00:14:47,576 --> 00:14:48,950
So a 12-point
font, in this case,

404
00:14:48,950 --> 00:14:50,950
reads like four-point fount.

405
00:14:50,950 --> 00:14:52,740
Nexus 7 obviously is
better, bigger screen

406
00:14:52,740 --> 00:14:53,948
and all those type of things.

407
00:14:53,948 --> 00:14:55,520
But it's getting
to the point where

408
00:14:55,520 --> 00:14:57,590
the text on a default
mobile experience

409
00:14:57,590 --> 00:14:59,440
or a desktop experience
on a mobile device

410
00:14:59,440 --> 00:15:00,481
is completely unreadable.

411
00:15:00,481 --> 00:15:03,940
Seven points is just at the
point of being unreadable.

412
00:15:03,940 --> 00:15:07,040
And obviously a Nexus 10 and
kind of the iPads as well,

413
00:15:07,040 --> 00:15:08,370
it's a lot less noticeable.

414
00:15:08,370 --> 00:15:10,210
Not having a viewport,
you get to the point

415
00:15:10,210 --> 00:15:13,520
where the text looks
like a nine-point font.

416
00:15:13,520 --> 00:15:19,020
Kind of what I told you then was
really a lie, because basically

417
00:15:19,020 --> 00:15:21,820
browsers try to
compensate for the fact

418
00:15:21,820 --> 00:15:24,030
that they know that
the desktop web is

419
00:15:24,030 --> 00:15:25,940
terrible on a mobile device.

420
00:15:25,940 --> 00:15:28,600
So in Chrome's case,
we use text auto-size.

421
00:15:28,600 --> 00:15:31,780
And basically what happens
is, just as the page loads,

422
00:15:31,780 --> 00:15:34,910
an algorithm goes through
all the text nodes

423
00:15:34,910 --> 00:15:36,740
and looks to see
what text it should

424
00:15:36,740 --> 00:15:38,700
resize to make it more visible.

425
00:15:38,700 --> 00:15:41,440
And on some pages, like my
blog before, it's not too bad.

426
00:15:41,440 --> 00:15:43,020
The content at the
top of the page

427
00:15:43,020 --> 00:15:45,230
is made bigger because
that's the primary focus.

428
00:15:45,230 --> 00:15:46,730
But then you get
to sites like this,

429
00:15:46,730 --> 00:15:50,690
which is Hacker News, which is
the same page as we saw before.

430
00:15:50,690 --> 00:15:52,780
There's certain comments
which read really well,

431
00:15:52,780 --> 00:15:55,220
like the browser's gone,
yeah, this looks important.

432
00:15:55,220 --> 00:15:56,440
It's not semantic analysis.

433
00:15:56,440 --> 00:15:59,582
It's just kind of
some basic heuristic.

434
00:15:59,582 --> 00:16:01,540
But then there's other
bits, like in the middle

435
00:16:01,540 --> 00:16:02,780
here, which you
can't read the text.

436
00:16:02,780 --> 00:16:03,910
You can't read the text here.

437
00:16:03,910 --> 00:16:05,540
You can't read the
text on the device.

438
00:16:05,540 --> 00:16:06,640
You have to zoom in.

439
00:16:06,640 --> 00:16:08,042
So the algorithm isn't perfect.

440
00:16:08,042 --> 00:16:09,500
And the best way
to get around that

441
00:16:09,500 --> 00:16:12,550
is to start to design for a
mobile web based experience.

442
00:16:12,550 --> 00:16:15,387
Obviously, user
viewport, there are

443
00:16:15,387 --> 00:16:17,720
little hacks to kind of get
around it by making sure you

444
00:16:17,720 --> 00:16:20,272
[INAUDIBLE] over
100,000 pixels high.

445
00:16:20,272 --> 00:16:22,230
It's not even worth going
there, because that's

446
00:16:22,230 --> 00:16:24,605
just one of those things which
might change in the future

447
00:16:24,605 --> 00:16:25,790
when people get rid of that.

448
00:16:25,790 --> 00:16:27,862
But essentially, browsers
try to compensate.

449
00:16:27,862 --> 00:16:29,570
And when the browser
tries to compensate,

450
00:16:29,570 --> 00:16:31,929
it kind of starts to ruin
your design essentially.

451
00:16:31,929 --> 00:16:33,470
It doesn't represent
how you actually

452
00:16:33,470 --> 00:16:36,490
intended the user to
read your content.

453
00:16:36,490 --> 00:16:38,480
And obviously, fit the
content to the viewport.

454
00:16:38,480 --> 00:16:39,750
There's not actually
anything technical

455
00:16:39,750 --> 00:16:40,530
that we can say about this.

456
00:16:40,530 --> 00:16:42,613
It's just make sure
everything is sized correctly,

457
00:16:42,613 --> 00:16:45,496
and there's no kind of
horizontal scrolling.

458
00:16:45,496 --> 00:16:46,620
Vertical scrolling is fine.

459
00:16:46,620 --> 00:16:48,870
And horizontal scrolling is
actually fine by default.

460
00:16:48,870 --> 00:16:51,410
But if you have to have the
user pan in multiple directions,

461
00:16:51,410 --> 00:16:53,535
that's when users actually
start to get frustrated.

462
00:16:53,535 --> 00:16:55,920
And I'll share the link later
on where the Ads team have

463
00:16:55,920 --> 00:16:59,070
done this analysis to actually
show that users don't like it.

464
00:16:59,070 --> 00:17:01,000
But the interesting
thing is that scrolling

465
00:17:01,000 --> 00:17:02,410
varies from platform
to platform.

466
00:17:02,410 --> 00:17:04,190
And iOS, at one point--
I think it probably still

467
00:17:04,190 --> 00:17:05,650
does-- used to
have a scroll lock.

468
00:17:05,650 --> 00:17:08,149
So if you're kind of moving up
in the vertical orientation,

469
00:17:08,149 --> 00:17:10,190
you can't scroll left and
right at the same time,

470
00:17:10,190 --> 00:17:12,589
because it's saying, well,
you don't want to pan around.

471
00:17:12,589 --> 00:17:14,960
You want to just look
at the content itself.

472
00:17:14,960 --> 00:17:17,079
But we want to get away
from this situation

473
00:17:17,079 --> 00:17:19,755
where you have to actually
move around the web like that.

474
00:17:19,755 --> 00:17:20,630
I do have a question.

475
00:17:20,630 --> 00:17:22,860
Who's got a 24-inch phone?

476
00:17:22,860 --> 00:17:23,359
No?

477
00:17:23,359 --> 00:17:25,170
Oh, OK.

478
00:17:25,170 --> 00:17:28,220
That was really
heavy, by the way.

479
00:17:28,220 --> 00:17:31,020
It was crazy.

480
00:17:31,020 --> 00:17:32,830
So I'm not going
to tell everyone

481
00:17:32,830 --> 00:17:34,544
about this too much,
like media queries.

482
00:17:34,544 --> 00:17:35,960
We should be kind
of concentrating

483
00:17:35,960 --> 00:17:39,340
on mobile first design,
responsive design as well.

484
00:17:39,340 --> 00:17:41,910
Obviously, you can
design your site

485
00:17:41,910 --> 00:17:43,700
to work better on
portrait or landscape

486
00:17:43,700 --> 00:17:45,485
and a whole load of other stuff.

487
00:17:45,485 --> 00:17:46,860
This is one of
those areas that's

488
00:17:46,860 --> 00:17:48,340
super critical for
web development.

489
00:17:48,340 --> 00:17:51,294
You want to be looking at how
you actually design your site

490
00:17:51,294 --> 00:17:52,710
to be responsive,
rather than have

491
00:17:52,710 --> 00:17:53,920
to do it all in the server.

492
00:17:53,920 --> 00:17:55,294
It's best to do
it on the client.

493
00:17:55,294 --> 00:17:57,447
I'm not going to go into
it too much, because I'm

494
00:17:57,447 --> 00:17:59,030
pretty sure everyone
knows about this.

495
00:17:59,030 --> 00:18:01,320
The thing I want to
do say is about how

496
00:18:01,320 --> 00:18:03,460
you decide the break
points in your site.

497
00:18:03,460 --> 00:18:07,270
And Paul Lewis has been working
on a redesign for HTML5Rocks,

498
00:18:07,270 --> 00:18:09,390
which is our
documentation resource.

499
00:18:09,390 --> 00:18:11,010
And the old site looks cool.

500
00:18:11,010 --> 00:18:12,780
The new site looks cool.

501
00:18:12,780 --> 00:18:15,890
But what happened is on the
original site on the left,

502
00:18:15,890 --> 00:18:17,650
we basically tried
to size for devices.

503
00:18:17,650 --> 00:18:20,100
So every other week, we would
look at Google Analytics

504
00:18:20,100 --> 00:18:23,320
to understand the
different types of devices

505
00:18:23,320 --> 00:18:25,650
that were available or
accessing our content

506
00:18:25,650 --> 00:18:27,130
and whether it was
a tablet device

507
00:18:27,130 --> 00:18:28,250
or whether it was
a mobile device.

508
00:18:28,250 --> 00:18:29,833
And then we would
say, well, this kind

509
00:18:29,833 --> 00:18:31,220
of looks like a tablet size.

510
00:18:31,220 --> 00:18:33,627
We'll push them to the
tablet user interface.

511
00:18:33,627 --> 00:18:34,710
This looks like a desktop.

512
00:18:34,710 --> 00:18:36,730
We'll push them to
the desktop interface.

513
00:18:36,730 --> 00:18:39,063
And what we found, by rather
than actually concentrating

514
00:18:39,063 --> 00:18:42,010
on the devices, whether it's
iPhone, Android, or whatever

515
00:18:42,010 --> 00:18:44,310
and the device form factors,
we literally just tried

516
00:18:44,310 --> 00:18:46,060
to say that, well,
actually, we'll

517
00:18:46,060 --> 00:18:47,700
scale the content
out left and right.

518
00:18:47,700 --> 00:18:49,908
And we'll decide where the
break points are based off

519
00:18:49,908 --> 00:18:52,330
how the content looks
at that individual time.

520
00:18:52,330 --> 00:18:53,830
So it basically was
saying, you size

521
00:18:53,830 --> 00:18:56,980
the break points to the
content, rather than

522
00:18:56,980 --> 00:18:59,180
the actual devices,
which a lot of people do.

523
00:18:59,180 --> 00:19:02,560
And we were just as guilty of
doing that as everyone else.

524
00:19:02,560 --> 00:19:05,640
The reason why we say this is
because we went from 17 media

525
00:19:05,640 --> 00:19:08,156
queries-- our media queries
for the HTML5Rocks site, if you

526
00:19:08,156 --> 00:19:11,486
go and check it now, is
just an absolute mess.

527
00:19:11,486 --> 00:19:12,860
And it's really
hard to maintain.

528
00:19:12,860 --> 00:19:14,401
And you get into
this weird situation

529
00:19:14,401 --> 00:19:16,120
when it doesn't
actually-- we've got

530
00:19:16,120 --> 00:19:17,940
weird overlapping media queries.

531
00:19:17,940 --> 00:19:20,077
It doesn't actually
know what interface

532
00:19:20,077 --> 00:19:22,160
it's supposed to present
to users at any one time.

533
00:19:22,160 --> 00:19:23,800
So we went from 17
media queries down

534
00:19:23,800 --> 00:19:26,760
to something which is a lot
more manageable for us, four.

535
00:19:26,760 --> 00:19:28,920
And we have nice looking
content on desktop,

536
00:19:28,920 --> 00:19:31,719
mobile, and tablet as well.

537
00:19:31,719 --> 00:19:34,010
One of the other areas that
we're kind of talking about

538
00:19:34,010 --> 00:19:35,112
is font readability.

539
00:19:35,112 --> 00:19:37,070
And I looked at the human
interface guidelines.

540
00:19:37,070 --> 00:19:39,630
And this is the whole
PageSpeed Insights

541
00:19:39,630 --> 00:19:41,150
test, the legibility test.

542
00:19:41,150 --> 00:19:43,246
And the human interface
guidelines from Apple

543
00:19:43,246 --> 00:19:44,620
are really cool
because they say,

544
00:19:44,620 --> 00:19:47,820
if users can't read your
text or the word in your app,

545
00:19:47,820 --> 00:19:50,460
it doesn't matter how
beautiful your typography is.

546
00:19:50,460 --> 00:19:52,490
And this kind of is--
it's ultimately applicable

547
00:19:52,490 --> 00:19:54,073
regardless of whether
you're designing

548
00:19:54,073 --> 00:19:58,810
paper-based content or web-based
content or content inside apps.

549
00:19:58,810 --> 00:20:01,340
And our guidelines and the way
that the PageSpeed Insights

550
00:20:01,340 --> 00:20:03,620
tool works is it
tries to say, you

551
00:20:03,620 --> 00:20:07,980
should be sizing your text to
be readable at arm's distance.

552
00:20:07,980 --> 00:20:10,660
Numerous studies, whether it's
Apple, Microsoft, or Google

553
00:20:10,660 --> 00:20:13,024
as well, 12-point
font is the minimum

554
00:20:13,024 --> 00:20:14,440
that you want to
suggest, which is

555
00:20:14,440 --> 00:20:17,835
roughly one em or roughly
16 pixels in height.

556
00:20:17,835 --> 00:20:19,210
But the interesting
thing as well

557
00:20:19,210 --> 00:20:20,710
is that we're
actually trying to say

558
00:20:20,710 --> 00:20:22,450
that what you should
be doing as well

559
00:20:22,450 --> 00:20:25,360
is consider where the user
actually uses your content.

560
00:20:25,360 --> 00:20:28,177
They might be out in a cab
or walking down the street.

561
00:20:28,177 --> 00:20:29,760
And you want to make
sure that there's

562
00:20:29,760 --> 00:20:32,200
a decent amount of contrast
between the foreground

563
00:20:32,200 --> 00:20:33,400
color and the background
color as well.

564
00:20:33,400 --> 00:20:34,900
We don't actually
analyze that yet,

565
00:20:34,900 --> 00:20:37,316
and we're trying to work out
whether these types of things

566
00:20:37,316 --> 00:20:40,647
are important or not for you
as a mobile web developer when

567
00:20:40,647 --> 00:20:41,730
you're checking your site.

568
00:20:41,730 --> 00:20:44,021
And obviously, things like
maintain decent line heights

569
00:20:44,021 --> 00:20:46,010
so that the text
is readable and you

570
00:20:46,010 --> 00:20:49,714
don't have to get confused
between the lines.

571
00:20:49,714 --> 00:20:51,630
Yeah, so font readability
is kind of critical.

572
00:20:51,630 --> 00:20:53,130
And that's one of
the things that we

573
00:20:53,130 --> 00:20:56,950
look for when we're doing
the PageSpeed Insights tool.

574
00:20:56,950 --> 00:20:59,520
We also want to kind of--
we don't check for this,

575
00:20:59,520 --> 00:21:02,020
but we're trying to get people
to limit the use of web fonts

576
00:21:02,020 --> 00:21:03,980
at the moment, especially
on a mobile device.

577
00:21:03,980 --> 00:21:06,355
Because if the web font doesn't
exist either in the cache

578
00:21:06,355 --> 00:21:09,030
or on the user's device,
then essentially-- especially

579
00:21:09,030 --> 00:21:11,517
on WebKit-based browsers
and Blink-based browsers--

580
00:21:11,517 --> 00:21:14,100
you're left waiting around for
the content to actually appear,

581
00:21:14,100 --> 00:21:15,980
because the font doesn't exist.

582
00:21:15,980 --> 00:21:19,152
So it doesn't actually appear
on the site at the time.

583
00:21:19,152 --> 00:21:20,860
And our guidance at
the moment-- and this

584
00:21:20,860 --> 00:21:23,020
might change once browser
implementations change,

585
00:21:23,020 --> 00:21:25,170
essentially-- is just
to use it for headings.

586
00:21:25,170 --> 00:21:26,880
But critical content,
like the text--

587
00:21:26,880 --> 00:21:29,970
like if it's HTML5 Rocks,
the article body content

588
00:21:29,970 --> 00:21:33,540
would just be a normal
system-wide font essentially.

589
00:21:33,540 --> 00:21:36,910
The interesting thing to
say is Paul Irish had a post

590
00:21:36,910 --> 00:21:40,064
on Google+ talking about
the flash of one style text

591
00:21:40,064 --> 00:21:42,230
essentially, where we're
talking about the different

592
00:21:42,230 --> 00:21:43,640
implementations
between browsers.

593
00:21:43,640 --> 00:21:45,389
So obviously, WebKit
and Blink are kind of

594
00:21:45,389 --> 00:21:47,850
quite consistent because they're
both of the same heritage

595
00:21:47,850 --> 00:21:49,100
where the content
doesn't appear.

596
00:21:49,100 --> 00:21:50,920
Whereas, Firefox is a
little bit different.

597
00:21:50,920 --> 00:21:54,250
I believe the text
appears as a system font,

598
00:21:54,250 --> 00:21:56,920
essentially, until the actual
web font is downloaded.

599
00:21:56,920 --> 00:21:58,860
And we're looking for
your feedback about what

600
00:21:58,860 --> 00:22:01,109
you think is the most important
thing, because we want

601
00:22:01,109 --> 00:22:04,994
to make sure that if we want
to be good web citizens,

602
00:22:04,994 --> 00:22:06,410
and everyone wants
to get this, we

603
00:22:06,410 --> 00:22:08,642
have the same type of
implementation across browsers.

604
00:22:08,642 --> 00:22:10,850
And it might be at some
point that the actual Firefox

605
00:22:10,850 --> 00:22:12,350
implementation is
the preferred one.

606
00:22:12,350 --> 00:22:14,725
But obviously, we need a lot
of feedback from developers.

607
00:22:14,725 --> 00:22:15,570
So go to that post.

608
00:22:15,570 --> 00:22:17,820
Have a look at the
suggestions, and then let

609
00:22:17,820 --> 00:22:21,120
Paul and everyone
else know how you

610
00:22:21,120 --> 00:22:23,184
want to have web fonts
presented to the user.

611
00:22:23,184 --> 00:22:24,600
I'll tweet this
link out because I

612
00:22:24,600 --> 00:22:27,000
know it's not exactly visible.

613
00:22:27,000 --> 00:22:27,979
So that's display.

614
00:22:27,979 --> 00:22:29,395
I want to talk
about interactions,

615
00:22:29,395 --> 00:22:30,910
and I'm going to
be really quick.

616
00:22:30,910 --> 00:22:32,710
Click disambiguation
is really important,

617
00:22:32,710 --> 00:22:36,190
because essentially the
user-- this is Chrome.

618
00:22:36,190 --> 00:22:38,223
When the user clicks on
an area inside Chrome,

619
00:22:38,223 --> 00:22:39,630
and it doesn't know
exactly where the user is,

620
00:22:39,630 --> 00:22:41,000
it presents a magnifying glass.

621
00:22:41,000 --> 00:22:42,458
It's a great
accessibility feature.

622
00:22:42,458 --> 00:22:45,140
The problem is, though, that it
actually presents a challenge

623
00:22:45,140 --> 00:22:48,690
to users because there's an
extra step before they actually

624
00:22:48,690 --> 00:22:49,620
do anything.

625
00:22:49,620 --> 00:22:52,360
So we want you as a developer
to try and get away from that.

626
00:22:52,360 --> 00:22:54,500
And I'm going to roughly
go through the process

627
00:22:54,500 --> 00:22:57,030
for this, how this actual
disambiguation works.

628
00:22:57,030 --> 00:22:59,215
Essentially, the user clicks
on the screen, roughly

629
00:22:59,215 --> 00:23:00,880
a 48 pixel bounding box.

630
00:23:00,880 --> 00:23:02,960
Works out where
the click is, adds

631
00:23:02,960 --> 00:23:05,704
in an area kind of like an
error buffer around the side,

632
00:23:05,704 --> 00:23:07,620
finds all the targets
inside the bounding box,

633
00:23:07,620 --> 00:23:09,460
the potential candidates
for what the user actually

634
00:23:09,460 --> 00:23:12,000
meant to click, scores each
element based on the closeness

635
00:23:12,000 --> 00:23:13,180
to the original touch.

636
00:23:13,180 --> 00:23:15,250
In this case, finds
one that's the closest.

637
00:23:15,250 --> 00:23:16,610
That's the closest element.

638
00:23:16,610 --> 00:23:18,360
And then it basically
compares the scores

639
00:23:18,360 --> 00:23:20,820
across all the rest
of the elements

640
00:23:20,820 --> 00:23:23,300
and then tries to find
the elements where

641
00:23:23,300 --> 00:23:24,930
the distance between
the original touch

642
00:23:24,930 --> 00:23:27,140
is roughly about half the
distance to the closest

643
00:23:27,140 --> 00:23:27,640
element.

644
00:23:27,640 --> 00:23:29,320
It's relatively complex.

645
00:23:29,320 --> 00:23:33,660
The code, if you're interested
in Chrome, is over there.

646
00:23:33,660 --> 00:23:36,935
The simplest answer is just
to use sensible padding.

647
00:23:36,935 --> 00:23:38,810
You're building a site,
just don't be stupid.

648
00:23:38,810 --> 00:23:40,226
Space elements out
pretty quickly,

649
00:23:40,226 --> 00:23:42,100
which leads us on to
this whole idea about,

650
00:23:42,100 --> 00:23:44,122
what are interesting
tap targets?

651
00:23:44,122 --> 00:23:46,330
All the different types of
human interface guidelines

652
00:23:46,330 --> 00:23:49,280
talk about things which aren't
native to the web, points

653
00:23:49,280 --> 00:23:50,200
obviously for fonts.

654
00:23:50,200 --> 00:23:51,220
But dips on Android?

655
00:23:51,220 --> 00:23:52,560
What's a dip?

656
00:23:52,560 --> 00:23:53,810
Microsoft is nine millimeters.

657
00:23:53,810 --> 00:23:56,280
I don't know how that
really applies to the web.

658
00:23:56,280 --> 00:23:58,880
But roughly, if you take one
CSS pixel as standard reference

659
00:23:58,880 --> 00:24:01,000
to be a 96th of an
inch, you can roughly

660
00:24:01,000 --> 00:24:02,450
work out that
everything is around

661
00:24:02,450 --> 00:24:04,959
between 29 and 33
pixels in size.

662
00:24:04,959 --> 00:24:07,500
Our recommendation in the tool
that we're using at the moment

663
00:24:07,500 --> 00:24:10,060
is around 26 pixels but
with a decent amount

664
00:24:10,060 --> 00:24:12,367
of padding We're
recommending eight CSS pixels

665
00:24:12,367 --> 00:24:14,450
or roughly about two
millimeters worth of padding.

666
00:24:14,450 --> 00:24:17,830
And that helps the disambiguator
not have to reselect which--

667
00:24:17,830 --> 00:24:20,136
or kind of basically pop up.

668
00:24:20,136 --> 00:24:21,760
The other interesting
thing around this

669
00:24:21,760 --> 00:24:23,920
as well is that if
you're trying to get data

670
00:24:23,920 --> 00:24:25,970
put into your
system interaction,

671
00:24:25,970 --> 00:24:28,490
you're getting users to sign
up to your app or your site,

672
00:24:28,490 --> 00:24:30,005
you want to have
form inputs that

673
00:24:30,005 --> 00:24:33,200
are easy to read and
easy to enter data.

674
00:24:33,200 --> 00:24:35,100
Labels are the thing.

675
00:24:35,100 --> 00:24:36,979
You should always go for this.

676
00:24:36,979 --> 00:24:39,270
Basically, the reason why
labels are actually important

677
00:24:39,270 --> 00:24:42,350
is because in this case it's
doubling the amount of touch

678
00:24:42,350 --> 00:24:43,880
size that is
available for the user

679
00:24:43,880 --> 00:24:45,990
to actually be able to
focus the input element.

680
00:24:45,990 --> 00:24:49,680
Now obviously, you can style
your site however you want.

681
00:24:49,680 --> 00:24:51,730
But in this case here,
I've got the top element

682
00:24:51,730 --> 00:24:52,688
and the bottom element.

683
00:24:52,688 --> 00:24:55,080
Both are touchable, and both
focus the same input box

684
00:24:55,080 --> 00:24:56,050
as well.

685
00:24:56,050 --> 00:24:57,221
So it's relatively simple.

686
00:24:57,221 --> 00:24:58,970
Obviously, it's up to
you how you actually

687
00:24:58,970 --> 00:25:00,530
decide how it's styled.

688
00:25:00,530 --> 00:25:03,484
But it's one nice little
thing that I quite like.

689
00:25:03,484 --> 00:25:05,150
Who actually likes
waiting in the queue?

690
00:25:05,150 --> 00:25:05,800
I mean, I'm British.

691
00:25:05,800 --> 00:25:06,300
I do.

692
00:25:06,300 --> 00:25:07,512
I love waiting in queues.

693
00:25:07,512 --> 00:25:08,970
This is me trying
to get to Berlin.

694
00:25:08,970 --> 00:25:10,970
I patiently waited in
this queue for three hours

695
00:25:10,970 --> 00:25:14,034
without complaining
at all to anyone.

696
00:25:14,034 --> 00:25:15,450
And then I got to
the front, and I

697
00:25:15,450 --> 00:25:16,970
apologized for
missing my flight.

698
00:25:16,970 --> 00:25:19,850
And it wasn't me who
missed the-- anyway, it's

699
00:25:19,850 --> 00:25:22,180
kind of like waiting
300-millisecond click delay.

700
00:25:22,180 --> 00:25:24,750
The 300-millisecond
click delay is this thing

701
00:25:24,750 --> 00:25:28,780
to help us kind of--
oops, sorry-- get the user

702
00:25:28,780 --> 00:25:32,090
to zoom into the content
for a desktop type display.

703
00:25:32,090 --> 00:25:33,930
Now it slows down interactions.

704
00:25:33,930 --> 00:25:35,180
Everyone knows it's horrible.

705
00:25:35,180 --> 00:25:37,550
We don't really
complain too much.

706
00:25:37,550 --> 00:25:40,070
It'd be great if we could kind
of remove that from the web.

707
00:25:40,070 --> 00:25:41,910
I do have a kind
of question though.

708
00:25:41,910 --> 00:25:44,159
And this is styled off the
Google interview questions,

709
00:25:44,159 --> 00:25:46,802
which we know are great
at hiring candidates.

710
00:25:46,802 --> 00:25:48,260
How much time do
we waste every day

711
00:25:48,260 --> 00:25:50,510
with a 300-millisecond
click delay?

712
00:25:50,510 --> 00:25:52,980
Has anyone got a guess?

713
00:25:52,980 --> 00:25:55,522
Right, I have no idea.

714
00:25:55,522 --> 00:25:56,980
That's what everyone
says when they

715
00:25:56,980 --> 00:25:58,300
get asked these
stupid questions.

716
00:25:58,300 --> 00:25:58,930
I have no idea.

717
00:25:58,930 --> 00:26:00,020
What a stupid question.

718
00:26:00,020 --> 00:26:03,180

719
00:26:03,180 --> 00:26:05,530
But actually, I do
know for Wikipedia.

720
00:26:05,530 --> 00:26:08,142
Wikipedia actually publish
all their mobile traffic.

721
00:26:08,142 --> 00:26:10,100
They get roughly about
3 billion requests a day

722
00:26:10,100 --> 00:26:13,420
on mobile, which is 1,400
requests per second, which

723
00:26:13,420 --> 00:26:18,500
is 423 wasted seconds every
second just on Wikipedia alone,

724
00:26:18,500 --> 00:26:21,510
which roughly equates to one
year wasted every day just

725
00:26:21,510 --> 00:26:23,415
waiting around for
your click to complete.

726
00:26:23,415 --> 00:26:27,187

727
00:26:27,187 --> 00:26:28,020
So it's pretty cool.

728
00:26:28,020 --> 00:26:29,853
Chrome is removing the
300-millisecond click

729
00:26:29,853 --> 00:26:31,120
delay, which is great news.

730
00:26:31,120 --> 00:26:31,930
[APPLAUSE]

731
00:26:31,930 --> 00:26:34,447

732
00:26:34,447 --> 00:26:36,030
And I'm going to
talk about what we're

733
00:26:36,030 --> 00:26:37,890
going to do because it's not
going to be for everyone.

734
00:26:37,890 --> 00:26:39,110
And it's great for links.

735
00:26:39,110 --> 00:26:40,990
I don't know whether this
actually came across very well.

736
00:26:40,990 --> 00:26:43,167
It looks like the videos
aren't playing properly.

737
00:26:43,167 --> 00:26:44,000
You click on a link.

738
00:26:44,000 --> 00:26:45,666
You don't have to
wait 300 milliseconds.

739
00:26:45,666 --> 00:26:47,960
But as you saw before,
if it takes 10 seconds

740
00:26:47,960 --> 00:26:49,870
to load your page, the
300-millisecond saving

741
00:26:49,870 --> 00:26:52,130
that you get is not--
you've got bigger fish

742
00:26:52,130 --> 00:26:55,250
to fry essentially if your
network requests are that slow.

743
00:26:55,250 --> 00:26:56,770
But it's great for interactions.

744
00:26:56,770 --> 00:26:58,480
And Jake Archibald
made this video.

745
00:26:58,480 --> 00:27:00,449
On the left is the
300-millisecond click delay.

746
00:27:00,449 --> 00:27:02,490
On the right it's a
zero-millisecond click delay.

747
00:27:02,490 --> 00:27:04,960
Everything just feels
a lot more responsive.

748
00:27:04,960 --> 00:27:07,630
You click on a button or
check box, or in this case

749
00:27:07,630 --> 00:27:10,259
it's a link-- you click anything
that has a click handler,

750
00:27:10,259 --> 00:27:11,300
it happens straight away.

751
00:27:11,300 --> 00:27:13,774
It just feels a lot more
natural and reactive.

752
00:27:13,774 --> 00:27:15,190
So how would you
go about removing

753
00:27:15,190 --> 00:27:16,523
the 300-millisecond click delay?

754
00:27:16,523 --> 00:27:18,360
It's not killed for everything.

755
00:27:18,360 --> 00:27:20,390
The simple answer--
and it relates

756
00:27:20,390 --> 00:27:23,030
to one of the very first
slides, user viewport--

757
00:27:23,030 --> 00:27:24,760
make sure the width
equals device width.

758
00:27:24,760 --> 00:27:26,510
But also size the
content in the viewport.

759
00:27:26,510 --> 00:27:28,320
If we don't have to
pan left and right,

760
00:27:28,320 --> 00:27:30,528
then we've got a really
strong indication of the fact

761
00:27:30,528 --> 00:27:33,320
that the user will not have
to zoom in to the page.

762
00:27:33,320 --> 00:27:35,077
So if we don't have
to zoom in, why

763
00:27:35,077 --> 00:27:36,910
actually do the double
tap to click gesture?

764
00:27:36,910 --> 00:27:39,470
Pinch to zoom will still
work, but double tap to click,

765
00:27:39,470 --> 00:27:41,200
we don't really need.

766
00:27:41,200 --> 00:27:42,260
Or use FastClick.

767
00:27:42,260 --> 00:27:44,360
I know some of the FT
Labs guys are here today.

768
00:27:44,360 --> 00:27:46,776
If you're not on Chrome, you
can use the FastClick library

769
00:27:46,776 --> 00:27:50,030
to kind of get around some of
those interaction problems.

770
00:27:50,030 --> 00:27:52,350
Who loves typing on a phone?

771
00:27:52,350 --> 00:27:52,850
Yeah, good.

772
00:27:52,850 --> 00:27:55,290
Because no one loves
typing on a phone at all.

773
00:27:55,290 --> 00:27:57,390
The goal that we want to
try and get developers to

774
00:27:57,390 --> 00:27:59,056
is just to minimize
the amount of typing

775
00:27:59,056 --> 00:28:01,350
that you have to force
your users through.

776
00:28:01,350 --> 00:28:02,726
Obviously, this
is really simple.

777
00:28:02,726 --> 00:28:04,558
I hate talking about
this slide because it's

778
00:28:04,558 --> 00:28:05,710
been around for years.

779
00:28:05,710 --> 00:28:07,920
It's just, take advantage
of specialized keyboards

780
00:28:07,920 --> 00:28:09,069
on mobile devices.

781
00:28:09,069 --> 00:28:11,110
If it's an email address--
say it's, type email--

782
00:28:11,110 --> 00:28:12,340
you'll get an at sign.

783
00:28:12,340 --> 00:28:14,459
If it's a date or a
number-- so if it's

784
00:28:14,459 --> 00:28:16,500
a telephone number-- say
it's a telephone number,

785
00:28:16,500 --> 00:28:17,310
you get a special dial pad.

786
00:28:17,310 --> 00:28:19,350
If it's a number, you
get a special number pad.

787
00:28:19,350 --> 00:28:24,200
If it's a date, you get a
special date entry button.

788
00:28:24,200 --> 00:28:27,730
Now, it doesn't
speed up the time

789
00:28:27,730 --> 00:28:29,316
to actually complete
the form, but it

790
00:28:29,316 --> 00:28:30,440
does increase the accuracy.

791
00:28:30,440 --> 00:28:33,210
And I did some completely
non-scientific tests,

792
00:28:33,210 --> 00:28:36,072
so I'm obviously a
good authority on this.

793
00:28:36,072 --> 00:28:38,280
And some of the tests that
I did where I asked people

794
00:28:38,280 --> 00:28:42,870
to enter certain kind
of data, basically it

795
00:28:42,870 --> 00:28:47,380
was like 95% accuracy at
the time for the input types

796
00:28:47,380 --> 00:28:48,630
because it was so constrained.

797
00:28:48,630 --> 00:28:50,150
Now, that's completely
unscientific,

798
00:28:50,150 --> 00:28:51,230
so don't go about
quoting that one.

799
00:28:51,230 --> 00:28:53,670
But everyone knows, when they
see the correct input type,

800
00:28:53,670 --> 00:28:55,710
they like it.

801
00:28:55,710 --> 00:28:57,484
Also take advantage
of autocomplete.

802
00:28:57,484 --> 00:28:59,400
The browsers are actually
pretty good at this.

803
00:28:59,400 --> 00:29:01,025
And then if you look
at Stack Overflow,

804
00:29:01,025 --> 00:29:02,530
everyone seems to hate it.

805
00:29:02,530 --> 00:29:05,120
But you want to try and get
your users not entering data

806
00:29:05,120 --> 00:29:06,870
if it's already stored
inside the browser.

807
00:29:06,870 --> 00:29:08,830
And the way you get
autocomplete to work

808
00:29:08,830 --> 00:29:12,660
is to use names for the
field labels that are similar

809
00:29:12,660 --> 00:29:14,420
or that are well
known, essentially.

810
00:29:14,420 --> 00:29:16,400
So if you want to get
the first name, f name.

811
00:29:16,400 --> 00:29:18,150
If you want to get
the surname, l name.

812
00:29:18,150 --> 00:29:20,870
The email address,
obviously name equals email.

813
00:29:20,870 --> 00:29:22,850
Those type of things,
they just help the user.

814
00:29:22,850 --> 00:29:25,970
If it kind of auto starts
autocomplete, you press it.

815
00:29:25,970 --> 00:29:27,680
The form's completed
really quickly.

816
00:29:27,680 --> 00:29:29,650
And it's zero cost
for you as a developer

817
00:29:29,650 --> 00:29:32,310
to actually implement.

818
00:29:32,310 --> 00:29:34,020
The next is requestAutoComplete.

819
00:29:34,020 --> 00:29:36,210
So who's heard of
requestAutoComplete?

820
00:29:36,210 --> 00:29:37,910
A couple of people, really cool.

821
00:29:37,910 --> 00:29:39,640
Basically, the
idea behind this is

822
00:29:39,640 --> 00:29:44,510
to have a programmatic access
to the form autocomplete.

823
00:29:44,510 --> 00:29:46,430
And now this another
video by Jake.

824
00:29:46,430 --> 00:29:48,172
It's a really good video.

825
00:29:48,172 --> 00:29:49,330
Or a demo by Jake.

826
00:29:49,330 --> 00:29:52,740
Essentially, you have an API
which uses an existing form.

827
00:29:52,740 --> 00:29:53,310
You call.

828
00:29:53,310 --> 00:29:54,990
You can basically
go, I want to check

829
00:29:54,990 --> 00:29:56,720
to see if
requestAutoComplete exists.

830
00:29:56,720 --> 00:29:59,452
If it doesn't, you
present the original form

831
00:29:59,452 --> 00:30:01,660
so that people can just go
straight through and enter

832
00:30:01,660 --> 00:30:02,110
the data in.

833
00:30:02,110 --> 00:30:04,600
If it does exist, you can call
a requestAutoComplete, which

834
00:30:04,600 --> 00:30:06,360
pops up the box
that we saw before,

835
00:30:06,360 --> 00:30:08,150
lets the users
select their data,

836
00:30:08,150 --> 00:30:11,600
maybe also if you're in the US,
autocomplete the credit card

837
00:30:11,600 --> 00:30:12,835
with Google Wallet.

838
00:30:12,835 --> 00:30:14,876
And then you can go through
and complete the form

839
00:30:14,876 --> 00:30:16,800
and submit really quickly.

840
00:30:16,800 --> 00:30:20,270
The aim is to really
improve the time

841
00:30:20,270 --> 00:30:21,512
to submission for form data.

842
00:30:21,512 --> 00:30:22,970
If you have to
enter this manually,

843
00:30:22,970 --> 00:30:24,531
it's two minutes
just entering text

844
00:30:24,531 --> 00:30:26,530
to get your shipping
address and billing address

845
00:30:26,530 --> 00:30:27,750
and a whole load of other stuff.

846
00:30:27,750 --> 00:30:29,166
And we want to get
away from that.

847
00:30:29,166 --> 00:30:31,850
So the requestAutoComplete
API is there.

848
00:30:31,850 --> 00:30:34,820
And I'm going to
start wrapping up now.

849
00:30:34,820 --> 00:30:36,654
Our goal is to get
as much feedback

850
00:30:36,654 --> 00:30:37,820
at the moment for this tool.

851
00:30:37,820 --> 00:30:41,260
So please go out and check
the PageSpeed Insights tool.

852
00:30:41,260 --> 00:30:48,519
Put ux=1 at the end, and you'll
get the actual tools available.

853
00:30:48,519 --> 00:30:49,810
And I'd like to thank everyone.

854
00:30:49,810 --> 00:30:51,550
I know I've run
over a little bit.

855
00:30:51,550 --> 00:30:53,820
mobile-ux.appspot.com
is these slides.

856
00:30:53,820 --> 00:30:57,570
html5rocks.com/mobile is our
mobile documentation entry

857
00:30:57,570 --> 00:30:58,070
point.

858
00:30:58,070 --> 00:30:58,830
Thank you.

859
00:30:58,830 --> 00:31:05,931
[APPLAUSE]

