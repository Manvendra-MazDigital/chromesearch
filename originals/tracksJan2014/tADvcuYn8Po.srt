1
00:00:00,000 --> 00:00:00,150

2
00:00:00,150 --> 00:00:02,380
SAM: Without further
ado, I'd like to

3
00:00:02,380 --> 00:00:05,190
introduce the first panel.

4
00:00:05,190 --> 00:00:10,640
Our moderator is James Pearce,
who does Dev Rel for Facebook.

5
00:00:10,640 --> 00:00:16,020
He tells me that he now spends
about half of his time doing

6
00:00:16,020 --> 00:00:17,050
stuff on native.

7
00:00:17,050 --> 00:00:20,060
But his first love
is still the web.

8
00:00:20,060 --> 00:00:24,740
And so it's highly appropriate
that he's going to be taking

9
00:00:24,740 --> 00:00:29,490
this really crucial session
about mobile performance.

10
00:00:29,490 --> 00:00:30,825
So take it away, James.

11
00:00:30,825 --> 00:00:31,080
Thank you.

12
00:00:31,080 --> 00:00:32,000
JAMES PEARCE: All right.

13
00:00:32,000 --> 00:00:33,230
Well, welcome everybody.

14
00:00:33,230 --> 00:00:36,840
As Sam said, this is the
performance panel.

15
00:00:36,840 --> 00:00:41,070
I was honored to be invited
to come and moderate it.

16
00:00:41,070 --> 00:00:44,540
I guess Facebook's recent
history with mobile and the

17
00:00:44,540 --> 00:00:46,205
web has been relatively
well documented.

18
00:00:46,205 --> 00:00:49,330

19
00:00:49,330 --> 00:00:53,330
It's, as Michael said, the
Zuckerberg quote is "the gift

20
00:00:53,330 --> 00:01:00,180
that keeps giving." But we
have obviously made a

21
00:01:00,180 --> 00:01:05,129
commitment on our apps anyway,
on the Facebook apps, to

22
00:01:05,129 --> 00:01:08,330
producing the best possible
quality experience as we can.

23
00:01:08,330 --> 00:01:12,110
And we've ended up rewriting
both of our iOS and Android

24
00:01:12,110 --> 00:01:16,210
apps to be pure native, where
they were previously hybrid

25
00:01:16,210 --> 00:01:18,750
HTML5 in a wrapper
kind of apps.

26
00:01:18,750 --> 00:01:25,580
And if I summarize starkly the
decision we made there, it was

27
00:01:25,580 --> 00:01:26,380
performance.

28
00:01:26,380 --> 00:01:30,160
There was only one reason
why we did that.

29
00:01:30,160 --> 00:01:33,710
We had to retrain literally
hundreds of developers.

30
00:01:33,710 --> 00:01:37,980
We had to retool our entire
build chain to produce iOS and

31
00:01:37,980 --> 00:01:39,670
Android apps where we'd
been previously

32
00:01:39,670 --> 00:01:43,350
building a pure web stack.

33
00:01:43,350 --> 00:01:47,920
And pixel for pixel, the old
web app and the new native

34
00:01:47,920 --> 00:01:50,030
apps were indistinguishable.

35
00:01:50,030 --> 00:01:52,370
Not anymore, but if you'd put
them side by at the time, it

36
00:01:52,370 --> 00:01:55,010
was very, very difficult to
tell which was which.

37
00:01:55,010 --> 00:01:57,090
And the only way you could tell
they were different was

38
00:01:57,090 --> 00:01:58,530
the performance.

39
00:01:58,530 --> 00:02:03,060
And overnight, pretty much, our
ratings in the App Store

40
00:02:03,060 --> 00:02:07,980
for the iOS app went from
two stars to four stars.

41
00:02:07,980 --> 00:02:09,400
And let me just say again, it
was nothing to do with the

42
00:02:09,400 --> 00:02:11,400
pixels or the appearance or
the rendering or the drop

43
00:02:11,400 --> 00:02:12,090
shadows or anything.

44
00:02:12,090 --> 00:02:14,130
It was purely the performance
and the increased user

45
00:02:14,130 --> 00:02:15,520
experience of that.

46
00:02:15,520 --> 00:02:18,380
So it was because of mobile web
performance that we had to

47
00:02:18,380 --> 00:02:20,630
make this incredible
investment.

48
00:02:20,630 --> 00:02:23,740
And we really didn't want
to have to do that.

49
00:02:23,740 --> 00:02:26,270
So I'm here mostly to moderate
and channel your questions and

50
00:02:26,270 --> 00:02:29,470
channel the questions off
the moderator here.

51
00:02:29,470 --> 00:02:31,730
But also I'm going to say,
dude, where's my

52
00:02:31,730 --> 00:02:32,940
60 frames per second?

53
00:02:32,940 --> 00:02:35,750
You honestly promised
us this years ago.

54
00:02:35,750 --> 00:02:37,760
The web was going to catch up.

55
00:02:37,760 --> 00:02:39,295
But we haven't got it.

56
00:02:39,295 --> 00:02:41,940
And businesses like ours and
businesses around the world

57
00:02:41,940 --> 00:02:43,860
are still struggling
with this problem.

58
00:02:43,860 --> 00:02:46,800
So I have a panel here of four
distinguished experts, two

59
00:02:46,800 --> 00:02:52,100
from the Chrome team and two
from external companies.

60
00:02:52,100 --> 00:02:53,300
I'd like them to introduce
themselves.

61
00:02:53,300 --> 00:02:56,280
We have Paul, Tom,
Ilya, and Ariya.

62
00:02:56,280 --> 00:02:58,160
A couple of minutes each if
you wold like, just to

63
00:02:58,160 --> 00:03:00,706
introduce yourselves, please.

64
00:03:00,706 --> 00:03:02,140
PAUL BAKAUS: Hi, everybody.

65
00:03:02,140 --> 00:03:03,300
My name is Paul Bakaus.

66
00:03:03,300 --> 00:03:07,960
I am the W3C rep and
CTO for a studio

67
00:03:07,960 --> 00:03:10,110
called Studio 5 at Zynga.

68
00:03:10,110 --> 00:03:14,955
And we're basically on a mission
to build what we think

69
00:03:14,955 --> 00:03:16,910
is the next generation
of social games.

70
00:03:16,910 --> 00:03:19,400
And we think HTML5 is the
right platform for that.

71
00:03:19,400 --> 00:03:21,700
We've been operating in stealth
mode for quite a bit,

72
00:03:21,700 --> 00:03:24,230
but now we're starting to roll
out our first experiments.

73
00:03:24,230 --> 00:03:29,570
And lots of them really involve
performance with terms

74
00:03:29,570 --> 00:03:30,460
like instant play.

75
00:03:30,460 --> 00:03:32,880
We want to make people play
the games instantly.

76
00:03:32,880 --> 00:03:36,740
And that's where we think HTML5
comes really into play.

77
00:03:36,740 --> 00:03:39,380
All right, that's me.

78
00:03:39,380 --> 00:03:40,510
TOM WILTZIUS: Hi, I'm
Tom Wiltzius.

79
00:03:40,510 --> 00:03:44,310
I'm a product manager on the
Chrome team, working across

80
00:03:44,310 --> 00:03:49,500
graphics projects including
Canvas, WebGL, but also core

81
00:03:49,500 --> 00:03:51,280
rendering performance.

82
00:03:51,280 --> 00:03:55,520
So I am on the other side
of all of this.

83
00:03:55,520 --> 00:03:56,440
ILYA GRIGORIK: Hi, everyone.

84
00:03:56,440 --> 00:03:57,300
My name is Ilya.

85
00:03:57,300 --> 00:03:59,620
So I'm a developer advocate on
Make the Web Fast and Google

86
00:03:59,620 --> 00:04:00,480
Chrome teams.

87
00:04:00,480 --> 00:04:03,900
And my focus has primarily been
on the network side-- so

88
00:04:03,900 --> 00:04:06,580
specifically for mobile
performance latency, how do we

89
00:04:06,580 --> 00:04:07,320
accelerate that?

90
00:04:07,320 --> 00:04:10,910
So HTTP 2.0, SPDY, and just
trying to figure out what we

91
00:04:10,910 --> 00:04:15,750
can do to move the web forward
and to enable richer apps that

92
00:04:15,750 --> 00:04:17,610
are still efficient when
delivered over the web.

93
00:04:17,610 --> 00:04:21,610

94
00:04:21,610 --> 00:04:22,350
ARIYA HIDAYAT: Hi, everyone.

95
00:04:22,350 --> 00:04:22,960
My name is Ariya.

96
00:04:22,960 --> 00:04:24,420
I work for Sencha.

97
00:04:24,420 --> 00:04:27,630
We produce frameworks, tools,
and cloud surfaces for web

98
00:04:27,630 --> 00:04:29,710
application, both desktop
and mobile.

99
00:04:29,710 --> 00:04:31,400
I have a general interest
in web technologies.

100
00:04:31,400 --> 00:04:35,090
I have been mainly the native
guy for a very long time.

101
00:04:35,090 --> 00:04:36,660
I worked on WebKit when
I was with Nokia.

102
00:04:36,660 --> 00:04:40,410
And then two years ago, 2 and
1/2 years ago, I decided to

103
00:04:40,410 --> 00:04:45,000
switch sides and try to find out
how painful or comfortable

104
00:04:45,000 --> 00:04:46,980
it is working with front-end
development.

105
00:04:46,980 --> 00:04:52,500

106
00:04:52,500 --> 00:04:55,520
JAMES PEARCE: So now that you
know who everybody is, that's

107
00:04:55,520 --> 00:04:57,530
a great opportunity for you to
think of the hardest question

108
00:04:57,530 --> 00:04:59,350
you would like to ask
each of them.

109
00:04:59,350 --> 00:05:02,030
And hopefully you all have the
moderator page up, so you can

110
00:05:02,030 --> 00:05:05,030
ask them there or simply
raise your hand.

111
00:05:05,030 --> 00:05:08,440
But to get started with, well,
I was thinking about this.

112
00:05:08,440 --> 00:05:12,670
Mobile performance, there's no
one thing that contributes to

113
00:05:12,670 --> 00:05:13,360
performance.

114
00:05:13,360 --> 00:05:15,600
It's a blend of lots of
different disciplines.

115
00:05:15,600 --> 00:05:18,320
And we expect developers to be
masters of all of them in

116
00:05:18,320 --> 00:05:20,770
order to produce highly
performant apps.

117
00:05:20,770 --> 00:05:24,930
Sometimes it's going to be the
GPU that's the impact or the

118
00:05:24,930 --> 00:05:26,710
major effect on their
performance.

119
00:05:26,710 --> 00:05:28,540
Sometimes it's going to be
the network performance.

120
00:05:28,540 --> 00:05:32,440
Sometimes it's going to
be JavaScript runtime.

121
00:05:32,440 --> 00:05:36,035
So given that the average
developer is looking at this

122
00:05:36,035 --> 00:05:39,470
huge surface area of problem
that they have to solve, where

123
00:05:39,470 --> 00:05:40,380
should they start first?

124
00:05:40,380 --> 00:05:45,590
What are the major performance
pain points that you see from

125
00:05:45,590 --> 00:05:46,990
your points of view?

126
00:05:46,990 --> 00:05:48,650
I guess we'll start at this
end and go down again.

127
00:05:48,650 --> 00:05:51,190

128
00:05:51,190 --> 00:05:53,300
PAUL BAKAUS: OK, so I think
it depends on what you're

129
00:05:53,300 --> 00:05:54,010
building, really.

130
00:05:54,010 --> 00:05:57,670
But I think if you're building
web apps and websites, it's

131
00:05:57,670 --> 00:05:59,760
mostly about load time
performance.

132
00:05:59,760 --> 00:06:02,530
I would see load time
performance being the biggest

133
00:06:02,530 --> 00:06:04,570
bottleneck right now.

134
00:06:04,570 --> 00:06:07,320
There's been recent studies
that e-commerce sites have

135
00:06:07,320 --> 00:06:09,500
been degrading in terms
of performance--

136
00:06:09,500 --> 00:06:12,560
I think over 40% percent
or something.

137
00:06:12,560 --> 00:06:14,680
And that's very, very
worrying to me.

138
00:06:14,680 --> 00:06:17,060
And on mobile, it's
even worse.

139
00:06:17,060 --> 00:06:20,490
If the website loads
in over 10 seconds,

140
00:06:20,490 --> 00:06:21,895
most people drop off.

141
00:06:21,895 --> 00:06:25,280
And of course, it's not entirely
the fault of the

142
00:06:25,280 --> 00:06:28,610
website and the browser.

143
00:06:28,610 --> 00:06:32,140
It's also network performance,
network latencies.

144
00:06:32,140 --> 00:06:33,800
But I think that's
an area where we

145
00:06:33,800 --> 00:06:35,620
should focus on first.

146
00:06:35,620 --> 00:06:39,685
With games, as longer-lived the
sessions are for your app

147
00:06:39,685 --> 00:06:42,720
or for your game, the more you
have to focus, obviously, on

148
00:06:42,720 --> 00:06:45,650
runtime performance, memory
management, lots of stuff.

149
00:06:45,650 --> 00:06:50,180
But I would start
with load time.

150
00:06:50,180 --> 00:06:52,320
TOM WILTZIUS: Yeah, I suppose
I'm a bit biased in that I

151
00:06:52,320 --> 00:06:54,830
work on rendering performance,
so that's probably what I'm

152
00:06:54,830 --> 00:06:57,220
going to say is the most
important thing.

153
00:06:57,220 --> 00:07:02,660
But I do think that we are
moving to this world where

154
00:07:02,660 --> 00:07:06,850
people expect a lot more out
of web applications.

155
00:07:06,850 --> 00:07:10,130
We're moving from this world
of e-commerce sites and the

156
00:07:10,130 --> 00:07:14,000
like, which are strongly rooted
in the tradition of the

157
00:07:14,000 --> 00:07:17,580
web as document viewer, and
we're moving much more towards

158
00:07:17,580 --> 00:07:20,470
applications where we expect
real-time performance.

159
00:07:20,470 --> 00:07:25,320
And I'll call out James's point
earlier about needing to

160
00:07:25,320 --> 00:07:28,810
retrain this entire corps of
Facebook developers to do

161
00:07:28,810 --> 00:07:32,300
native mobile app development
and how painful that was.

162
00:07:32,300 --> 00:07:35,660
But I think it's in some ways
unrealistic to expect that the

163
00:07:35,660 --> 00:07:40,510
same developer skill set that
applied to building the old

164
00:07:40,510 --> 00:07:43,560
generation of web applications,
which were very

165
00:07:43,560 --> 00:07:49,040
rooted in, again, a document
viewer-type model--

166
00:07:49,040 --> 00:07:51,820
it's unrealistic to expect
that skill set to cleanly

167
00:07:51,820 --> 00:07:54,160
apply to an application that
you're expecting to do

168
00:07:54,160 --> 00:07:55,270
something very different.

169
00:07:55,270 --> 00:07:58,280
When you're expecting 60
frames a second and

170
00:07:58,280 --> 00:08:01,100
complicated UI animations and
transitions, you're building a

171
00:08:01,100 --> 00:08:01,650
different beast.

172
00:08:01,650 --> 00:08:03,590
It's going to require a
different set of skills.

173
00:08:03,590 --> 00:08:07,320
So I think the entire community
does need to prepare

174
00:08:07,320 --> 00:08:12,210
for and expect appropriately
that a lot of reeducation is

175
00:08:12,210 --> 00:08:14,990
going to be required.

176
00:08:14,990 --> 00:08:18,060
ILYA GRIGORIK: So I
work in networks.

177
00:08:18,060 --> 00:08:19,490
And I'm also biased.

178
00:08:19,490 --> 00:08:22,100
But I'll second what
Paul was saying.

179
00:08:22,100 --> 00:08:25,390
But I'll also add a few more
things, which is there's

180
00:08:25,390 --> 00:08:27,670
obviously the first experience
when you first load the page.

181
00:08:27,670 --> 00:08:29,940
And then there's the rest of the
experience, which is your

182
00:08:29,940 --> 00:08:32,190
app is loaded, and then the
frames per second and

183
00:08:32,190 --> 00:08:32,780
everything matters.

184
00:08:32,780 --> 00:08:34,980
So it's not a question
of either/or.

185
00:08:34,980 --> 00:08:36,610
And I would say, if the question
is where do you

186
00:08:36,610 --> 00:08:38,409
start, I would actually
say it's neither

187
00:08:38,409 --> 00:08:39,210
one of these three.

188
00:08:39,210 --> 00:08:42,900
So internally, we have been
talking about render, compute,

189
00:08:42,900 --> 00:08:43,789
and network.

190
00:08:43,789 --> 00:08:45,770
Those are the three pillars
of performance.

191
00:08:45,770 --> 00:08:49,930
And the moment you fix one,
you're on to the next.

192
00:08:49,930 --> 00:08:51,530
And then you unlock the
next bottleneck.

193
00:08:51,530 --> 00:08:53,700
So the place to start is to
actually invest into analytics

194
00:08:53,700 --> 00:08:55,720
to figure out where is my
problem to begin with.

195
00:08:55,720 --> 00:08:57,960
It's not a question of, I know
rendering, so all I'm going to

196
00:08:57,960 --> 00:08:58,810
focus on rendering.

197
00:08:58,810 --> 00:09:01,050
It's like, well, if your
bottleneck is compute, that's

198
00:09:01,050 --> 00:09:01,970
where you should start.

199
00:09:01,970 --> 00:09:04,600
So in the network world, at
least, we have put a lot of

200
00:09:04,600 --> 00:09:07,970
effort into developing tools
like real user measurement

201
00:09:07,970 --> 00:09:10,750
such that you can gather real
data from real users and real

202
00:09:10,750 --> 00:09:13,890
hardware and then figure out
that, hey, no, it really is a

203
00:09:13,890 --> 00:09:17,480
problem on 3G, for example,
from our users to download

204
00:09:17,480 --> 00:09:18,100
these apps.

205
00:09:18,100 --> 00:09:20,160
And I know you guys have done
a lot of work to figure out

206
00:09:20,160 --> 00:09:23,550
how to get the games down in
sub-three seconds or even

207
00:09:23,550 --> 00:09:24,360
sub-one second.

208
00:09:24,360 --> 00:09:24,950
PAUL BAKAUS: That's
right, yeah.

209
00:09:24,950 --> 00:09:29,160
ILYA GRIGORIK: And that's a
really interesting challenge.

210
00:09:29,160 --> 00:09:31,310
TOM WILTZIUS: I will also say
that's an area where we are

211
00:09:31,310 --> 00:09:35,410
way behind on the rendering
side of things.

212
00:09:35,410 --> 00:09:41,910
Your ability to measure in
fields anything about how your

213
00:09:41,910 --> 00:09:46,500
rendering performance is, it's
really hard, to the point

214
00:09:46,500 --> 00:09:48,790
where you sort of can't do it.

215
00:09:48,790 --> 00:09:50,850
And I think that's the kind of
thing we've talked about, for

216
00:09:50,850 --> 00:09:52,560
instance, in the web performance
working group,

217
00:09:52,560 --> 00:09:54,780
about what we might be able
to do about that.

218
00:09:54,780 --> 00:09:58,380
But I think we're not really
closing in on a solution yet,

219
00:09:58,380 --> 00:10:00,650
largely because

220
00:10:00,650 --> 00:10:03,690
implementations vary so wildly.

221
00:10:03,690 --> 00:10:06,330
So if anyone has bright ideas
about what they would like to

222
00:10:06,330 --> 00:10:13,960
see from a field analytics
API for rendering, I'd

223
00:10:13,960 --> 00:10:16,800
love to hear it.

224
00:10:16,800 --> 00:10:19,150
ARIYA HIDAYAT: So in my opinion,
evangelism is one

225
00:10:19,150 --> 00:10:21,350
thing that we need
to work better.

226
00:10:21,350 --> 00:10:25,140
We need to come up with better
vocabulary to the developers.

227
00:10:25,140 --> 00:10:27,430
Those who work in the front end
development space, they

228
00:10:27,430 --> 00:10:28,960
probably never studied
computer science.

229
00:10:28,960 --> 00:10:32,080
So if I'm being given the task
by my manager to build the

230
00:10:32,080 --> 00:10:34,160
mobile side of the company, and
then suddenly I need to

231
00:10:34,160 --> 00:10:37,970
know everything from GPU
compositing to JavaScript Just

232
00:10:37,970 --> 00:10:40,840
In Time Compiler, garbage
collector, and other

233
00:10:40,840 --> 00:10:42,940
thingamajig, this is
all scary stuff.

234
00:10:42,940 --> 00:10:47,210
So that's one thing that
we need to work more.

235
00:10:47,210 --> 00:10:50,490
And another thing is also to
give the understanding that,

236
00:10:50,490 --> 00:10:54,620
performance not only, but
optimizing the passport,

237
00:10:54,620 --> 00:10:56,270
meaning that the bits and piece
from the server and the

238
00:10:56,270 --> 00:11:00,430
client, with the rise of
single-page application, your

239
00:11:00,430 --> 00:11:01,640
apps might run for a while.

240
00:11:01,640 --> 00:11:07,130
So for example, if you build an
address book, and sorting

241
00:11:07,130 --> 00:11:10,380
your contacts, 10 contacts if
10 miliseconds, it doesn't

242
00:11:10,380 --> 00:11:13,220
mean that they will scale nicely
if you use bubble sort.

243
00:11:13,220 --> 00:11:15,970
So scalability is also important
with respect to

244
00:11:15,970 --> 00:11:18,410
performance and not only
time measurement.

245
00:11:18,410 --> 00:11:23,610

246
00:11:23,610 --> 00:11:26,750
JAMES PEARCE: So it sounds to
me like there are lots of

247
00:11:26,750 --> 00:11:28,310
individual technical things
we need to think

248
00:11:28,310 --> 00:11:28,990
about here as well.

249
00:11:28,990 --> 00:11:32,600
But there is an overall cultural
issue, which is that

250
00:11:32,600 --> 00:11:35,220
developers who think the web
is something they can just

251
00:11:35,220 --> 00:11:38,530
lash up in a text editor are now
being dropped into a very

252
00:11:38,530 --> 00:11:41,190
different world where they are
being expected to use tools

253
00:11:41,190 --> 00:11:45,610
with 40-character long command
lines and huge, big log spews

254
00:11:45,610 --> 00:11:48,480
that they have to visualize
and so forth.

255
00:11:48,480 --> 00:11:50,330
So we can come back to some
of the technology, but I'm

256
00:11:50,330 --> 00:11:53,200
intrigued by this because
there's a tooling piece here,

257
00:11:53,200 --> 00:11:54,730
which is going to make it
a lot easier for people.

258
00:11:54,730 --> 00:11:56,870
And there's best practices
around how they should

259
00:11:56,870 --> 00:12:00,300
instrument their apps, both at,
presumably, development

260
00:12:00,300 --> 00:12:02,810
time but also at run time.

261
00:12:02,810 --> 00:12:05,380
Maybe the two of you could talk
a little bit about what's

262
00:12:05,380 --> 00:12:08,450
happening on Chrome, and then
we're going to talk about some

263
00:12:08,450 --> 00:12:10,190
other browsers, too,
if you don't mind.

264
00:12:10,190 --> 00:12:14,045
So just give us a quick rundown
on tools and education

265
00:12:14,045 --> 00:12:16,080
and instrumentation as is
it pertains to Chrome.

266
00:12:16,080 --> 00:12:16,430
TOM WILTZIUS: Sure.

267
00:12:16,430 --> 00:12:17,880
You want to kick it off?

268
00:12:17,880 --> 00:12:19,860
ILYA GRIGORIK: Sure.

269
00:12:19,860 --> 00:12:21,990
So for network, I'll highlight
one, which is actually

270
00:12:21,990 --> 00:12:24,630
cross-browser, which is
Real User Measurement.

271
00:12:24,630 --> 00:12:27,060
So this is a new API--

272
00:12:27,060 --> 00:12:28,130
well, relatively new.

273
00:12:28,130 --> 00:12:31,150
It's supported by all the modern
browsers where when the

274
00:12:31,150 --> 00:12:33,690
page loads, you can actually
query it to say, give me all

275
00:12:33,690 --> 00:12:36,180
the time stamps for the sequence
of the loading of the

276
00:12:36,180 --> 00:12:39,270
page-- so anything from TCP
connection time to there was a

277
00:12:39,270 --> 00:12:42,060
redirect to this is how much
time it took to load.

278
00:12:42,060 --> 00:12:43,830
And the cool thing about this
is that once you have this

279
00:12:43,830 --> 00:12:45,520
data, this is from a
real user on a real

280
00:12:45,520 --> 00:12:46,900
device on a real network.

281
00:12:46,900 --> 00:12:49,910
You can beacon it back to your
analytics, aggregate it, and

282
00:12:49,910 --> 00:12:52,360
then segment it in a bazillion
different ways and actually

283
00:12:52,360 --> 00:12:54,530
run meaningful A/B
experiments.

284
00:12:54,530 --> 00:12:57,490
You can actually figure out that
this connection took this

285
00:12:57,490 --> 00:12:59,670
long and so forth
and so forth.

286
00:12:59,670 --> 00:13:03,810
So this alone I think has
changed the network

287
00:13:03,810 --> 00:13:06,980
performance conversation in a
dramatic way, now that we can

288
00:13:06,980 --> 00:13:07,980
gather this data.

289
00:13:07,980 --> 00:13:09,730
We need something like
that for GPU.

290
00:13:09,730 --> 00:13:12,310
And maybe it's as simple as
sampling this data and

291
00:13:12,310 --> 00:13:15,390
beaconing back via a
similar mechanism.

292
00:13:15,390 --> 00:13:17,310
TOM WILTZIUS: Yeah.

293
00:13:17,310 --> 00:13:19,620
And that's definitely the kind
of thing, again, where we're

294
00:13:19,620 --> 00:13:21,270
interested in trying
to explore.

295
00:13:21,270 --> 00:13:24,190
But it is challenging
because the notion--

296
00:13:24,190 --> 00:13:28,380
people ask for things like,
well I just want how many

297
00:13:28,380 --> 00:13:30,280
frames a second am I getting.

298
00:13:30,280 --> 00:13:33,450
That's actually not a meaningful
question to ask,

299
00:13:33,450 --> 00:13:38,140
because in a multi-threaded
browser, you can have one to

300
00:13:38,140 --> 00:13:40,540
four answers to this question.

301
00:13:40,540 --> 00:13:43,390
And you get a different number
of answers depending on what

302
00:13:43,390 --> 00:13:44,850
browser you're running in.

303
00:13:44,850 --> 00:13:50,450
So from a cross-browser
tooling or analytics

304
00:13:50,450 --> 00:13:53,360
perspective, I think rendering
is one of the toughest because

305
00:13:53,360 --> 00:13:56,360
it's one of the areas where the
browsers have evolved most

306
00:13:56,360 --> 00:13:57,200
differently.

307
00:13:57,200 --> 00:14:00,320
But I think we are moving
towards a world where a

308
00:14:00,320 --> 00:14:03,320
combination of some of the CSS
features that have been speced

309
00:14:03,320 --> 00:14:07,190
and the performance needs of
the platform are forcing a

310
00:14:07,190 --> 00:14:09,910
slow reconvergence of how a
lot of these things work.

311
00:14:09,910 --> 00:14:12,430
So I'm cautiously optimistic
that, in the future, we'll be

312
00:14:12,430 --> 00:14:14,330
able to instrument some of
these things better.

313
00:14:14,330 --> 00:14:15,620
Sorry, go ahead.

314
00:14:15,620 --> 00:14:18,750
ILYA GRIGORIK: So for Chrome
DevTools, we put in a lot of

315
00:14:18,750 --> 00:14:23,650
effort into instrumenting all
the right bits of the stack so

316
00:14:23,650 --> 00:14:25,130
that you can get at the
root of the problem.

317
00:14:25,130 --> 00:14:28,010
But I think that one challenge
that we have today is you

318
00:14:28,010 --> 00:14:30,420
still need a lot of education
to know what to look for.

319
00:14:30,420 --> 00:14:31,680
You need to run the trace,
and then you're

320
00:14:31,680 --> 00:14:33,080
looking at this waterfall.

321
00:14:33,080 --> 00:14:35,100
And you need training.

322
00:14:35,100 --> 00:14:37,230
I know that when I sit
down with somebody--

323
00:14:37,230 --> 00:14:40,440
with yourself or Paul-- and I
see you guys go through the

324
00:14:40,440 --> 00:14:42,980
whole workflow, I'm like, oh,
there's five tricks I was

325
00:14:42,980 --> 00:14:46,070
never aware of just because
I never thought about it.

326
00:14:46,070 --> 00:14:49,290
So what we can do, I think, a
better job of is actually

327
00:14:49,290 --> 00:14:52,660
giving these kind of insights
to developers, to say here's

328
00:14:52,660 --> 00:14:53,350
an anti-pattern.

329
00:14:53,350 --> 00:14:54,210
Let's flag it.

330
00:14:54,210 --> 00:14:58,220
Let's put a red flag beside it
and have a Learn More link.

331
00:14:58,220 --> 00:14:59,830
This is the culture piece.

332
00:14:59,830 --> 00:15:03,130
We need to educate people about
what these things are.

333
00:15:03,130 --> 00:15:06,240
I think we've done a fairly good
job on the network side

334
00:15:06,240 --> 00:15:08,700
because we've been tackling
that problem for longer.

335
00:15:08,700 --> 00:15:11,415
Rendering and other things,
we have a lot of room for

336
00:15:11,415 --> 00:15:13,790
improvement.

337
00:15:13,790 --> 00:15:15,820
PAUL BAKAUS: Well I just wanted
to say, one big issue,

338
00:15:15,820 --> 00:15:17,505
I think, with rendering
performance and measuring

339
00:15:17,505 --> 00:15:20,140
rendering performance is because
it's harder to isolate

340
00:15:20,140 --> 00:15:21,640
it on the actual device--

341
00:15:21,640 --> 00:15:24,660
because it might be entirely
the user fault why

342
00:15:24,660 --> 00:15:26,070
rendering is down.

343
00:15:26,070 --> 00:15:29,200
He might have lots of apps open
that do something in the

344
00:15:29,200 --> 00:15:31,120
background and that
consume memory.

345
00:15:31,120 --> 00:15:35,570
And then text just keep swapping
from memory spaces.

346
00:15:35,570 --> 00:15:38,930
And that's something that I
think is fairly difficult,

347
00:15:38,930 --> 00:15:41,630
because if you get reports in
from the same device-- let's

348
00:15:41,630 --> 00:15:43,920
say a Nexus device--

349
00:15:43,920 --> 00:15:48,350
but to completely randomize,
it's very hard to construct

350
00:15:48,350 --> 00:15:49,640
data out of that.

351
00:15:49,640 --> 00:15:50,750
I think that's a
real challenge.

352
00:15:50,750 --> 00:15:52,610
TOM WILTZIUS: I think to an
extent that is a challenge

353
00:15:52,610 --> 00:15:54,830
with network performance as
well, though, because it's

354
00:15:54,830 --> 00:15:56,840
entirely possible that,
oh, some app

355
00:15:56,840 --> 00:15:58,500
is swamping my loadable--

356
00:15:58,500 --> 00:15:59,150
PAUL BAKAUS: App congestion.

357
00:15:59,150 --> 00:16:00,010
TOM WILTZIUS: Yeah, exactly.

358
00:16:00,010 --> 00:16:02,600
It's the nature of a shared
resource, right?

359
00:16:02,600 --> 00:16:04,700
I do think though-- to get back
to your original question

360
00:16:04,700 --> 00:16:08,790
about what are some of the best
tools available, at least

361
00:16:08,790 --> 00:16:11,450
in Chrome, for debugging
rendering performance--

362
00:16:11,450 --> 00:16:14,720
compared to where we were maybe
a year ago, we do have

363
00:16:14,720 --> 00:16:18,660
some features that are
relatively simple and

364
00:16:18,660 --> 00:16:21,740
incremental, but you get a lot
of mileage out of them.

365
00:16:21,740 --> 00:16:24,580
These are things like the
Vertical Timeline.

366
00:16:24,580 --> 00:16:30,220
We have rearchitected the way
our paint rectangle visibility

367
00:16:30,220 --> 00:16:31,210
feature works.

368
00:16:31,210 --> 00:16:34,420
To work with the latest actual
under-the-hood rendering

369
00:16:34,420 --> 00:16:37,470
pipeline, we have a mode that
continuously repaints the

370
00:16:37,470 --> 00:16:41,000
entire page, which helps you
diagnose what is taking a long

371
00:16:41,000 --> 00:16:41,570
time to paint.

372
00:16:41,570 --> 00:16:45,100
These are relatively simple
things, but they can actually

373
00:16:45,100 --> 00:16:49,360
go a pretty long way
in debugging sites.

374
00:16:49,360 --> 00:16:52,080
And I know I was talking to Paul
Lewis, one of our other

375
00:16:52,080 --> 00:16:54,600
developer advocates, just before
this talk about people

376
00:16:54,600 --> 00:16:58,650
who were coming by earlier at
the Chrome Perf Alley thing

377
00:16:58,650 --> 00:17:04,410
over at Moscone, and, I think,
often weren't aware that this

378
00:17:04,410 --> 00:17:07,670
was a big problem or weren't
aware of how they would even

379
00:17:07,670 --> 00:17:09,920
begin to start addressing this
but, with a little bit of

380
00:17:09,920 --> 00:17:12,869
education about how to use these
tools, actually came

381
00:17:12,869 --> 00:17:14,599
away with a lot of things
that they could go

382
00:17:14,599 --> 00:17:15,730
investigate on their own.

383
00:17:15,730 --> 00:17:17,280
So I think, yes, that
is cultural.

384
00:17:17,280 --> 00:17:18,345
Yes, that is educational.

385
00:17:18,345 --> 00:17:20,180
And I think we're starting
to have some better

386
00:17:20,180 --> 00:17:21,960
tools in this space.

387
00:17:21,960 --> 00:17:27,069
But for the really hard cases,
we're still not there.

388
00:17:27,069 --> 00:17:34,220
ARIYA HIDAYAT: So related to the
performance and tools, we

389
00:17:34,220 --> 00:17:36,990
also need to educate developers
to include

390
00:17:36,990 --> 00:17:39,750
performance metric as part of
their development workflow.

391
00:17:39,750 --> 00:17:41,230
For example, you build
a fantastic game.

392
00:17:41,230 --> 00:17:43,590
You've built a nice scroller,
nice apps, and it scrolls

393
00:17:43,590 --> 00:17:44,480
beautifully.

394
00:17:44,480 --> 00:17:47,770
And then suddenly some intern,
junior engineer, whoever, are

395
00:17:47,770 --> 00:17:49,100
checking some code.

396
00:17:49,100 --> 00:17:52,340
Probably he has a good
intention, but the performance

397
00:17:52,340 --> 00:17:54,770
drops from 60 frames per second
to 30, and there's no

398
00:17:54,770 --> 00:17:57,480
way to detect that.

399
00:17:57,480 --> 00:17:58,810
ILYA GRIGORIK: So can I
add just one thing?

400
00:17:58,810 --> 00:18:02,640
So prior to focusing on network
performance, I was

401
00:18:02,640 --> 00:18:04,450
actually part of the Google
Analytics team, so there's my

402
00:18:04,450 --> 00:18:05,700
another bias.

403
00:18:05,700 --> 00:18:07,780

404
00:18:07,780 --> 00:18:09,420
Performance is a feature.

405
00:18:09,420 --> 00:18:12,530
When we talk about your
performance drops, your

406
00:18:12,530 --> 00:18:15,830
conversion drops, your
engagement drops, we have good

407
00:18:15,830 --> 00:18:17,020
measurements--

408
00:18:17,020 --> 00:18:19,590
as you mentioned before, where
convergence dropped by 4%.

409
00:18:19,590 --> 00:18:21,950
There's not many features you
can add to an e-commerce site

410
00:18:21,950 --> 00:18:25,940
that will bump your revenue
per user by 4%.

411
00:18:25,940 --> 00:18:28,550
So it is a feature
like any other.

412
00:18:28,550 --> 00:18:31,500
It should be prioritized on your
backlog like any other.

413
00:18:31,500 --> 00:18:33,840
It's not a sprint that
you do at the end to

414
00:18:33,840 --> 00:18:34,820
clean up your app.

415
00:18:34,820 --> 00:18:36,410
It's like, I'm going to build
this thing, and then I'm going

416
00:18:36,410 --> 00:18:37,820
to fix performance.

417
00:18:37,820 --> 00:18:40,410
You can't slap on performance,
just like you can't slap on

418
00:18:40,410 --> 00:18:42,750
security at the end.

419
00:18:42,750 --> 00:18:45,920
So invest early into measuring
this stuff.

420
00:18:45,920 --> 00:18:48,170
How does this actually translate
to my users?

421
00:18:48,170 --> 00:18:51,060
I think this is a very,
very important metric.

422
00:18:51,060 --> 00:18:52,630
JAMES PEARCE: All right, I want
to do a little straw poll

423
00:18:52,630 --> 00:18:55,160
here if possible.

424
00:18:55,160 --> 00:18:59,230
How many people here in the
audience, if you're developing

425
00:18:59,230 --> 00:19:02,100
for mobile and you're developing
for the mobile web,

426
00:19:02,100 --> 00:19:06,060
if you find a performance
problem, do you

427
00:19:06,060 --> 00:19:07,130
know what to do?

428
00:19:07,130 --> 00:19:09,810
Do you feel like you have all
the tools you need to be able

429
00:19:09,810 --> 00:19:10,820
to go and diagnose it?

430
00:19:10,820 --> 00:19:13,280
Do you feel you have the
understanding about network

431
00:19:13,280 --> 00:19:17,290
GPU, especially in the mobile
case, to go and solve that?

432
00:19:17,290 --> 00:19:19,470
Who feels that they are totally
tooled up and ready to

433
00:19:19,470 --> 00:19:21,170
go, cross-browser,
cross-device.

434
00:19:21,170 --> 00:19:24,320
[LAUGHTER]

435
00:19:24,320 --> 00:19:24,800
JAMES PEARCE: Nobody.

436
00:19:24,800 --> 00:19:27,880
OK, so there's obviously
work to be down.

437
00:19:27,880 --> 00:19:30,100
But I think cross-browser
thing is important.

438
00:19:30,100 --> 00:19:32,350
And I know this is predominantly
a Chrome

439
00:19:32,350 --> 00:19:34,770
session, but I think--

440
00:19:34,770 --> 00:19:35,580
oh, it's Deon.

441
00:19:35,580 --> 00:19:36,685
Deon, where are you?

442
00:19:36,685 --> 00:19:38,920
You have a question which,
I think, is to

443
00:19:38,920 --> 00:19:40,120
do with other browsers.

444
00:19:40,120 --> 00:19:43,390
Would you like to stand
up and ask?

445
00:19:43,390 --> 00:19:43,670
AUDIENCE: Sure.

446
00:19:43,670 --> 00:19:45,666
Hi, Deon [INAUDIBLE]

447
00:19:45,666 --> 00:19:46,165
Labs.

448
00:19:46,165 --> 00:19:49,658
And so you set up my question
very nicely.

449
00:19:49,658 --> 00:19:50,908
MALE SPEAKER: Do you
have the mic?

450
00:19:50,908 --> 00:19:55,150

451
00:19:55,150 --> 00:19:56,990
JAMES PEARCE: I'm wondering
whether A/V is easier or

452
00:19:56,990 --> 00:19:58,610
harder than web performance
at this point?

453
00:19:58,610 --> 00:19:59,100
[LAUGHTER]

454
00:19:59,100 --> 00:19:59,905
ARIYA HIDAYAT: It's wired.

455
00:19:59,905 --> 00:20:01,920
They should have the
wireless mic.

456
00:20:01,920 --> 00:20:03,950
AUDIENCE: Hey.

457
00:20:03,950 --> 00:20:05,730
So we have that exact
pain point.

458
00:20:05,730 --> 00:20:07,390
The Chrome Developer
Tools are amazing.

459
00:20:07,390 --> 00:20:10,800
There's good developer tools
across other browsers

460
00:20:10,800 --> 00:20:11,460
and that like that.

461
00:20:11,460 --> 00:20:15,640
But I watch all the developers
on the team coming up with

462
00:20:15,640 --> 00:20:19,340
this problem on some ancient
Android browser that's being

463
00:20:19,340 --> 00:20:22,390
used by someone in the UK or
some BlackBerry user or

464
00:20:22,390 --> 00:20:23,730
someone else.

465
00:20:23,730 --> 00:20:27,160
And they have to go and re-learn
a different tool for

466
00:20:27,160 --> 00:20:27,700
everything.

467
00:20:27,700 --> 00:20:31,480
It's like the equivalent that
we've joked about before,

468
00:20:31,480 --> 00:20:35,920
where you have "Friends" is
really successful on TV, and

469
00:20:35,920 --> 00:20:37,320
then you've got to
make the DVD.

470
00:20:37,320 --> 00:20:39,860
And you've got to re-cast
everyone and film it again

471
00:20:39,860 --> 00:20:40,670
from scratch.

472
00:20:40,670 --> 00:20:42,920
It just is so painful.

473
00:20:42,920 --> 00:20:45,530
And then you get the Sony
MiniDisc version that just has

474
00:20:45,530 --> 00:20:46,704
your buddies in it.

475
00:20:46,704 --> 00:20:48,680
So is there any hope
coming there?

476
00:20:48,680 --> 00:20:52,400

477
00:20:52,400 --> 00:20:54,650
TOM WILTZIUS: To a certain
extent, this is a pretty

478
00:20:54,650 --> 00:20:59,610
difficult thing you're asking
for, because the point of many

479
00:20:59,610 --> 00:21:03,210
independent but interoperable
implementations of web

480
00:21:03,210 --> 00:21:05,520
browsers is that the
implementations are different.

481
00:21:05,520 --> 00:21:09,040
So if what you really want is
visibility into the guts of

482
00:21:09,040 --> 00:21:11,490
the thing, which is, I think,
often what people ask for,

483
00:21:11,490 --> 00:21:13,410
then that's tough.

484
00:21:13,410 --> 00:21:19,860
I think, honestly, the real
hope is two-fold.

485
00:21:19,860 --> 00:21:26,100
One, the performance pain points
that are most obvious

486
00:21:26,100 --> 00:21:30,010
and most easy to stumble on will
be ironed out over time

487
00:21:30,010 --> 00:21:38,100
as those real legacy browsers
go away and modern browsers

488
00:21:38,100 --> 00:21:40,920
care a lot more and compete with
each other to try to stay

489
00:21:40,920 --> 00:21:42,000
performant.

490
00:21:42,000 --> 00:21:45,550
And then from a standardization
perspective,

491
00:21:45,550 --> 00:21:50,420
we get very good APIs defined
and everyone sticks to them.

492
00:21:50,420 --> 00:21:53,760
We're doing a lot of work to
make sure that, especially in

493
00:21:53,760 --> 00:21:57,950
a world with Blink, another
rendering engine, we stay as

494
00:21:57,950 --> 00:22:01,820
interoperable as possible when
it comes to spec compliance.

495
00:22:01,820 --> 00:22:03,950
But people don't spec
performance.

496
00:22:03,950 --> 00:22:07,340
So what we're relying on to make
sure performance is just

497
00:22:07,340 --> 00:22:10,390
good is competition
between browsers.

498
00:22:10,390 --> 00:22:11,420
I think that's healthy.

499
00:22:11,420 --> 00:22:12,850
I think that's going to work.

500
00:22:12,850 --> 00:22:18,240
And hopefully that will push
the performance ceiling--

501
00:22:18,240 --> 00:22:20,040
or floor, depending on
how you look at it--

502
00:22:20,040 --> 00:22:24,120
to a point where you don't need
to worry as much about

503
00:22:24,120 --> 00:22:27,920
huge differences like these
cliffs existing only in some

504
00:22:27,920 --> 00:22:29,480
browsers but not in others.

505
00:22:29,480 --> 00:22:31,780
And we'll get to only things
that are fundamentally,

506
00:22:31,780 --> 00:22:35,420
because of the specification
or something, too slow, and

507
00:22:35,420 --> 00:22:37,800
then we can have conversations
about how we can improve them

508
00:22:37,800 --> 00:22:39,865
by changing the APIs.

509
00:22:39,865 --> 00:22:42,250
JAMES PEARCE: So Paul, I'm
guessing you probably have a

510
00:22:42,250 --> 00:22:44,870
fairly large surface area that
you're looking to deal with,

511
00:22:44,870 --> 00:22:47,390
and you do have perf specs.

512
00:22:47,390 --> 00:22:49,600
You do know what frames per
second you have to get to.

513
00:22:49,600 --> 00:22:50,470
PAUL BAKAUS: That's right.

514
00:22:50,470 --> 00:22:52,280
JAMES PEARCE: Would you like
to share those with us?

515
00:22:52,280 --> 00:22:54,670
PAUL BAKAUS: Well, first of
all, I wanted to say that,

516
00:22:54,670 --> 00:22:57,560
regarding the specs, I think
it's super odd that

517
00:22:57,560 --> 00:22:59,400
performance is not
part of spec.

518
00:22:59,400 --> 00:23:02,570
And I've been talking about
this on the W3C-level odd.

519
00:23:02,570 --> 00:23:06,730
And what's weird is that in most
other standards bodies,

520
00:23:06,730 --> 00:23:08,620
performance is actually
part of spec.

521
00:23:08,620 --> 00:23:12,340
So in the LTE spec, for
instance, performance is a

522
00:23:12,340 --> 00:23:13,380
large part of it.

523
00:23:13,380 --> 00:23:16,160
And I find it super odd that
it's not being done on the

524
00:23:16,160 --> 00:23:17,290
W3C, level.

525
00:23:17,290 --> 00:23:19,210
So that's first.

526
00:23:19,210 --> 00:23:23,330
And so, on the product side, we
are also taking performance

527
00:23:23,330 --> 00:23:26,500
very seriously from the start
and adding it to the spec.

528
00:23:26,500 --> 00:23:30,010
So we'd like to be at
60 FPS for run-time

529
00:23:30,010 --> 00:23:31,120
performance, sure.

530
00:23:31,120 --> 00:23:35,860
We have goals to stay below
three seconds for load time,

531
00:23:35,860 --> 00:23:39,130
at least on Wi-Fi And LTE.

532
00:23:39,130 --> 00:23:44,920
If you're on a 3G connection,
all bets are off, because even

533
00:23:44,920 --> 00:23:47,590
just activating the radio signal
to the next cell can

534
00:23:47,590 --> 00:23:49,750
take up to a couple seconds.

535
00:23:49,750 --> 00:23:52,340
So at that point, you don't have
much influence over it.

536
00:23:52,340 --> 00:23:56,440
But yes, I think the point about
regression that Ariya

537
00:23:56,440 --> 00:23:59,490
mentioned is a good point,
because if you have it in a

538
00:23:59,490 --> 00:24:04,520
spec really early, performance
metrics for your features,

539
00:24:04,520 --> 00:24:07,270
what you want to build, you
start thinking about it

540
00:24:07,270 --> 00:24:07,780
differently.

541
00:24:07,780 --> 00:24:11,040
And with every commit, you
continue measuring if it

542
00:24:11,040 --> 00:24:12,820
degraded your performance
or not, whether

543
00:24:12,820 --> 00:24:13,880
you're still on track.

544
00:24:13,880 --> 00:24:17,340
And I think that that's what's
super important, not

545
00:24:17,340 --> 00:24:20,570
specifically whether you're
looking for to have your

546
00:24:20,570 --> 00:24:24,020
upload in three or five seconds,
but really just

547
00:24:24,020 --> 00:24:27,640
making sure you have a spec.

548
00:24:27,640 --> 00:24:31,530
JAMES PEARCE: And what is your
target device portfolio?

549
00:24:31,530 --> 00:24:34,100
Do you set the floor at a
particular version of a

550
00:24:34,100 --> 00:24:35,790
particular browser?

551
00:24:35,790 --> 00:24:36,420
And--

552
00:24:36,420 --> 00:24:38,160
by the way, I'm interested--
what do you do for users that

553
00:24:38,160 --> 00:24:40,820
happen to have an
inappropriately poor device?

554
00:24:40,820 --> 00:24:43,900
PAUL BAKAUS: So I'm happy to
say that the stuff we're

555
00:24:43,900 --> 00:24:47,550
building right now has
a fairly large

556
00:24:47,550 --> 00:24:49,320
set of browser support.

557
00:24:49,320 --> 00:24:51,940
So, for instance, on Android,
we're targeting

558
00:24:51,940 --> 00:24:54,530
Gingerbread and up--

559
00:24:54,530 --> 00:24:57,510
which is, as you know if you've
worked with Android on

560
00:24:57,510 --> 00:25:00,570
mobile performance, Gingerbread
is quite a

561
00:25:00,570 --> 00:25:03,220
challenge because it only
has the stock browser.

562
00:25:03,220 --> 00:25:06,760
Well, I'm not sure if you can
install Chrome mobile on

563
00:25:06,760 --> 00:25:07,090
Gingerbread.

564
00:25:07,090 --> 00:25:07,815
I don't think you can.

565
00:25:07,815 --> 00:25:09,150
ARIYA HIDAYAT: You can
install Opera.

566
00:25:09,150 --> 00:25:11,330
PAUL BAKAUS: You can install
Opera, but not many people do

567
00:25:11,330 --> 00:25:14,260
it, I think.

568
00:25:14,260 --> 00:25:15,180
At least that's my guess.

569
00:25:15,180 --> 00:25:17,030
I don't have data on it.

570
00:25:17,030 --> 00:25:19,670
Sorry about that.

571
00:25:19,670 --> 00:25:21,830
But yeah, it's a
real challenge.

572
00:25:21,830 --> 00:25:26,980
That being said, I also think
there's a place to build games

573
00:25:26,980 --> 00:25:28,330
and apps that push the edge.

574
00:25:28,330 --> 00:25:31,700

575
00:25:31,700 --> 00:25:34,270
I just wrote a blog post
about this, actually.

576
00:25:34,270 --> 00:25:40,190
I was arguing that many managers
really think HTML5 in

577
00:25:40,190 --> 00:25:41,920
particular has a performance
issue.

578
00:25:41,920 --> 00:25:43,760
I don't think that's fair.

579
00:25:43,760 --> 00:25:46,620
I think no user complains--

580
00:25:46,620 --> 00:25:49,270
well, some do, but I argue
they're stupid.

581
00:25:49,270 --> 00:25:54,120
But usual users don't complain
that their latest PC game

582
00:25:54,120 --> 00:25:55,600
doesn't run well on their

583
00:25:55,600 --> 00:25:58,160
10-year-old Windows XP computer.

584
00:25:58,160 --> 00:26:01,145
But people do with HTML5.

585
00:26:01,145 --> 00:26:06,186
I see managers trying to load
apps in IE8 on bad hardware,

586
00:26:06,186 --> 00:26:07,520
and they're complaining
about it.

587
00:26:07,520 --> 00:26:10,710
And that has to stop.

588
00:26:10,710 --> 00:26:12,980
That's just not fair.

589
00:26:12,980 --> 00:26:15,200
And I think we need
to push it more.

590
00:26:15,200 --> 00:26:23,090

591
00:26:23,090 --> 00:26:24,690
ARIYA HIDAYAT: So we can also
view it from a different

592
00:26:24,690 --> 00:26:25,250
perspective.

593
00:26:25,250 --> 00:26:29,426
How many of you here have
heard about RoboHornet?

594
00:26:29,426 --> 00:26:30,680
Oh, good.

595
00:26:30,680 --> 00:26:33,290
So the idea behind this
benchmark is to come up with a

596
00:26:33,290 --> 00:26:36,580
common set, bearing any standard
performance metrics

597
00:26:36,580 --> 00:26:40,380
from the standard bodies, that
can be run in all browsers.

598
00:26:40,380 --> 00:26:43,140
And that should be, if you've
got the buy-in from the

599
00:26:43,140 --> 00:26:44,560
browser vendors--

600
00:26:44,560 --> 00:26:47,700
for example, inserting a
thousand rows in the table

601
00:26:47,700 --> 00:26:51,370
should not get slower as the
browser gets new release.

602
00:26:51,370 --> 00:26:55,110
For example, IE12 should not be
slower compared to IE11 or

603
00:26:55,110 --> 00:26:57,990
IE10 with respect to doing
that kind of stuff.

604
00:26:57,990 --> 00:27:02,390
So if that is part of the
development workflow from the

605
00:27:02,390 --> 00:27:05,395
browser vendor themself, then
they know for sure that, hey,

606
00:27:05,395 --> 00:27:08,680
if I degrade this performance,
then some real-world

607
00:27:08,680 --> 00:27:11,270
application like Google Apps
or frameworks like Sencha

608
00:27:11,270 --> 00:27:15,315
Touch Mobile that will have
a performance impact.

609
00:27:15,315 --> 00:27:19,080
ILYA GRIGORIK: So getting back
to the tooling question across

610
00:27:19,080 --> 00:27:21,860
different platforms, I think we
have some good answers for

611
00:27:21,860 --> 00:27:22,600
the network side.

612
00:27:22,600 --> 00:27:25,230
So for example, we have project
open source products

613
00:27:25,230 --> 00:27:28,560
like WebPagetest which allow
you to run a test against

614
00:27:28,560 --> 00:27:31,170
different browsers-- so IE,
Chrome, and the rest-- and get

615
00:27:31,170 --> 00:27:32,130
the same visual output.

616
00:27:32,130 --> 00:27:35,740
And that is already a great
start because I know DevTools

617
00:27:35,740 --> 00:27:37,900
really, really well, but I
haven't been using the IE

618
00:27:37,900 --> 00:27:38,990
tools for a while.

619
00:27:38,990 --> 00:27:41,290
So at least now, you can put
them side by side and say,

620
00:27:41,290 --> 00:27:44,370
here's A. Here's B. And now I
can compare the waterfalls and

621
00:27:44,370 --> 00:27:45,590
compare that.

622
00:27:45,590 --> 00:27:48,860
And we've developed, basically,
bottom-up specs for

623
00:27:48,860 --> 00:27:51,330
that-- so HTTP Archive Spec,
where we can right-click on

624
00:27:51,330 --> 00:27:53,430
the waterfall and export
it and import it

625
00:27:53,430 --> 00:27:54,660
into a different tool.

626
00:27:54,660 --> 00:27:57,970
We have an export for the
Timeline in Chrome, but we

627
00:27:57,970 --> 00:27:58,750
don't have a tool.

628
00:27:58,750 --> 00:28:01,250
It would be cool if you could
export a rendering timeline

629
00:28:01,250 --> 00:28:04,580
from Firefox and also have a
similar tool where you could

630
00:28:04,580 --> 00:28:09,380
compare them and say, I'm
getting x FPS here and y FPS

631
00:28:09,380 --> 00:28:11,440
over there.

632
00:28:11,440 --> 00:28:13,506
That's all doable, I think.

633
00:28:13,506 --> 00:28:15,720
TOM WILTZIUS: Yeah, again,
modular the fact that people

634
00:28:15,720 --> 00:28:19,800
ask for FPS not realizing that
this is a difficult thing to

635
00:28:19,800 --> 00:28:21,690
really standardize what
the term even means.

636
00:28:21,690 --> 00:28:23,790
But your point's absolutely
a good one.

637
00:28:23,790 --> 00:28:30,600
And actually I'll tie that to
what we were saying about

638
00:28:30,600 --> 00:28:33,450
measuring performance
regressions.

639
00:28:33,450 --> 00:28:38,120
We have a framework, I guess I'd
call it, that we've used

640
00:28:38,120 --> 00:28:42,360
to monitor Chrome performance
as we develop Chrome.

641
00:28:42,360 --> 00:28:45,750
It's called Telemetry.

642
00:28:45,750 --> 00:28:46,975
It's something you
can go check out.

643
00:28:46,975 --> 00:28:48,930
We have some documentation on
the Chromium Dev site if

644
00:28:48,930 --> 00:28:49,670
you're interested.

645
00:28:49,670 --> 00:28:53,310
But basically it's a Python
harness that talks to Chrome

646
00:28:53,310 --> 00:28:58,065
via the Chrome Developer Tools
protocol and instructs it to

647
00:28:58,065 --> 00:29:00,950
do simple things like load a
page, scroll it, get a bunch

648
00:29:00,950 --> 00:29:02,000
of stats back out.

649
00:29:02,000 --> 00:29:05,140
But again, these are
implementation-specific stats,

650
00:29:05,140 --> 00:29:06,830
which is painful.

651
00:29:06,830 --> 00:29:09,410
But then we can monitor for
like scrolling performance

652
00:29:09,410 --> 00:29:10,650
regressions, for instance.

653
00:29:10,650 --> 00:29:14,130
And if people like external
developers want to plug their

654
00:29:14,130 --> 00:29:18,440
own content into this and keep
the version of Chrome fixed

655
00:29:18,440 --> 00:29:21,550
but iterate on that content, I
think this could be a useful

656
00:29:21,550 --> 00:29:22,040
tool for that.

657
00:29:22,040 --> 00:29:23,800
ILYA GRIGORIK: So I think what
we can do to make that better

658
00:29:23,800 --> 00:29:25,320
is make it simpler.

659
00:29:25,320 --> 00:29:26,810
TOM WILTZIUS: And then make
it work across browsers.

660
00:29:26,810 --> 00:29:28,270
ILYA GRIGORIK: Because if you
would do a WebPagetest, as I

661
00:29:28,270 --> 00:29:30,590
come to a web page, I type in,
literally, the name of the

662
00:29:30,590 --> 00:29:34,180
page, and I just say
IE10 or IE9.

663
00:29:34,180 --> 00:29:35,360
And I'm done.

664
00:29:35,360 --> 00:29:37,930
Right now to run Telemetry,
it's like, yeah, check out

665
00:29:37,930 --> 00:29:39,270
Chromium and just build it.

666
00:29:39,270 --> 00:29:41,260
It's like, look.

667
00:29:41,260 --> 00:29:42,570
And then there's the fact
that it's a [INAUDIBLE]

668
00:29:42,570 --> 00:29:43,020
checkup.

669
00:29:43,020 --> 00:29:45,940
TOM WILTZIUS: It does work
with stock Chrome matter.

670
00:29:45,940 --> 00:29:47,550
But yeah, your point's
a good one.

671
00:29:47,550 --> 00:29:49,040
And I wonder--

672
00:29:49,040 --> 00:29:50,490
I don't know if we need to get
buy-in from other browser

673
00:29:50,490 --> 00:29:51,890
vendors or what-- how
we can make this

674
00:29:51,890 --> 00:29:53,740
work with other browsers.

675
00:29:53,740 --> 00:29:58,310
We need a standard way of
communicating from outside the

676
00:29:58,310 --> 00:30:00,150
browser in.

677
00:30:00,150 --> 00:30:02,160
JAMES PEARCE: So we actually
have a related question on the

678
00:30:02,160 --> 00:30:05,435
moderator here, which is
the from Andre Behrens.

679
00:30:05,435 --> 00:30:06,190
Here?

680
00:30:06,190 --> 00:30:07,530
No?

681
00:30:07,530 --> 00:30:08,090
Yes.

682
00:30:08,090 --> 00:30:11,000
Would you like to come up and
ask it regarding Chrome

683
00:30:11,000 --> 00:30:13,818
performance versus--

684
00:30:13,818 --> 00:30:15,530
ANDRE: Sure.

685
00:30:15,530 --> 00:30:16,660
JAMES PEARCE: You're
on record.

686
00:30:16,660 --> 00:30:17,562
[LAUGHTER]

687
00:30:17,562 --> 00:30:18,812
ANDRE: Great.

688
00:30:18,812 --> 00:30:25,644

689
00:30:25,644 --> 00:30:29,040
Yeah, my question was simply--

690
00:30:29,040 --> 00:30:32,470
I have a pretty heavy
app that I work on--

691
00:30:32,470 --> 00:30:36,620
why is the performance on
certain things quick as the

692
00:30:36,620 --> 00:30:40,330
dickens on an iPad currently
and not on a Nexus 10?

693
00:30:40,330 --> 00:30:41,400
Are they cheating?

694
00:30:41,400 --> 00:30:42,670
Is there a hardware cheat?

695
00:30:42,670 --> 00:30:45,760
Or is it just enough time?

696
00:30:45,760 --> 00:30:48,800
Or where are the slowdowns at?

697
00:30:48,800 --> 00:30:50,680
Because I notice
them sometimes.

698
00:30:50,680 --> 00:30:53,090
It's a lot better, but
I notice them.

699
00:30:53,090 --> 00:30:53,740
TOM WILTZIUS: You're talking
about rendering

700
00:30:53,740 --> 00:30:54,670
performance, I assume?

701
00:30:54,670 --> 00:30:55,070
ANDRE: Yes.

702
00:30:55,070 --> 00:30:58,680
TOM WILTZIUS: Or do you have
specific operations in mind?

703
00:30:58,680 --> 00:31:02,530
ANDRE: The one that really gets
me is touch response and

704
00:31:02,530 --> 00:31:04,980
rendering after the
touch response.

705
00:31:04,980 --> 00:31:07,120
And I'm doing a big,
heavy, nasty thing.

706
00:31:07,120 --> 00:31:09,065
It's that I'm moving a lot
of DOM nodes around.

707
00:31:09,065 --> 00:31:13,070
But on the Pixel, it's
really great.

708
00:31:13,070 --> 00:31:14,720
On my computer, it's
really great.

709
00:31:14,720 --> 00:31:16,420
On the iPad, it's
really great.

710
00:31:16,420 --> 00:31:20,130
On most Android devices,
it's pretty good.

711
00:31:20,130 --> 00:31:23,400
And I'm wondering what
the difference is?

712
00:31:23,400 --> 00:31:29,010
TOM WILTZIUS: Yeah, so some of
this is a resource question.

713
00:31:29,010 --> 00:31:35,080
I love the comparison between
iPads and iPhones and Android

714
00:31:35,080 --> 00:31:37,580
devices because it shows we're
in the same league, even

715
00:31:37,580 --> 00:31:39,510
though they're half the price.

716
00:31:39,510 --> 00:31:45,480
But I do think that it remains
a challenge for us to make

717
00:31:45,480 --> 00:31:49,080
good on all the performance
promises of comparison.

718
00:31:49,080 --> 00:31:52,350
So to a certain extent,
we have our work

719
00:31:52,350 --> 00:31:54,380
cut out for us there.

720
00:31:54,380 --> 00:31:58,650
But it is something we're
working on very hard, and

721
00:31:58,650 --> 00:32:01,220
hopefully we'll just get
better underneath you

722
00:32:01,220 --> 00:32:02,470
as time goes on.

723
00:32:02,470 --> 00:32:06,450
The latest versions of Chrome
for Android, which is to say

724
00:32:06,450 --> 00:32:08,970
those that have come out in
the last few months, have

725
00:32:08,970 --> 00:32:11,630
actually a radically different
rendering architecture than

726
00:32:11,630 --> 00:32:14,510
the ones that came out,
say, at this time last

727
00:32:14,510 --> 00:32:16,900
year, at I/O 2012.

728
00:32:16,900 --> 00:32:20,680
And we're going to continue
making changes at almost that

729
00:32:20,680 --> 00:32:21,250
big a pace.

730
00:32:21,250 --> 00:32:23,430
So right now, one of the things
we're looking at, for

731
00:32:23,430 --> 00:32:28,130
instance, is what can we do
about input latency, which

732
00:32:28,130 --> 00:32:31,210
it's probably not
the exact silver

733
00:32:31,210 --> 00:32:32,930
bullet for your problem.

734
00:32:32,930 --> 00:32:35,230
But it's very much related.

735
00:32:35,230 --> 00:32:38,520
And part of Chrome's very
complicated multi-process

736
00:32:38,520 --> 00:32:41,210
architecture is that we do a
lot of threat hopping, and

737
00:32:41,210 --> 00:32:43,520
this is really hurting
performance when it comes to

738
00:32:43,520 --> 00:32:44,490
input latency.

739
00:32:44,490 --> 00:32:45,660
This is something
we're looking at

740
00:32:45,660 --> 00:32:47,090
revamping right now.

741
00:32:47,090 --> 00:32:51,390
So our hope is a lot of
this will get better.

742
00:32:51,390 --> 00:32:58,420
I don't think there's anything
fundamental here.

743
00:32:58,420 --> 00:32:59,970
I do want to point out
one other thing

744
00:32:59,970 --> 00:33:02,350
though, which is also--

745
00:33:02,350 --> 00:33:04,050
I don't want to make excuses,
but it is a lot more

746
00:33:04,050 --> 00:33:09,030
challenging to change things
that are so related to things

747
00:33:09,030 --> 00:33:13,780
like touch input because they we
work across five operating

748
00:33:13,780 --> 00:33:15,500
systems, not one.

749
00:33:15,500 --> 00:33:17,960
And that's a major challenge.

750
00:33:17,960 --> 00:33:18,700
JAMES PEARCE: OK.

751
00:33:18,700 --> 00:33:20,230
We're actually a little
pushed for time.

752
00:33:20,230 --> 00:33:21,640
Time flies when you're
having fun.

753
00:33:21,640 --> 00:33:24,370
But I did have one final
question, and then we're going

754
00:33:24,370 --> 00:33:27,380
to go around with
the conclusion,

755
00:33:27,380 --> 00:33:28,580
which is perhaps related.

756
00:33:28,580 --> 00:33:31,310
I'm not sure if there's a GPU
issue or a networking issue.

757
00:33:31,310 --> 00:33:34,080
But I have a very specific
question from Charles Ying,

758
00:33:34,080 --> 00:33:37,730
which is, are there any efforts
in place to optimize

759
00:33:37,730 --> 00:33:40,640
the power consumption
of Chrome right now?

760
00:33:40,640 --> 00:33:42,790
This is something that web
developers have never really

761
00:33:42,790 --> 00:33:45,964
thought about before, but
now they do have to.

762
00:33:45,964 --> 00:33:48,250
TOM WILTZIUS: I can speak to
this one if you want to.

763
00:33:48,250 --> 00:33:51,033
ILYA GRIGORIK: So I'm curious
about the "do have to." Do you

764
00:33:51,033 --> 00:33:52,470
have a good example in mind?

765
00:33:52,470 --> 00:33:55,420
Is that something that you
guys optimize for?

766
00:33:55,420 --> 00:33:58,150
JAMES PEARCE: Well on the
assumption that people spend

767
00:33:58,150 --> 00:34:00,880
25% of their time on smartphones
on Facebook, I

768
00:34:00,880 --> 00:34:02,680
suppose we have a responsibility
to make sure

769
00:34:02,680 --> 00:34:05,180
it's not using up their
batteries too much.

770
00:34:05,180 --> 00:34:07,890
But I would imagine the
same goes for games.

771
00:34:07,890 --> 00:34:10,280
You don't want to be the,
quote, "app that is

772
00:34:10,280 --> 00:34:12,650
responsible for killing
someone's battery in a day."

773
00:34:12,650 --> 00:34:14,955
ILYA GRIGORIK: So I think
maybe a year ago--

774
00:34:14,955 --> 00:34:16,710
we were just talking
before this panel--

775
00:34:16,710 --> 00:34:19,199
talking about FPS in a browser
was a new concept

776
00:34:19,199 --> 00:34:20,400
for a lot of people.

777
00:34:20,400 --> 00:34:23,969
I think talking about battery
life today in a browser is a

778
00:34:23,969 --> 00:34:25,320
new concept for a lot of people

779
00:34:25,320 --> 00:34:26,690
because, what do you mean?

780
00:34:26,690 --> 00:34:28,699
I'm just rendering a web page.

781
00:34:28,699 --> 00:34:30,730
That is not the case, because
we're building apps.

782
00:34:30,730 --> 00:34:32,179
And these apps are running
for a long time.

783
00:34:32,179 --> 00:34:32,989
They have memory leaks.

784
00:34:32,989 --> 00:34:34,030
They have other things.

785
00:34:34,030 --> 00:34:36,880
On networking side, there are
lots of great examples where

786
00:34:36,880 --> 00:34:38,630
we're doing things
wrong today--

787
00:34:38,630 --> 00:34:41,580
things like, let me just slap
on a real time analytics

788
00:34:41,580 --> 00:34:44,370
beacon on my page, because
it's awesome.

789
00:34:44,370 --> 00:34:47,810
I get a nice vanity dashboard
that shows me the number of

790
00:34:47,810 --> 00:34:48,870
people on my site.

791
00:34:48,870 --> 00:34:51,120
And then every five seconds,
you're pinging the radio and

792
00:34:51,120 --> 00:34:54,389
just burning the fricking
battery on the device.

793
00:34:54,389 --> 00:34:58,260
And so those are good examples
of where we need

794
00:34:58,260 --> 00:34:59,930
to fix these patterns.

795
00:34:59,930 --> 00:35:01,100
I think we need to educate
developers.

796
00:35:01,100 --> 00:35:03,040
We need to educate the companies
that are building

797
00:35:03,040 --> 00:35:05,160
these things.

798
00:35:05,160 --> 00:35:06,820
Google Analytics actually
addressed this

799
00:35:06,820 --> 00:35:07,840
about a year ago.

800
00:35:07,840 --> 00:35:12,150
But I've done a recent survey of
other real-time analytics.

801
00:35:12,150 --> 00:35:14,760
They're all doing the
same problem.

802
00:35:14,760 --> 00:35:19,170
TOM WILTZIUS: Yeah, I think, to
be perfectly honest, from a

803
00:35:19,170 --> 00:35:23,170
rendering standpoint, we are
so bottlenecked on core

804
00:35:23,170 --> 00:35:26,860
performance right now that power
consumption, while we

805
00:35:26,860 --> 00:35:30,280
definitely worry about
it, it's lower on our

806
00:35:30,280 --> 00:35:31,610
hierarchy of worries.

807
00:35:31,610 --> 00:35:34,090
And the reason is that, as we
improve performance, we are

808
00:35:34,090 --> 00:35:36,170
only going to improve
power consumption.

809
00:35:36,170 --> 00:35:40,810
So right now, to scroll a web
page in Chrome for Android on

810
00:35:40,810 --> 00:35:45,350
an older generation Nexus
device-- so a Nexus S or

811
00:35:45,350 --> 00:35:46,020
something-- yeah?

812
00:35:46,020 --> 00:35:47,150
Greg, you want to
say something?

813
00:35:47,150 --> 00:35:48,550
GREG SIMON: Yeah.

814
00:35:48,550 --> 00:35:50,070
TOM WILTZIUS: Burns all
your CPU, which

815
00:35:50,070 --> 00:35:50,870
burns all your power.

816
00:35:50,870 --> 00:35:51,520
So we got to fix that.

817
00:35:51,520 --> 00:35:52,670
GREG SIMON: Yeah, we do care
a lot about power.

818
00:35:52,670 --> 00:35:56,380
And we're actually working right
now on making changes to

819
00:35:56,380 --> 00:36:01,540
our Telemetry, which is a Python
framework for running

820
00:36:01,540 --> 00:36:06,500
tests on Chrome Desktop, Chrome
OS, Chrome on Android.

821
00:36:06,500 --> 00:36:08,340
So we're working on
making changes to

822
00:36:08,340 --> 00:36:09,590
actually measure power.

823
00:36:09,590 --> 00:36:12,100

824
00:36:12,100 --> 00:36:13,650
Sorry, I am Greg Simon.

825
00:36:13,650 --> 00:36:19,300
I work with the Blink
team and others.

826
00:36:19,300 --> 00:36:21,110
ARIYA HIDAYAT: So in some cases,
this also needs some

827
00:36:21,110 --> 00:36:23,150
cooperation from the
hardware vendor.

828
00:36:23,150 --> 00:36:25,305
For example, Qualcomm has
a very nice profiler.

829
00:36:25,305 --> 00:36:26,830
I can't remember the name.

830
00:36:26,830 --> 00:36:30,700
But that gives you the exact
measurement of the consumption

831
00:36:30,700 --> 00:36:32,790
from the radio to the GPU.

832
00:36:32,790 --> 00:36:36,530
And that's very important
metrics because if I build my

833
00:36:36,530 --> 00:36:39,300
game using WebGL and then
suddenly it burns more power

834
00:36:39,300 --> 00:36:42,290
than as if you would have
written with [INAUDIBLE], then

835
00:36:42,290 --> 00:36:45,140
that's not good proposition.

836
00:36:45,140 --> 00:36:47,090
ILYA GRIGORIK: And I just want
to add, one thing I'd love to

837
00:36:47,090 --> 00:36:50,240
see as part of either DevTools
or any sort of tool chain is,

838
00:36:50,240 --> 00:36:52,740
for example, visibility
into the radio.

839
00:36:52,740 --> 00:36:54,670
Paul, you mentioned that
sometimes just turning on the

840
00:36:54,670 --> 00:36:56,600
radio takes, literally,
seconds and

841
00:36:56,600 --> 00:36:57,990
burns a lot of battery.

842
00:36:57,990 --> 00:37:01,350
Having understanding and
visibility into how the radio

843
00:37:01,350 --> 00:37:04,360
operates can have
a huge impact.

844
00:37:04,360 --> 00:37:05,380
We don't have any

845
00:37:05,380 --> 00:37:07,680
instrumentation across any platform.

846
00:37:07,680 --> 00:37:10,450
Even the native apps don't
really have good

847
00:37:10,450 --> 00:37:11,440
instrumentation.

848
00:37:11,440 --> 00:37:13,950
I was looking-- so Qualcomm
is a great example.

849
00:37:13,950 --> 00:37:16,960
AT&T actually has
a great tool.

850
00:37:16,960 --> 00:37:19,110
There's basically no other tool
where you can actually

851
00:37:19,110 --> 00:37:22,880
record a session on your
phone, and then--

852
00:37:22,880 --> 00:37:24,470
it's not an exact measurement--
but it will

853
00:37:24,470 --> 00:37:28,080
model the radio states and the
actual battery consumption.

854
00:37:28,080 --> 00:37:30,270
It'll tell you, this
app consumed x

855
00:37:30,270 --> 00:37:32,440
many joules of energy.

856
00:37:32,440 --> 00:37:33,990
And that's a start.

857
00:37:33,990 --> 00:37:34,340
JAMES PEARCE: Cool.

858
00:37:34,340 --> 00:37:36,390
We have time, I think, for one
question from the floor.

859
00:37:36,390 --> 00:37:40,110

860
00:37:40,110 --> 00:37:42,820
AUDIENCE: So we were talking
about actual performance and

861
00:37:42,820 --> 00:37:45,300
real numbers and what we could
do to improve things, but we

862
00:37:45,300 --> 00:37:47,210
were also talking about
the education.

863
00:37:47,210 --> 00:37:49,260
Do you think we should put
more time into educating

864
00:37:49,260 --> 00:37:51,660
people about perceived
performance?

865
00:37:51,660 --> 00:37:54,535
Because we only have certain
limits that we have right now,

866
00:37:54,535 --> 00:37:58,770
like 3G, so should we talk more
about, not fall-backs,

867
00:37:58,770 --> 00:38:03,160
but different angles of how to
make things better for users

868
00:38:03,160 --> 00:38:04,810
without building new devices?

869
00:38:04,810 --> 00:38:07,310

870
00:38:07,310 --> 00:38:08,110
PAUL BAKAUS: Oh, yeah.

871
00:38:08,110 --> 00:38:09,820
I would say absolutely.

872
00:38:09,820 --> 00:38:13,090
I think that's a great point.

873
00:38:13,090 --> 00:38:15,960
As internal at Zynga, we always
think about actual

874
00:38:15,960 --> 00:38:19,230
performance and perceived
performance, responsiveness.

875
00:38:19,230 --> 00:38:21,700
And that starts with
easy stuff.

876
00:38:21,700 --> 00:38:24,390
If you click a button,
make it do something

877
00:38:24,390 --> 00:38:26,190
while you're waiting.

878
00:38:26,190 --> 00:38:29,580
Or if you're loading your
page, show a loader.

879
00:38:29,580 --> 00:38:30,690
Do something.

880
00:38:30,690 --> 00:38:37,830
Put something out to the user,
so that anxiety of waiting

881
00:38:37,830 --> 00:38:39,820
isn't perceived the same way.

882
00:38:39,820 --> 00:38:43,650
And there's all kinds of
techniques to do that, and I

883
00:38:43,650 --> 00:38:47,080
think it's important to educate
people about those.

884
00:38:47,080 --> 00:38:50,280
JAMES PEARCE: Any interest in
getting one more question in?

885
00:38:50,280 --> 00:38:50,890
Do you want a question?

886
00:38:50,890 --> 00:38:53,170
AUDIENCE: No, actually, I want
to answer the power question.

887
00:38:53,170 --> 00:38:55,660
JAMES PEARCE: Oh, wants to
answer the power question.

888
00:38:55,660 --> 00:38:57,410
Unless anyone has any more
on that previous point?

889
00:38:57,410 --> 00:38:57,990
TOM WILTZIUS: No, you should
let Chris go for it.

890
00:38:57,990 --> 00:38:59,885
JAMES PEARCE: Go ahead.

891
00:38:59,885 --> 00:39:00,940
AUDIENCE: So I'm Chris
[INAUDIBLE].

892
00:39:00,940 --> 00:39:03,480
I'm the tech leader for the
Chrome for Android.

893
00:39:03,480 --> 00:39:08,860
So I think to answer the power
question is Android actually

894
00:39:08,860 --> 00:39:12,730
does have the tools to measure
the power, and they're very

895
00:39:12,730 --> 00:39:15,175
precise, the tools.

896
00:39:15,175 --> 00:39:17,190
The device is called the
[INAUDIBLE] device.

897
00:39:17,190 --> 00:39:20,350
They basically replace the
battery on the phone, and they

898
00:39:20,350 --> 00:39:23,750
measure on the per-amp base
for all the actions.

899
00:39:23,750 --> 00:39:27,310
And then they publish all the
open source how to hook up the

900
00:39:27,310 --> 00:39:29,360
tools with Android platform.

901
00:39:29,360 --> 00:39:33,090
So if you have a web app, you
can run the apps and then to

902
00:39:33,090 --> 00:39:35,880
monitor what action
can trigger it.

903
00:39:35,880 --> 00:39:39,620
So as a developer, I will
suggest the things is try to

904
00:39:39,620 --> 00:39:43,720
not put a lot timers, especially
just because on the

905
00:39:43,720 --> 00:39:48,310
mobile device, when CPU is
running in the high frequency,

906
00:39:48,310 --> 00:39:50,080
it is burning a lot
of battery.

907
00:39:50,080 --> 00:39:53,200
And for the multicore devices,
sometimes they

908
00:39:53,200 --> 00:39:55,280
keep one core working.

909
00:39:55,280 --> 00:39:58,450
But if a CPU working load is
higher, they're going to bring

910
00:39:58,450 --> 00:39:59,340
up more cores.

911
00:39:59,340 --> 00:40:02,000
So the more cores means
more power usage.

912
00:40:02,000 --> 00:40:06,120
And then they have this way is
basically after a couple

913
00:40:06,120 --> 00:40:08,450
milliseconds, no activity,
they're going to

914
00:40:08,450 --> 00:40:10,180
crank down the power.

915
00:40:10,180 --> 00:40:15,590
But if you keep every, say,
two seconds and you fire a

916
00:40:15,590 --> 00:40:18,170
timer yourself and try to
check something in the

917
00:40:18,170 --> 00:40:20,530
background, and if nothing
happened, you sleep.

918
00:40:20,530 --> 00:40:24,930
But the device is going to
basically keep running this

919
00:40:24,930 --> 00:40:26,940
high power mode and
then basically

920
00:40:26,940 --> 00:40:28,360
going to burn the battery.

921
00:40:28,360 --> 00:40:32,890
And also things for the radio
things is every time one radio

922
00:40:32,890 --> 00:40:35,380
is taking a little bit of longer
time to bring up, and

923
00:40:35,380 --> 00:40:38,530
then they normally keep it
in the longer times.

924
00:40:38,530 --> 00:40:41,870
And another case, for
example, as Wi-Fi.

925
00:40:41,870 --> 00:40:45,240
So probably people having device
with the Wi-Fi this

926
00:40:45,240 --> 00:40:49,770
week experienced the bad
experience, bad battery life

927
00:40:49,770 --> 00:40:51,750
in the Moscone center.

928
00:40:51,750 --> 00:40:54,840
Because Wi-Fi bad, so the device
keeps trying to connect

929
00:40:54,840 --> 00:40:57,502
to the Wi-Fi, and then that
also burn the batteries.

930
00:40:57,502 --> 00:41:00,030

931
00:41:00,030 --> 00:41:00,450
JAMES PEARCE: Two minutes?

932
00:41:00,450 --> 00:41:01,150
Got two minutes left?

933
00:41:01,150 --> 00:41:02,960
All right, OK.

934
00:41:02,960 --> 00:41:03,790
We started late.

935
00:41:03,790 --> 00:41:05,180
We are using up time.

936
00:41:05,180 --> 00:41:08,750
So if we could just quickly go
around, I have two questions.

937
00:41:08,750 --> 00:41:11,410
You have 30 seconds to answer
two questions each.

938
00:41:11,410 --> 00:41:15,330
And the first question is if I'm
an average web developer

939
00:41:15,330 --> 00:41:17,070
and I want to take away
something that I can start

940
00:41:17,070 --> 00:41:19,330
doing right now to make my web
apps more performant, what

941
00:41:19,330 --> 00:41:20,400
would that one thing be?

942
00:41:20,400 --> 00:41:23,580
And secondly, if you could cast
a magic spell to make

943
00:41:23,580 --> 00:41:27,080
mobile web performance a better
place, assuming you had

944
00:41:27,080 --> 00:41:30,910
the power of the Google Chrome
team for example, what would

945
00:41:30,910 --> 00:41:32,690
that one thing be?

946
00:41:32,690 --> 00:41:33,120
Go ahead--

947
00:41:33,120 --> 00:41:34,030
30 seconds each.

948
00:41:34,030 --> 00:41:35,910
PAUL BAKAUS: OK, so first thing,
I'm going to give you

949
00:41:35,910 --> 00:41:39,210
an actionable item on actual
improving your perceived

950
00:41:39,210 --> 00:41:43,210
responsiveness of your app but
also saving your battery life.

951
00:41:43,210 --> 00:41:47,100
And that is any time the app
doesn't have anything to do--

952
00:41:47,100 --> 00:41:50,740
for instance if your app
needs a login flow.

953
00:41:50,740 --> 00:41:54,230
So you started a login,
username, password, input--

954
00:41:54,230 --> 00:41:57,730
at that time, do a big network
burst to load all your data in

955
00:41:57,730 --> 00:42:01,520
the background because, after
the user logs in, he will have

956
00:42:01,520 --> 00:42:03,140
all the stuff loaded already.

957
00:42:03,140 --> 00:42:07,110
And the chance is very likely he
doesn't quit the app before

958
00:42:07,110 --> 00:42:11,620
logging in, so that's a great
point in which you should be

959
00:42:11,620 --> 00:42:12,390
loading data.

960
00:42:12,390 --> 00:42:13,180
JAMES PEARCE: And the
one thing you

961
00:42:13,180 --> 00:42:14,170
would fix if you could?

962
00:42:14,170 --> 00:42:15,780
PAUL BAKAUS: The one
thing I would fix

963
00:42:15,780 --> 00:42:19,180
is, let's see, scrolling.

964
00:42:19,180 --> 00:42:23,862
Yeah, give us good scrolling
APIs on Chrome Mobile.

965
00:42:23,862 --> 00:42:25,830
TOM WILTZIUS: You
want the APIs?

966
00:42:25,830 --> 00:42:26,760
PAUL BAKAUS: I want APIs.

967
00:42:26,760 --> 00:42:28,020
Yeah, Microsoft has them.

968
00:42:28,020 --> 00:42:30,812
Chrome doesn't.

969
00:42:30,812 --> 00:42:32,480
TOM WILTZIUS: All right.

970
00:42:32,480 --> 00:42:37,210
I guess my one takeaway would
be that you should be aware

971
00:42:37,210 --> 00:42:42,240
that jank is a problem, and it's
a hard problem to solve.

972
00:42:42,240 --> 00:42:44,510
But we do have some tools
to solve it, and I would

973
00:42:44,510 --> 00:42:48,430
encourage you to check out a lot
of our developer relations

974
00:42:48,430 --> 00:42:50,580
resources on how to use
Chrome's DevTools

975
00:42:50,580 --> 00:42:52,540
to fight that jank.

976
00:42:52,540 --> 00:42:54,960
I gave a talk about this
yesterday, but even basic

977
00:42:54,960 --> 00:42:57,420
tools like Show paint rectangles
or Show composited

978
00:42:57,420 --> 00:43:00,360
layer borders or the Vertical
Timeline go really far.

979
00:43:00,360 --> 00:43:02,460
JAMES PEARCE: And you are the
fairy godmother, so what is

980
00:43:02,460 --> 00:43:03,650
the one thing you can
fix for everybody?

981
00:43:03,650 --> 00:43:06,082
TOM WILTZIUS: Yeah, right.

982
00:43:06,082 --> 00:43:07,880
That's a good question.

983
00:43:07,880 --> 00:43:10,000
I guess I was going to phrase
my answer somewhat

984
00:43:10,000 --> 00:43:11,710
differently, because I wasn't
going to fix something.

985
00:43:11,710 --> 00:43:14,340
I was going to change the
way a lot of the web's

986
00:43:14,340 --> 00:43:17,220
specifications were built so
that we're not stuck in such

987
00:43:17,220 --> 00:43:18,055
complicated scenarios.

988
00:43:18,055 --> 00:43:18,637
JAMES PEARCE: Ah, that counts.

989
00:43:18,637 --> 00:43:19,350
That counts.

990
00:43:19,350 --> 00:43:20,300
Go ahead.

991
00:43:20,300 --> 00:43:21,850
TOM WILTZIUS: There are a lot
of things that we would like

992
00:43:21,850 --> 00:43:26,380
to be able to do that we're a
little bit hemmed in by the

993
00:43:26,380 --> 00:43:29,190
immense, expansive API
service of the web.

994
00:43:29,190 --> 00:43:31,980
So I am happy that on mobile
we've been able to move a

995
00:43:31,980 --> 00:43:33,050
little bit faster.

996
00:43:33,050 --> 00:43:35,330
I want us to be able to move a
little bit faster everywhere.

997
00:43:35,330 --> 00:43:37,410
I think one of the ways we're
going to do that without

998
00:43:37,410 --> 00:43:40,410
actually causing pain by
changing things is by

999
00:43:40,410 --> 00:43:43,620
introducing new primitives into
the web that are going to

1000
00:43:43,620 --> 00:43:46,070
allow us to have the
pit of awesome--

1001
00:43:46,070 --> 00:43:47,710
the things that are only going
to be fast, but you're going

1002
00:43:47,710 --> 00:43:49,090
to be able to do less
inside of them.

1003
00:43:49,090 --> 00:43:51,750
We have ideas around, for
instance, infinite list

1004
00:43:51,750 --> 00:43:54,100
containers that are just
going to work.

1005
00:43:54,100 --> 00:43:57,160
And you won't be able to have
crazy overhanging floats, but

1006
00:43:57,160 --> 00:43:58,150
it'll be fast.

1007
00:43:58,150 --> 00:43:59,240
And that'll be good.

1008
00:43:59,240 --> 00:44:00,080
JAMES PEARCE: Infinite list

1009
00:44:00,080 --> 00:44:02,223
controllers in a pit of awesome.

1010
00:44:02,223 --> 00:44:02,930
Yeah.

1011
00:44:02,930 --> 00:44:03,975
Can we have that by tomorrow?

1012
00:44:03,975 --> 00:44:04,620
TOM WILTZIUS: Sure.

1013
00:44:04,620 --> 00:44:04,960
JAMES PEARCE: Thank you.

1014
00:44:04,960 --> 00:44:06,600
Ilya?

1015
00:44:06,600 --> 00:44:08,870
ILYA GRIGORIK: Let's see, so
maybe coming back to perceived

1016
00:44:08,870 --> 00:44:10,530
performance, I think that's
a really good point.

1017
00:44:10,530 --> 00:44:13,090
And coming back to education
as well, I think developers

1018
00:44:13,090 --> 00:44:15,840
should learn about the radio and
how it works, this mobile

1019
00:44:15,840 --> 00:44:16,600
radio thing.

1020
00:44:16,600 --> 00:44:18,470
Because we keep complaining
about mobile network being

1021
00:44:18,470 --> 00:44:21,890
slow, unpredictable, so much
latency, variability.

1022
00:44:21,890 --> 00:44:23,800
Once you actually learn
how the basics of

1023
00:44:23,800 --> 00:44:24,790
those things work--

1024
00:44:24,790 --> 00:44:26,720
you probably need to spend a
couple of hours just reading

1025
00:44:26,720 --> 00:44:28,170
about how it works--

1026
00:44:28,170 --> 00:44:31,140
you can actually model most
of these high-latency

1027
00:44:31,140 --> 00:44:32,470
environments really,
really well.

1028
00:44:32,470 --> 00:44:35,440
Anticipate them, and then you
very quickly realize that an

1029
00:44:35,440 --> 00:44:37,450
average thing, like an
average request over

1030
00:44:37,450 --> 00:44:39,200
3G, will take a second.

1031
00:44:39,200 --> 00:44:42,630
That directly tells you
something about how you design

1032
00:44:42,630 --> 00:44:44,600
your application, how you
structure, how your UI works

1033
00:44:44,600 --> 00:44:46,460
and all the rest.

1034
00:44:46,460 --> 00:44:47,160
JAMES PEARCE: Magic wish?

1035
00:44:47,160 --> 00:44:50,330
ILYA GRIGORIK: Magic wish--

1036
00:44:50,330 --> 00:44:55,660
faster than speed of light
travel, because that would

1037
00:44:55,660 --> 00:44:57,120
solve all of our latency
problems.

1038
00:44:57,120 --> 00:44:57,620
JAMES PEARCE: That is magical

1039
00:44:57,620 --> 00:44:58,130
ILYA GRIGORIK: Right.

1040
00:44:58,130 --> 00:44:59,960
That network performance--
solved.

1041
00:44:59,960 --> 00:45:03,700
But I don't think we're
going to get that.

1042
00:45:03,700 --> 00:45:04,160
Yeah.

1043
00:45:04,160 --> 00:45:05,390
JAMES PEARCE: All right,
well, never mind.

1044
00:45:05,390 --> 00:45:07,490
[LAUGHTER]

1045
00:45:07,490 --> 00:45:10,920
ARIYA HIDAYAT: So like what Ilya
said, treat performance

1046
00:45:10,920 --> 00:45:14,460
as a feature, automate
performance measurement, put

1047
00:45:14,460 --> 00:45:17,200
it as part of your development
workflow, CI system, whatever,

1048
00:45:17,200 --> 00:45:20,140
even if it's just a
simple smoke test.

1049
00:45:20,140 --> 00:45:22,650
Create that git precommit hook
that blocks the check-in if

1050
00:45:22,650 --> 00:45:24,948
something gets lower.

1051
00:45:24,948 --> 00:45:25,780
JAMES PEARCE: All right,
and the magic wish?

1052
00:45:25,780 --> 00:45:26,870
ARIYA HIDAYAT: The
magic wish--

1053
00:45:26,870 --> 00:45:28,250
so, more parallelism.

1054
00:45:28,250 --> 00:45:30,980
So the Samsung Galaxy S4
Internet Edition this eight

1055
00:45:30,980 --> 00:45:34,510
core CPU, a big-LITTLE Endian
and a big-LITTLE architecture.

1056
00:45:34,510 --> 00:45:38,330
So I think we're going to see
probably 16 core mobile CPU in

1057
00:45:38,330 --> 00:45:40,350
the near future, so more
parallelism in the browser

1058
00:45:40,350 --> 00:45:41,280
will be very awesome.

1059
00:45:41,280 --> 00:45:43,385
JAMES PEARCE: All right,
that's it.

1060
00:45:43,385 --> 00:45:43,690
We're over.

1061
00:45:43,690 --> 00:45:44,070
That's a wrap.

1062
00:45:44,070 --> 00:45:44,580
Thank you, everyone.

1063
00:45:44,580 --> 00:45:50,580
[APPLAUSE]

1064
00:45:50,580 --> 00:45:57,277

