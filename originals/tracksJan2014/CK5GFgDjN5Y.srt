1
00:00:00,000 --> 00:00:08,109

2
00:00:08,109 --> 00:00:09,130
SAM DUTTON: Welcome.

3
00:00:09,130 --> 00:00:11,610
Welcome to Google
Developers Live.

4
00:00:11,610 --> 00:00:13,970
Yeah, we're going to be talking
today about Encrypted

5
00:00:13,970 --> 00:00:20,020
Media Extensions, which you
might also known as EME.

6
00:00:20,020 --> 00:00:21,440
My name is Sam Dutton.

7
00:00:21,440 --> 00:00:23,880
I'm a developer advocate
for Google Chrome

8
00:00:23,880 --> 00:00:24,980
based here in London.

9
00:00:24,980 --> 00:00:28,060
And I have with me today John
Luther, who is a product

10
00:00:28,060 --> 00:00:30,580
manager for EME, amongst
other things.

11
00:00:30,580 --> 00:00:33,100
JOHN LUTHER: Good afternoon,
good morning, good evening

12
00:00:33,100 --> 00:00:33,550
wherever you are.

13
00:00:33,550 --> 00:00:34,850
SAM DUTTON: Yeah, wherever
you are.

14
00:00:34,850 --> 00:00:36,740
I just wondered if you could
tell us a bit about your

15
00:00:36,740 --> 00:00:37,340
background.

16
00:00:37,340 --> 00:00:39,550
And I know you're working
on a lot of other

17
00:00:39,550 --> 00:00:41,070
stuff as well as EME.

18
00:00:41,070 --> 00:00:42,540
JOHN LUTHER: Yep.

19
00:00:42,540 --> 00:00:43,990
So let's see, my title
is product

20
00:00:43,990 --> 00:00:45,190
manager of Chrome Media.

21
00:00:45,190 --> 00:00:50,020
So right now, I manage all the
video technology in Chrome as

22
00:00:50,020 --> 00:00:53,940
well as the WebM Project, which
is an open media format

23
00:00:53,940 --> 00:00:59,040
people might know as VP8, the
video codec on Vorbis audio.

24
00:00:59,040 --> 00:01:00,320
So anyway, I manage
that stuff.

25
00:01:00,320 --> 00:01:04,060
But my background is primarily
in digital media and

26
00:01:04,060 --> 00:01:06,880
specifically in compression.

27
00:01:06,880 --> 00:01:08,370
I worked for a small
company called On2

28
00:01:08,370 --> 00:01:10,690
Technologies from 2002.

29
00:01:10,690 --> 00:01:16,070
And then in 2010, Google
acquired On2 and open sourced

30
00:01:16,070 --> 00:01:17,495
the VP8 codec that we had.

31
00:01:17,495 --> 00:01:20,200
And that became the
WebM project.

32
00:01:20,200 --> 00:01:26,170
So now WebM is really the first
highest-quality free

33
00:01:26,170 --> 00:01:29,200
media codec available today.

34
00:01:29,200 --> 00:01:30,470
So we're pretty proud of that.

35
00:01:30,470 --> 00:01:33,720
But anyway, yeah, so EME is part
of what we call the video

36
00:01:33,720 --> 00:01:37,210
stack in Chrome, sort of all
the innards that make media

37
00:01:37,210 --> 00:01:40,745
happen, and that's my
responsibility.

38
00:01:40,745 --> 00:01:45,700
SAM DUTTON: We've got all this
video coming to the web.

39
00:01:45,700 --> 00:01:47,010
That's incredible.

40
00:01:47,010 --> 00:01:48,070
How are we going to
cope with that?

41
00:01:48,070 --> 00:01:50,525
How's the web going to cope
with all this video?

42
00:01:50,525 --> 00:01:55,110
JOHN LUTHER: Yeah, there was a
study done by Cisco called the

43
00:01:55,110 --> 00:01:55,790
Zettabyte era.

44
00:01:55,790 --> 00:01:57,160
I think that was last year.

45
00:01:57,160 --> 00:01:58,640
I think they update that
study every year.

46
00:01:58,640 --> 00:02:01,640
But their projection was I think
something like by the

47
00:02:01,640 --> 00:02:06,080
year 2016, some astronomical
percentage of all traffic on

48
00:02:06,080 --> 00:02:07,000
the internet will be video.

49
00:02:07,000 --> 00:02:09,570
It's like 80% or something
like that.

50
00:02:09,570 --> 00:02:11,770
But anyway, yeah, it's
becoming a big issue.

51
00:02:11,770 --> 00:02:15,830
And as we know from YouTube, I
don't even know how many hours

52
00:02:15,830 --> 00:02:18,780
of video per second now come
into YouTube, but it's a lot.

53
00:02:18,780 --> 00:02:22,760
So there's sort of two things
that we're working on.

54
00:02:22,760 --> 00:02:28,030
The first is adaptive streaming,
we think, at least

55
00:02:28,030 --> 00:02:29,600
the quality of service
of this.

56
00:02:29,600 --> 00:02:34,640
So today or shortly, a few
months ago, until we started

57
00:02:34,640 --> 00:02:37,520
deploying all this stuff, a
client getting a video would

58
00:02:37,520 --> 00:02:40,390
be sort of a single stream at
one data rate, meaning there

59
00:02:40,390 --> 00:02:44,520
would be so much data per second
to serve that video.

60
00:02:44,520 --> 00:02:47,930
And as we know, network
conditions vary a lot.

61
00:02:47,930 --> 00:02:50,580
If you ever look at a bandwidth
monitor on your own

62
00:02:50,580 --> 00:02:52,520
machine, your available
bandwidth just

63
00:02:52,520 --> 00:02:54,310
fluctuates all the time.

64
00:02:54,310 --> 00:02:57,010
So adaptive streaming, what we
can do is we can sort of

65
00:02:57,010 --> 00:02:59,850
figure out what your available
bandwidth is at any moment and

66
00:02:59,850 --> 00:03:03,420
serve you the right video stream
at a data rate that's

67
00:03:03,420 --> 00:03:04,540
more appropriate for you.

68
00:03:04,540 --> 00:03:07,460
So as those conditions change,
the data rate will be

69
00:03:07,460 --> 00:03:09,070
going up and down.

70
00:03:09,070 --> 00:03:12,590
So anyway, this is starting
to be deployed on YouTube.

71
00:03:12,590 --> 00:03:16,660
And in Chrome, we have an
Extensions to HTML API that

72
00:03:16,660 --> 00:03:20,290
we've proposed called Media
Source Extensions, which

73
00:03:20,290 --> 00:03:24,190
enables developers to do
this in their web apps.

74
00:03:24,190 --> 00:03:26,730
The other thing that we're
really psyched about is the

75
00:03:26,730 --> 00:03:31,520
VP9 video codec, which is
the successor to VP8.

76
00:03:31,520 --> 00:03:37,090
We finished defining that codec
in June, and now we're

77
00:03:37,090 --> 00:03:39,035
optimizing it and
integrating it.

78
00:03:39,035 --> 00:03:40,100
It's now in Chrome.

79
00:03:40,100 --> 00:03:42,790
It's in the beta channel.

80
00:03:42,790 --> 00:03:46,860
And that, we're seeing
results of--

81
00:03:46,860 --> 00:03:50,380
you're familiar with the
H.264 video codec.

82
00:03:50,380 --> 00:03:53,060
Just sort of as a benchmark,
with VP9, we're seeing quality

83
00:03:53,060 --> 00:03:58,490
about 50% better than the
highest-quality high-profile

84
00:03:58,490 --> 00:04:03,390
H.264, which is their
highest available.

85
00:04:03,390 --> 00:04:07,370
And then there's now an emerging
standard called HEVC.

86
00:04:07,370 --> 00:04:10,940
We're seeing VP9 slightly better
than HEVC, and we're

87
00:04:10,940 --> 00:04:13,600
still going to keep working on
optimizing those things.

88
00:04:13,600 --> 00:04:17,010
So it's pretty exciting.

89
00:04:17,010 --> 00:04:19,529
If you look at that earlier
thing I mentioned, the Cisco

90
00:04:19,529 --> 00:04:22,990
study, and you say, OK, well, we
have this exploding volume

91
00:04:22,990 --> 00:04:24,550
of video on the internet.

92
00:04:24,550 --> 00:04:28,480
If a codec like VP9 can shave
half that off, you just

93
00:04:28,480 --> 00:04:31,320
doubled the size of the
internet in a way.

94
00:04:31,320 --> 00:04:34,640
And it opens more capacity,
because it's just going to

95
00:04:34,640 --> 00:04:35,630
keep growing and growing.

96
00:04:35,630 --> 00:04:37,450
Especially with high definition,
now people are

97
00:04:37,450 --> 00:04:41,890
talking about 4K video, which
is just mind boggling to me.

98
00:04:41,890 --> 00:04:44,880
So anyway, those are two
of the things that

99
00:04:44,880 --> 00:04:45,390
are going to help.

100
00:04:45,390 --> 00:04:47,010
But we're always
looking into--

101
00:04:47,010 --> 00:04:50,760
we're doing research just how
to make the user experience

102
00:04:50,760 --> 00:04:52,170
just better for online video.

103
00:04:52,170 --> 00:04:54,982
That's also one of the missions
of our project.

104
00:04:54,982 --> 00:04:57,900
SAM DUTTON: So going back to
VP8, I know there's been some

105
00:04:57,900 --> 00:05:01,020
work on hardware with VP8.

106
00:05:01,020 --> 00:05:03,742
Just wondering, tell us a little
bit about that, because

107
00:05:03,742 --> 00:05:04,726
I know you've been involved
with some of that.

108
00:05:04,726 --> 00:05:07,810
JOHN LUTHER: Yeah, one of the
virtues that I think I have

109
00:05:07,810 --> 00:05:11,410
from working in this business
so long with video

110
00:05:11,410 --> 00:05:15,130
compression, the hardware, it's
an important part of the

111
00:05:15,130 --> 00:05:16,450
whole ecosystem.

112
00:05:16,450 --> 00:05:19,310
But hardware, as we know, takes
a long time to develop.

113
00:05:19,310 --> 00:05:22,430
So to get a codec from
definition phase to

114
00:05:22,430 --> 00:05:26,130
implementation in software to
hardware, you're typically

115
00:05:26,130 --> 00:05:29,200
talking about a three-year
timeline.

116
00:05:29,200 --> 00:05:30,010
It's a lot.

117
00:05:30,010 --> 00:05:31,260
We think it's too long.

118
00:05:31,260 --> 00:05:37,290
We're trying to do things just
to shorten that time frame.

119
00:05:37,290 --> 00:05:39,470
But what we're starting
to see now is we open

120
00:05:39,470 --> 00:05:41,650
sourced VP8 in 2010.

121
00:05:41,650 --> 00:05:47,690
We launched it at I/O. So now
that three-year period is

122
00:05:47,690 --> 00:05:50,970
beginning to elapse.

123
00:05:50,970 --> 00:05:54,210
The Samsung Chrome Books that
we launched last fall, the

124
00:05:54,210 --> 00:05:57,850
very thin light ones, they have
a Samsung ARM platform in

125
00:05:57,850 --> 00:05:59,950
them that supports
VP8 decoding in

126
00:05:59,950 --> 00:06:00,870
hardware, for example.

127
00:06:00,870 --> 00:06:03,580
The same is true with
the Nexus 10.

128
00:06:03,580 --> 00:06:08,140
The Samsung S4 phone that just
launched has VP8 decoding

129
00:06:08,140 --> 00:06:09,180
hardware in it.

130
00:06:09,180 --> 00:06:12,100
So there's also Qualcomm
and Broadcom.

131
00:06:12,100 --> 00:06:14,970
There's a whole host of these
vendors who are starting to

132
00:06:14,970 --> 00:06:16,910
ship SoCs--

133
00:06:16,910 --> 00:06:17,490
S-O-C--

134
00:06:17,490 --> 00:06:20,170
System-on-Chip that have VP8
decoding block in them.

135
00:06:20,170 --> 00:06:22,530
And encoding blocks are
starting to come, too.

136
00:06:22,530 --> 00:06:24,750
So you're starting to
see that happen.

137
00:06:24,750 --> 00:06:28,540
And with VP9, we've already
been discussing this with

138
00:06:28,540 --> 00:06:32,160
vendors even before it
was strictly defined.

139
00:06:32,160 --> 00:06:33,800
And their response has
been they're very

140
00:06:33,800 --> 00:06:35,760
excited about VP9.

141
00:06:35,760 --> 00:06:37,530
YouTube has a lot of
plans for VP9.

142
00:06:37,530 --> 00:06:41,380
So these are some of the things
that drive the hardware

143
00:06:41,380 --> 00:06:41,960
development.

144
00:06:41,960 --> 00:06:44,820
And we also have a whole team
of engineers in Finland who

145
00:06:44,820 --> 00:06:47,970
their primary work is to design
hardware codecs that

146
00:06:47,970 --> 00:06:49,120
these vendors can implement.

147
00:06:49,120 --> 00:06:51,120
And we license those
free of charge.

148
00:06:51,120 --> 00:06:54,020
So there's all sorts of hardware
things going on.

149
00:06:54,020 --> 00:06:55,020
SAM DUTTON: Some really
interesting stuff

150
00:06:55,020 --> 00:06:56,350
coming out of that.

151
00:06:56,350 --> 00:06:59,940
By the way, we've got
some slides online.

152
00:06:59,940 --> 00:07:05,420
And I'm going to show up on the
screen the slide URL that

153
00:07:05,420 --> 00:07:08,770
can show you some
demos and so on.

154
00:07:08,770 --> 00:07:11,870
If you want to read more about
the VP9, there's great

155
00:07:11,870 --> 00:07:15,180
presentation at Google I/O.
There's a link to it there in

156
00:07:15,180 --> 00:07:17,000
the slides.

157
00:07:17,000 --> 00:07:19,540
And we're talking a bit
about the full screen.

158
00:07:19,540 --> 00:07:22,790
There's a URL for a full
screen demo there.

159
00:07:22,790 --> 00:07:28,200
I just wanted to briefly kind
of show off the Media Source

160
00:07:28,200 --> 00:07:29,290
Extensions stuff.

161
00:07:29,290 --> 00:07:30,445
So if we just go to another--.

162
00:07:30,445 --> 00:07:31,942
JOHN LUTHER: Oh, cool.

163
00:07:31,942 --> 00:07:34,150
SAM DUTTON: I just wanted
to show this in action.

164
00:07:34,150 --> 00:07:36,910
Essentially what's happening
here is we're getting chunks

165
00:07:36,910 --> 00:07:42,150
of video and then playing them
out in a video element here,

166
00:07:42,150 --> 00:07:45,610
so getting the chunks
with JavaScript.

167
00:07:45,610 --> 00:07:47,570
You can kind of see the code
there, a little bit

168
00:07:47,570 --> 00:07:49,690
difficult to get to.

169
00:07:49,690 --> 00:07:52,150
But yeah, check that out.

170
00:07:52,150 --> 00:07:53,400
It's pretty straightforward.

171
00:07:53,400 --> 00:07:57,680
If you want to have a look at
the code for that, that's a

172
00:07:57,680 --> 00:08:00,760
good place to start.

173
00:08:00,760 --> 00:08:05,920
So I really wanted to get
started with just kind of an

174
00:08:05,920 --> 00:08:09,680
overview of what we're doing
with EME, Encrypted Media

175
00:08:09,680 --> 00:08:11,840
Extensions, and getting
back to the topic.

176
00:08:11,840 --> 00:08:13,595
JOHN LUTHER: Well, that's OK.

177
00:08:13,595 --> 00:08:16,760
There's so much going on that
it's hard to keep it all to

178
00:08:16,760 --> 00:08:18,005
one subject.

179
00:08:18,005 --> 00:08:22,180
SAM DUTTON: So EME, Encrypted
Media Extensions, is a

180
00:08:22,180 --> 00:08:27,510
JavaScript API to allow playback
of encrypted media.

181
00:08:27,510 --> 00:08:34,690
Now, this is a W3C proposal
for EME that's been

182
00:08:34,690 --> 00:08:37,159
implemented in Chrome.

183
00:08:37,159 --> 00:08:39,080
And the important thing
is that it extends

184
00:08:39,080 --> 00:08:41,110
the HTML media element.

185
00:08:41,110 --> 00:08:46,680
So in other words, this is an
extension to the functionality

186
00:08:46,680 --> 00:08:51,030
of video and audio elements.

187
00:08:51,030 --> 00:08:55,490
So I guess the first question
that comes into my head is,

188
00:08:55,490 --> 00:08:58,990
what is the problem that we're
trying to solve with this?

189
00:08:58,990 --> 00:09:00,240
JOHN LUTHER: Sure.

190
00:09:00,240 --> 00:09:02,330

191
00:09:02,330 --> 00:09:06,740
HTML5, when I first came to
Google in 2010, and even prior

192
00:09:06,740 --> 00:09:10,490
that, everybody was talking
about HTML5 and getting very

193
00:09:10,490 --> 00:09:11,330
excited about it.

194
00:09:11,330 --> 00:09:15,560
Because there's traditionally
and from my work at On2, we

195
00:09:15,560 --> 00:09:17,060
were involved with
Adobe and Flash.

196
00:09:17,060 --> 00:09:20,910
We had the first what we called
high-quality video

197
00:09:20,910 --> 00:09:23,210
codec in Flash, which
was called VP6.

198
00:09:23,210 --> 00:09:26,190
So as the technologies were
emerging and HTML.5 was coming

199
00:09:26,190 --> 00:09:29,510
on, and the video element,
everybody was very

200
00:09:29,510 --> 00:09:30,090
excited about it.

201
00:09:30,090 --> 00:09:33,610
But once we started talking to
developers and other vendors

202
00:09:33,610 --> 00:09:35,640
and things, they said, well,
yes, it's a very compelling

203
00:09:35,640 --> 00:09:38,290
story, but it's lacking.

204
00:09:38,290 --> 00:09:40,520
In other words, a lot of them
said, we don't want to rely on

205
00:09:40,520 --> 00:09:41,220
these runtimes.

206
00:09:41,220 --> 00:09:43,880
We don't want these mysterious
things that run

207
00:09:43,880 --> 00:09:44,830
in the object tag.

208
00:09:44,830 --> 00:09:46,160
And you might have security
problems.

209
00:09:46,160 --> 00:09:48,420
But at the same time, they
wanted all the functionality

210
00:09:48,420 --> 00:09:49,410
that those things had.

211
00:09:49,410 --> 00:09:50,960
So the things that they thought
were missing were

212
00:09:50,960 --> 00:09:52,870
things like full screen.

213
00:09:52,870 --> 00:09:55,560
For various reasons, there was
no full-screen provision in

214
00:09:55,560 --> 00:09:57,490
the media element.

215
00:09:57,490 --> 00:10:01,610
Adaptive streaming, which you
just showed, that wasn't--

216
00:10:01,610 --> 00:10:04,520
video was almost like the image
tag, just video source

217
00:10:04,520 --> 00:10:06,110
equals that file.

218
00:10:06,110 --> 00:10:08,420
Play this fast, whatever.

219
00:10:08,420 --> 00:10:11,900
And then what a lot of
them said is we want

220
00:10:11,900 --> 00:10:14,350
to serve paid content.

221
00:10:14,350 --> 00:10:18,150
The copyright holders of that
content have certain

222
00:10:18,150 --> 00:10:18,920
conditions.

223
00:10:18,920 --> 00:10:22,750
They're called robustness
requirements that playback

224
00:10:22,750 --> 00:10:25,470
agents, clients, browsers
must satisfy.

225
00:10:25,470 --> 00:10:29,835
So they said, there's
other use cases.

226
00:10:29,835 --> 00:10:32,040
We talked to some people who
wanted to do corporate

227
00:10:32,040 --> 00:10:36,760
training, things that were
private to their company, but

228
00:10:36,760 --> 00:10:38,830
they didn't necessarily
have to lock it down.

229
00:10:38,830 --> 00:10:41,410
They just wanted to do an
encrypted stream using HTML.

230
00:10:41,410 --> 00:10:42,940
So that's something.

231
00:10:42,940 --> 00:10:45,070
This word kept coming up--
encryption, encryption,

232
00:10:45,070 --> 00:10:46,290
encryption.

233
00:10:46,290 --> 00:10:51,810
So we looked into it, and we
said, well, probably the main

234
00:10:51,810 --> 00:10:54,910
HTML spec is not the place
to propose this.

235
00:10:54,910 --> 00:10:57,880
So we proposed the EME spec.

236
00:10:57,880 --> 00:11:01,680
Full screen was proposed
by Mozilla and Google.

237
00:11:01,680 --> 00:11:06,460
And that is now, I
think, a W3C RFC.

238
00:11:06,460 --> 00:11:08,560
It's at standard, basically.

239
00:11:08,560 --> 00:11:08,990
SAM DUTTON: It's widely
implemented.

240
00:11:08,990 --> 00:11:12,360
JOHN LUTHER: So EME, we
collaborated with Microsoft

241
00:11:12,360 --> 00:11:16,700
and Netflix to write that spec
as well as the Media Source

242
00:11:16,700 --> 00:11:22,390
Extensions spec and have
implemented both in Chrome.

243
00:11:22,390 --> 00:11:25,650
Microsoft has implemented them
in IE11, which they've

244
00:11:25,650 --> 00:11:28,610
announced recently.

245
00:11:28,610 --> 00:11:34,790
And so the problem, I guess,
was just bringing the web

246
00:11:34,790 --> 00:11:39,910
platform to feature and
functionality parity with

247
00:11:39,910 --> 00:11:44,140
traditionally plug-ins, more
accurately, runtime plug-ins.

248
00:11:44,140 --> 00:11:46,320
Things that were doing all these
things already, and they

249
00:11:46,320 --> 00:11:47,440
said we need the same

250
00:11:47,440 --> 00:11:48,553
functionality in the web platform.

251
00:11:48,553 --> 00:11:50,640
That's how it all kind
of came together.

252
00:11:50,640 --> 00:11:53,840
SAM DUTTON: OK, so the
technology we have, which is

253
00:11:53,840 --> 00:11:59,810
now in Chrome and not behind a
flag or can be disabled, I

254
00:11:59,810 --> 00:12:01,175
believe, from behind the flag.

255
00:12:01,175 --> 00:12:02,985
JOHN LUTHER: Yep.

256
00:12:02,985 --> 00:12:06,130
SAM DUTTON: Is the technology
codec dependent?

257
00:12:06,130 --> 00:12:11,140
Is it important what codec
we're using with this?

258
00:12:11,140 --> 00:12:16,040
JOHN LUTHER: In Chrome, WebM
is our preferred format, of

259
00:12:16,040 --> 00:12:18,680
course, because it's open.

260
00:12:18,680 --> 00:12:20,300
And we also support H.264.

261
00:12:20,300 --> 00:12:24,630
But the specification itself is
not dependent on any codec.

262
00:12:24,630 --> 00:12:28,740
It's really up to the
implementers, the browser

263
00:12:28,740 --> 00:12:31,240
maker, what codecs they
want to support.

264
00:12:31,240 --> 00:12:34,470
But it's not a determining--

265
00:12:34,470 --> 00:12:39,890
in other words, the video tag
itself that is going to render

266
00:12:39,890 --> 00:12:41,460
the content and decode it.

267
00:12:41,460 --> 00:12:45,260
In other cases, the CDM, which
we can talk about later if you

268
00:12:45,260 --> 00:12:46,380
want, will do that.

269
00:12:46,380 --> 00:12:49,350
But yeah, the short
answer is that it

270
00:12:49,350 --> 00:12:51,230
is not codec dependent.

271
00:12:51,230 --> 00:12:56,470
SAM DUTTON: OK, so I guess kind
of maybe the best way to

272
00:12:56,470 --> 00:13:00,790
begin with this, if we could
go to my slide, I've got a

273
00:13:00,790 --> 00:13:02,970
rather complicated
overview of this.

274
00:13:02,970 --> 00:13:06,810
But I'm going to try and talk
through an overview of this of

275
00:13:06,810 --> 00:13:09,920
how EME works in practice
with the API flow.

276
00:13:09,920 --> 00:13:13,030
And then I can get you to go
into some more detail about

277
00:13:13,030 --> 00:13:18,160
some of this stuff I'd like
to know a bit more about.

278
00:13:18,160 --> 00:13:21,420
Just working through this from
start to finish, imagine you

279
00:13:21,420 --> 00:13:23,780
have a web page, a web
app that has a

280
00:13:23,780 --> 00:13:25,460
video element in it.

281
00:13:25,460 --> 00:13:28,840
And you want to be able to
play some media in that

282
00:13:28,840 --> 00:13:33,550
element, but the media
is encrypted.

283
00:13:33,550 --> 00:13:38,550
So what happens with EME is that
when the video has been

284
00:13:38,550 --> 00:13:43,840
parsed, the browser can detect
that the media is encrypted.

285
00:13:43,840 --> 00:13:46,500
And we'll talk a bit
more about that.

286
00:13:46,500 --> 00:13:48,500
And the browser then
fires what's

287
00:13:48,500 --> 00:13:50,520
called a need-key event.

288
00:13:50,520 --> 00:13:53,080
And once the application--

289
00:13:53,080 --> 00:13:57,340
so your web app with its video
element-- receives that event,

290
00:13:57,340 --> 00:14:01,320
then it can go through the
process of getting a key in

291
00:14:01,320 --> 00:14:05,380
order to interact with
the browser--

292
00:14:05,380 --> 00:14:07,120
and we'll talk about CDMs--

293
00:14:07,120 --> 00:14:10,200
in order to decrypt the video
and play it out again.

294
00:14:10,200 --> 00:14:14,070

295
00:14:14,070 --> 00:14:19,590
So yeah, it's this process of
realizing that media is

296
00:14:19,590 --> 00:14:22,800
encrypted and then getting
a key, getting the media

297
00:14:22,800 --> 00:14:27,305
decrypted, and then playing
it out once that happens.

298
00:14:27,305 --> 00:14:33,040
So if we go to a rather more
complex diagram here, John can

299
00:14:33,040 --> 00:14:36,110
kind of talk us through this
in some more detail.

300
00:14:36,110 --> 00:14:37,550
I have some more questions.

301
00:14:37,550 --> 00:14:40,470
JOHN LUTHER: So this diagram
is showing another--

302
00:14:40,470 --> 00:14:44,670
like I said, there are a bunch
of use cases for encrypted

303
00:14:44,670 --> 00:14:45,870
media in the browser.

304
00:14:45,870 --> 00:14:49,980
And one of them is for paid
content and rights management,

305
00:14:49,980 --> 00:14:52,220
as I mentioned, these
requirements that copyright

306
00:14:52,220 --> 00:14:54,290
holders have to license
the content.

307
00:14:54,290 --> 00:14:59,220
So this is a case of a CDM that
we have created and are

308
00:14:59,220 --> 00:15:03,840
now shipping in Chromebooks,
which is based on Widevine,

309
00:15:03,840 --> 00:15:07,370
which is a company that Google
acquired I think in 2011,

310
00:15:07,370 --> 00:15:08,840
somewhere around there.

311
00:15:08,840 --> 00:15:13,370
So this content decryption
module, these modules have

312
00:15:13,370 --> 00:15:15,900
essentially three functions
in software.

313
00:15:15,900 --> 00:15:17,630
There's the license
acquisition.

314
00:15:17,630 --> 00:15:19,810
SAM DUTTON: So this
is a plug-in.

315
00:15:19,810 --> 00:15:21,320
This is a Pepper plug-in,
in this case.

316
00:15:21,320 --> 00:15:22,460
JOHN LUTHER: In this
case, yeah.

317
00:15:22,460 --> 00:15:27,720
So in software, it also decrypts
the encrypted video,

318
00:15:27,720 --> 00:15:31,990
and then it decodes the
video bit stream.

319
00:15:31,990 --> 00:15:35,350
And then it hands the raw frame
data to the video tag

320
00:15:35,350 --> 00:15:37,350
for display.

321
00:15:37,350 --> 00:15:41,110
Now a CDM doesn't have to do
all three of those things.

322
00:15:41,110 --> 00:15:43,600
For example, if you have
hardware on the device that

323
00:15:43,600 --> 00:15:46,680
can do the decrypting and the
decoding, you can do it there.

324
00:15:46,680 --> 00:15:48,610
There's some other provisions
that you have to do.

325
00:15:48,610 --> 00:15:55,180
But essentially, yes, the CDM's
job is to get a license

326
00:15:55,180 --> 00:15:59,200
with a key to decrypt the video,
do that in an encrypted

327
00:15:59,200 --> 00:16:00,890
manner across the internet,
and then decode

328
00:16:00,890 --> 00:16:02,210
and decrypt the stuff.

329
00:16:02,210 --> 00:16:03,540
That's just basic for that.

330
00:16:03,540 --> 00:16:06,300
SAM DUTTON: So for the
non-video buff in the

331
00:16:06,300 --> 00:16:10,910
audience, one thing I just
wanted to clarify is the kind

332
00:16:10,910 --> 00:16:14,330
of confusing terms, like just
the difference between

333
00:16:14,330 --> 00:16:15,610
decoding and decrypting.

334
00:16:15,610 --> 00:16:15,916
JOHN LUTHER: I know.

335
00:16:15,916 --> 00:16:18,740
I'm sure there are lot of people
out there that think

336
00:16:18,740 --> 00:16:21,510
they're the same thing.

337
00:16:21,510 --> 00:16:27,180
And actually, I have a tendency
to go really nerd on

338
00:16:27,180 --> 00:16:29,960
this stuff, because I worked at
RSA, which is an encryption

339
00:16:29,960 --> 00:16:32,020
company, prior to getting
into video.

340
00:16:32,020 --> 00:16:34,390
So anyway, decrypting.

341
00:16:34,390 --> 00:16:36,970
Encrypting data, you just take
it, and you sort of scramble

342
00:16:36,970 --> 00:16:40,540
it up so that somebody can't use
it or read it unless it's

343
00:16:40,540 --> 00:16:41,450
been descrambled.

344
00:16:41,450 --> 00:16:45,840
So decrypting is the process
of descrambling something

345
00:16:45,840 --> 00:16:49,300
that's been scrambled using
encryption technology.

346
00:16:49,300 --> 00:16:52,400
Decoding is more accurately
called decompression.

347
00:16:52,400 --> 00:16:56,750
So you have a video frame that
has been compressed with a

348
00:16:56,750 --> 00:17:01,900
codec, like VP8, to make it
much more efficient to

349
00:17:01,900 --> 00:17:03,160
transmit over the internet.

350
00:17:03,160 --> 00:17:05,369
Raw video is very big.

351
00:17:05,369 --> 00:17:08,540
Compress it down, transmit it
over a network or an optical

352
00:17:08,540 --> 00:17:09,640
disk, whatever.

353
00:17:09,640 --> 00:17:12,970
To restore it, to show it
to the user, you have to

354
00:17:12,970 --> 00:17:17,099
decompress it, which video
people like me call decoding.

355
00:17:17,099 --> 00:17:20,329
But it's more accurately sort
of like a zip file.

356
00:17:20,329 --> 00:17:22,650
But it works in a slightly
different way.

357
00:17:22,650 --> 00:17:24,150
But you're just restoring
it from a

358
00:17:24,150 --> 00:17:26,180
compressed state back to--

359
00:17:26,180 --> 00:17:27,280
SAM DUTTON: To the full.

360
00:17:27,280 --> 00:17:27,670
JOHN LUTHER: Yeah.

361
00:17:27,670 --> 00:17:29,240
It's not quite it's original.

362
00:17:29,240 --> 00:17:32,010
Because like all compression,
some data has been lost.

363
00:17:32,010 --> 00:17:37,640
But yes, you're restoring it
to the extent that you can

364
00:17:37,640 --> 00:17:38,940
show it to the user.

365
00:17:38,940 --> 00:17:40,600
Anyway, sorry about that.

366
00:17:40,600 --> 00:17:43,460
SAM DUTTON: Two things
that spring to mind.

367
00:17:43,460 --> 00:17:49,280
The first is, how does the
browser know that the content

368
00:17:49,280 --> 00:17:50,870
is encrypted?

369
00:17:50,870 --> 00:17:53,700
JOHN LUTHER: So part of the--

370
00:17:53,700 --> 00:17:58,310
as you said, the parsing, and
again, these terms of art keep

371
00:17:58,310 --> 00:18:00,150
it-- like demuxing.

372
00:18:00,150 --> 00:18:00,990
OK, let's see.

373
00:18:00,990 --> 00:18:02,120
What is this file?

374
00:18:02,120 --> 00:18:03,790
What is its properties?

375
00:18:03,790 --> 00:18:08,650
There would be part of that
header elements, as they're

376
00:18:08,650 --> 00:18:09,860
known in WebM Matroska.

377
00:18:09,860 --> 00:18:13,060
Anyway, say this has
encrypted elements.

378
00:18:13,060 --> 00:18:15,570
This file has some encryption
and it.

379
00:18:15,570 --> 00:18:18,100
And then that's what sort of,
as you mentioned, starts the

380
00:18:18,100 --> 00:18:21,570
whole process with saying to the
Encrypted Media Extensions

381
00:18:21,570 --> 00:18:24,545
implemented in the browser,
we need a key for this.

382
00:18:24,545 --> 00:18:25,410
You know how to do that.

383
00:18:25,410 --> 00:18:27,440
And then also, the Application
Developer.

384
00:18:27,440 --> 00:18:31,510
I should mention that a lot of
this and the reason that we

385
00:18:31,510 --> 00:18:35,790
designed EME and MSE in these
ways is so we want to keep as

386
00:18:35,790 --> 00:18:39,730
much application logic as
possible in the hands of the

387
00:18:39,730 --> 00:18:43,920
developer with JavaScript,
HTML.

388
00:18:43,920 --> 00:18:47,270
Really, we want to keep this
stuff above the browser stack

389
00:18:47,270 --> 00:18:50,190
as much as we can.

390
00:18:50,190 --> 00:18:53,460
So the Application Developer,
you can do all sorts of stuff

391
00:18:53,460 --> 00:18:55,410
once these events start
to get fired.

392
00:18:55,410 --> 00:18:58,630
But that's really what starts
the ball rolling.

393
00:18:58,630 --> 00:18:59,695
This media is encrypted.

394
00:18:59,695 --> 00:19:00,385
SAM DUTTON: I have this
media container.

395
00:19:00,385 --> 00:19:02,190
JOHN LUTHER: We need to get
a key to decrypt it.

396
00:19:02,190 --> 00:19:03,450
SAM DUTTON: Right, right.

397
00:19:03,450 --> 00:19:04,450
JOHN LUTHER: Let's do that.

398
00:19:04,450 --> 00:19:09,320
SAM DUTTON: And from what I
understand, too, you don't

399
00:19:09,320 --> 00:19:13,156
have to encrypt every single
frame of the video, which I

400
00:19:13,156 --> 00:19:13,330
imagine is--

401
00:19:13,330 --> 00:19:16,190
JOHN LUTHER: No, you could.

402
00:19:16,190 --> 00:19:17,650
It can be very granular.

403
00:19:17,650 --> 00:19:21,635
I mean, you could even encrypt
what are called slices of a

404
00:19:21,635 --> 00:19:23,830
video, just specific
parts of a frame.

405
00:19:23,830 --> 00:19:29,140
But if you wanted to do more of
a lightweight approach, you

406
00:19:29,140 --> 00:19:31,880
could just encrypt
the key frames.

407
00:19:31,880 --> 00:19:33,810
And again, this is getting into
the parlance of video.

408
00:19:33,810 --> 00:19:34,330
SAM DUTTON: Yeah, yeah, yeah.

409
00:19:34,330 --> 00:19:38,390
JOHN LUTHER: So in a compressed
video stream, there

410
00:19:38,390 --> 00:19:41,550
are frames that are
the full picture.

411
00:19:41,550 --> 00:19:43,750
And then there are frames
between those that, for the

412
00:19:43,750 --> 00:19:47,160
sake of efficiency, redundant
data has been

413
00:19:47,160 --> 00:19:47,630
removed from them.

414
00:19:47,630 --> 00:19:50,230
So to reconstruct any of those,
they're called inner

415
00:19:50,230 --> 00:19:53,350
frames, frames between key
frames, you have to reference

416
00:19:53,350 --> 00:19:54,320
back to a key frame.

417
00:19:54,320 --> 00:19:54,730
SAM DUTTON: Gotcha.

418
00:19:54,730 --> 00:19:57,780
JOHN LUTHER: So if you encrypt
all those key frames, you have

419
00:19:57,780 --> 00:20:01,280
a very hard time restoring the
inner frames if the key frames

420
00:20:01,280 --> 00:20:02,680
are all encrypted.

421
00:20:02,680 --> 00:20:05,210
I mean, there might
be parts of it.

422
00:20:05,210 --> 00:20:07,260
But yeah, so encrypting the
key frames is an approach.

423
00:20:07,260 --> 00:20:08,510
SAM DUTTON: Depending on how
obsessive you get, I guess.

424
00:20:08,510 --> 00:20:10,235
JOHN LUTHER: Right, yeah.

425
00:20:10,235 --> 00:20:13,660
SAM DUTTON: So looking back
at the diagram of the

426
00:20:13,660 --> 00:20:19,890
architecture, so we've got it
in this case a Widevine CDM,

427
00:20:19,890 --> 00:20:25,250
and we have a Widevine server
for the key process for

428
00:20:25,250 --> 00:20:27,130
getting a key for decryption.

429
00:20:27,130 --> 00:20:29,940
Yeah, could you just talk us
through a little bit about

430
00:20:29,940 --> 00:20:32,550
what the-- in this diagram the
Widevine server is, what

431
00:20:32,550 --> 00:20:33,690
that's doing.

432
00:20:33,690 --> 00:20:36,850
Because I guess there could be
confusion with Widevine, that

433
00:20:36,850 --> 00:20:40,140
we have the Widevine CDM
and then the Widevine

434
00:20:40,140 --> 00:20:41,060
key server as well.

435
00:20:41,060 --> 00:20:44,110
JOHN LUTHER: Yeah, the server is
managing the keys that are

436
00:20:44,110 --> 00:20:48,630
necessary to decrypt
the content.

437
00:20:48,630 --> 00:20:52,110
It depends on implementations,
but that might be one key.

438
00:20:52,110 --> 00:20:54,940
But also, there are other
approaches where you can

439
00:20:54,940 --> 00:20:58,200
change the key every so often
if different sections of the

440
00:20:58,200 --> 00:21:00,540
video can be encrypted
with a different key.

441
00:21:00,540 --> 00:21:06,340
So really, in the case of a
Widevine situation, what

442
00:21:06,340 --> 00:21:09,630
you're really doing is
acquiring a license.

443
00:21:09,630 --> 00:21:13,480
Part of that license is the key
to decrypt the content.

444
00:21:13,480 --> 00:21:15,790
There are other policies
that can be

445
00:21:15,790 --> 00:21:17,800
included in the license.

446
00:21:17,800 --> 00:21:21,640
But primarily, that's the job of
the server, is it knows the

447
00:21:21,640 --> 00:21:24,160
relationship between the
encrypted streams and the keys

448
00:21:24,160 --> 00:21:26,850
that are needed to
decrypt them.

449
00:21:26,850 --> 00:21:28,960
I guess I should clarify
that it doesn't do user

450
00:21:28,960 --> 00:21:29,630
authentication.

451
00:21:29,630 --> 00:21:30,990
That's sometimes what
people think.

452
00:21:30,990 --> 00:21:33,510
Well, it knows who I am.

453
00:21:33,510 --> 00:21:34,710
That's not really true.

454
00:21:34,710 --> 00:21:37,320
We, again, keep everything
above the stack.

455
00:21:37,320 --> 00:21:41,490
We want all user authentication,
the

456
00:21:41,490 --> 00:21:43,790
authorization, those sorts of
things to be handled in the

457
00:21:43,790 --> 00:21:44,420
application.

458
00:21:44,420 --> 00:21:47,420
This is just to get the key.

459
00:21:47,420 --> 00:21:49,150
Again, all of it is--

460
00:21:49,150 --> 00:21:49,780
SAM DUTTON: Single task.

461
00:21:49,780 --> 00:21:50,760
JOHN LUTHER: --get the key.

462
00:21:50,760 --> 00:21:52,580
We need to decrypt this thing.

463
00:21:52,580 --> 00:21:55,560
And in Widevine, that
CDM can enforce

464
00:21:55,560 --> 00:21:57,140
rights management policies.

465
00:21:57,140 --> 00:22:00,800
But really, again, the primary
job is get the key, decrypt

466
00:22:00,800 --> 00:22:01,975
the video, show it
to the user.

467
00:22:01,975 --> 00:22:03,065
SAM DUTTON: Sure.

468
00:22:03,065 --> 00:22:08,390
And the decryption of the video
is actually happening in

469
00:22:08,390 --> 00:22:10,210
the CDM plug-in.

470
00:22:10,210 --> 00:22:12,660
JOHN LUTHER: In the case
of software, yes.

471
00:22:12,660 --> 00:22:18,460
In the case of hardware, and
again, you want to do as much

472
00:22:18,460 --> 00:22:20,890
of this stuff in hardware as
you can, because of the

473
00:22:20,890 --> 00:22:23,180
efficiency.

474
00:22:23,180 --> 00:22:27,800
Battery-powered devices like
tablets and mobile phones, if

475
00:22:27,800 --> 00:22:31,170
you were playing video in
software, it tends to use more

476
00:22:31,170 --> 00:22:34,610
energy from the battery than
doing it in hardware.

477
00:22:34,610 --> 00:22:38,970
As I'm sure our audience knows,
any specific hardware

478
00:22:38,970 --> 00:22:41,210
that does a specific function
is much more efficient to

479
00:22:41,210 --> 00:22:43,340
doing it in software.

480
00:22:43,340 --> 00:22:46,180
But yes, in the case of the
Widevine CDM that is deployed

481
00:22:46,180 --> 00:22:51,460
in Chromebooks and is coming
soon to desktop Chrome and

482
00:22:51,460 --> 00:22:55,390
also Android, it's doing these
things in software.

483
00:22:55,390 --> 00:22:59,980
Our next step is doing as much
of it as we can in hardware.

484
00:22:59,980 --> 00:23:01,650
SAM DUTTON: OK.

485
00:23:01,650 --> 00:23:04,960
From what I understand from
basic implementation of EME,

486
00:23:04,960 --> 00:23:07,580
we have something called
clear key encryption.

487
00:23:07,580 --> 00:23:09,450
Can you just talk
us through that?

488
00:23:09,450 --> 00:23:12,110
What that means at that level?

489
00:23:12,110 --> 00:23:15,920
JOHN LUTHER: Yeah, clear key
means that the key itself is

490
00:23:15,920 --> 00:23:17,170
in clear text.

491
00:23:17,170 --> 00:23:19,720

492
00:23:19,720 --> 00:23:22,850
In other words, the transmission
of that key, the

493
00:23:22,850 --> 00:23:26,490
acquiring of it, is left to
the application, again.

494
00:23:26,490 --> 00:23:31,840
So in the most basic form of
an EME implementation, it's

495
00:23:31,840 --> 00:23:38,490
sort of analogous to encrypted
HLS, the adaptive

496
00:23:38,490 --> 00:23:41,080
specification that Apple
published through--

497
00:23:41,080 --> 00:23:41,920
[INTERPOSING VOICES]

498
00:23:41,920 --> 00:23:44,300
JOHN LUTHER: Yeah, yeah.

499
00:23:44,300 --> 00:23:46,350
It's just an encrypted stream.

500
00:23:46,350 --> 00:23:49,200
All it needs to do is get that
key and start decrypting it.

501
00:23:49,200 --> 00:23:51,420
So in a clear key
implementation, all you're

502
00:23:51,420 --> 00:23:54,280
doing is transmitting that
key in whatever way.

503
00:23:54,280 --> 00:23:56,370
Once it's on the client,
then it can start

504
00:23:56,370 --> 00:23:58,450
decrypting the video.

505
00:23:58,450 --> 00:24:01,670
In other words, it's slightly
different from like a Widevine

506
00:24:01,670 --> 00:24:04,580
CDM scenario where it's not only
getting a key, but it's

507
00:24:04,580 --> 00:24:06,870
also getting a license.

508
00:24:06,870 --> 00:24:09,590
Rights management stuff
comes into it.

509
00:24:09,590 --> 00:24:13,130
Clear key can be done with no
CDM whatsoever, all done in

510
00:24:13,130 --> 00:24:13,700
the browser.

511
00:24:13,700 --> 00:24:15,040
The application gets the key.

512
00:24:15,040 --> 00:24:20,075
It's all 100% done in the
browser, no CDM required.

513
00:24:20,075 --> 00:24:21,740
SAM DUTTON: Right.

514
00:24:21,740 --> 00:24:22,120
Sure.

515
00:24:22,120 --> 00:24:24,710
So kind of the simplest
possible way into a--

516
00:24:24,710 --> 00:24:27,688
JOHN LUTHER: Yeah, there are
use cases for it that--

517
00:24:27,688 --> 00:24:30,070
uh-oh.

518
00:24:30,070 --> 00:24:31,060
You've gone to sleep.

519
00:24:31,060 --> 00:24:32,620
SAM DUTTON: I've gone
to sleep, yeah.

520
00:24:32,620 --> 00:24:33,870
JOHN LUTHER: Yeah.

521
00:24:33,870 --> 00:24:36,180

522
00:24:36,180 --> 00:24:38,120
Again, we talked to people, and
they said they just want

523
00:24:38,120 --> 00:24:42,450
to do some basic encryption like
you can do with encrypted

524
00:24:42,450 --> 00:24:46,600
HLS, like you can do with
RTMPE in Flash.

525
00:24:46,600 --> 00:24:50,060
And that was the simplest use
case and also conveniently the

526
00:24:50,060 --> 00:24:51,862
one that could be done entirely
in the browser with

527
00:24:51,862 --> 00:24:54,090
no reliance on any
other technology.

528
00:24:54,090 --> 00:24:56,250
SAM DUTTON: So to be able
to implement something

529
00:24:56,250 --> 00:24:57,550
and test stuff out.

530
00:24:57,550 --> 00:24:59,080
JOHN LUTHER: Yeah, test stuff
or even production.

531
00:24:59,080 --> 00:25:02,750
There are production use cases
for it, like the corporate

532
00:25:02,750 --> 00:25:07,500
video thing I mentioned
or anything like that.

533
00:25:07,500 --> 00:25:11,260
SAM DUTTON: I think what would
be nice would be to actually

534
00:25:11,260 --> 00:25:15,725
demonstrate EME in action.

535
00:25:15,725 --> 00:25:19,435
Let me just go to there.

536
00:25:19,435 --> 00:25:22,430
That's pretty good
on the desktop.

537
00:25:22,430 --> 00:25:22,890
Nice.

538
00:25:22,890 --> 00:25:27,630
OK, so I guess, John, you can
talk us through what's going

539
00:25:27,630 --> 00:25:28,500
to happen in this.

540
00:25:28,500 --> 00:25:30,965
We can bump up the size
a little bit.

541
00:25:30,965 --> 00:25:35,830
JOHN LUTHER: So this is a demo
that our WebM team put

542
00:25:35,830 --> 00:25:39,390
together, specifically a guy
named Frank Galligan and also

543
00:25:39,390 --> 00:25:43,520
some team members from our
Chrome Media team in Kirkland,

544
00:25:43,520 --> 00:25:44,020
Washington.

545
00:25:44,020 --> 00:25:46,210
So anyway, what is
happening here?

546
00:25:46,210 --> 00:25:51,210
This box, where it says Load MPD
file, that is a manifest

547
00:25:51,210 --> 00:25:53,410
for doing this adaptive
stuff that we--

548
00:25:53,410 --> 00:25:54,740
SAM DUTTON: I think I have
a link to that here.

549
00:25:54,740 --> 00:25:55,080
Hang on.

550
00:25:55,080 --> 00:25:56,780
Let's see if we can see that.

551
00:25:56,780 --> 00:25:58,450
JOHN LUTHER: It might
want to open it in a

552
00:25:58,450 --> 00:25:59,400
text editor down here.

553
00:25:59,400 --> 00:26:00,640
SAM DUTTON: Yeah, thank you.

554
00:26:00,640 --> 00:26:00,940
Yes.

555
00:26:00,940 --> 00:26:06,230
JOHN LUTHER: It's an XML.

556
00:26:06,230 --> 00:26:09,150
This dash, we should
also mention is a--

557
00:26:09,150 --> 00:26:13,370
I think it's now ratified as
a standard through MPEG for

558
00:26:13,370 --> 00:26:16,630
doing adaptive streaming.

559
00:26:16,630 --> 00:26:20,790
So what we've done is with WebM,
we've done a dash-like

560
00:26:20,790 --> 00:26:26,850
implementation, because the dash
spec itself doesn't call

561
00:26:26,850 --> 00:26:30,490
out WebM as a format, but there
is a provision there for

562
00:26:30,490 --> 00:26:31,740
doing formats other than MPEG.

563
00:26:31,740 --> 00:26:35,390

564
00:26:35,390 --> 00:26:38,060
SAM DUTTON: Let's bump that up
so we can see what's going on.

565
00:26:38,060 --> 00:26:40,780
JOHN LUTHER: So this
is XML, as people,

566
00:26:40,780 --> 00:26:41,730
I'm sure, are familiar.

567
00:26:41,730 --> 00:26:45,490
So you're just specifying, OK,
here are the URLs of the

568
00:26:45,490 --> 00:26:47,180
different bit rates of video.

569
00:26:47,180 --> 00:26:54,440
So you give them each IDs and
give a range of where their

570
00:26:54,440 --> 00:27:00,690
indexes are so you can figure
out the index of the file.

571
00:27:00,690 --> 00:27:04,260
And then what this is really
doing, the way that this demo

572
00:27:04,260 --> 00:27:06,250
is doing, is just byte
ranges of the video.

573
00:27:06,250 --> 00:27:11,770
Other adaptive implementations,
like when you

574
00:27:11,770 --> 00:27:14,170
created the content, you
had to physically--

575
00:27:14,170 --> 00:27:16,280
SAM DUTTON: Yeah, I remember
that from the early--

576
00:27:16,280 --> 00:27:17,585
JOHN LUTHER: --10-second
chunks.

577
00:27:17,585 --> 00:27:20,090
SAM DUTTON: Hundreds
of chunks.

578
00:27:20,090 --> 00:27:24,520
JOHN LUTHER: And we talked to
content providers and YouTube

579
00:27:24,520 --> 00:27:27,540
people, and they said, managing
these files is

580
00:27:27,540 --> 00:27:30,030
unbelievably complicated.

581
00:27:30,030 --> 00:27:32,780
SAM DUTTON: So anyway, you
just have one file.

582
00:27:32,780 --> 00:27:35,055
JOHN LUTHER: You just say, OK,
I know the index of it.

583
00:27:35,055 --> 00:27:36,850
And anytime I want to switch--

584
00:27:36,850 --> 00:27:37,400
SAM DUTTON: Now, that's cool.

585
00:27:37,400 --> 00:27:39,470
JOHN LUTHER: --I'll get out
the next byte range.

586
00:27:39,470 --> 00:27:41,980
SAM DUTTON: So what we're seeing
here is a bunch of,

587
00:27:41,980 --> 00:27:45,360
essentially, URLs and byte
ranges of the different

588
00:27:45,360 --> 00:27:46,980
segments of the video.

589
00:27:46,980 --> 00:27:49,220
JOHN LUTHER: Yeah, and it's
saying, OK, so anytime you

590
00:27:49,220 --> 00:27:52,610
want to switch to another--

591
00:27:52,610 --> 00:27:55,370
if we detect or if the
application more accurately

592
00:27:55,370 --> 00:27:59,480
detects that the user's bit
rate has decreased or

593
00:27:59,480 --> 00:28:01,500
available bandwidth is
decreasing, it'll serve them a

594
00:28:01,500 --> 00:28:04,360
lower bit rate.

595
00:28:04,360 --> 00:28:05,910
SAM DUTTON: So let's
light that up.

596
00:28:05,910 --> 00:28:07,380
JOHN LUTHER: You can
zoom it, maybe--

597
00:28:07,380 --> 00:28:08,860
SAM DUTTON: Yeah, OK.

598
00:28:08,860 --> 00:28:09,550
JOHN LUTHER: Because this is--

599
00:28:09,550 --> 00:28:12,125
SAM DUTTON: Hopefully you can
still see that if I make it a

600
00:28:12,125 --> 00:28:14,952
bit bigger.

601
00:28:14,952 --> 00:28:17,210
JOHN LUTHER: So what you're
seeing in these

602
00:28:17,210 --> 00:28:18,840
red bars below here--

603
00:28:18,840 --> 00:28:21,120
and I hope the audience
can see this.

604
00:28:21,120 --> 00:28:24,400
You see these green blocks
as it's playing along.

605
00:28:24,400 --> 00:28:26,760
What that's saying is, OK, the
green means I'm now playing

606
00:28:26,760 --> 00:28:27,760
that data rate.

607
00:28:27,760 --> 00:28:31,550
So it started low, which
typically in an adaptive case

608
00:28:31,550 --> 00:28:34,380
you do, because you always want
to start at the lowest

609
00:28:34,380 --> 00:28:36,560
because you don't really that
much at that point.

610
00:28:36,560 --> 00:28:39,040
But as you learn more about what
the users' bandwidth is

611
00:28:39,040 --> 00:28:41,730
as you go through it,
and if you see here,

612
00:28:41,730 --> 00:28:42,590
you've limited it.

613
00:28:42,590 --> 00:28:44,750
So if you bump that up
or down, either way--

614
00:28:44,750 --> 00:28:47,105
SAM DUTTON: Let's bump it up and
see if we get some more.

615
00:28:47,105 --> 00:28:50,000
JOHN LUTHER: It might have to
wait until there's a next key

616
00:28:50,000 --> 00:28:53,760
frame to bump it up.

617
00:28:53,760 --> 00:28:56,820
Yeah, see now it's starting
to climb up.

618
00:28:56,820 --> 00:29:00,150
Now it's up to 1,488.

619
00:29:00,150 --> 00:29:03,470
So then if you maybe try to--

620
00:29:03,470 --> 00:29:04,380
SAM DUTTON: Take that down.

621
00:29:04,380 --> 00:29:07,900
JOHN LUTHER: --take down
to 300 and see.

622
00:29:07,900 --> 00:29:10,395
SAM DUTTON: Let me
just mute that.

623
00:29:10,395 --> 00:29:11,645
It's slightly noisy.

624
00:29:11,645 --> 00:29:17,730

625
00:29:17,730 --> 00:29:19,970
OK, now we're getting
about 256.

626
00:29:19,970 --> 00:29:22,240
JOHN LUTHER: OK,
is it dropped?

627
00:29:22,240 --> 00:29:23,720
SAM DUTTON: Yeah, it's
dropping now.

628
00:29:23,720 --> 00:29:26,510
JOHN LUTHER: So this is all
being done in the Web App.

629
00:29:26,510 --> 00:29:29,510
None of this is, other than
the MSE, the Media Source

630
00:29:29,510 --> 00:29:32,840
Extensions, which allows, again,
the chunking, which I

631
00:29:32,840 --> 00:29:35,200
should mention can be used for
things other than adaptive

632
00:29:35,200 --> 00:29:37,750
streaming, like nonlinear video
editing in the browser,

633
00:29:37,750 --> 00:29:39,990
all sorts of nifty stuff
you can do with MSE.

634
00:29:39,990 --> 00:29:42,050
SAM DUTTON: OK, sort of like
time shifting and stuff?

635
00:29:42,050 --> 00:29:46,440
JOHN LUTHER: Or anything that
you take a chunk of video and

636
00:29:46,440 --> 00:29:49,120
do something with it, and then
even hold in the buffer and do

637
00:29:49,120 --> 00:29:50,800
something with something else.

638
00:29:50,800 --> 00:29:52,900
Yeah, there's all sorts of
things that can be done with

639
00:29:52,900 --> 00:29:54,060
MSE in addition to this.

640
00:29:54,060 --> 00:29:54,830
So there, now it is.

641
00:29:54,830 --> 00:29:56,950
Now we're back down to 256.

642
00:29:56,950 --> 00:29:59,940
And I don't know if people out
there would be able to see

643
00:29:59,940 --> 00:30:04,410
this, but the quality has
decreased, because you're only

644
00:30:04,410 --> 00:30:05,730
down to 256.

645
00:30:05,730 --> 00:30:07,050
It's still pretty
good, because--

646
00:30:07,050 --> 00:30:08,300
[INTERPOSING VOICES]

647
00:30:08,300 --> 00:30:11,742

648
00:30:11,742 --> 00:30:15,050
JOHN LUTHER: So the practicality
of this is it

649
00:30:15,050 --> 00:30:18,450
enables you to use this same
player, this same quote

650
00:30:18,450 --> 00:30:25,090
application to serve to someone
on a 3G network or

651
00:30:25,090 --> 00:30:27,850
maybe even a 2G network if you
had very low data rates.

652
00:30:27,850 --> 00:30:32,520
But also, the same app is
serving people who might have

653
00:30:32,520 --> 00:30:36,190
a 20 megabit connection or a 40
or whatever or Google Fiber

654
00:30:36,190 --> 00:30:38,740
at home where you can then serve
them a really, really

655
00:30:38,740 --> 00:30:39,310
high quality--

656
00:30:39,310 --> 00:30:41,840
SAM DUTTON: And we get this kind
of seamless shift between

657
00:30:41,840 --> 00:30:44,320
whatever works, depending
on the context.

658
00:30:44,320 --> 00:30:46,700
JOHN LUTHER: It's constantly
figuring out what's

659
00:30:46,700 --> 00:30:49,260
best for the user.

660
00:30:49,260 --> 00:30:51,850
In most cases, you're not going
to have very drastic,

661
00:30:51,850 --> 00:30:54,150
like from 256 bumping
up to 10 megabits.

662
00:30:54,150 --> 00:31:00,090
But it just is able to provide
the user with the best.

663
00:31:00,090 --> 00:31:03,200
Because in video, the higher the
data rate, typically the

664
00:31:03,200 --> 00:31:06,570
better the quality, because
you have more data to work

665
00:31:06,570 --> 00:31:08,565
with from the compressed
streams.

666
00:31:08,565 --> 00:31:09,455
SAM DUTTON: Yeah, yeah.

667
00:31:09,455 --> 00:31:10,790
That's brilliant.

668
00:31:10,790 --> 00:31:15,150
JOHN LUTHER: And this demo is
actually also using the clear

669
00:31:15,150 --> 00:31:16,295
key encryption.

670
00:31:16,295 --> 00:31:17,460
SAM DUTTON: Right, right.

671
00:31:17,460 --> 00:31:21,040
So this is, I guess, a great
place to start if you--

672
00:31:21,040 --> 00:31:22,940
JOHN LUTHER: Yeah, this is
everything rolled into one.

673
00:31:22,940 --> 00:31:23,915
SAM DUTTON: Get your
head around.

674
00:31:23,915 --> 00:31:28,360
JOHN LUTHER: And I think
this one had captions.

675
00:31:28,360 --> 00:31:31,610
SAM DUTTON: We might have gotten
rid of them, yeah.

676
00:31:31,610 --> 00:31:33,970
JOHN LUTHER: It has full screen,
if you want to do--

677
00:31:33,970 --> 00:31:35,490
SAM DUTTON: Yeah.

678
00:31:35,490 --> 00:31:38,480
So we've got nice full-screen
action going on there.

679
00:31:38,480 --> 00:31:39,910
JOHN LUTHER: So this
is all HTML.

680
00:31:39,910 --> 00:31:40,870
SAM DUTTON: I don't know
if we've got a

681
00:31:40,870 --> 00:31:44,125
track element in this.

682
00:31:44,125 --> 00:31:47,710
JOHN LUTHER: This part of the
full-screen API is the

683
00:31:47,710 --> 00:31:51,310
permissions of, OK, it
lets you know you're

684
00:31:51,310 --> 00:31:52,710
now showing the full--

685
00:31:52,710 --> 00:31:57,590
it's taking up all the real
estate of your machine.

686
00:31:57,590 --> 00:32:00,790
My understanding is that's one
of the reasons why there was

687
00:32:00,790 --> 00:32:03,150
no full-screen provision in
the original HTML spec,

688
00:32:03,150 --> 00:32:06,160
because people had security
concerns or something.

689
00:32:06,160 --> 00:32:07,920
But anyway, it's been
solved with--

690
00:32:07,920 --> 00:32:09,330
SAM DUTTON: Yeah, because
you had this explicit

691
00:32:09,330 --> 00:32:10,270
opting-in at the time.

692
00:32:10,270 --> 00:32:12,210
JOHN LUTHER: Yeah, the
full-screen API has

693
00:32:12,210 --> 00:32:13,100
brilliantly solved all those.

694
00:32:13,100 --> 00:32:14,970
SAM DUTTON: You can check out
the example in the slides

695
00:32:14,970 --> 00:32:17,630
actually if people want to
have a look at that.

696
00:32:17,630 --> 00:32:19,400
Yeah, it's a great API.

697
00:32:19,400 --> 00:32:22,940
I'm a fan of this because it
has every aspect covered.

698
00:32:22,940 --> 00:32:26,160
We have events going
full screen and

699
00:32:26,160 --> 00:32:27,580
moving out of full screen.

700
00:32:27,580 --> 00:32:31,210
We have CSS for when an element
is full screen.

701
00:32:31,210 --> 00:32:34,355
We also have this flexibility,
whereby you can full screen an

702
00:32:34,355 --> 00:32:38,850
entire page or a single element,
which is very handy

703
00:32:38,850 --> 00:32:41,310
for a page like this where we
might want a full-screen--

704
00:32:41,310 --> 00:32:42,270
JOHN LUTHER: The video
tag, yeah.

705
00:32:42,270 --> 00:32:43,970
SAM DUTTON: --video
and not just full

706
00:32:43,970 --> 00:32:47,190
screen the entire page.

707
00:32:47,190 --> 00:32:47,700
That's great.

708
00:32:47,700 --> 00:32:51,710
So that's a good place to get
started if people want to look

709
00:32:51,710 --> 00:32:54,050
at the whole world of EME.

710
00:32:54,050 --> 00:32:56,360
JOHN LUTHER: There's
no SWF file there.

711
00:32:56,360 --> 00:32:57,670
It's all HTML.

712
00:32:57,670 --> 00:33:00,330
You right click, View Source,
and you can see everything

713
00:33:00,330 --> 00:33:04,940
that's going on there from
the Media Source Adaptive

714
00:33:04,940 --> 00:33:08,980
Streaming, the clear key
encryption, full screen.

715
00:33:08,980 --> 00:33:11,780
It's all there in plain
text for anybody.

716
00:33:11,780 --> 00:33:13,210
SAM DUTTON: It's good stuff.

717
00:33:13,210 --> 00:33:15,501
It's a nice video, too.

718
00:33:15,501 --> 00:33:18,950
So I've got some links up on the
screen now if people want

719
00:33:18,950 --> 00:33:22,670
to have a look at the Encrypted
Media Extensions

720
00:33:22,670 --> 00:33:28,000
spec and the Media Source
Extensions spec.

721
00:33:28,000 --> 00:33:30,840
That's on the W3C sites there.

722
00:33:30,840 --> 00:33:38,130
Some other links to various bits
and pieces, including the

723
00:33:38,130 --> 00:33:43,580
Media Source Extensions demo
that we showed you earlier on.

724
00:33:43,580 --> 00:33:47,000
There's some demos you might
want to look at there, the

725
00:33:47,000 --> 00:33:48,470
example we just gave.

726
00:33:48,470 --> 00:33:54,720
There's some other stuff using
dash and MSE as well.

727
00:33:54,720 --> 00:33:59,690
And there's the original demo we
had with a blip, blip, blip

728
00:33:59,690 --> 00:34:02,070
from earlier on.

729
00:34:02,070 --> 00:34:03,670
So thank you very much, John.

730
00:34:03,670 --> 00:34:04,640
JOHN LUTHER: You're
very welcome.

731
00:34:04,640 --> 00:34:07,130
SAM DUTTON: We will be, I think,
doing some more of

732
00:34:07,130 --> 00:34:11,710
these GDLs in relation to EME
and keep up to date with the

733
00:34:11,710 --> 00:34:16,400
state of implementations and
talk through some more about

734
00:34:16,400 --> 00:34:19,030
implementing EME in
apps on the web.

735
00:34:19,030 --> 00:34:20,350
JOHN LUTHER: Great, OK.

736
00:34:20,350 --> 00:34:21,100
Thanks very much.

737
00:34:21,100 --> 00:34:22,974
Thank you everybody out there.

738
00:34:22,974 --> 00:34:24,224
SAM DUTTON: Thank you.

739
00:34:24,224 --> 00:34:39,672

