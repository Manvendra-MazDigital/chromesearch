1
00:00:00,000 --> 00:00:01,250
[MUSIC PLAYING - AMBIENT
ELECTRONIC]

2
00:00:01,250 --> 00:05:03,784

3
00:05:03,784 --> 00:05:11,430

4
00:05:11,430 --> 00:05:12,250
Hello, everyone.

5
00:05:12,250 --> 00:05:16,010
Welcome to this installment of
Chrome Apps Office Hours here

6
00:05:16,010 --> 00:05:17,390
on Google Developers Live.

7
00:05:17,390 --> 00:05:18,670
I'm Joe Marini.

8
00:05:18,670 --> 00:05:21,350
I'm the lead developer advocate
here on the Chrome

9
00:05:21,350 --> 00:05:24,040
Apps team, and today we're
going to be talking about

10
00:05:24,040 --> 00:05:28,670
inter-app messaging using Chrome
apps and extensions.

11
00:05:28,670 --> 00:05:31,390
So before I get started, if you
have any questions about

12
00:05:31,390 --> 00:05:34,310
what I'm about to show you today
you can, of course, feel

13
00:05:34,310 --> 00:05:35,620
free to shout them
at your screen.

14
00:05:35,620 --> 00:05:37,680
But if you want the question to
actually be answered, you

15
00:05:37,680 --> 00:05:42,000
should probably post it on our
Google Developers G+ channel

16
00:05:42,000 --> 00:05:45,190
or leave it in the YouTube
comments, and we'll try to get

17
00:05:45,190 --> 00:05:47,970
to as many questions
as we can.

18
00:05:47,970 --> 00:05:49,810
All right, so let's go ahead
and get started.

19
00:05:49,810 --> 00:05:51,940
I'm going to show you a
demo before I actually

20
00:05:51,940 --> 00:05:53,300
jump into some code.

21
00:05:53,300 --> 00:05:56,440
So here I've got my Chrome
browser running.

22
00:05:56,440 --> 00:06:00,270
I'm going to go ahead and open
up a new tab, and I'm going to

23
00:06:00,270 --> 00:06:02,910
start up a couple of sample
apps that I've built.

24
00:06:02,910 --> 00:06:05,550
And actually, before I do that,
if you want to follow

25
00:06:05,550 --> 00:06:09,320
along with me, you're more
than free to do so.

26
00:06:09,320 --> 00:06:11,840
Jump on over to our
GitHub repo.

27
00:06:11,840 --> 00:06:15,220
If you go to the
GoogleChrome/chrome-app-samples

28
00:06:15,220 --> 00:06:19,610
repo here on Git and you scroll
on down, you'll see

29
00:06:19,610 --> 00:06:22,390
this guy right here,
"Messaging." That's the sample

30
00:06:22,390 --> 00:06:24,200
app that I'm going to
be using today.

31
00:06:24,200 --> 00:06:26,700
So you can go ahead and fire
up the code and play along

32
00:06:26,700 --> 00:06:28,740
with me at home if you like.

33
00:06:28,740 --> 00:06:31,310
All right, so back to
the sample apps.

34
00:06:31,310 --> 00:06:32,520
I'm going to scroll down.

35
00:06:32,520 --> 00:06:35,420
Now I have loaded these as
unpacked apps, so these are

36
00:06:35,420 --> 00:06:36,770
not installed from the
Chrome Web Store.

37
00:06:36,770 --> 00:06:38,100
I've just loaded
them unpacked.

38
00:06:38,100 --> 00:06:40,430
So I'm going to start up
Messaging App number one, and

39
00:06:40,430 --> 00:06:42,130
that's this guy right here.

40
00:06:42,130 --> 00:06:44,920
And I'll just move them over so
we can fit both of them on

41
00:06:44,920 --> 00:06:47,470
the screen.

42
00:06:47,470 --> 00:06:49,950
Scale it down just a little,
and now I'll open up the

43
00:06:49,950 --> 00:06:52,670
second one, and that's
Messaging App

44
00:06:52,670 --> 00:06:54,730
number two right here.

45
00:06:54,730 --> 00:06:57,230
OK, so now I've got two
applications open.

46
00:06:57,230 --> 00:07:00,450
So what I'm going to do now
is show these two apps

47
00:07:00,450 --> 00:07:03,890
communicating with each
other by sending

48
00:07:03,890 --> 00:07:05,910
messages to one another.

49
00:07:05,910 --> 00:07:09,150
And the scenario here is that
you've got one or more Chrome

50
00:07:09,150 --> 00:07:12,350
apps that want to communicate
with each other, and you can

51
00:07:12,350 --> 00:07:13,650
do that by sending messages.

52
00:07:13,650 --> 00:07:15,750
And this also works
for extensions.

53
00:07:15,750 --> 00:07:17,330
There's a pretty common
use case.

54
00:07:17,330 --> 00:07:20,370
I've seen questions like this
on the forum or talks I've

55
00:07:20,370 --> 00:07:23,020
given where people say, hey,
I've got an extension,

56
00:07:23,020 --> 00:07:23,750
building a Chrome app.

57
00:07:23,750 --> 00:07:26,260
It would be nice if they could
communicate with each other.

58
00:07:26,260 --> 00:07:28,180
And that's what this feature
allows you to do.

59
00:07:28,180 --> 00:07:32,160
Now just to be clear, this is
not the same thing as opening

60
00:07:32,160 --> 00:07:35,510
a channel from an extension
into a content

61
00:07:35,510 --> 00:07:37,260
script in the web page.

62
00:07:37,260 --> 00:07:40,300
The concept is the same, but the
API is slightly different.

63
00:07:40,300 --> 00:07:43,220
This is about sending
self-contained individual

64
00:07:43,220 --> 00:07:47,280
messages from extensions to apps
or apps to extensions or

65
00:07:47,280 --> 00:07:48,030
apps to apps.

66
00:07:48,030 --> 00:07:52,005
It's not about opening a
long-lived socket-ish port

67
00:07:52,005 --> 00:07:54,940
kind of connection so that
things can communicate.

68
00:07:54,940 --> 00:07:57,830
So with that out of the way,
let me show you the demo.

69
00:07:57,830 --> 00:08:02,450
So back over here in app one,
you can see that it's telling

70
00:08:02,450 --> 00:08:03,690
me what its app ID is.

71
00:08:03,690 --> 00:08:05,540
This is an important part
of the process.

72
00:08:05,540 --> 00:08:08,680
I have to have the ID so that I
know which app I'm going to

73
00:08:08,680 --> 00:08:10,660
be communicating
with and from.

74
00:08:10,660 --> 00:08:14,420
So I'm going to copy that ID
and, over here, I'm going to

75
00:08:14,420 --> 00:08:17,330
paste that ID into
this field here.

76
00:08:17,330 --> 00:08:19,300
And then I'm going to put a
little message in there.

77
00:08:19,300 --> 00:08:23,210
I'm going to say, "Hello app!"
And I'm going to click the

78
00:08:23,210 --> 00:08:25,080
Send button.

79
00:08:25,080 --> 00:08:27,510
And you can see over here in
the first app, I got my

80
00:08:27,510 --> 00:08:30,530
message, and it says, from
this ID I got the

81
00:08:30,530 --> 00:08:31,830
message, hello app.

82
00:08:31,830 --> 00:08:35,630
And in the sending application
it says that I sent the

83
00:08:35,630 --> 00:08:38,429
message, and I got a response
back, and the response is just

84
00:08:38,429 --> 00:08:42,380
some JSON object saying, hey,
the result was, OK, we got

85
00:08:42,380 --> 00:08:43,380
your message.

86
00:08:43,380 --> 00:08:46,060
And now that I've got that
connection open, I can go

87
00:08:46,060 --> 00:08:54,130
ahead and copy this ID, put it
in over here, say, "thanks for

88
00:08:54,130 --> 00:08:59,390
the message," and click Send.

89
00:08:59,390 --> 00:09:01,930
And you can see that I'm sending
messages to and from

90
00:09:01,930 --> 00:09:03,090
each application.

91
00:09:03,090 --> 00:09:05,830
And just to show you that it
works with extensions as well,

92
00:09:05,830 --> 00:09:09,180
I'm going to go over here and
move this out of the way.

93
00:09:09,180 --> 00:09:13,910
And in my Chrome browser, I've
installed the sample extension

94
00:09:13,910 --> 00:09:16,130
that comes along with this code
sample, and you can see

95
00:09:16,130 --> 00:09:18,770
that the UI pretty much
looks the same.

96
00:09:18,770 --> 00:09:21,320
Clearly I'm an engineer, not a
designer, so let's just put

97
00:09:21,320 --> 00:09:22,500
that aside for the moment.

98
00:09:22,500 --> 00:09:25,540
But let's go ahead and send
a message from the

99
00:09:25,540 --> 00:09:27,720
extension to the app.

100
00:09:27,720 --> 00:09:30,400
So you can see here I've got my
extension ID, and we'll use

101
00:09:30,400 --> 00:09:33,020
that in a second when we send
a message to the extension.

102
00:09:33,020 --> 00:09:36,490
But for the current example,
let's go back to Messaging

103
00:09:36,490 --> 00:09:40,030
App1, or Messaging
App2, I guess.

104
00:09:40,030 --> 00:09:45,900
I'm going to copy this ID, I'm
going to go to the extension,

105
00:09:45,900 --> 00:09:51,220
paste the ID in, and send
it a message saying,

106
00:09:51,220 --> 00:09:54,800
hello from the extension.

107
00:09:54,800 --> 00:09:58,310
I'll click Send, and you can
see that it's acknowledging

108
00:09:58,310 --> 00:09:59,550
that the message was sent.

109
00:09:59,550 --> 00:10:02,930
I got a response back saying,
result OK, got your message.

110
00:10:02,930 --> 00:10:04,440
Well, let's see if
it actually did.

111
00:10:04,440 --> 00:10:06,120
Let's go to app two.

112
00:10:06,120 --> 00:10:10,210
And you can see right here it
says, from this ID, hello,

113
00:10:10,210 --> 00:10:11,440
from the extension.

114
00:10:11,440 --> 00:10:14,240
OK, so now let's send a message
to the extension.

115
00:10:14,240 --> 00:10:17,100
So let's go back
to the browser.

116
00:10:17,100 --> 00:10:19,310
I'm going to bring the extension
up, I'm going to

117
00:10:19,310 --> 00:10:26,640
copy its ID, and I'm going to
go back to the app, and this

118
00:10:26,640 --> 00:10:30,090
time I'll paste the
ID in here.

119
00:10:30,090 --> 00:10:36,150
And the message I'll send is,
hello extension from the app,

120
00:10:36,150 --> 00:10:37,450
and I'll click send.

121
00:10:37,450 --> 00:10:40,500
Now, in this particular case,
I've implemented the sample to

122
00:10:40,500 --> 00:10:44,450
show a notification that is
going to pop up in the upper

123
00:10:44,450 --> 00:10:45,430
corner of my screen.

124
00:10:45,430 --> 00:10:48,570
So pay attention, I'm going to
click Send, and you can see

125
00:10:48,570 --> 00:10:50,760
that I've got a little
notification popping up there.

126
00:10:50,760 --> 00:10:53,960
That's the extension
acknowledging that it got the

127
00:10:53,960 --> 00:10:57,860
message and using the
notification's API to display

128
00:10:57,860 --> 00:10:59,210
the message.

129
00:10:59,210 --> 00:11:01,550
All right, so this all
looks fine and great.

130
00:11:01,550 --> 00:11:05,150
Let's jump over to the code to
see how it actually works.

131
00:11:05,150 --> 00:11:08,370
And actually, before I jump to
the code, let me show you

132
00:11:08,370 --> 00:11:10,510
really quickly the API that
we're going to be talking

133
00:11:10,510 --> 00:11:11,480
about today.

134
00:11:11,480 --> 00:11:15,230
So in the documentation for
Chrome apps, if you go to

135
00:11:15,230 --> 00:11:20,240
Developer.Chrome.com/apps, and
I'm going to scroll on down to

136
00:11:20,240 --> 00:11:24,320
the Chrome JavaScript APIs
link right here.

137
00:11:24,320 --> 00:11:25,960
Click on that.

138
00:11:25,960 --> 00:11:29,280
And I'm going to scroll
on down to runtime.

139
00:11:29,280 --> 00:11:30,390
Click on runtime.

140
00:11:30,390 --> 00:11:33,370
So this is the namespace we'll
be using, and we're going to

141
00:11:33,370 --> 00:11:37,480
be using the sendMessage method
right here, and we'll

142
00:11:37,480 --> 00:11:41,070
also be using the
onMessageExternal event.

143
00:11:41,070 --> 00:11:45,270
So let me jump on down to the
sendMessage API, and you can

144
00:11:45,270 --> 00:11:47,810
see that the sendMessage
API is pretty simple.

145
00:11:47,810 --> 00:11:51,250
It takes an extension ID or
well, an app ID as well, and

146
00:11:51,250 --> 00:11:52,870
that's optional.

147
00:11:52,870 --> 00:11:55,240
If you don't provide that, then
the message will simply

148
00:11:55,240 --> 00:11:58,220
go to the origin of whatever
the message was.

149
00:11:58,220 --> 00:12:00,800
Which can be useful, if you want
to just send messages to

150
00:12:00,800 --> 00:12:02,800
yourself, that's fine as well.

151
00:12:02,800 --> 00:12:04,970
But that's where we provide the
string that represents the

152
00:12:04,970 --> 00:12:07,490
ID of the target
of the message.

153
00:12:07,490 --> 00:12:09,690
The message here is the second
parameter, and that can be

154
00:12:09,690 --> 00:12:10,970
pretty much anything.

155
00:12:10,970 --> 00:12:13,760
It has to be a JSON-ifiable
object, and that's usually

156
00:12:13,760 --> 00:12:16,380
what it is, and that's the
demo I'll be showing you.

157
00:12:16,380 --> 00:12:18,640
And then there's an optional
responseCallback.

158
00:12:18,640 --> 00:12:22,610
So if you want to get a response
from the target of

159
00:12:22,610 --> 00:12:25,190
the message, you can fill in
this callback function, and it

160
00:12:25,190 --> 00:12:29,020
will be called when the receiver
of the message calls

161
00:12:29,020 --> 00:12:31,620
a corresponding function saying,
hey I got the message,

162
00:12:31,620 --> 00:12:33,920
and everything seems
to be fine.

163
00:12:33,920 --> 00:12:37,480
All right, so I'm going to jump
over to Sublime, and this

164
00:12:37,480 --> 00:12:38,120
is the sample.

165
00:12:38,120 --> 00:12:40,500
You can see I've opened the
folder up here in Sublime.

166
00:12:40,500 --> 00:12:43,200
So let's take a quick tour
of the source code.

167
00:12:43,200 --> 00:12:46,760
So in app one, and the code for
app one and app two are

168
00:12:46,760 --> 00:12:50,010
pretty much the same, so I'll
just go through one of these.

169
00:12:50,010 --> 00:12:52,910
You can see that here's the
HTML for the UI, pretty

170
00:12:52,910 --> 00:12:54,120
straightforward.

171
00:12:54,120 --> 00:12:56,740
If we look in the manifest file,
you'll notice that there

172
00:12:56,740 --> 00:13:00,500
are no special permissions
needed to take advantage of

173
00:13:00,500 --> 00:13:01,000
this feature.

174
00:13:01,000 --> 00:13:03,570
You can just send messages
all you want.

175
00:13:03,570 --> 00:13:06,760
You don't have to specify any
particular permission for your

176
00:13:06,760 --> 00:13:08,890
app to be able to do this.

177
00:13:08,890 --> 00:13:13,420
In the main.js file, pretty
simple once again, we've got a

178
00:13:13,420 --> 00:13:16,403
launched listener for when our
app launches, sets up the main

179
00:13:16,403 --> 00:13:17,120
app window.

180
00:13:17,120 --> 00:13:22,240
All the magic happens here in
the index.js file for the

181
00:13:22,240 --> 00:13:23,410
application.

182
00:13:23,410 --> 00:13:26,520
So let me scroll down so
you can see the code.

183
00:13:26,520 --> 00:13:30,390
So in the UI, I have a Send
button, and on the Send

184
00:13:30,390 --> 00:13:32,470
button, I'm setting up an event
listener right here to

185
00:13:32,470 --> 00:13:33,550
listen for the click.

186
00:13:33,550 --> 00:13:37,060
And inside the click handler,
all I need to do is call

187
00:13:37,060 --> 00:13:38,310
Chrome.runtime.sendMessage.

188
00:13:38,310 --> 00:13:39,940

189
00:13:39,940 --> 00:13:43,040
And you can see that I've got
that edit field for where the

190
00:13:43,040 --> 00:13:46,160
ID was entered, and so I get
the value of that field,

191
00:13:46,160 --> 00:13:47,700
that's the ID of the target.

192
00:13:47,700 --> 00:13:51,020
And then here's the JSON object
that I'm using to send

193
00:13:51,020 --> 00:13:51,880
the message.

194
00:13:51,880 --> 00:13:53,380
So in this case, I have
a property called

195
00:13:53,380 --> 00:13:56,030
myCustomMessage and whatever
the value of

196
00:13:56,030 --> 00:13:57,600
the text field was--

197
00:13:57,600 --> 00:13:59,880
I can make this as complex
as I like--

198
00:13:59,880 --> 00:14:01,980
and then I've got a
function here for

199
00:14:01,980 --> 00:14:03,910
handling the response.

200
00:14:03,910 --> 00:14:06,450
And all that's doing is just
calling some function I wrote

201
00:14:06,450 --> 00:14:09,260
to stick some HTML into
that div that you see

202
00:14:09,260 --> 00:14:10,460
there on the page.

203
00:14:10,460 --> 00:14:12,740
And that's pretty much how
you send the message.

204
00:14:12,740 --> 00:14:15,220
So you have to know the person
you're sending the message to,

205
00:14:15,220 --> 00:14:17,210
you've got the message you want
to send, and then the

206
00:14:17,210 --> 00:14:19,480
optional response.

207
00:14:19,480 --> 00:14:22,180
Let me scroll down a
little bit more.

208
00:14:22,180 --> 00:14:25,340
OK, here's how the message gets
handled when it comes in.

209
00:14:25,340 --> 00:14:28,710
So again, on the runtime
name space, I have the

210
00:14:28,710 --> 00:14:32,710
onMessageExternal event, and I'm
just adding a listener to

211
00:14:32,710 --> 00:14:33,680
that event.

212
00:14:33,680 --> 00:14:36,970
And the handler function
for this event

213
00:14:36,970 --> 00:14:38,720
does a couple of checks.

214
00:14:38,720 --> 00:14:42,380
First, I've got a variable here
called blacklistedIDs.

215
00:14:42,380 --> 00:14:47,090
So if you have a set of sources
that you know you

216
00:14:47,090 --> 00:14:50,310
don't want to receive messages
from, or, on the other hand,

217
00:14:50,310 --> 00:14:52,130
if you want to just have a list
of known targets that you

218
00:14:52,130 --> 00:14:54,700
want to receive messages from,
you can set that up in advance

219
00:14:54,700 --> 00:14:58,160
and check to see if the ID of
the incoming message is only

220
00:14:58,160 --> 00:14:59,820
one that you want to handle.

221
00:14:59,820 --> 00:15:03,720
So this code is just saying,
hey, is the sender ID inside

222
00:15:03,720 --> 00:15:05,175
this list of blacklisted IDs.

223
00:15:05,175 --> 00:15:07,390
And I could flip this around,
I could do it so that it's

224
00:15:07,390 --> 00:15:10,060
only inside a white-listed
set of IDs.

225
00:15:10,060 --> 00:15:12,870
Then I send the response saying,
hey, sorry I couldn't

226
00:15:12,870 --> 00:15:15,260
process the message.

227
00:15:15,260 --> 00:15:16,930
Go bug somebody else.

228
00:15:16,930 --> 00:15:20,700
Otherwise, I'd check to see if
the incoming request has a

229
00:15:20,700 --> 00:15:23,010
property called myCustomMessage.

230
00:15:23,010 --> 00:15:26,330
So that way, I know that the
message is in a format that I

231
00:15:26,330 --> 00:15:27,760
know how to handle.

232
00:15:27,760 --> 00:15:31,680
And if it is, then all I'm doing
here is calling some

233
00:15:31,680 --> 00:15:36,000
code that just puts some
information inside that result

234
00:15:36,000 --> 00:15:39,190
area that shows the sender
ID and the value

235
00:15:39,190 --> 00:15:40,670
of the custom message.

236
00:15:40,670 --> 00:15:43,500
And then I send back a response
saying, hey, the

237
00:15:43,500 --> 00:15:45,110
result is I got your message.

238
00:15:45,110 --> 00:15:48,230
And you can see that the message
I'm sending back is a

239
00:15:48,230 --> 00:15:49,720
JSON object.

240
00:15:49,720 --> 00:15:51,490
And again, this is optional.

241
00:15:51,490 --> 00:15:54,670
This will be sent back to the
caller when the message

242
00:15:54,670 --> 00:15:56,440
receiving is completed.

243
00:15:56,440 --> 00:15:59,120
Otherwise, if the request coming
in doesn't have the

244
00:15:59,120 --> 00:16:02,730
myCustomMessage property, then
I say, no idea what you're

245
00:16:02,730 --> 00:16:03,270
talking about.

246
00:16:03,270 --> 00:16:05,550
Sorry, you must think
I'm somebody else.

247
00:16:05,550 --> 00:16:08,440
So the handler function takes
in the request, it tells me

248
00:16:08,440 --> 00:16:10,730
who the sender was, and I've
got this little callback

249
00:16:10,730 --> 00:16:13,010
function right here called
sendResponse.

250
00:16:13,010 --> 00:16:15,560
SendResponse is just the
function that sends the

251
00:16:15,560 --> 00:16:18,190
response back to the caller.

252
00:16:18,190 --> 00:16:19,480
All right, let's go ahead
and take a look at

253
00:16:19,480 --> 00:16:20,730
the extension code.

254
00:16:20,730 --> 00:16:22,890

255
00:16:22,890 --> 00:16:25,570
And what you'll notice is that
the extension code is pretty

256
00:16:25,570 --> 00:16:27,350
much the same.

257
00:16:27,350 --> 00:16:29,570
The difference here is that--
well, actually, there's not

258
00:16:29,570 --> 00:16:30,270
much of a difference.

259
00:16:30,270 --> 00:16:33,000
It's basically calling the same
send message function

260
00:16:33,000 --> 00:16:36,480
that the app uses, so
the API is the same.

261
00:16:36,480 --> 00:16:40,060
The only real difference is
that inside the event page

262
00:16:40,060 --> 00:16:43,640
that I have for my extension,
I'm using the WebKit

263
00:16:43,640 --> 00:16:48,420
notifications API to create
a desktop notification

264
00:16:48,420 --> 00:16:51,830
indicating that I received
the incoming message.

265
00:16:51,830 --> 00:16:54,130
And so I've got the same handler
right here on the

266
00:16:54,130 --> 00:16:56,950
runtime namespace, so
add event listener

267
00:16:56,950 --> 00:17:00,380
onMessageExternal, and now I
have a way to communicate

268
00:17:00,380 --> 00:17:04,980
messages both to and from apps
as well as extensions.

269
00:17:04,980 --> 00:17:08,660
Not terrible rocket science,
pretty straightforward, really

270
00:17:08,660 --> 00:17:12,210
easy way for your apps and
extensions to communicate with

271
00:17:12,210 --> 00:17:12,940
each other.

272
00:17:12,940 --> 00:17:15,680
Just one API that you need to
know for sending messages,

273
00:17:15,680 --> 00:17:17,770
just one event handler that
you need to know about for

274
00:17:17,770 --> 00:17:21,030
receiving messages, and it's
pretty straightforward.

275
00:17:21,030 --> 00:17:23,390
So I think if we have any
questions, we can take them

276
00:17:23,390 --> 00:17:27,579
now, otherwise I will see you
again at our next installment

277
00:17:27,579 --> 00:17:29,650
of Chrome Apps Office Hours.

278
00:17:29,650 --> 00:17:33,510
Please feel free to hit us up
on our Google+ G+ channel if

279
00:17:33,510 --> 00:17:34,840
you have any questions.

280
00:17:34,840 --> 00:17:37,590
If you think of any after the
show is over, I monitor the

281
00:17:37,590 --> 00:17:39,670
channel all the time, or you can
hit me up personally, Joe

282
00:17:39,670 --> 00:17:42,860
Marini, also on G+ and I
will see you online.

283
00:17:42,860 --> 00:17:44,090
Thanks very much
for joining me.

284
00:17:44,090 --> 00:17:45,320
Hope you enjoyed this
installment.

285
00:17:45,320 --> 00:17:46,780
Now go out and build some
connected apps.

286
00:17:46,780 --> 00:17:53,080

287
00:17:53,080 --> 00:17:54,330
[MUSIC PLAYING - AMBIENT
ELECTRONIC]

288
00:17:54,330 --> 00:18:48,072

