1
00:00:00,000 --> 00:01:26,749
[MUSIC PLAYING]

2
00:01:26,749 --> 00:01:39,790

3
00:01:39,790 --> 00:01:39,870
BRAD GREEN: Hi.

4
00:01:39,870 --> 00:01:41,000
Good morning, everyone.

5
00:01:41,000 --> 00:01:41,840
I'm Brad Green.

6
00:01:41,840 --> 00:01:45,230
I'm a director here at Google,
and I'm in charge of the

7
00:01:45,230 --> 00:01:47,110
AngularJS project.

8
00:01:47,110 --> 00:01:50,720
Today we're going to be talking
about the MEAN stack.

9
00:01:50,720 --> 00:01:52,770
This is a little bit different
than things I

10
00:01:52,770 --> 00:01:54,070
usually talk about.

11
00:01:54,070 --> 00:01:58,430
Angular is a client-side
templating framework.

12
00:01:58,430 --> 00:02:00,290
But it's not a full picture.

13
00:02:00,290 --> 00:02:03,290
It's only the part that runs
inside the browser.

14
00:02:03,290 --> 00:02:06,450
Today we're going to talk about
the other pieces that

15
00:02:06,450 --> 00:02:08,229
you might select as
the backend--

16
00:02:08,229 --> 00:02:10,830
the server pieces for
your application.

17
00:02:10,830 --> 00:02:16,570
Today I'm joined by Val Karpov
from MongoDB, Ward Bell from

18
00:02:16,570 --> 00:02:17,640
IdeaBlade--

19
00:02:17,640 --> 00:02:19,370
who's going to be talking
BreezeJS--

20
00:02:19,370 --> 00:02:22,020
and then Al Tsang
from StrongLoop.

21
00:02:22,020 --> 00:02:26,280
And we're going to start off
with Val, who coined the term

22
00:02:26,280 --> 00:02:31,170
the "MEAN" stack, and MEAN
standing for Mongo, Express,

23
00:02:31,170 --> 00:02:33,430
AngularJS, and Node.

24
00:02:33,430 --> 00:02:36,980
And Val, would you take us
through a little bit about the

25
00:02:36,980 --> 00:02:41,180
history of how you came to pick
the stack and why you

26
00:02:41,180 --> 00:02:43,565
thought it was a great idea?

27
00:02:43,565 --> 00:02:44,010
VALERI KARPOV: Absolutely.

28
00:02:44,010 --> 00:02:45,960
Thanks, Brad.

29
00:02:45,960 --> 00:02:48,145
Let me just pull up my slide.

30
00:02:48,145 --> 00:02:54,680

31
00:02:54,680 --> 00:02:55,470
Cool.

32
00:02:55,470 --> 00:02:56,170
So hi, guys.

33
00:02:56,170 --> 00:02:57,670
My name is Valeri Karpov.

34
00:02:57,670 --> 00:03:00,580
I'm currently a Kernel Tools
engineer at MongoDB.

35
00:03:00,580 --> 00:03:03,120
And I am the one who originally
coined the MEAN

36
00:03:03,120 --> 00:03:06,215
stack in a blog post on
the official MongoDB

37
00:03:06,215 --> 00:03:08,860
blog back in May.

38
00:03:08,860 --> 00:03:10,900
Here are some links to some of
my other stuff if you're

39
00:03:10,900 --> 00:03:13,000
interested in reading more
about the MEAN stack.

40
00:03:13,000 --> 00:03:15,500
But let's get started.

41
00:03:15,500 --> 00:03:17,780
So a little bit more about me,
just so you all don't think

42
00:03:17,780 --> 00:03:19,710
I'm some random guy
on the internet--

43
00:03:19,710 --> 00:03:21,190
little bit of my back story.

44
00:03:21,190 --> 00:03:25,050
I was originally the CTO of
SCVNGR, now known as LevelUp.

45
00:03:25,050 --> 00:03:27,460
I've been using AngularJS
for a very long time--

46
00:03:27,460 --> 00:03:29,370
since 2010--

47
00:03:29,370 --> 00:03:32,010
mostly because I follow Misko
Hevery who originally wrote

48
00:03:32,010 --> 00:03:34,260
the library [INAUDIBLE] working
very closely because I

49
00:03:34,260 --> 00:03:37,720
was an intern under
him in 2009.

50
00:03:37,720 --> 00:03:41,840
I got started using the MEAN
stack when I was working on

51
00:03:41,840 --> 00:03:45,130
the Ascot Project, which was
a fashion tech startup that

52
00:03:45,130 --> 00:03:47,390
we'll be talking about
a little bit later.

53
00:03:47,390 --> 00:03:49,540
And that startup has
since folded.

54
00:03:49,540 --> 00:03:54,370
I'm currently working for
MongoDB on an internal

55
00:03:54,370 --> 00:03:57,280
continuous integration
project.

56
00:03:57,280 --> 00:03:59,730
So what are we going to
be talking about?

57
00:03:59,730 --> 00:04:03,010
The talk will be about basically
why my team first

58
00:04:03,010 --> 00:04:05,990
started using the MEAN stack for
Ascot Project and why we

59
00:04:05,990 --> 00:04:09,100
ditched Ruby on Rails, why the
MEAN stack is great for

60
00:04:09,100 --> 00:04:12,430
prototyping, and how the MEAN
stack makes automated testing

61
00:04:12,430 --> 00:04:14,430
super easy.

62
00:04:14,430 --> 00:04:19,149
So as Brad mentioned, the MEAN
stacks for MongoDB, ExpressJS,

63
00:04:19,149 --> 00:04:20,769
AngularJS, and NodeJS.

64
00:04:20,769 --> 00:04:24,090
A little bit more about each of
the individual components.

65
00:04:24,090 --> 00:04:26,300
MongoDB is a document
database.

66
00:04:26,300 --> 00:04:31,030
It's to bridge the gap between
a document store like Redis

67
00:04:31,030 --> 00:04:34,260
and a database like your
standard mySQL.

68
00:04:34,260 --> 00:04:37,810
We want to get you the
performance and ease of use of

69
00:04:37,810 --> 00:04:40,330
a document store with
the rich feature

70
00:04:40,330 --> 00:04:42,640
set of an SQL database.

71
00:04:42,640 --> 00:04:46,030
So you can do things like build
indices, use a rich

72
00:04:46,030 --> 00:04:48,930
query language, and
do aggregation.

73
00:04:48,930 --> 00:04:53,450
But what you're storing is
essentially objects.

74
00:04:53,450 --> 00:04:56,000
You're not trying to fit
things into columns.

75
00:04:56,000 --> 00:04:59,870
You're just storing what is
semantically a J file.

76
00:04:59,870 --> 00:05:03,280
ExpressJS is a light web
framework on top of NodeJS

77
00:05:03,280 --> 00:05:06,750
that gives you a bunch of helper
methods to write out

78
00:05:06,750 --> 00:05:11,300
routes and do MVC on the server
without obscuring the

79
00:05:11,300 --> 00:05:13,800
things that make NodeJS
particularly awesome.

80
00:05:13,800 --> 00:05:14,710
AngularJS--

81
00:05:14,710 --> 00:05:16,500
you probably have heard
a lot about it.

82
00:05:16,500 --> 00:05:19,300
I like to describe it as
basically a magical library

83
00:05:19,300 --> 00:05:22,640
that makes everything
client-side super easy.

84
00:05:22,640 --> 00:05:26,820
And NodeJS is an event-driven
IO framework for JavaScript

85
00:05:26,820 --> 00:05:29,030
that runs on the server side.

86
00:05:29,030 --> 00:05:30,960
Essentially letting
you write a very

87
00:05:30,960 --> 00:05:34,310
concurrent server very easily.

88
00:05:34,310 --> 00:05:37,120
So the origins about
the MEAN stack--

89
00:05:37,120 --> 00:05:40,960
the team that I was working on
Ascot Project with was my team

90
00:05:40,960 --> 00:05:45,620
from TigerLabs which is an
incubator program from 2012.

91
00:05:45,620 --> 00:05:47,960
We're working on a project
called TonightLife.

92
00:05:47,960 --> 00:05:50,540
Now, TonightLife was essentially
an events

93
00:05:50,540 --> 00:05:53,220
aggregation framework that
basically showed you cool

94
00:05:53,220 --> 00:05:55,290
events that were coming
up in your area hand

95
00:05:55,290 --> 00:05:57,420
curated by our team.

96
00:05:57,420 --> 00:06:00,740
We had an AngularJS client for
the web, and then we had our

97
00:06:00,740 --> 00:06:03,450
iOS and Android clients
as well.

98
00:06:03,450 --> 00:06:07,700
The Rails backend and the
combination of Angular, iOS,

99
00:06:07,700 --> 00:06:10,810
and Android was not particularly
the best way of

100
00:06:10,810 --> 00:06:11,840
doing this.

101
00:06:11,840 --> 00:06:14,820
We had too many testing tools
and no way of sort of

102
00:06:14,820 --> 00:06:16,920
integrating all of
them together.

103
00:06:16,920 --> 00:06:20,720
So we had a little bit of unit
testing on the server.

104
00:06:20,720 --> 00:06:24,270
We had some unit testing for
Android and iOS clients--

105
00:06:24,270 --> 00:06:26,850
no real unit testing
for Angular.

106
00:06:26,850 --> 00:06:30,060
So all these testing tools
ended up being a mess.

107
00:06:30,060 --> 00:06:32,270
We couldn't test
the integration

108
00:06:32,270 --> 00:06:33,870
between all these tools.

109
00:06:33,870 --> 00:06:38,340
We also had a lot of different
HTTP requests going on.

110
00:06:38,340 --> 00:06:41,460
Every time somebody hit a
route, we would often be

111
00:06:41,460 --> 00:06:45,090
hitting the Facebook API three,
four, five times.

112
00:06:45,090 --> 00:06:47,880
And in order to get that to work
fast, we would have to

113
00:06:47,880 --> 00:06:50,820
make these HTTP requests concur,
basically running at

114
00:06:50,820 --> 00:06:52,910
the same time instead of
blocking the server

115
00:06:52,910 --> 00:06:54,380
while they were out.

116
00:06:54,380 --> 00:06:58,860
But when you start introducing
threads in Rails, or in any

117
00:06:58,860 --> 00:07:02,260
other language, you introduce
extra complexity and you

118
00:07:02,260 --> 00:07:04,340
introduce a lot of
room for bugs.

119
00:07:04,340 --> 00:07:09,340
And we ended up running into
a lot of odd-race missions.

120
00:07:09,340 --> 00:07:12,220
And finally, debugging database
interactions was a

121
00:07:12,220 --> 00:07:13,470
bit of a pain.

122
00:07:13,470 --> 00:07:16,470

123
00:07:16,470 --> 00:07:19,970
We were using ActiveRecord,
which is an ORM--

124
00:07:19,970 --> 00:07:21,740
Object Relational Model--

125
00:07:21,740 --> 00:07:24,770
that took the objects that we
were working with on the

126
00:07:24,770 --> 00:07:29,140
server side and converted them
into a bunch of SQL feeds.

127
00:07:29,140 --> 00:07:33,560
Now, the ORM did its own magic,
so we were not able to

128
00:07:33,560 --> 00:07:37,710
see objects on the client side,
and we couldn't really

129
00:07:37,710 --> 00:07:42,280
see how they would look to the
server and how they would look

130
00:07:42,280 --> 00:07:45,220
in the database after the
ORM was done with it.

131
00:07:45,220 --> 00:07:48,240
And all of this added up to
us having about 2 and 1/2

132
00:07:48,240 --> 00:07:50,910
developers and five different
languages--

133
00:07:50,910 --> 00:07:54,800
SQL, Ruby, Objective-C, Android,
and JavaScript--

134
00:07:54,800 --> 00:07:58,250
that we had sort of juggle
in order to get

135
00:07:58,250 --> 00:07:59,850
our product to work.

136
00:07:59,850 --> 00:08:03,260
So when we decided to fold
TonightLife, we decided that

137
00:08:03,260 --> 00:08:06,570
we needed something different
for our next project.

138
00:08:06,570 --> 00:08:09,090
And that's where the Ascot
Project came in.

139
00:08:09,090 --> 00:08:12,170
We decided that, for the
purposes of building out a

140
00:08:12,170 --> 00:08:16,420
clean, simple product that would
work always, we wanted

141
00:08:16,420 --> 00:08:20,930
to basically build it in one
day and go to AngelHack in

142
00:08:20,930 --> 00:08:25,730
Washington, DC, in
November 2012.

143
00:08:25,730 --> 00:08:31,160
For that, we settled on the
MEAN stack minus Angular.

144
00:08:31,160 --> 00:08:33,179
Part of the reasons behind that
is, one, we wanted to

145
00:08:33,179 --> 00:08:35,030
have a very simple data model.

146
00:08:35,030 --> 00:08:39,679
So Ascot Project's business was
essentially being able to

147
00:08:39,679 --> 00:08:42,990
tag product information
in images.

148
00:08:42,990 --> 00:08:46,970
You would have this overlay that
would show you where this

149
00:08:46,970 --> 00:08:49,670
product was the picture and
where you could buy it.

150
00:08:49,670 --> 00:08:51,615
And then we convert a
billion [INAUDIBLE]

151
00:08:51,615 --> 00:08:54,620
from the [INAUDIBLE].

152
00:08:54,620 --> 00:08:57,740
Now, with MongoDB, we could
easily store this all at one

153
00:08:57,740 --> 00:09:01,020
collection as opposed to having
separate tables for

154
00:09:01,020 --> 00:09:06,160
tags and for products and for
images, which made our lives a

155
00:09:06,160 --> 00:09:07,790
lot easier.

156
00:09:07,790 --> 00:09:09,780
Also, we could do
parallelization much more

157
00:09:09,780 --> 00:09:13,270
effectively with NodeJS simply
because NodeJS is

158
00:09:13,270 --> 00:09:14,560
event-driven.

159
00:09:14,560 --> 00:09:17,740
It's all through callbacks.

160
00:09:17,740 --> 00:09:20,177
So we didn't have to
write any threads.

161
00:09:20,177 --> 00:09:24,130
And on the backend, every time
you saved an image, what we

162
00:09:24,130 --> 00:09:29,420
would do is we would basically
ping out an HTTP request to

163
00:09:29,420 --> 00:09:32,610
several different affiliate link
providers and sort of get

164
00:09:32,610 --> 00:09:35,600
ourselves the best affiliate
link for the particular

165
00:09:35,600 --> 00:09:36,770
[INAUDIBLE].

166
00:09:36,770 --> 00:09:41,720
Originally, we decided to go
without AngularJS because we

167
00:09:41,720 --> 00:09:44,050
had some trouble with it
previously when we were

168
00:09:44,050 --> 00:09:47,220
working on version 0.9.19--

169
00:09:47,220 --> 00:09:50,140
was the one that we were
using for TonightLife.

170
00:09:50,140 --> 00:09:53,142
So we wrote the tagger in
jQuery, and that turned out to

171
00:09:53,142 --> 00:09:55,720
be a terrible, terrible,
terrible idea.

172
00:09:55,720 --> 00:09:59,070
We had about 800 lines of
spaghetti code in jQuery that

173
00:09:59,070 --> 00:10:01,200
we would never be able
to maintain.

174
00:10:01,200 --> 00:10:03,660
So we rewrote in Angular.

175
00:10:03,660 --> 00:10:06,180
It ended up being about
only 80 lines of code.

176
00:10:06,180 --> 00:10:08,380
And we had 100% test
coverage--

177
00:10:08,380 --> 00:10:12,830
or unit test coverage-- on it,
which was absolutely perfect.

178
00:10:12,830 --> 00:10:17,590
So the philosophy of the MEAN
stack and what we believe that

179
00:10:17,590 --> 00:10:19,660
this stack should be able
to help you do.

180
00:10:19,660 --> 00:10:23,730
Ideally, any web stack should
help you prototype--

181
00:10:23,730 --> 00:10:26,780
be able to build your product as
fast as possible and get it

182
00:10:26,780 --> 00:10:28,710
out there into the hands
of your users.

183
00:10:28,710 --> 00:10:32,000
Should be able to test it
automatically so that you

184
00:10:32,000 --> 00:10:36,100
never push legitimately broken
code through-- product will

185
00:10:36,100 --> 00:10:39,400
probably always work
as advertised.

186
00:10:39,400 --> 00:10:40,500
And adapt--

187
00:10:40,500 --> 00:10:43,580
you want to be able to change
quickly, iterate on feedback,

188
00:10:43,580 --> 00:10:46,120
and make your product awesome
for your users.

189
00:10:46,120 --> 00:10:47,220
And then you want the scale.

190
00:10:47,220 --> 00:10:52,940
You want to make sure that you
can both add more machines to

191
00:10:52,940 --> 00:10:56,800
your server deployment easily
and be able to utilize the

192
00:10:56,800 --> 00:10:59,420
resources that you
have as well.

193
00:10:59,420 --> 00:11:01,610
Now what we're going to talk
about in this talk is only the

194
00:11:01,610 --> 00:11:03,040
first two steps.

195
00:11:03,040 --> 00:11:06,350
Because the other two steps will
require a separate talk

196
00:11:06,350 --> 00:11:07,850
all in themselves.

197
00:11:07,850 --> 00:11:10,760
But we're going to talk about
how you can build--

198
00:11:10,760 --> 00:11:14,280
what the MEAN stack gives you
to enable you to build a

199
00:11:14,280 --> 00:11:16,900
usable product very,
very fast.

200
00:11:16,900 --> 00:11:20,060
And then how you can also test
that product so your users

201
00:11:20,060 --> 00:11:21,660
never see your code break.

202
00:11:21,660 --> 00:11:25,150
I will sum this up as, build
fast and don't break things--

203
00:11:25,150 --> 00:11:28,420
sort of the opposite of the
Facebook philosophy of build

204
00:11:28,420 --> 00:11:29,850
fast and break things.

205
00:11:29,850 --> 00:11:32,060
Works well for Facebook because
they have a lot of

206
00:11:32,060 --> 00:11:34,350
users, and everybody uses them,
despite the face that

207
00:11:34,350 --> 00:11:37,380
their code is broken
quite often.

208
00:11:37,380 --> 00:11:40,590
As a small startup, I don't
believe that you can afford--

209
00:11:40,590 --> 00:11:45,080
or as a small new app that
you're trying to get people

210
00:11:45,080 --> 00:11:47,300
within your workplace to use.

211
00:11:47,300 --> 00:11:50,830
You don't want to ship broken
code because you're losing

212
00:11:50,830 --> 00:11:53,230
your users' faith
in your product.

213
00:11:53,230 --> 00:11:55,950
And every time something breaks
when it shouldn't, that

214
00:11:55,950 --> 00:11:57,360
just means people are
less likely to

215
00:11:57,360 --> 00:11:59,140
be using your product.

216
00:11:59,140 --> 00:12:03,890
So let's talk about what enables
you to build fast with

217
00:12:03,890 --> 00:12:05,160
the MEAN stack.

218
00:12:05,160 --> 00:12:08,800
one, it's super easy to set up
on Windows OSX and Linux.

219
00:12:08,800 --> 00:12:11,990
You can check out subguide
on my blog.

220
00:12:11,990 --> 00:12:14,690
All you need to do is install
NodeJS and MongoDB.

221
00:12:14,690 --> 00:12:18,950
And again, I will put this up
SlideShare after this talk, so

222
00:12:18,950 --> 00:12:21,570
don't worry too much about
having to click that link

223
00:12:21,570 --> 00:12:22,810
immediately.

224
00:12:22,810 --> 00:12:25,620
But one of the problems that we
had with Rails is, I don't

225
00:12:25,620 --> 00:12:28,415
know if you guys ever managed
to successfully set up Rails

226
00:12:28,415 --> 00:12:32,060
on Ubuntu, but I spent several
hours one afternoon last

227
00:12:32,060 --> 00:12:33,400
summer doing that.

228
00:12:33,400 --> 00:12:36,700
And I still could never
get it to work.

229
00:12:36,700 --> 00:12:39,480
So thankfully, I
punted on that.

230
00:12:39,480 --> 00:12:43,730
And now I get work done on my
Windows 8 machine, on my

231
00:12:43,730 --> 00:12:46,590
MacBook, and on my multiple
Linux servers.

232
00:12:46,590 --> 00:12:49,150
It works as advertised
on all of them.

233
00:12:49,150 --> 00:12:51,720

234
00:12:51,720 --> 00:12:54,670
The other big advantage of the
MEAN stack is, Since you're

235
00:12:54,670 --> 00:12:57,330
writing the same language,
you're storing the same

236
00:12:57,330 --> 00:12:59,620
objects on all levels.

237
00:12:59,620 --> 00:13:04,430
Now, the dream with NodeJS was
the ability to basically write

238
00:13:04,430 --> 00:13:05,840
your server in the
same language as

239
00:13:05,840 --> 00:13:07,340
you write your clients.

240
00:13:07,340 --> 00:13:12,980
MongoDB adds and sort of
completes that promise.

241
00:13:12,980 --> 00:13:16,200
And it enables you to store
what are semantically JSON

242
00:13:16,200 --> 00:13:21,470
objects into your database and
then query using JSON as well.

243
00:13:21,470 --> 00:13:25,820
So here's a simple example
of how this looks.

244
00:13:25,820 --> 00:13:29,670
This is the MEAN stack
to do repo on GitHub.

245
00:13:29,670 --> 00:13:33,530
I will post a link that
in a later slide.

246
00:13:33,530 --> 00:13:37,980
The UI essentially allows you
to create a task or to-do

247
00:13:37,980 --> 00:13:42,310
similar to what you would
in your Gmail.

248
00:13:42,310 --> 00:13:45,460
So we're going to say I want to
finish my MEAN stack talk,

249
00:13:45,460 --> 00:13:48,680
and it's due on October
3, which is today.

250
00:13:48,680 --> 00:13:50,200
And so Angular--

251
00:13:50,200 --> 00:13:52,100
if you're not entirely
familiar with

252
00:13:52,100 --> 00:13:54,820
how AngularJS works--

253
00:13:54,820 --> 00:13:58,565
the one feature that basically
makes it as magical as it is

254
00:13:58,565 --> 00:14:01,730
is called two-way data bind.

255
00:14:01,730 --> 00:14:05,770
Two-way data binding gives you
the ability to declare an HTML

256
00:14:05,770 --> 00:14:09,410
element and would then attribute
to the HTML element.

257
00:14:09,410 --> 00:14:15,250
Say that the contents of this
particular element should be

258
00:14:15,250 --> 00:14:18,370
tied to this particular
JavaScript variable.

259
00:14:18,370 --> 00:14:20,860
So when the JavaScript variable
changes, the contents

260
00:14:20,860 --> 00:14:22,620
of the HTML element change.

261
00:14:22,620 --> 00:14:25,660
And when the contents of the
HTML element change, like this

262
00:14:25,660 --> 00:14:32,350
text area that you see on your
screen, the JavaScript

263
00:14:32,350 --> 00:14:35,500
variable will change to reflect
the new value as

264
00:14:35,500 --> 00:14:37,360
entered by the user.

265
00:14:37,360 --> 00:14:40,210
So here I just typed in, "Finish
MEAN stack talk,"

266
00:14:40,210 --> 00:14:44,850
clicked on October 3, and my
JSON object has changed to

267
00:14:44,850 --> 00:14:49,330
reflect this particular
state of affairs.

268
00:14:49,330 --> 00:14:54,540
So I have a new to-do-- finish
MEAN stack talk, October 3.

269
00:14:54,540 --> 00:14:58,070
And this dynamic template will
be passed, as is, down to the

270
00:14:58,070 --> 00:15:00,710
database, as we'll see
in the next slide.

271
00:15:00,710 --> 00:15:03,460
So this is some output
from NodeJS.

272
00:15:03,460 --> 00:15:05,700
I've started my Node app
I'm going to get

273
00:15:05,700 --> 00:15:07,440
from the command line.

274
00:15:07,440 --> 00:15:13,570
And when I click be the Add
button in the previous view, I

275
00:15:13,570 --> 00:15:17,960
do a post to todo.json, and
this is the output.

276
00:15:17,960 --> 00:15:20,600
This is some logging output that
shows you the JSON object

277
00:15:20,600 --> 00:15:22,700
that I get on the server side.

278
00:15:22,700 --> 00:15:25,720
And as you can see, the server
has pretty much the same view

279
00:15:25,720 --> 00:15:28,820
of the object as
the client did.

280
00:15:28,820 --> 00:15:30,510
Basically this JSON--

281
00:15:30,510 --> 00:15:34,260
the same yields with the
addition of an underscore ID

282
00:15:34,260 --> 00:15:37,380
field for the convenience of
MongoDB in order to be able to

283
00:15:37,380 --> 00:15:39,160
index on that.

284
00:15:39,160 --> 00:15:43,790
And then, when we save over to
MongoDB, we can pull up the

285
00:15:43,790 --> 00:15:46,950
MongoDB shell, which is actually
legitimately--

286
00:15:46,950 --> 00:15:49,190
you interface with the shell
using JavaScript.

287
00:15:49,190 --> 00:15:52,950
And MongoDB stores what is
technically a superset of

288
00:15:52,950 --> 00:15:55,420
JSON, but when you're dealing
with JavaScript,

289
00:15:55,420 --> 00:15:57,630
it is exactly JSON.

290
00:15:57,630 --> 00:16:03,460
So the MongoDB shell will show
us the exact same object as we

291
00:16:03,460 --> 00:16:06,440
saw on the client with the
addition of an ID and a

292
00:16:06,440 --> 00:16:10,070
double-underscore V, which is
a version number that the

293
00:16:10,070 --> 00:16:13,640
NodeJS layer occasionally
adds.

294
00:16:13,640 --> 00:16:17,480
With MongoDB's dynamic schema,
basically with MongoDB, you

295
00:16:17,480 --> 00:16:21,740
can store anything into
any table or any

296
00:16:21,740 --> 00:16:22,960
collection that you want.

297
00:16:22,960 --> 00:16:23,870
MongoDB calls it--

298
00:16:23,870 --> 00:16:27,380
the equivalent of an SQL
table as a corruption.

299
00:16:27,380 --> 00:16:28,760
There's no need for rake.

300
00:16:28,760 --> 00:16:31,970
All you would need to do to be
able to insert a different

301
00:16:31,970 --> 00:16:34,520
type of object is,
well, nothing.

302
00:16:34,520 --> 00:16:40,810
You could wipe your collection
and then start putting in new

303
00:16:40,810 --> 00:16:43,130
types of objects.

304
00:16:43,130 --> 00:16:46,020
But you don't necessarily
have to.

305
00:16:46,020 --> 00:16:49,330
So what is the advantage
of this?

306
00:16:49,330 --> 00:16:52,100
Unless you're doing server-side
validation, you

307
00:16:52,100 --> 00:16:57,450
only need to change your HTML
to store different data, or

308
00:16:57,450 --> 00:17:00,680
different data types,
in your database.

309
00:17:00,680 --> 00:17:03,540
So if you're going to build
something very fast, and you

310
00:17:03,540 --> 00:17:06,869
don't necessarily care about
doing things like making sure

311
00:17:06,869 --> 00:17:09,319
that the data being inserted
is correct because the only

312
00:17:09,319 --> 00:17:11,740
people that are going to use
data are you and your handful

313
00:17:11,740 --> 00:17:15,460
of selected testers, you don't
necessarily want to waste the

314
00:17:15,460 --> 00:17:20,930
time trying to say, OK, let me
say this column is going to be

315
00:17:20,930 --> 00:17:23,170
a 32-bit integer.

316
00:17:23,170 --> 00:17:24,690
No, it's just a waste.

317
00:17:24,690 --> 00:17:27,690
I want to be able to say, OK,
input type equals number.

318
00:17:27,690 --> 00:17:30,270
Let me add another input
type equals number.

319
00:17:30,270 --> 00:17:32,560
That represents a
different field.

320
00:17:32,560 --> 00:17:36,060
And all of that is going to
passed the server and to the

321
00:17:36,060 --> 00:17:37,830
database as is.

322
00:17:37,830 --> 00:17:42,510
This makes it very, very easy to
write a usable product very

323
00:17:42,510 --> 00:17:48,330
fast and then add service-line
validation and sanity checks

324
00:17:48,330 --> 00:17:50,460
and correctness checks later.

325
00:17:50,460 --> 00:17:55,840
It's also easy to debug because
your database is going

326
00:17:55,840 --> 00:17:59,180
to look exactly the same as
what your client sees.

327
00:17:59,180 --> 00:18:01,065
So you don't have to worry about
mentally translating,

328
00:18:01,065 --> 00:18:04,110
OK, this is how my object
looks in JSON.

329
00:18:04,110 --> 00:18:07,760
This is how it's going to look
in the database in all of

330
00:18:07,760 --> 00:18:09,190
these different columns.

331
00:18:09,190 --> 00:18:11,320
It's going to also lower
the barrier to entry to

332
00:18:11,320 --> 00:18:13,810
understanding your code base
because you're only writing

333
00:18:13,810 --> 00:18:15,620
JavaScript and storing JSON.

334
00:18:15,620 --> 00:18:19,930
You're not going to be writing
SQL queries, writing Ruby on

335
00:18:19,930 --> 00:18:23,660
the server, and then writing
JavaScript from it.

336
00:18:23,660 --> 00:18:25,790
There's a little bit of
a limitation to this.

337
00:18:25,790 --> 00:18:29,760
If you have multiple clients or
don't necessarily serve up

338
00:18:29,760 --> 00:18:33,540
your JavaScript with each page
load, you might have some

339
00:18:33,540 --> 00:18:39,180
difficulties with changing
the underlying routes.

340
00:18:39,180 --> 00:18:42,660
But that's a problem for
after prototyping.

341
00:18:42,660 --> 00:18:44,600
And don't break things--

342
00:18:44,600 --> 00:18:46,720
automated testing makes
life super easy.

343
00:18:46,720 --> 00:18:49,690
And when you only write
JavaScript, you only need a

344
00:18:49,690 --> 00:18:51,170
couple of testing frameworks.

345
00:18:51,170 --> 00:18:54,000
And all of your integration
tests come for free with

346
00:18:54,000 --> 00:18:55,250
angular-scenario.

347
00:18:55,250 --> 00:18:56,950

348
00:18:56,950 --> 00:18:58,310
So Karma--

349
00:18:58,310 --> 00:19:01,670
if you haven't heard of Karma,
it is a phenomenal, phenomenal

350
00:19:01,670 --> 00:19:05,610
test runner that allows you to
basically launch a bunch of

351
00:19:05,610 --> 00:19:09,020
browsers and run all of your
client-side, server-side, and

352
00:19:09,020 --> 00:19:11,530
angular-scenario end-to-end
tests automatically

353
00:19:11,530 --> 00:19:13,470
each time you save.

354
00:19:13,470 --> 00:19:18,115
This makes it very, very easy to
basically just change code

355
00:19:18,115 --> 00:19:21,330
very quickly and make sure
that you haven't broken

356
00:19:21,330 --> 00:19:25,100
anything that is of any
significant importance.

357
00:19:25,100 --> 00:19:28,910
Again, angular-scenario does a
great job of sort of give you

358
00:19:28,910 --> 00:19:34,270
a smoke test of, have I broken
any particular page or flow

359
00:19:34,270 --> 00:19:37,990
that the user depends on.

360
00:19:37,990 --> 00:19:41,760
Nowadays the gold standard of
automated testing is called

361
00:19:41,760 --> 00:19:43,950
continuous integration.

362
00:19:43,950 --> 00:19:46,420
It works in different ways
in different places.

363
00:19:46,420 --> 00:19:48,810
Google has been using continuous
integration, if I

364
00:19:48,810 --> 00:19:53,120
recall, since 2006 or
2007 internally.

365
00:19:53,120 --> 00:19:56,640
However, the way that we like
to do it at MongoDB is for

366
00:19:56,640 --> 00:20:00,350
each commit, you run
a huge suite of

367
00:20:00,350 --> 00:20:03,650
tests on each git commit.

368
00:20:03,650 --> 00:20:06,460
And Karma allows you to
integrate easily with some

369
00:20:06,460 --> 00:20:11,270
existing open source continuous
integration suites

370
00:20:11,270 --> 00:20:14,240
such as Jenkins, Semaphore,
and Travis.

371
00:20:14,240 --> 00:20:16,970
You can find more information
about that off of the

372
00:20:16,970 --> 00:20:19,750
karma-runner.github.io.

373
00:20:19,750 --> 00:20:24,330
So, all in all, this gives the
MEAN stack the advantage that

374
00:20:24,330 --> 00:20:28,740
we can basically build our
code fast, add things as

375
00:20:28,740 --> 00:20:33,320
necessary, and then being able
to automatically test from the

376
00:20:33,320 --> 00:20:33,970
very beginning.

377
00:20:33,970 --> 00:20:36,190
Basically getting the gold
standard of automated

378
00:20:36,190 --> 00:20:38,210
testing-- continuous
integration--

379
00:20:38,210 --> 00:20:41,740
for free right from the start
instead of having

380
00:20:41,740 --> 00:20:44,240
to bake it in later.

381
00:20:44,240 --> 00:20:46,450
So that's all I have.

382
00:20:46,450 --> 00:20:49,200
Thank you guys very much
for listening.

383
00:20:49,200 --> 00:20:52,580
I look forward to hearing the
rest of the guys from

384
00:20:52,580 --> 00:20:54,140
IdeaBlade and StrongLoop
talking now.

385
00:20:54,140 --> 00:20:56,040
So thanks for listening again.

386
00:20:56,040 --> 00:20:57,790
Have a good one.

387
00:20:57,790 --> 00:20:59,730
BRAD GREEN: Val, thanks a lot.

388
00:20:59,730 --> 00:21:03,410
So I'll remind folks who are out
in the audience, we will

389
00:21:03,410 --> 00:21:05,670
probably have some time for
questions at the end.

390
00:21:05,670 --> 00:21:10,640
And there's a link at the top of
the YouTube live page that

391
00:21:10,640 --> 00:21:13,970
you can click on and type a
question or vote on questions

392
00:21:13,970 --> 00:21:15,580
that you see there.

393
00:21:15,580 --> 00:21:19,490
So we're going to move now to
Ward Bell from IdeaBlade to

394
00:21:19,490 --> 00:21:24,510
talk about BreezeJS and its role
in simplifying managing

395
00:21:24,510 --> 00:21:27,120
the data streams that come
from the backend.

396
00:21:27,120 --> 00:21:33,560

397
00:21:33,560 --> 00:21:34,690
WARD BELL: Well that's--

398
00:21:34,690 --> 00:21:35,400
hi.

399
00:21:35,400 --> 00:21:36,000
I'm Ward.

400
00:21:36,000 --> 00:21:40,020
I'm going to flip over
to my screen here.

401
00:21:40,020 --> 00:21:45,110
And I trust that you
are now seeing--

402
00:21:45,110 --> 00:21:46,330
yes, you are.

403
00:21:46,330 --> 00:21:48,480
You are now seeing my screen.

404
00:21:48,480 --> 00:21:54,440
So I'm here to talk about the
MEAN stack as well when it

405
00:21:54,440 --> 00:21:56,960
intersects Breeze.

406
00:21:56,960 --> 00:21:58,310
Hi I'm Ward Bell.

407
00:21:58,310 --> 00:21:59,930
There's my Twitter handle,
and there's my

408
00:21:59,930 --> 00:22:01,920
Breeze Twitter handle.

409
00:22:01,920 --> 00:22:06,345
And I am a founder
of IdeaBlade.

410
00:22:06,345 --> 00:22:09,340
We are a company that helps
people build business

411
00:22:09,340 --> 00:22:10,000
applications--

412
00:22:10,000 --> 00:22:12,350
forms-over-data applications,
mostly.

413
00:22:12,350 --> 00:22:14,990
And we do it with infrastructure
products and

414
00:22:14,990 --> 00:22:17,840
also professional services.

415
00:22:17,840 --> 00:22:23,000
We help train, mentor, and,
in many cases, build the

416
00:22:23,000 --> 00:22:24,250
applications for our clients.

417
00:22:24,250 --> 00:22:26,910

418
00:22:26,910 --> 00:22:28,585
And these days--

419
00:22:28,585 --> 00:22:29,650
did I have that?

420
00:22:29,650 --> 00:22:31,420
Yeah, I'd say that about--

421
00:22:31,420 --> 00:22:33,530
let me back up.

422
00:22:33,530 --> 00:22:35,810
The kinds of applications we're
talking about here with

423
00:22:35,810 --> 00:22:39,790
respect to Angular are single
page applications.

424
00:22:39,790 --> 00:22:43,400
Applications that are written in
HTML and CSS and JavaScript

425
00:22:43,400 --> 00:22:47,580
and are executing predominantly
on the client.

426
00:22:47,580 --> 00:22:50,840
And, in our practice, we're
seeing about 50% of our

427
00:22:50,840 --> 00:22:54,000
current engagements are
building this kind of

428
00:22:54,000 --> 00:22:55,250
application.

429
00:22:55,250 --> 00:22:57,620

430
00:22:57,620 --> 00:23:00,560
You don't want to start from
absolute scratch, so we're

431
00:23:00,560 --> 00:23:05,490
recommending, for a presentation
framework, most

432
00:23:05,490 --> 00:23:06,990
the time, we're recommending
Angular.

433
00:23:06,990 --> 00:23:07,990
That's what people want.

434
00:23:07,990 --> 00:23:11,050
That's where the momentum is,
and we go where they go.

435
00:23:11,050 --> 00:23:15,130
We actually think it's great,
so how nice is that?

436
00:23:15,130 --> 00:23:19,290
And then, for data management,
we're recommending a product

437
00:23:19,290 --> 00:23:22,030
that we've written-- it's open
source-- called Breeze--

438
00:23:22,030 --> 00:23:24,560
BreezeJS.

439
00:23:24,560 --> 00:23:26,350
So here's what I want
to talk about.

440
00:23:26,350 --> 00:23:29,230
I want to talk about why you
might be interested in Breeze

441
00:23:29,230 --> 00:23:31,670
for your Angular application
development.

442
00:23:31,670 --> 00:23:35,180
I'd like to show you how
Breeze works in action.

443
00:23:35,180 --> 00:23:38,739
And then I'd like to show you
Breeze as it relates to the--

444
00:23:38,739 --> 00:24:01,120

445
00:24:01,120 --> 00:24:03,530
Just a minute, folks.

446
00:24:03,530 --> 00:24:03,890
Let's see.

447
00:24:03,890 --> 00:24:05,140
Ward, can we hear you again?

448
00:24:05,140 --> 00:24:09,050

449
00:24:09,050 --> 00:24:09,470
How about that?

450
00:24:09,470 --> 00:24:10,110
Can you hear me now?

451
00:24:10,110 --> 00:24:11,730
BRAD GREEN: Yes, we can.

452
00:24:11,730 --> 00:24:12,780
WARD BELL: OK.

453
00:24:12,780 --> 00:24:15,030
We seem to have lost the screen
share, so let me try

454
00:24:15,030 --> 00:24:16,280
that again.

455
00:24:16,280 --> 00:24:19,760

456
00:24:19,760 --> 00:24:20,650
You are now seeing it.

457
00:24:20,650 --> 00:24:21,160
OK.

458
00:24:21,160 --> 00:24:22,040
I'll pick it up.

459
00:24:22,040 --> 00:24:22,870
BRAD GREEN: Great.

460
00:24:22,870 --> 00:24:25,790
WARD BELL: So I was saying
that Angular is a

461
00:24:25,790 --> 00:24:28,300
presentation framework.

462
00:24:28,300 --> 00:24:31,070
And just a second.

463
00:24:31,070 --> 00:24:36,240

464
00:24:36,240 --> 00:24:39,260
What I mean by that is that it
helps present information to

465
00:24:39,260 --> 00:24:42,650
users and then respond
to their input.

466
00:24:42,650 --> 00:24:44,980
It's a framework to
help you do that.

467
00:24:44,980 --> 00:24:47,470
It's a library to help
you do that.

468
00:24:47,470 --> 00:24:50,640
And that means that you're
focusing on putting

469
00:24:50,640 --> 00:24:54,210
information on the glass, moving
from screen to screen,

470
00:24:54,210 --> 00:24:56,340
binding data to the DOM.

471
00:24:56,340 --> 00:24:59,580
Those are its primary
capabilities.

472
00:24:59,580 --> 00:25:02,370
It has some other supporting
ones, but that's really what

473
00:25:02,370 --> 00:25:04,800
it's about.

474
00:25:04,800 --> 00:25:08,040
And we often talk about the
patterns that are in use--

475
00:25:08,040 --> 00:25:10,810
MVC, MVVM, MV-whatever--

476
00:25:10,810 --> 00:25:13,800
its Model View Controller,
Model View View Model.

477
00:25:13,800 --> 00:25:16,410
But where's the M?

478
00:25:16,410 --> 00:25:19,220
Where's the M-- the model?

479
00:25:19,220 --> 00:25:22,370
And I think, for many people
first approaching their single

480
00:25:22,370 --> 00:25:24,200
page apps, they say, well, you
know, I'll just make a bunch

481
00:25:24,200 --> 00:25:27,630
of Ajax calls, and I'll
bind the results.

482
00:25:27,630 --> 00:25:30,130
And if I that's what I want to
do, I can reach into the

483
00:25:30,130 --> 00:25:33,280
Angular bag and pull out $http,
or I can pull out

484
00:25:33,280 --> 00:25:38,472
$resource if the backend is
written in a REST-y style.

485
00:25:38,472 --> 00:25:42,990
But I want to suggest to you
that this view is incomplete.

486
00:25:42,990 --> 00:25:47,900
Because, business apps anyway,
it's not really a matter of

487
00:25:47,900 --> 00:25:50,790
making an Ajax call and then
grabbing the data and throwing

488
00:25:50,790 --> 00:25:52,710
the data onto the screen.

489
00:25:52,710 --> 00:25:56,536
And I want to put some pressure
on you on this

490
00:25:56,536 --> 00:26:04,330
thought that $http is just a
way to access JSON data.

491
00:26:04,330 --> 00:26:06,620
Now you could come back to me
and say, well, you know, do I

492
00:26:06,620 --> 00:26:07,380
really need any more?

493
00:26:07,380 --> 00:26:09,470
I know I'm going to have
to write some code, but

494
00:26:09,470 --> 00:26:12,760
seriously, what do I
need a library for?

495
00:26:12,760 --> 00:26:15,950
So I want to ask you some
questions about your

496
00:26:15,950 --> 00:26:16,900
application.

497
00:26:16,900 --> 00:26:18,090
I want to ask you--

498
00:26:18,090 --> 00:26:19,820
I'm going to ask you a series
of questions about your

499
00:26:19,820 --> 00:26:20,400
application.

500
00:26:20,400 --> 00:26:22,010
And I'm not going to give you
a chance to answer, but I'm

501
00:26:22,010 --> 00:26:24,200
going to give you a chance
to think about.

502
00:26:24,200 --> 00:26:29,120
So my first thought is, is your
model all one type or

503
00:26:29,120 --> 00:26:30,430
does it involve multiple
types?

504
00:26:30,430 --> 00:26:34,050
I mean, how many times do you
do a Todo application?

505
00:26:34,050 --> 00:26:36,080
I don't write Todo applications,
and businesses

506
00:26:36,080 --> 00:26:37,220
generally don't.

507
00:26:37,220 --> 00:26:40,200
Instead, they tend to write
applications that have

508
00:26:40,200 --> 00:26:41,290
multiple entities.

509
00:26:41,290 --> 00:26:43,730
And these entities--

510
00:26:43,730 --> 00:26:45,160
are they interrelated?

511
00:26:45,160 --> 00:26:47,330
Well, let's take a look at
a really classic one.

512
00:26:47,330 --> 00:26:49,590
You've got customers and orders
and line items and all

513
00:26:49,590 --> 00:26:50,240
that other stuff.

514
00:26:50,240 --> 00:26:53,460
And you expect to be
able to move from

515
00:26:53,460 --> 00:26:56,370
one of those to another.

516
00:26:56,370 --> 00:27:00,710
So when you think about this
complex object graph, how

517
00:27:00,710 --> 00:27:04,050
often do you retrieve that?

518
00:27:04,050 --> 00:27:05,400
How do you retrieve it?

519
00:27:05,400 --> 00:27:07,340
Do you retrieve the whole graph
at once, or do you read

520
00:27:07,340 --> 00:27:08,940
parts of it?

521
00:27:08,940 --> 00:27:11,630
When do you retrieve it?

522
00:27:11,630 --> 00:27:13,910
My impression is that people
don't grab the whole database

523
00:27:13,910 --> 00:27:14,780
and load it at all at once.

524
00:27:14,780 --> 00:27:17,990
So how do you maneuver
around in this?

525
00:27:17,990 --> 00:27:20,460
How do you get from a customer
to an order, from an order to

526
00:27:20,460 --> 00:27:25,150
a line item, over time,
on the client side?

527
00:27:25,150 --> 00:27:28,010
Ask yourself of this data, are
any of the data really, truly

528
00:27:28,010 --> 00:27:31,120
stable during the life
of the session?

529
00:27:31,120 --> 00:27:32,570
Shippers and products
and suppliers

530
00:27:32,570 --> 00:27:33,610
aren't going to change.

531
00:27:33,610 --> 00:27:35,910
Customers, orders, and
line items do.

532
00:27:35,910 --> 00:27:40,810
So should you pre-fetch and
cache these stable items in

533
00:27:40,810 --> 00:27:44,620
order to make your application
perform well?

534
00:27:44,620 --> 00:27:46,390
How are you going to
populate picklists?

535
00:27:46,390 --> 00:27:49,390
How are you going to relate
those picklists to the

536
00:27:49,390 --> 00:27:54,290
customers and orders and line
items that reach to them?

537
00:27:54,290 --> 00:27:57,250
Do you have multiple views
of the same object?

538
00:27:57,250 --> 00:27:59,720
Angular is all about creating
multiple views.

539
00:27:59,720 --> 00:28:02,450
So, for example, if I had two
applications here, I might

540
00:28:02,450 --> 00:28:04,960
have the speaker on one screen
and speaker on another.

541
00:28:04,960 --> 00:28:06,920
Or I might have an editing
screen as well

542
00:28:06,920 --> 00:28:08,390
as a display screen.

543
00:28:08,390 --> 00:28:09,750
Same object.

544
00:28:09,750 --> 00:28:12,680
How do I maintain that object
across screens without making

545
00:28:12,680 --> 00:28:16,770
extra trips to the server?

546
00:28:16,770 --> 00:28:18,430
Do you save all the changes
immediately?

547
00:28:18,430 --> 00:28:21,500
A lot of demos I see, you change
the name and boom, it

548
00:28:21,500 --> 00:28:22,670
gets saved.

549
00:28:22,670 --> 00:28:25,160
That's not the way most business
applications work.

550
00:28:25,160 --> 00:28:28,130
You often have workflows,
and you're accumulating

551
00:28:28,130 --> 00:28:32,300
information before the user's
ready to commit it.

552
00:28:32,300 --> 00:28:34,260
They accumulate changes
during workflows.

553
00:28:34,260 --> 00:28:38,090
So how do you know which
entities are dirty?

554
00:28:38,090 --> 00:28:39,940
How do you know which ones are
going to save when the time

555
00:28:39,940 --> 00:28:40,760
comes to save them?

556
00:28:40,760 --> 00:28:42,010
You can't save everything.

557
00:28:42,010 --> 00:28:44,100

558
00:28:44,100 --> 00:28:45,920
It's also the case that, during
a workflow, you'll have

559
00:28:45,920 --> 00:28:47,690
some inserts, updates
and, deletes.

560
00:28:47,690 --> 00:28:50,830
If you're modifying an order,
you'll probably add some line

561
00:28:50,830 --> 00:28:53,540
items, remove some line items.

562
00:28:53,540 --> 00:28:55,110
You need to do that in
a single transaction.

563
00:28:55,110 --> 00:28:56,540
How do you think
transactionally?

564
00:28:56,540 --> 00:28:57,545
How do you prepare
a transaction

565
00:28:57,545 --> 00:28:59,830
from the client side?

566
00:28:59,830 --> 00:29:02,790
Can the user cancel the changes
when they suddenly

567
00:29:02,790 --> 00:29:03,940
decide that they didn't
want to make those

568
00:29:03,940 --> 00:29:04,850
changes after all?

569
00:29:04,850 --> 00:29:07,120
How do they roll back
to a previous state?

570
00:29:07,120 --> 00:29:10,200
Do you have to make another
trip to the server?

571
00:29:10,200 --> 00:29:12,760
Another question-- do you
validate changes on the client

572
00:29:12,760 --> 00:29:14,760
for a better user experience?

573
00:29:14,760 --> 00:29:16,650
I mean, I realize you have to
validate on the server in

574
00:29:16,650 --> 00:29:19,860
order to make the data integrity
right, but don't you

575
00:29:19,860 --> 00:29:22,905
want to tell the user right
away, before they try and save

576
00:29:22,905 --> 00:29:27,270
it, that there's a problem and
help guide them to a solution?

577
00:29:27,270 --> 00:29:29,750
Do you think of these validation
rules as part of

578
00:29:29,750 --> 00:29:31,700
your business model logic?

579
00:29:31,700 --> 00:29:34,145
I mean, is it true, no matter
what view it is on there, that

580
00:29:34,145 --> 00:29:37,540
that email address
has to be proper?

581
00:29:37,540 --> 00:29:40,110
Well, if they are part of the
business rules, why would you

582
00:29:40,110 --> 00:29:43,140
go around putting business rules
that belong in the model

583
00:29:43,140 --> 00:29:44,760
into your HTML?

584
00:29:44,760 --> 00:29:47,410
Why would go in there in HTML5
and add attributes there?

585
00:29:47,410 --> 00:29:49,120
And how are you going to get
a desire to do that?

586
00:29:49,120 --> 00:29:51,240
And how are you going
to maintain it?

587
00:29:51,240 --> 00:29:53,100
Shouldn't the model
drive that UI?

588
00:29:53,100 --> 00:29:56,610
Shouldn't the model validation
drive what appears on the UI

589
00:29:56,610 --> 00:29:58,305
when there's a validation
violation?

590
00:29:58,305 --> 00:30:01,000

591
00:30:01,000 --> 00:30:02,700
What if the user closes
the browser in the

592
00:30:02,700 --> 00:30:04,220
middle of the work?

593
00:30:04,220 --> 00:30:05,000
Happens all the time.

594
00:30:05,000 --> 00:30:07,750
I go up there, click
something, oops.

595
00:30:07,750 --> 00:30:09,730
Users do that.

596
00:30:09,730 --> 00:30:11,740
What if they had unsaved work?

597
00:30:11,740 --> 00:30:14,110
How would you preserve
it and restore it?

598
00:30:14,110 --> 00:30:16,070
If this is a business
application, not just some

599
00:30:16,070 --> 00:30:18,960
consumer site, they're not
going to be very happy.

600
00:30:18,960 --> 00:30:20,400
They're not going to be very
productive unless you have

601
00:30:20,400 --> 00:30:23,190
some mechanism for doing that.

602
00:30:23,190 --> 00:30:26,110
So I don't think you can find
answers to these questions

603
00:30:26,110 --> 00:30:31,860
just in making Ajax calls
with http or $resource.

604
00:30:31,860 --> 00:30:34,200
But I think you can find
these answers when

605
00:30:34,200 --> 00:30:35,950
you're using Breeze.

606
00:30:35,950 --> 00:30:38,430
And of course you could write
it all yourself--

607
00:30:38,430 --> 00:30:39,780
thousands of lines--

608
00:30:39,780 --> 00:30:42,180
or you might consider using a
library to help you just as

609
00:30:42,180 --> 00:30:44,620
you say to yourself, well, I
could write it all in jQuery,

610
00:30:44,620 --> 00:30:48,320
but I think I'd rather
use Angular.

611
00:30:48,320 --> 00:30:51,530
Let's take a look at an
application briefly that just

612
00:30:51,530 --> 00:30:55,340
does some of the things that
I'm talking about.

613
00:30:55,340 --> 00:31:00,230
It's an application that is--

614
00:31:00,230 --> 00:31:02,200
it's a sample from John Papa.

615
00:31:02,200 --> 00:31:05,020
And it's about come out on his
Pluralsight course on Angular

616
00:31:05,020 --> 00:31:06,190
and Breeze.

617
00:31:06,190 --> 00:31:08,470
And here is in action.

618
00:31:08,470 --> 00:31:10,450
When I load it up--

619
00:31:10,450 --> 00:31:11,260
I'll just start it up.

620
00:31:11,260 --> 00:31:14,450
And there's a bunch of toasts
here telling you

621
00:31:14,450 --> 00:31:17,890
diagnostically what's going on
as it loads at all from--

622
00:31:17,890 --> 00:31:19,330
or loads various parts
of things and

623
00:31:19,330 --> 00:31:20,930
certain things are happening.

624
00:31:20,930 --> 00:31:21,730
I can go in.

625
00:31:21,730 --> 00:31:24,040
And it's really about code camps
and sessions, and you've

626
00:31:24,040 --> 00:31:25,580
all attended conferences
before.

627
00:31:25,580 --> 00:31:28,660
So I can go and have a session,
and I'm going to

628
00:31:28,660 --> 00:31:29,220
another screen.

629
00:31:29,220 --> 00:31:34,800
Notice I'm pivoting around
something that was expressed

630
00:31:34,800 --> 00:31:36,380
this way in one view.

631
00:31:36,380 --> 00:31:37,380
And then I'm going here.

632
00:31:37,380 --> 00:31:39,790
And by the way, I've cached this
data, so I'm restoring it

633
00:31:39,790 --> 00:31:40,330
from cache.

634
00:31:40,330 --> 00:31:42,232
So I don't have to make
another server trip.

635
00:31:42,232 --> 00:31:45,040

636
00:31:45,040 --> 00:31:49,960
If I whack this like this, I'm
getting a response back

637
00:31:49,960 --> 00:31:51,910
telling me that there's
an error here.

638
00:31:51,910 --> 00:31:53,730
Well, that's because I don't
know what the title is.

639
00:31:53,730 --> 00:31:54,250
But, you know what?

640
00:31:54,250 --> 00:31:56,130
Life doesn't stop when I don't
know what the title is.

641
00:31:56,130 --> 00:31:58,710
So I should be able to
go away and continue

642
00:31:58,710 --> 00:32:00,180
working on other things.

643
00:32:00,180 --> 00:32:02,020
Well, but if I go back
in, I want to know

644
00:32:02,020 --> 00:32:04,220
exactly where I was.

645
00:32:04,220 --> 00:32:07,820
That's because I'm keeping a
work in progress, which will

646
00:32:07,820 --> 00:32:11,610
help me navigate back
to the ones that I

647
00:32:11,610 --> 00:32:13,190
was working on before.

648
00:32:13,190 --> 00:32:15,560
And that work in progress
could, as it is in this

649
00:32:15,560 --> 00:32:19,290
example, be stored in local
storage, so that, were I to

650
00:32:19,290 --> 00:32:20,670
close this, and I'm
not going to.

651
00:32:20,670 --> 00:32:25,740
Instead I will do is I will go
back to sessions, and I will

652
00:32:25,740 --> 00:32:29,660
rerun the thing and say let's
pick up where I left off.

653
00:32:29,660 --> 00:32:31,830
That's kind of the equivalent
of closing the browser.

654
00:32:31,830 --> 00:32:32,790
There it is.

655
00:32:32,790 --> 00:32:33,550
Aha.

656
00:32:33,550 --> 00:32:34,360
I'm working on it.

657
00:32:34,360 --> 00:32:37,000
And now I'm working
on that session.

658
00:32:37,000 --> 00:32:40,050
So you see just some of the
kinds of things that I was

659
00:32:40,050 --> 00:32:43,012
talking about in there.

660
00:32:43,012 --> 00:32:45,790

661
00:32:45,790 --> 00:32:47,040
Let me go back.

662
00:32:47,040 --> 00:32:51,180

663
00:32:51,180 --> 00:32:53,400
So the thing I just showed you,
which is a code camp or

664
00:32:53,400 --> 00:32:56,200
sample, and will be available
on Pluralsight--

665
00:32:56,200 --> 00:32:57,760
great course--

666
00:32:57,760 --> 00:33:02,770
is an Angular app, but it's
backed by a SQL database.

667
00:33:02,770 --> 00:33:07,260
I want to show you, because
we're talking about the MEAN

668
00:33:07,260 --> 00:33:09,930
stack and Mongo and Node and
Express, I want to show you

669
00:33:09,930 --> 00:33:10,780
another application--

670
00:33:10,780 --> 00:33:12,500
also an Angular application--

671
00:33:12,500 --> 00:33:18,310
that is written to
talk to Mongo.

672
00:33:18,310 --> 00:33:20,850
And let me find that.

673
00:33:20,850 --> 00:33:22,100
That's right up here.

674
00:33:22,100 --> 00:33:24,640

675
00:33:24,640 --> 00:33:25,890
Wrong one.

676
00:33:25,890 --> 00:33:29,170

677
00:33:29,170 --> 00:33:31,780
You can actually get the sample
I'm about to show you

678
00:33:31,780 --> 00:33:33,370
from our Breeze sample site.

679
00:33:33,370 --> 00:33:34,410
And here it is.

680
00:33:34,410 --> 00:33:38,380
Here is Zza, our pizza place.

681
00:33:38,380 --> 00:33:41,540
And we can go and
order a pizza.

682
00:33:41,540 --> 00:33:43,560
Maybe I want to make my own.

683
00:33:43,560 --> 00:33:46,480
I'll pick a price for it,
and maybe I want to pick

684
00:33:46,480 --> 00:33:51,500
my sauce and meat.

685
00:33:51,500 --> 00:33:53,960
And I know I want to have some
salad with it, so I'll come

686
00:33:53,960 --> 00:33:57,020
over here, and I've got that.

687
00:33:57,020 --> 00:33:59,700
And maybe I'll go back, and
I'll add it to my cart.

688
00:33:59,700 --> 00:34:01,380
And I can look at my cart.

689
00:34:01,380 --> 00:34:01,680
OK.

690
00:34:01,680 --> 00:34:04,860
So this has that kind of
Angular, move around on the

691
00:34:04,860 --> 00:34:09,520
screen kind of thing, navigate
back and forth, keep track of

692
00:34:09,520 --> 00:34:13,550
your stuff, do validations, make
selections, and all that

693
00:34:13,550 --> 00:34:14,290
kind of thing

694
00:34:14,290 --> 00:34:16,800
Looks just like--

695
00:34:16,800 --> 00:34:19,590
it could as easily have been
written against a SQL database

696
00:34:19,590 --> 00:34:23,130
in which you could imagine with
the underlying parts are.

697
00:34:23,130 --> 00:34:25,400
And in fact, there is a version
of this application

698
00:34:25,400 --> 00:34:27,610
that does run against
a SQL database.

699
00:34:27,610 --> 00:34:30,100
But this one is running
against Mongo.

700
00:34:30,100 --> 00:34:32,969
And I want to show you a little
bit about what the

701
00:34:32,969 --> 00:34:34,905
implications of that are.

702
00:34:34,905 --> 00:34:37,203
Hold a second while
I control--

703
00:34:37,203 --> 00:34:42,989

704
00:34:42,989 --> 00:34:44,020
that's where that is.

705
00:34:44,020 --> 00:34:48,210
So if the data that you had just
seen there about-- that

706
00:34:48,210 --> 00:34:50,409
were driving the
pizza parlor--

707
00:34:50,409 --> 00:34:55,909
were represented in SQL, you
would see individual tables

708
00:34:55,909 --> 00:34:56,679
for each of the items--

709
00:34:56,679 --> 00:35:00,550
Orders, OrderItems,
OrderItemOptoins, OrderStatus.

710
00:35:00,550 --> 00:35:05,030
But because this is Mongo that
we're talking to, in fact,

711
00:35:05,030 --> 00:35:07,120
what I've got for an
order is not--

712
00:35:07,120 --> 00:35:10,150
I don't have OrderItems
and OrderItemOptions.

713
00:35:10,150 --> 00:35:12,480
I have a document.

714
00:35:12,480 --> 00:35:15,370
Because Mongo is particularly
good at

715
00:35:15,370 --> 00:35:18,760
representing things as documents.

716
00:35:18,760 --> 00:35:21,410
Of course, not everything can
be in the same document, and

717
00:35:21,410 --> 00:35:22,190
I'll show you that.

718
00:35:22,190 --> 00:35:24,860
So some of the items are sort of
like drop-down lists, like

719
00:35:24,860 --> 00:35:27,340
what the products are and what
the product sizes are.

720
00:35:27,340 --> 00:35:29,240
And some of them are other kinds
of volatile objects,

721
00:35:29,240 --> 00:35:29,940
like customers.

722
00:35:29,940 --> 00:35:31,110
And they're all interrelated.

723
00:35:31,110 --> 00:35:34,890
So you still have navigations
between elements of documents,

724
00:35:34,890 --> 00:35:37,490
but you also have this notion
of a document representation

725
00:35:37,490 --> 00:35:40,810
instead of a table
orientation.

726
00:35:40,810 --> 00:35:43,170
And we can play a little
bit with that.

727
00:35:43,170 --> 00:35:45,710
Here's a view over the order.

728
00:35:45,710 --> 00:35:47,916
And you'll notice that--

729
00:35:47,916 --> 00:35:50,400
I just happened to be looking at
one of them in particular.

730
00:35:50,400 --> 00:35:53,190
And I can-- oh, by the way, you
don't have to deal with

731
00:35:53,190 --> 00:35:55,880
primitive type, so here's an
address with a [INAUDIBLE]

732
00:35:55,880 --> 00:35:57,340
type--

733
00:35:57,340 --> 00:36:00,380
with what we call a complex
type-- an embedded type.

734
00:36:00,380 --> 00:36:02,770
And you have OrderItems.

735
00:36:02,770 --> 00:36:05,900
So here is a pizza,
and it has options

736
00:36:05,900 --> 00:36:07,200
like barbecued chicken.

737
00:36:07,200 --> 00:36:08,750
So you see it's really
a document.

738
00:36:08,750 --> 00:36:14,850
This is no way representable as
a row within a data table.

739
00:36:14,850 --> 00:36:17,460
Now one of the things that
I think is particularly

740
00:36:17,460 --> 00:36:19,150
interesting about this
sample is that the

741
00:36:19,150 --> 00:36:20,700
front end is the same.

742
00:36:20,700 --> 00:36:22,270
It's still the same Angular.

743
00:36:22,270 --> 00:36:24,560
It's still the same Breeze.

744
00:36:24,560 --> 00:36:27,970
But all we've done, with a few
minor adjustments, is switch

745
00:36:27,970 --> 00:36:32,540
back to being able to
tweak the backend--

746
00:36:32,540 --> 00:36:34,330
give you a backend--

747
00:36:34,330 --> 00:36:39,540
that's running in Node and
Express with Mongo.

748
00:36:39,540 --> 00:36:42,860
And we're able to twist the
model so that it can deal in

749
00:36:42,860 --> 00:36:47,480
Breeze with documents, not just
with table structures.

750
00:36:47,480 --> 00:36:51,330
And just a quick look.

751
00:36:51,330 --> 00:36:54,340
Usually the server side is
fairly simple, as you were

752
00:36:54,340 --> 00:36:55,000
hearing earlier.

753
00:36:55,000 --> 00:36:58,550
It's pretty easy to get going
in this MEAN stack.

754
00:36:58,550 --> 00:37:05,270
So I have a simple HTML, but
this is the-- all you have to

755
00:37:05,270 --> 00:37:08,220
do on the Express server--
this kind of web server--

756
00:37:08,220 --> 00:37:11,250
and you just figure out what
things you want to use, and

757
00:37:11,250 --> 00:37:13,710
you figure out what your routes
are, and you route

758
00:37:13,710 --> 00:37:15,020
those things to--

759
00:37:15,020 --> 00:37:16,650
well, we have some Breeze
components for Node

760
00:37:16,650 --> 00:37:18,050
that make it easier.

761
00:37:18,050 --> 00:37:21,120
And you're off and running.

762
00:37:21,120 --> 00:37:24,970
As I said, this sample is
available to you from our

763
00:37:24,970 --> 00:37:27,030
samples page.

764
00:37:27,030 --> 00:37:32,800
So that is kind of an overview
in which I'm trying to

765
00:37:32,800 --> 00:37:35,800
encourage you to think about
data as a more significant

766
00:37:35,800 --> 00:37:38,985
problem than simply
going for Ajax.

767
00:37:38,985 --> 00:37:43,000
That you can combine
Angular and Breeze.

768
00:37:43,000 --> 00:37:47,090
That you can have a SQL backend,
or a Mongo backend--

769
00:37:47,090 --> 00:37:50,370
Breeze is agnostic with
respect to that.

770
00:37:50,370 --> 00:37:51,970
And so you can have it the
way you want it-- maybe

771
00:37:51,970 --> 00:37:53,020
prototype it in one.

772
00:37:53,020 --> 00:37:55,710
Or maybe you have a hybrid
application, which has a mix

773
00:37:55,710 --> 00:37:58,020
of a Mongo database, a
document-oriented database,

774
00:37:58,020 --> 00:37:59,220
and a SQL database.

775
00:37:59,220 --> 00:38:04,070
And you can unify those on the
client side with a Breeze app.

776
00:38:04,070 --> 00:38:04,480
Thank you.

777
00:38:04,480 --> 00:38:08,280
We'll probably get to the
resources later in the show,

778
00:38:08,280 --> 00:38:11,360
but I'll just say it now that
there are some courses that

779
00:38:11,360 --> 00:38:13,880
you could look at on Pluralsight
to learn about

780
00:38:13,880 --> 00:38:16,410
Breeze, about the application
that I just showed you.

781
00:38:16,410 --> 00:38:18,220
There's John Papa's course.

782
00:38:18,220 --> 00:38:20,360
You can go online with us.

783
00:38:20,360 --> 00:38:25,180
And just think that your rich
data, it really is a breeze.

784
00:38:25,180 --> 00:38:26,440
Back to you, Brad.

785
00:38:26,440 --> 00:38:27,900
BRAD GREEN: Ward,
thanks so much.

786
00:38:27,900 --> 00:38:28,530
That was awesome.

787
00:38:28,530 --> 00:38:30,600
I think Breeze is
very exciting.

788
00:38:30,600 --> 00:38:32,690
So we're going to go over
to Al Tsang now.

789
00:38:32,690 --> 00:38:34,040
Al is with StrongLoop.

790
00:38:34,040 --> 00:38:36,890
He's going to talk about how
Mongo can work for the

791
00:38:36,890 --> 00:38:38,190
enterprise in the
mobile space.

792
00:38:38,190 --> 00:38:40,810

793
00:38:40,810 --> 00:38:41,770
AL TSANG: Thanks, Brad.

794
00:38:41,770 --> 00:38:42,090
Hi, everyone.

795
00:38:42,090 --> 00:38:44,390
This is Al Tsang, CTO
of StrongLoop.

796
00:38:44,390 --> 00:38:46,800
I'll go ahead and get started
by sharing my screen.

797
00:38:46,800 --> 00:38:53,080

798
00:38:53,080 --> 00:38:55,920
Here we go.

799
00:38:55,920 --> 00:38:58,610
So brief presentation.

800
00:38:58,610 --> 00:39:00,890
Thanks, everyone,
for having me.

801
00:39:00,890 --> 00:39:03,450
We're going to go ahead and
talk about LoopBack.

802
00:39:03,450 --> 00:39:06,990
Again, as Brad had mentioned,
LoopBack is a mobile backend

803
00:39:06,990 --> 00:39:11,230
in which you can hook your
Angular application to.

804
00:39:11,230 --> 00:39:14,116
We're focused on the
mobile space.

805
00:39:14,116 --> 00:39:15,960
LoopBack is an Open
Source Mobile

806
00:39:15,960 --> 00:39:18,390
Backend-as-a-Service, or mBaaS.

807
00:39:18,390 --> 00:39:20,080
And it features BACN.

808
00:39:20,080 --> 00:39:22,950
And I'll get to what
BACN's all about.

809
00:39:22,950 --> 00:39:25,550
So real briefly, a little
bit about StrongLoop.

810
00:39:25,550 --> 00:39:28,750
We were founded at the
end of 2012 by Bert

811
00:39:28,750 --> 00:39:30,870
Belder and Ben Noordhuis.

812
00:39:30,870 --> 00:39:32,505
They're two core maintainers
in NodeJS.

813
00:39:32,505 --> 00:39:35,030
They've been there since the
beginning the project.

814
00:39:35,030 --> 00:39:36,990
Along with myself and a
friend and colleague

815
00:39:36,990 --> 00:39:38,500
of mine named Raymond--

816
00:39:38,500 --> 00:39:42,511
We built the mobile backend
for shutterfly.com.

817
00:39:42,511 --> 00:39:45,940
As a company, we develop and
support StrongLoop Suite.

818
00:39:45,940 --> 00:39:48,550
It's our product offering
by subscription.

819
00:39:48,550 --> 00:39:50,250
It contains three components--

820
00:39:50,250 --> 00:39:53,440
so LoopBack-- the open source
mBaaS that we talked about.

821
00:39:53,440 --> 00:39:56,270
LoopBack is built on top of
StrongNode, which is a

822
00:39:56,270 --> 00:39:59,720
certified package of Node and
select certified community

823
00:39:59,720 --> 00:40:02,780
modules that are commonly
used in the enterprise.

824
00:40:02,780 --> 00:40:05,640
And we round out our offering
with StrongOps, which is a

825
00:40:05,640 --> 00:40:08,000
real-time performance
monitoring

826
00:40:08,000 --> 00:40:09,430
and operational dashboard.

827
00:40:09,430 --> 00:40:11,590
This lets you not only visualize
what's going

828
00:40:11,590 --> 00:40:12,740
on with your apps.

829
00:40:12,740 --> 00:40:16,600
We intend on making it be
operational, so actually do

830
00:40:16,600 --> 00:40:20,590
something with for apps--
scale it, triage it,

831
00:40:20,590 --> 00:40:22,130
so on and so forth.

832
00:40:22,130 --> 00:40:25,030
As a company, and as a good
citizen of open source, we

833
00:40:25,030 --> 00:40:29,860
also contribute to Node and its
rich ecosystem within npm.

834
00:40:29,860 --> 00:40:31,915
So we've done contributions
to node-inspector and

835
00:40:31,915 --> 00:40:34,760
node-reggie, and we continually
comb over the Node

836
00:40:34,760 --> 00:40:37,950
universe to figure out what's
there in the community that

837
00:40:37,950 --> 00:40:41,220
could be leveraged in
the enterprise.

838
00:40:41,220 --> 00:40:43,450
So let me start by outlining
sort of the problem of what

839
00:40:43,450 --> 00:40:45,740
we're trying to solve
with LoopBack.

840
00:40:45,740 --> 00:40:48,390
Mobile devices need
to get to data.

841
00:40:48,390 --> 00:40:50,950
If you think about all the
applications running on your

842
00:40:50,950 --> 00:40:54,120
smartphone, look at the ones
that actually do something

843
00:40:54,120 --> 00:40:56,820
useful or are productive
within the enterprise.

844
00:40:56,820 --> 00:40:57,650
They need data.

845
00:40:57,650 --> 00:41:02,020
They don't need just data that
exists in the cloud that's new

846
00:41:02,020 --> 00:41:03,890
or native to the mobile
application.

847
00:41:03,890 --> 00:41:07,170
They need data that's there,
that's like your banking data.

848
00:41:07,170 --> 00:41:09,280
So this poses a bunch
of challenges.

849
00:41:09,280 --> 00:41:12,600
Number one, the data itself,
there's authentication,

850
00:41:12,600 --> 00:41:15,950
authorization, and accounting
issues.

851
00:41:15,950 --> 00:41:18,960
Oftentimes, the data's not
even in the right format.

852
00:41:18,960 --> 00:41:22,360
Like it's in XML, where it's in
a bunch of rows of tables.

853
00:41:22,360 --> 00:41:23,680
There's too much of that data.

854
00:41:23,680 --> 00:41:26,450
Can you imagine if your mobile
device asked for the customer

855
00:41:26,450 --> 00:41:29,860
master at a large B-to-C company
like one that we

856
00:41:29,860 --> 00:41:30,860
worked for at Shutterfly.

857
00:41:30,860 --> 00:41:33,760
You'd get back 6 million-plus
rows.

858
00:41:33,760 --> 00:41:37,180
And then, on top of that,
there's multiple data sources.

859
00:41:37,180 --> 00:41:39,990
Even if you had just one
database, you'd probably have

860
00:41:39,990 --> 00:41:43,310
a bunch of instances
of that database.

861
00:41:43,310 --> 00:41:46,675
And lastly, you wouldn't even
want all those devices to be

862
00:41:46,675 --> 00:41:50,110
hitting your backends
directly.

863
00:41:50,110 --> 00:41:53,960
So today, we're going to be
centering around our use case

864
00:41:53,960 --> 00:41:58,060
and example around this mythical
military equipment

865
00:41:58,060 --> 00:42:02,140
rental surplus vendor
called Blackpool.

866
00:42:02,140 --> 00:42:05,070
And in this illustration, we
have this said warmonger, and

867
00:42:05,070 --> 00:42:07,490
he's looking for an
Apache helicopter.

868
00:42:07,490 --> 00:42:08,620
And he needs it by tomorrow
because he's

869
00:42:08,620 --> 00:42:10,310
about to wage a war.

870
00:42:10,310 --> 00:42:14,680
So from this mobile device, he
wants to look up, using a

871
00:42:14,680 --> 00:42:18,230
geocode lookup on his device
getting his coordinates, a

872
00:42:18,230 --> 00:42:20,980
list of rental locations that
might have inventory for

873
00:42:20,980 --> 00:42:24,130
Apache helicopters against
Blackpool.

874
00:42:24,130 --> 00:42:26,400
Once he actually finds something
from the mobile

875
00:42:26,400 --> 00:42:28,790
device, he needs to actually
reserve it.

876
00:42:28,790 --> 00:42:30,460
And upon reserving
it, he needs to

877
00:42:30,460 --> 00:42:31,950
authenticate who he is.

878
00:42:31,950 --> 00:42:34,310
Does he have a credit
limit, for example?

879
00:42:34,310 --> 00:42:36,580
Getting his profile-- is
even authorized to do

880
00:42:36,580 --> 00:42:38,030
something like this?

881
00:42:38,030 --> 00:42:41,170
And finally, post payment,
which sets another set of

882
00:42:41,170 --> 00:42:43,590
challenges and transactions.

883
00:42:43,590 --> 00:42:47,295
So as you can see, this is not
very efficient doing all from

884
00:42:47,295 --> 00:42:47,950
the mobile device.

885
00:42:47,950 --> 00:42:52,720
You could, but you'd run
into a bunch of issues.

886
00:42:52,720 --> 00:42:56,150
Our answer is to basically
develop mobile middleware

887
00:42:56,150 --> 00:43:01,590
optimized for this use case and
leverage enterprise data

888
00:43:01,590 --> 00:43:03,460
on the backend.

889
00:43:03,460 --> 00:43:06,100
So this is our solution.

890
00:43:06,100 --> 00:43:09,030
A Mobile Backend-as-a-Service,
or mBaaS, you can think of it

891
00:43:09,030 --> 00:43:12,210
as an open source Parse you
control, if you're familiar

892
00:43:12,210 --> 00:43:16,520
with the vendor Parse that
was acquired by Facebook.

893
00:43:16,520 --> 00:43:19,130
So if you want to think about
it in terms of MEAN, think

894
00:43:19,130 --> 00:43:21,900
about it as MEAN gone mobile.

895
00:43:21,900 --> 00:43:25,140
LoopBack actually utilizes
ExpressJS.

896
00:43:25,140 --> 00:43:28,010
So you can use
Express-compatible middleware

897
00:43:28,010 --> 00:43:31,440
by using app.use with your
favorite middleware and extend

898
00:43:31,440 --> 00:43:32,840
upon LoopBack.

899
00:43:32,840 --> 00:43:35,470
We basically connect devices
to browsers--

900
00:43:35,470 --> 00:43:38,040
connect devices and other
devices to the

901
00:43:38,040 --> 00:43:39,900
enterprise data itself.

902
00:43:39,900 --> 00:43:42,070
It's all written
in Node, proven

903
00:43:42,070 --> 00:43:43,590
language for mobile backends.

904
00:43:43,590 --> 00:43:46,920
We've seen this use case used
over and over again.

905
00:43:46,920 --> 00:43:49,752
And it's open source, so
you can extend on it.

906
00:43:49,752 --> 00:43:53,230
And A key differentiator for us
is that it's on premises or

907
00:43:53,230 --> 00:43:53,850
in your cloud.

908
00:43:53,850 --> 00:43:56,460
You decide where to
run LoopBack.

909
00:43:56,460 --> 00:43:58,350
We have SDKs for iOS.

910
00:43:58,350 --> 00:44:00,600
Android we're just polishing
up right now.

911
00:44:00,600 --> 00:44:02,960
We're developing our
JavaScript SDK.

912
00:44:02,960 --> 00:44:05,070
And we have BACN.

913
00:44:05,070 --> 00:44:11,240
BACN is what relates us to our
front-end implementation, and

914
00:44:11,240 --> 00:44:13,780
I'll talk more about
that in a second.

915
00:44:13,780 --> 00:44:17,160
And then we have the rest of
StrongLoop's suite, which is

916
00:44:17,160 --> 00:44:19,010
the bundling of the other
components that

917
00:44:19,010 --> 00:44:20,180
round out our offering.

918
00:44:20,180 --> 00:44:24,160
So operationally monitor your
stuff that's going on in

919
00:44:24,160 --> 00:44:27,750
LoopBack as well as the core
fundamentals of Node that

920
00:44:27,750 --> 00:44:30,820
powers the app.

921
00:44:30,820 --> 00:44:33,830
Real briefly, then,
the architecture.

922
00:44:33,830 --> 00:44:35,110
Again, we have Mongo.

923
00:44:35,110 --> 00:44:36,420
We have all these
data sources.

924
00:44:36,420 --> 00:44:39,110
What we've built is basically a
layer of abstraction called

925
00:44:39,110 --> 00:44:41,020
the data source juggler.

926
00:44:41,020 --> 00:44:43,600
From the data source juggler,
you get back a model--

927
00:44:43,600 --> 00:44:46,320
something that you can actually
relate to as a mobile

928
00:44:46,320 --> 00:44:47,450
[INAUDIBLE].

929
00:44:47,450 --> 00:44:50,320
And as you build models and
define these models against

930
00:44:50,320 --> 00:44:53,920
your data sources, we
[INAUDIBLE] a REST API.

931
00:44:53,920 --> 00:44:57,760
We also have a gateway that
allows you to secure the API,

932
00:44:57,760 --> 00:45:01,190
[INAUDIBLE] off to, mediate with
it to be able to change

933
00:45:01,190 --> 00:45:03,000
from different content
payloads.

934
00:45:03,000 --> 00:45:05,050
And it acts as a reverse
proxy to multiple

935
00:45:05,050 --> 00:45:07,510
instances of API servers.

936
00:45:07,510 --> 00:45:11,130
All of this data is stored
in a repository in JSON.

937
00:45:11,130 --> 00:45:15,260
And we use basically the
underlyings of git and others

938
00:45:15,260 --> 00:45:17,420
at the distribute source control
mechanism so that you

939
00:45:17,420 --> 00:45:20,070
can unify multiple LoopBack
instances into

940
00:45:20,070 --> 00:45:23,020
one single run time.

941
00:45:23,020 --> 00:45:24,100
Now let's talk about BACN.

942
00:45:24,100 --> 00:45:25,050
Why did we call it BACN?

943
00:45:25,050 --> 00:45:27,100
Well, who doesn't like bacon?

944
00:45:27,100 --> 00:45:32,280
BACN stands for Bootstrap,
Angular, Cordova, and Node.

945
00:45:32,280 --> 00:45:35,070
What we're betting on here is
a front-end framework for

946
00:45:35,070 --> 00:45:38,170
LoopBack to develop mobile
web apps or hybrid apps.

947
00:45:38,170 --> 00:45:40,190
And we're looking forward to
partnering with the Google

948
00:45:40,190 --> 00:45:43,270
Angular team to carve out the
niche for Angular formal

949
00:45:43,270 --> 00:45:45,360
mobile web.

950
00:45:45,360 --> 00:45:48,290
And now I'd like to jump
into a quick demo.

951
00:45:48,290 --> 00:45:50,810
If you'd like to follow along,
or follow up with this demo,

952
00:45:50,810 --> 00:45:53,510
you can go to our docs
page and go to

953
00:45:53,510 --> 00:45:54,760
LoopBack Quick Start.

954
00:45:54,760 --> 00:45:57,210
We have Quick Starts for all
three of our components.

955
00:45:57,210 --> 00:45:59,740
And then you can continue on
with the BACN sample, which we

956
00:45:59,740 --> 00:46:02,356
just released last
night on GitHub.

957
00:46:02,356 --> 00:46:11,160

958
00:46:11,160 --> 00:46:14,730
All right, so to get started,
the first thing you would want

959
00:46:14,730 --> 00:46:16,710
to do is get to our
get started page.

960
00:46:16,710 --> 00:46:19,670
If you register on our site and
go to our downloads page,

961
00:46:19,670 --> 00:46:22,930
you can go ahead and pick which
platform that you'd like

962
00:46:22,930 --> 00:46:23,700
to develop in.

963
00:46:23,700 --> 00:46:27,880
Or, alternatively, we have this
neato Cloud9-based IDE,

964
00:46:27,880 --> 00:46:30,030
in which you don't even have
to download anything.

965
00:46:30,030 --> 00:46:33,380
You just start with LoopBack,
and the rest of StrongLoop's

966
00:46:33,380 --> 00:46:36,430
going to be running
in the cloud.

967
00:46:36,430 --> 00:46:39,350
From there, as I mentioned
before, go to our docs page.

968
00:46:39,350 --> 00:46:42,240
And then, from the docs page,
go ahead and click LoopBack,

969
00:46:42,240 --> 00:46:44,030
and we have this Quick Start.

970
00:46:44,030 --> 00:46:46,490
So the first thing we want
to do is, again, install

971
00:46:46,490 --> 00:46:47,940
StrongLoop Suite.

972
00:46:47,940 --> 00:46:50,440
And then you're going to go
ahead and initialize the

973
00:46:50,440 --> 00:46:53,540
StrongLoop Suite sample
application.

974
00:46:53,540 --> 00:46:57,060
For the sake of time, I've
gone ahead and done that.

975
00:46:57,060 --> 00:47:01,280
And I've installed it
already on my Mac.

976
00:47:01,280 --> 00:47:03,640
So I'm going to go ahead and
run the application now.

977
00:47:03,640 --> 00:47:10,440

978
00:47:10,440 --> 00:47:12,440
And it starts up.

979
00:47:12,440 --> 00:47:15,110
And in another browser--

980
00:47:15,110 --> 00:47:16,700
just go ahead and close these.

981
00:47:16,700 --> 00:47:22,120

982
00:47:22,120 --> 00:47:26,410
So what you're seeing here is
the physical manifestation of

983
00:47:26,410 --> 00:47:29,700
a RESTful API for Blackpool.

984
00:47:29,700 --> 00:47:33,380
And we have these model entities
that are out there--

985
00:47:33,380 --> 00:47:34,520
weapons.

986
00:47:34,520 --> 00:47:38,020
So you can play with this
RESTful API all

987
00:47:38,020 --> 00:47:39,640
through this page.

988
00:47:39,640 --> 00:47:41,890
So getting a collection
of weapons, get a

989
00:47:41,890 --> 00:47:43,880
weapon, buy an ID.

990
00:47:43,880 --> 00:47:46,355
We offer is very similar
syntax to

991
00:47:46,355 --> 00:47:48,030
what Mongo has, right?

992
00:47:48,030 --> 00:47:51,630
Mongo query language has been
a fantastic example of being

993
00:47:51,630 --> 00:47:55,820
able to get to sort of a
JSON-oriented query structure.

994
00:47:55,820 --> 00:47:58,910
So, in this case,
I have weapons.

995
00:47:58,910 --> 00:48:02,010
Give me the ones that are have
an effective range greater

996
00:48:02,010 --> 00:48:04,562
than 900 hydrogen just give
me the first three.

997
00:48:04,562 --> 00:48:07,470
You can continue to play
along with this API.

998
00:48:07,470 --> 00:48:10,565
And again, as you build these
models and defined them

999
00:48:10,565 --> 00:48:14,310
against their underlying data
sources, we build an API.

1000
00:48:14,310 --> 00:48:17,450
And what we've done is build
and API explorer.

1001
00:48:17,450 --> 00:48:20,060
So you can actually go ahead
and click on, for example,

1002
00:48:20,060 --> 00:48:23,980
locations and get a
list of locations.

1003
00:48:23,980 --> 00:48:25,280
Try it out.

1004
00:48:25,280 --> 00:48:29,360
Get back the same JSON output.

1005
00:48:29,360 --> 00:48:30,610
So that's the API explorer.

1006
00:48:30,610 --> 00:48:33,110

1007
00:48:33,110 --> 00:48:36,570
So from here, from the Quick
Start then, we jump into the

1008
00:48:36,570 --> 00:48:37,990
Getting Started Guide.

1009
00:48:37,990 --> 00:48:41,240
And the Getting Started Guide
basically allows you to

1010
00:48:41,240 --> 00:48:43,300
consume this RESTful API.

1011
00:48:43,300 --> 00:48:45,550
And we're going to go ahead
and do that now.

1012
00:48:45,550 --> 00:48:49,660
And instead of using our mobile
client that we have

1013
00:48:49,660 --> 00:48:53,470
natively for iOS, we're going
to go ahead and use BACN.

1014
00:48:53,470 --> 00:48:58,620
So what I [INAUDIBLE] ahead and
did to save time is clone

1015
00:48:58,620 --> 00:49:01,330
the BACN repo, and
I'm going to go

1016
00:49:01,330 --> 00:49:02,710
ahead and run the client.

1017
00:49:02,710 --> 00:49:06,790

1018
00:49:06,790 --> 00:49:10,295
So normally, I would do this in
the emulator on Android or

1019
00:49:10,295 --> 00:49:13,570
on iOS or whatnot, but I'm going
to go ahead and do this

1020
00:49:13,570 --> 00:49:16,480
in the browser because this is a
little bit hard to see here.

1021
00:49:16,480 --> 00:49:23,620
So let's go ahead and run the
same thing going on in Chrome.

1022
00:49:23,620 --> 00:49:28,290
And hopefully that's a lot
bigger and better to see here.

1023
00:49:28,290 --> 00:49:30,040
So this is our BACN app.

1024
00:49:30,040 --> 00:49:31,470
It's all in Angular.

1025
00:49:31,470 --> 00:49:34,140
In fact, let's take a
look at the code.

1026
00:49:34,140 --> 00:49:35,710
Really simple.

1027
00:49:35,710 --> 00:49:38,070
In the main, we have a bunch
of routes to define.

1028
00:49:38,070 --> 00:49:41,510
We've defined our resource group
which binds, by local

1029
00:49:41,510 --> 00:49:45,800
host, the RESTful API coming
from the sample app, to the

1030
00:49:45,800 --> 00:49:48,330
Angular SPA.

1031
00:49:48,330 --> 00:49:51,450
We have a bunch of controllers
that actually drive the logic.

1032
00:49:51,450 --> 00:49:55,080
And as I move on to the
tutorial, if I go to page one,

1033
00:49:55,080 --> 00:49:56,750
this is just text.

1034
00:49:56,750 --> 00:50:00,580
This is lesson one, and I'll get
to lesson one in a second.

1035
00:50:00,580 --> 00:50:03,230
We have a bunch of services that
we've defined as well, as

1036
00:50:03,230 --> 00:50:04,270
an Angular module.

1037
00:50:04,270 --> 00:50:08,020
So we've actually defined this
model called ammo and bound it

1038
00:50:08,020 --> 00:50:10,090
to the RESTful endpoint.

1039
00:50:10,090 --> 00:50:12,900
Same thing for weapons
and locations.

1040
00:50:12,900 --> 00:50:15,540
Really simple stuff.

1041
00:50:15,540 --> 00:50:19,560
OK so going back to
the application.

1042
00:50:19,560 --> 00:50:21,760
So, lesson one-- so to
illustrate the power of

1043
00:50:21,760 --> 00:50:25,750
LoopBack, what we've done is
we've basically developed

1044
00:50:25,750 --> 00:50:28,630
three lessons to show some
of the key highlights.

1045
00:50:28,630 --> 00:50:34,780
So lesson one is all about the
model and having a schema-less

1046
00:50:34,780 --> 00:50:37,360
definition of what that model
is on the database.

1047
00:50:37,360 --> 00:50:40,490
And what I mean by that is, if
I actually go to the models

1048
00:50:40,490 --> 00:50:46,440
directory and I look at ammo,
you can see that its

1049
00:50:46,440 --> 00:50:48,270
properties are null.

1050
00:50:48,270 --> 00:50:53,150
And in my Angular app, I've
gone in to find properties

1051
00:50:53,150 --> 00:50:56,207
that I'm going to go ahead and
put in-- so name, caliber, and

1052
00:50:56,207 --> 00:50:58,220
a Boolean on whether or not
it's armor piercing.

1053
00:50:58,220 --> 00:51:01,210

1054
00:51:01,210 --> 00:51:04,500
So let's go ahead and curl this
application's data store.

1055
00:51:04,500 --> 00:51:06,820
We're using the in-memory
database, which mirrors

1056
00:51:06,820 --> 00:51:09,085
exactly like Mongo except
it's not persistent.

1057
00:51:09,085 --> 00:51:12,130

1058
00:51:12,130 --> 00:51:15,050
And I get back null without
its carriage return,

1059
00:51:15,050 --> 00:51:17,570
conveniently.

1060
00:51:17,570 --> 00:51:19,540
So using the Angular app, and
then I'm going to go ahead and

1061
00:51:19,540 --> 00:51:20,900
hit the send request.

1062
00:51:20,900 --> 00:51:25,440
So super-duper ammo,
re-curl, and boom.

1063
00:51:25,440 --> 00:51:26,640
There you go.

1064
00:51:26,640 --> 00:51:28,220
Same thing--

1065
00:51:28,220 --> 00:51:32,850
rail gun 80 cals, absolutely
armor-piercing.

1066
00:51:32,850 --> 00:51:33,710
[BEEP]

1067
00:51:33,710 --> 00:51:35,000
[BEEP]

1068
00:51:35,000 --> 00:51:36,200
AL TSANG: Whoops.

1069
00:51:36,200 --> 00:51:38,200
[BEEP]

1070
00:51:38,200 --> 00:51:39,200
[BEEP-BEEP]

1071
00:51:39,200 --> 00:51:39,700
AL TSANG: Oh.

1072
00:51:39,700 --> 00:51:41,200
It's stuck on this.

1073
00:51:41,200 --> 00:51:42,450
There we go.

1074
00:51:42,450 --> 00:51:44,700

1075
00:51:44,700 --> 00:51:46,070
And there we go.

1076
00:51:46,070 --> 00:51:50,200
So again, a schema-less
model that's defined.

1077
00:51:50,200 --> 00:51:52,530
And you define its
model properties

1078
00:51:52,530 --> 00:51:55,010
on the Angular client.

1079
00:51:55,010 --> 00:51:55,660
So that's lesson one.

1080
00:51:55,660 --> 00:52:00,390
Lesson two, real quick now,
illustrates existing data.

1081
00:52:00,390 --> 00:52:03,670
So we've acknowledged at
LoopBack that enterprises have

1082
00:52:03,670 --> 00:52:04,450
existing data.

1083
00:52:04,450 --> 00:52:06,830
And that, although it's nice
to define new data for your

1084
00:52:06,830 --> 00:52:10,310
mobile apps, you want to
leverage your existing data.

1085
00:52:10,310 --> 00:52:13,630
So I'm going to go ahead and
re-run the application now.

1086
00:52:13,630 --> 00:52:18,400
And instead of connecting to
our memory adapter, we're

1087
00:52:18,400 --> 00:52:20,210
going to go ahead and
connect to a running

1088
00:52:20,210 --> 00:52:21,460
live instance of Oracle.

1089
00:52:21,460 --> 00:52:26,250

1090
00:52:26,250 --> 00:52:29,520
And just to give you a flavor
of what's going on here--

1091
00:52:29,520 --> 00:52:42,340

1092
00:52:42,340 --> 00:52:44,740
all right.

1093
00:52:44,740 --> 00:52:50,410
Table name, user tables--

1094
00:52:50,410 --> 00:52:53,910
and go ahead and describe
inventory--

1095
00:52:53,910 --> 00:52:55,160
actually product.

1096
00:52:55,160 --> 00:52:57,410
That's what we're going
to be showcasing here.

1097
00:52:57,410 --> 00:52:59,670
And I'm going to get back,
basically, the records that

1098
00:52:59,670 --> 00:53:01,300
are going against this
Oracle database.

1099
00:53:01,300 --> 00:53:05,950

1100
00:53:05,950 --> 00:53:09,320
So what's going on with this is
we're calling controller.

1101
00:53:09,320 --> 00:53:11,010
That's basically sending
requests.

1102
00:53:11,010 --> 00:53:14,680
And what's nice about Angular
is that it's very easy to

1103
00:53:14,680 --> 00:53:17,110
figure out what's going on with
these controllers and

1104
00:53:17,110 --> 00:53:17,600
what they're doing.

1105
00:53:17,600 --> 00:53:21,710
So in this case, I'm simply
hitting up weapons, which was

1106
00:53:21,710 --> 00:53:25,950
a linked through LoopBack to the
products table, querying

1107
00:53:25,950 --> 00:53:28,720
it, and getting back and binding
that to this view.

1108
00:53:28,720 --> 00:53:33,240
And again, through to the power
of, as Val put it, data

1109
00:53:33,240 --> 00:53:34,650
binding being bidirectional.

1110
00:53:34,650 --> 00:53:37,470
There's a whole slew of things
you can do here.

1111
00:53:37,470 --> 00:53:40,610
From a mobile application's
perspective, you have issues

1112
00:53:40,610 --> 00:53:43,960
like data sync, like save
eventually, save and forget.

1113
00:53:43,960 --> 00:53:48,580
But this gives us a rich
interface to be able to get to

1114
00:53:48,580 --> 00:53:51,690
meet the demands of what you
would normally build within

1115
00:53:51,690 --> 00:53:54,980
the native platform.

1116
00:53:54,980 --> 00:53:58,380
In the interest of time, I'm
going to stop there and

1117
00:53:58,380 --> 00:54:02,390
continue on with concluding
out LoopBack.

1118
00:54:02,390 --> 00:54:05,890
[BEEP]

1119
00:54:05,890 --> 00:54:07,660
So that's the demo.

1120
00:54:07,660 --> 00:54:10,640
If you would like to go ahead
and follow along, or follow

1121
00:54:10,640 --> 00:54:12,360
up, go ahead and go to
the Quick Starts.

1122
00:54:12,360 --> 00:54:15,280
We have Quick Starts, again,
for all three components.

1123
00:54:15,280 --> 00:54:16,780
A quick look at the roadmap.

1124
00:54:16,780 --> 00:54:19,870
So we just released this,
literally, two weeks ago.

1125
00:54:19,870 --> 00:54:24,010
And we're solidifying
our JavaScript SDK.

1126
00:54:24,010 --> 00:54:25,750
We just finished Android.

1127
00:54:25,750 --> 00:54:27,480
That's in testing right now.

1128
00:54:27,480 --> 00:54:28,700
As an mBaaS--

1129
00:54:28,700 --> 00:54:30,690
part of the reason why you
wouldn't want to adopt an

1130
00:54:30,690 --> 00:54:32,360
mBaaS is because
we've already--

1131
00:54:32,360 --> 00:54:35,470
we want to actually pre-build
mobile models for the most

1132
00:54:35,470 --> 00:54:36,430
common use cases.

1133
00:54:36,430 --> 00:54:40,460
So, like user for user
registration, file for storing

1134
00:54:40,460 --> 00:54:42,290
files and other [INAUDIBLE].

1135
00:54:42,290 --> 00:54:46,860
LBGeoPoint is our geopoint for
geonavigation and other

1136
00:54:46,860 --> 00:54:49,090
calculations on a
mobile device.

1137
00:54:49,090 --> 00:54:52,010
And of course, push
notification.

1138
00:54:52,010 --> 00:54:53,570
We're also working
on an editor.

1139
00:54:53,570 --> 00:54:55,000
Again, all in Angular.

1140
00:54:55,000 --> 00:54:56,320
That makes it even easier.

1141
00:54:56,320 --> 00:54:58,430
So you don't have to navigate
through code if you don't want

1142
00:54:58,430 --> 00:55:00,270
to, or use the CLI.

1143
00:55:00,270 --> 00:55:01,930
And mobile app management--

1144
00:55:01,930 --> 00:55:05,440
so how to actually develop your
apps that actually tie in

1145
00:55:05,440 --> 00:55:07,630
backends with your APIs.

1146
00:55:07,630 --> 00:55:09,210
And of course, more
connectors--

1147
00:55:09,210 --> 00:55:10,170
we have MySQL.

1148
00:55:10,170 --> 00:55:11,100
That's already done.

1149
00:55:11,100 --> 00:55:15,070
And we're looking to evaluate
enterprise systems.

1150
00:55:15,070 --> 00:55:15,820
So what's next?

1151
00:55:15,820 --> 00:55:17,240
Go ahead and please
try LoopBack and

1152
00:55:17,240 --> 00:55:18,510
register on our site.

1153
00:55:18,510 --> 00:55:20,540
We have their docs page
as I mentioned before.

1154
00:55:20,540 --> 00:55:23,000
We also have a community that
we've established, called

1155
00:55:23,000 --> 00:55:25,350
node-republic, that
we sponsor.

1156
00:55:25,350 --> 00:55:27,620
And if you have any questions,
please feel

1157
00:55:27,620 --> 00:55:29,080
free to contact me.

1158
00:55:29,080 --> 00:55:32,265
Here's my contact information
at the end here.

1159
00:55:32,265 --> 00:55:34,430
And that's pretty much it.

1160
00:55:34,430 --> 00:55:35,470
Back to you, Brad.

1161
00:55:35,470 --> 00:55:36,340
BRAD GREEN: Wonderful, Al.

1162
00:55:36,340 --> 00:55:37,020
Thanks so much.

1163
00:55:37,020 --> 00:55:38,670
I know I've already had
breakfast, but for some

1164
00:55:38,670 --> 00:55:42,150
reason, I'm hungry for bacon
here [INAUDIBLE].

1165
00:55:42,150 --> 00:55:44,200
I want to thank all
of our speakers--

1166
00:55:44,200 --> 00:55:46,670
Val, Ward, and Al-- for joining
us this morning.

1167
00:55:46,670 --> 00:55:49,390
And for everyone watching,
thanks for joining.

1168
00:55:49,390 --> 00:55:50,610
We'll see you on the web.

1169
00:55:50,610 --> 00:55:51,870
Please ask us questions.

1170
00:55:51,870 --> 00:55:53,560
Please try out these
technologies.

1171
00:55:53,560 --> 00:55:55,530
We're excited to see what
you guys build.

1172
00:55:55,530 --> 00:55:56,160
We'll see you later.

1173
00:55:56,160 --> 00:55:57,410
Bye bye.

1174
00:55:57,410 --> 00:56:09,960

1175
00:56:09,960 --> 00:57:17,248
[MUSIC PLAYING]

